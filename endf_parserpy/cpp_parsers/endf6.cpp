
#include <pybind11/pybind11.h>
#include <pybind11/stl.h> // Necessary for STL containers like std::map

#include <stdexcept>
#include <iostream>
#include <sstream>
#include <fstream>
#include <vector>
#include <string>

namespace py = pybind11;


double endfstr2float(const char* str) {
  char tbuf[13];
  int j = 0;
  bool in_number = false;
  bool in_exponent = false;
  for (int i=0; i < 11; i++) {
    char c = str[i];
    if (c == ' ') continue;
    if (in_number) {
      if (!in_exponent) {
        if (c=='+' || c=='-') {
          tbuf[j++] = 'e';
          in_exponent = true;
        } else if (c=='e' || c=='E') {
          in_exponent = true;
        }
      }
    } else {
      if (c == '.' || (c >= '0' && c <= '9')) {
        in_number = true;
      }
    }
    tbuf[j++] = c;
  }
  if (j==0) tbuf[j++] = '0';
  tbuf[j++] = '\0';
  return std::stod(tbuf);
}


int endfstr2int(const std::string& str) {
  if (str.find_first_not_of(' ') == std::string::npos) {
    return 0;
  }
  return std::stoi(str);
}


double cpp_read_float_field(const char *str, const char fieldnum) {
  return endfstr2float(str+fieldnum*11);
}


double cpp_read_int_field(const std::string& str, const char fieldnum) {
  return endfstr2int(str.substr(fieldnum*11, 11));
}


double cpp_read_custom_int_field(const std::string& str, int start_pos, int length) {
  return endfstr2int(str.substr(start_pos, length));
}


std::string cpp_read_line(std::istream& cont) {
  std::string line;
  std::getline(cont, line);
  return line;
}


void cpp_read_send(std::istream& cont) {
  std::string line = cpp_read_line(cont);
  int mtnum = std::stoi(line.substr(72, 3));
  if (cpp_read_float_field(line.c_str(), 0) != 0.0 ||
    cpp_read_float_field(line.c_str(), 1) != 0.0 ||
    cpp_read_int_field(line, 2) != 0 ||
    cpp_read_int_field(line, 3) != 0 ||
    cpp_read_int_field(line, 4) != 0 ||
    cpp_read_int_field(line, 5) != 0 ||
    mtnum != 0) {

    std::cout << line << std::endl;  // debug
    throw std::runtime_error("expected SEND record");
  }
}


std::vector<int> cpp_read_int_vec(std::istream& cont, const int numel) {
  int j = 0;
  std::vector<int> res;
  std::string line = cpp_read_line(cont);
  for (int i=0; i < numel; i++) {
    res.push_back(cpp_read_int_field(line, j++));
    if (j > 5 && i+1 < numel) {
      line = cpp_read_line(cont);
      j = 0;
    }
  }
  return res;
}


std::vector<double> cpp_read_float_vec(std::istream& cont, const int numel) {
  int j = 0;
  std::vector<double> res;
  std::string line = cpp_read_line(cont);
  for (int i=0; i < numel; i++) {
    res.push_back(cpp_read_float_field(line.c_str(), j++));
    if (j > 5 && i+1 < numel) {
      line = cpp_read_line(cont);
      j = 0;
    }
  }
  return res;
}


struct Tab1Body {
  std::vector<int> INT;
  std::vector<int> NBT;
  std::vector<double> X;
  std::vector<double> Y;
};


struct Tab2Body {
  std::vector<int> INT;
  std::vector<int> NBT;
};


Tab2Body read_tab2_body(std::istream& cont, int nr) {
  Tab2Body tab_body;
  std::vector<int> interp = cpp_read_int_vec(cont, 2*nr);
  int j = 0;
  for (int i=0; i < nr; i++) {
    tab_body.NBT.push_back(interp[j++]);
    tab_body.INT.push_back(interp[j++]);
  }
  return tab_body;
}


Tab1Body read_tab1_body(std::istream& cont, int nr, int np) {
  Tab1Body tab_body;
  std::vector<int> interp = cpp_read_int_vec(cont, 2*nr);
  int j = 0;
  for (int i=0; i < nr; i++) {
    tab_body.NBT.push_back(interp[j++]);
    tab_body.INT.push_back(interp[j++]);
  }
  std::vector<double> data = cpp_read_float_vec(cont, 2*np);
  j = 0;
  for (int i=0; i < np; i++) {
    tab_body.X.push_back(data[j++]);
    tab_body.Y.push_back(data[j++]);
  }
  return tab_body;
}


bool seq_contains(py::sequence seq, py::object value) {
  int i = 0;
  for (const auto& item : seq) {
    if (py::cast<py::object>(item).equal(value)) {
      return true;
    }
  }
  return false;
}


bool should_parse_section(int mf, int mt, py::object& exclude, py::object& include) {
  py::tuple mf_mt_tup = py::make_tuple(mf, mt);
  if (! exclude.is_none()) {
    if (! py::isinstance<py::sequence>(exclude)) {
      throw std::runtime_error("`exclude` argument must be of sequence type");
    }
    if (seq_contains(exclude, py::int_(mf)) || seq_contains(exclude, mf_mt_tup)) {
      return false;
    } else {
      return true;
    }
  } else if (! include.is_none()) {
    if (! py::isinstance<py::sequence>(include)) {
      throw std::runtime_error("`include` argument must be of sequence type");
    }
    if (seq_contains(include, py::int_(mf)) || seq_contains(include, mf_mt_tup)) {
      return true;
    } else {
      return false;
    }
  } else {
    return true;
  }
}


std::vector<std::string> read_section_verbatim(
    int mf, int mt, std::istream& cont, bool is_first=false
) {
  std::streampos curpos;
  std::string line;
  std::vector<std::string> secvec;
  int curmf;
  int curmt;
  size_t lastpos;
  while (std::getline(cont, line)) {
    // remove trailing \r that we may
    // get from reading win-style line endings
    lastpos = line.size() - 1;
    if (line[lastpos] == '\r') {
      line.erase(lastpos);
    }
    curmf = std::stoi(line.substr(70, 2));
    curmt = std::stoi(line.substr(72, 3));
    if (curmf != mf || curmt != mt) break;
    // the newline for compatibility with the Python parser
    secvec.push_back(line + "\n");
    curpos = cont.tellg();
  }
  if (! is_first && (curmf != mf || curmt != 0)) {
     std::string errmsg = "expected SEND of MF/MT " +
                          std::to_string(mf) + "/" + std::to_string(mt);
     throw std::runtime_error(errmsg);
  }
  if (is_first) {
    // we rewind one line because in the case of MF0/MT0 (tapeid)
    // we have also consumed the HEAD record of the next section
    cont.seekg(curpos);
  }
  return secvec;
}


void raise_vartype_mismatch() {
  std::string errmsg =
    std::string("variable MF now with different type ")
    + "which must not happen. Either ENDF recipe wrong "
    + "or the ENDF file has some forbidden flag values.";
  throw std::runtime_error(errmsg);
}

enum vartype {
  MATRIX2D_DOUBLE,
  MATRIX2D_FLOATVEC,
  MATRIX2D_INT,
  MATRIX2D_INTVEC,
  MATRIX2D_STRING,
  NESTEDVECTOR_DOUBLE,
  NESTEDVECTOR_FLOATVEC,
  NESTEDVECTOR_INT,
  NESTEDVECTOR_INTVEC,
  NESTEDVECTOR_STRING,
  SCALAR_DOUBLE,
  SCALAR_FLOATVEC,
  SCALAR_INT,
  SCALAR_INTVEC,
  SCALAR_STRING,
  UNKNOWN
};


template<typename T>
class Matrix2d {

  private:
    std::vector<T> data;
    size_t num_rows;
    size_t num_cols;
    size_t row_start;
    size_t col_start;
    bool initialized;
    bool accessed;
    bool triagonal;
    bool lower;

  public:

    Matrix2d() : initialized(false), accessed(false),
                 triagonal(false), lower(false) {};

    void init(size_t first_row_idx, size_t last_row_idx,
              size_t first_col_idx, size_t last_col_idx,
              bool triagonal=false, bool lower=false) {
      this->num_rows = last_row_idx - first_row_idx + 1;
      this->num_cols = last_col_idx - first_col_idx + 1;
      this->row_start = first_row_idx;
      this->col_start = first_col_idx;
      this->data.resize(this->num_rows * this->num_cols);
      this->initialized = true;
      this->triagonal = triagonal;
      this->lower = lower;
    }

    bool is_initialized() {
      return initialized;
    }

    bool did_read() {
      return accessed;
    }

    T& operator()(size_t i, size_t j) {
      accessed = true;
      return data.at((i-row_start)*num_cols + (j-col_start));
    }

    int get_row_start_index() {
      return row_start;
    }

    int get_row_last_index() {
      return row_start + num_rows - 1;
    }

    int get_col_start_index() {
      return col_start;
    }

    int get_col_start_index(int i) {
      if (! triagonal || lower) {
        return col_start;
      } else {
        return col_start + (i - row_start);
      }
    }

    int get_col_last_index() {
      return col_start + num_cols - 1;
    }

    int get_col_last_index(int i) {
      if (! triagonal || ! lower) {
        return col_start + num_cols - 1;
      } else {
        return col_start + (i - row_start);
      }
    }
};

template<typename T>
class NestedVector : public std::vector<T> {
  private:
    int startIndex;
    int lastIndex;

  public:
    // default constructor
    NestedVector() : startIndex(0), lastIndex(-1) {}

    // copy constructor
    NestedVector(const NestedVector<T>& other) :
      std::vector<T>(other), startIndex(other.startIndex),
      lastIndex(other.lastIndex) {}

    // assignment constructor
    NestedVector<T>& operator=(const NestedVector<T>& other) {
      if (this != &other) {
        std::vector<T>::operator=(other);
        startIndex = other.startIndex;
        lastIndex = other.lastIndex;
      }
      return *this;
    }

    void set_start_index(int start) {
      this->startIndex = start;
    }

    int get_start_index() {
      return this->startIndex;
    }

    void set_last_index(int lastIndex) {
      this->lastIndex = lastIndex;
    }

    int get_last_index() {
      return this->lastIndex;
    }

    T& operator[](int index) {
      if (! contains(index)) {
        throw std::out_of_range("index out of range 1");
      }
      return std::vector<T>::operator[](index - startIndex);
    }

    T& at(int index) {
      return std::vector<T>::at(index - startIndex);
    }

    T* prepare(int index) {
      if (contains(index)) return &((*this)[index]);
      T cpp_curel;
      set(index, cpp_curel);
      return &(*this)[index];
    }

    void set(int index, const T& value) {
      bool is_first = false;
      if (this->lastIndex == -1) {
        this->startIndex = index;
        this->lastIndex = index;
        is_first = true;
      }
      if (index == startIndex + (int)this->size()) {
        std::vector<T>::push_back(value);
        if (! is_first) {
          this->lastIndex++;
        }
      } else if (index >= startIndex && index < startIndex + (int)this->size())  {
        std::vector<T>::operator[](index - startIndex) = value;
      } else {
        throw std::out_of_range("index out of range 2");
      }
    }

    bool contains(int index) {
      return (this->startIndex <= index && index <= this->lastIndex);
    }
};

py::dict parse_mf0mt0_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  std::string var_TAPEDESCR_0d_string_Scalar;
  bool aux_TAPEDESCR_read = false;
  vartype aux_last_type_read_for_TAPEDESCR = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // assign expression to variable TAPEDESCR
  var_TAPEDESCR_0d_string_Scalar = cpp_line.substr(0, 66);
  aux_TAPEDESCR_read = true;
  if ((aux_last_type_read_for_TAPEDESCR != SCALAR_STRING && aux_last_type_read_for_TAPEDESCR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_TAPEDESCR = SCALAR_STRING;
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_TAPEDESCR == SCALAR_STRING) && (aux_TAPEDESCR_read == true))) {
    cpp_current_dict["TAPEDESCR"] = var_TAPEDESCR_0d_string_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_mf1mt451_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_LRP_0d_int_Scalar;
  bool aux_LRP_read = false;
  vartype aux_last_type_read_for_LRP = UNKNOWN;
  int var_LFI_0d_int_Scalar;
  bool aux_LFI_read = false;
  vartype aux_last_type_read_for_LFI = UNKNOWN;
  int var_NLIB_0d_int_Scalar;
  bool aux_NLIB_read = false;
  vartype aux_last_type_read_for_NLIB = UNKNOWN;
  int var_NMOD_0d_int_Scalar;
  bool aux_NMOD_read = false;
  vartype aux_last_type_read_for_NMOD = UNKNOWN;
  double var_ELIS_0d_double_Scalar;
  bool aux_ELIS_read = false;
  vartype aux_last_type_read_for_ELIS = UNKNOWN;
  double var_STA_0d_double_Scalar;
  bool aux_STA_read = false;
  vartype aux_last_type_read_for_STA = UNKNOWN;
  int var_LIS_0d_int_Scalar;
  bool aux_LIS_read = false;
  vartype aux_last_type_read_for_LIS = UNKNOWN;
  int var_LISO_0d_int_Scalar;
  bool aux_LISO_read = false;
  vartype aux_last_type_read_for_LISO = UNKNOWN;
  int var_NFOR_0d_int_Scalar;
  bool aux_NFOR_read = false;
  vartype aux_last_type_read_for_NFOR = UNKNOWN;
  double var_AWI_0d_double_Scalar;
  bool aux_AWI_read = false;
  vartype aux_last_type_read_for_AWI = UNKNOWN;
  double var_EMAX_0d_double_Scalar;
  bool aux_EMAX_read = false;
  vartype aux_last_type_read_for_EMAX = UNKNOWN;
  int var_LREL_0d_int_Scalar;
  bool aux_LREL_read = false;
  vartype aux_last_type_read_for_LREL = UNKNOWN;
  int var_NSUB_0d_int_Scalar;
  bool aux_NSUB_read = false;
  vartype aux_last_type_read_for_NSUB = UNKNOWN;
  int var_NVER_0d_int_Scalar;
  bool aux_NVER_read = false;
  vartype aux_last_type_read_for_NVER = UNKNOWN;
  double var_TEMP_0d_double_Scalar;
  bool aux_TEMP_read = false;
  vartype aux_last_type_read_for_TEMP = UNKNOWN;
  int var_LDRV_0d_int_Scalar;
  bool aux_LDRV_read = false;
  vartype aux_last_type_read_for_LDRV = UNKNOWN;
  int var_NWD_0d_int_Scalar;
  bool aux_NWD_read = false;
  vartype aux_last_type_read_for_NWD = UNKNOWN;
  int var_NXC_0d_int_Scalar;
  bool aux_NXC_read = false;
  vartype aux_last_type_read_for_NXC = UNKNOWN;
  std::string var_ZSYMAM_0d_string_Scalar;
  bool aux_ZSYMAM_read = false;
  vartype aux_last_type_read_for_ZSYMAM = UNKNOWN;
  std::string var_ALAB_0d_string_Scalar;
  bool aux_ALAB_read = false;
  vartype aux_last_type_read_for_ALAB = UNKNOWN;
  std::string var_EDATE_0d_string_Scalar;
  bool aux_EDATE_read = false;
  vartype aux_last_type_read_for_EDATE = UNKNOWN;
  std::string var_AUTH_0d_string_Scalar;
  bool aux_AUTH_read = false;
  vartype aux_last_type_read_for_AUTH = UNKNOWN;
  std::string var_REF_0d_string_Scalar;
  bool aux_REF_read = false;
  vartype aux_last_type_read_for_REF = UNKNOWN;
  std::string var_DDATE_0d_string_Scalar;
  bool aux_DDATE_read = false;
  vartype aux_last_type_read_for_DDATE = UNKNOWN;
  std::string var_RDATE_0d_string_Scalar;
  bool aux_RDATE_read = false;
  vartype aux_last_type_read_for_RDATE = UNKNOWN;
  std::string var_ENDATE_0d_string_Scalar;
  bool aux_ENDATE_read = false;
  vartype aux_last_type_read_for_ENDATE = UNKNOWN;
  NestedVector<std::string> var_HSUB_1d_string_NestedVector;
  vartype aux_last_type_read_for_HSUB = UNKNOWN;
  NestedVector<std::string> var_DESCRIPTION_1d_string_NestedVector;
  vartype aux_last_type_read_for_DESCRIPTION = UNKNOWN;
  NestedVector<int> var_MFx_1d_int_NestedVector;
  vartype aux_last_type_read_for_MFx = UNKNOWN;
  NestedVector<int> var_MTx_1d_int_NestedVector;
  vartype aux_last_type_read_for_MTx = UNKNOWN;
  NestedVector<int> var_NCx_1d_int_NestedVector;
  vartype aux_last_type_read_for_NCx = UNKNOWN;
  NestedVector<int> var_MOD_1d_int_NestedVector;
  vartype aux_last_type_read_for_MOD = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // assign expression to variable LRP
  var_LRP_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
  aux_LRP_read = true;
  if ((aux_last_type_read_for_LRP != SCALAR_INT && aux_last_type_read_for_LRP != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LRP = SCALAR_INT;
  // assign expression to variable LFI
  var_LFI_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
  aux_LFI_read = true;
  if ((aux_last_type_read_for_LFI != SCALAR_INT && aux_last_type_read_for_LFI != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LFI = SCALAR_INT;
  // assign expression to variable NLIB
  var_NLIB_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
  aux_NLIB_read = true;
  if ((aux_last_type_read_for_NLIB != SCALAR_INT && aux_last_type_read_for_NLIB != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NLIB = SCALAR_INT;
  // assign expression to variable NMOD
  var_NMOD_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
  aux_NMOD_read = true;
  if ((aux_last_type_read_for_NMOD != SCALAR_INT && aux_last_type_read_for_NMOD != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NMOD = SCALAR_INT;
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ELIS
  var_ELIS_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ELIS_read = true;
  if ((aux_last_type_read_for_ELIS != SCALAR_DOUBLE && aux_last_type_read_for_ELIS != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ELIS = SCALAR_DOUBLE;
  // assign expression to variable STA
  var_STA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_STA_read = true;
  if ((aux_last_type_read_for_STA != SCALAR_DOUBLE && aux_last_type_read_for_STA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_STA = SCALAR_DOUBLE;
  // assign expression to variable LIS
  var_LIS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
  aux_LIS_read = true;
  if ((aux_last_type_read_for_LIS != SCALAR_INT && aux_last_type_read_for_LIS != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LIS = SCALAR_INT;
  // assign expression to variable LISO
  var_LISO_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
  aux_LISO_read = true;
  if ((aux_last_type_read_for_LISO != SCALAR_INT && aux_last_type_read_for_LISO != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LISO = SCALAR_INT;
  // assign expression to variable NFOR
  var_NFOR_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
  aux_NFOR_read = true;
  if ((aux_last_type_read_for_NFOR != SCALAR_INT && aux_last_type_read_for_NFOR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NFOR = SCALAR_INT;
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable AWI
  var_AWI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_AWI_read = true;
  if ((aux_last_type_read_for_AWI != SCALAR_DOUBLE && aux_last_type_read_for_AWI != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWI = SCALAR_DOUBLE;
  // assign expression to variable EMAX
  var_EMAX_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_EMAX_read = true;
  if ((aux_last_type_read_for_EMAX != SCALAR_DOUBLE && aux_last_type_read_for_EMAX != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_EMAX = SCALAR_DOUBLE;
  // assign expression to variable LREL
  var_LREL_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
  aux_LREL_read = true;
  if ((aux_last_type_read_for_LREL != SCALAR_INT && aux_last_type_read_for_LREL != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LREL = SCALAR_INT;
  // assign expression to variable NSUB
  var_NSUB_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
  aux_NSUB_read = true;
  if ((aux_last_type_read_for_NSUB != SCALAR_INT && aux_last_type_read_for_NSUB != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NSUB = SCALAR_INT;
  // assign expression to variable NVER
  var_NVER_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
  aux_NVER_read = true;
  if ((aux_last_type_read_for_NVER != SCALAR_INT && aux_last_type_read_for_NVER != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NVER = SCALAR_INT;
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable TEMP
  var_TEMP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_TEMP_read = true;
  if ((aux_last_type_read_for_TEMP != SCALAR_DOUBLE && aux_last_type_read_for_TEMP != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_TEMP = SCALAR_DOUBLE;
  // assign expression to variable LDRV
  var_LDRV_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
  aux_LDRV_read = true;
  if ((aux_last_type_read_for_LDRV != SCALAR_INT && aux_last_type_read_for_LDRV != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LDRV = SCALAR_INT;
  // assign expression to variable NWD
  var_NWD_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
  aux_NWD_read = true;
  if ((aux_last_type_read_for_NWD != SCALAR_INT && aux_last_type_read_for_NWD != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NWD = SCALAR_INT;
  // assign expression to variable NXC
  var_NXC_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
  aux_NXC_read = true;
  if ((aux_last_type_read_for_NXC != SCALAR_INT && aux_last_type_read_for_NXC != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NXC = SCALAR_INT;
  cpp_line = cpp_read_line(cont);
  // assign expression to variable ZSYMAM
  var_ZSYMAM_0d_string_Scalar = cpp_line.substr(0, 11);
  aux_ZSYMAM_read = true;
  if ((aux_last_type_read_for_ZSYMAM != SCALAR_STRING && aux_last_type_read_for_ZSYMAM != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZSYMAM = SCALAR_STRING;
  // assign expression to variable ALAB
  var_ALAB_0d_string_Scalar = cpp_line.substr(11, 11);
  aux_ALAB_read = true;
  if ((aux_last_type_read_for_ALAB != SCALAR_STRING && aux_last_type_read_for_ALAB != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ALAB = SCALAR_STRING;
  // assign expression to variable EDATE
  var_EDATE_0d_string_Scalar = cpp_line.substr(22, 10);
  aux_EDATE_read = true;
  if ((aux_last_type_read_for_EDATE != SCALAR_STRING && aux_last_type_read_for_EDATE != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_EDATE = SCALAR_STRING;
  // assign expression to variable AUTH
  var_AUTH_0d_string_Scalar = cpp_line.substr(33, 33);
  aux_AUTH_read = true;
  if ((aux_last_type_read_for_AUTH != SCALAR_STRING && aux_last_type_read_for_AUTH != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AUTH = SCALAR_STRING;
  cpp_line = cpp_read_line(cont);
  // assign expression to variable REF
  var_REF_0d_string_Scalar = cpp_line.substr(1, 21);
  aux_REF_read = true;
  if ((aux_last_type_read_for_REF != SCALAR_STRING && aux_last_type_read_for_REF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_REF = SCALAR_STRING;
  // assign expression to variable DDATE
  var_DDATE_0d_string_Scalar = cpp_line.substr(22, 10);
  aux_DDATE_read = true;
  if ((aux_last_type_read_for_DDATE != SCALAR_STRING && aux_last_type_read_for_DDATE != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_DDATE = SCALAR_STRING;
  // assign expression to variable RDATE
  var_RDATE_0d_string_Scalar = cpp_line.substr(33, 10);
  aux_RDATE_read = true;
  if ((aux_last_type_read_for_RDATE != SCALAR_STRING && aux_last_type_read_for_RDATE != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_RDATE = SCALAR_STRING;
  // assign expression to variable ENDATE
  var_ENDATE_0d_string_Scalar = cpp_line.substr(55, 8);
  aux_ENDATE_read = true;
  if ((aux_last_type_read_for_ENDATE != SCALAR_STRING && aux_last_type_read_for_ENDATE != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ENDATE = SCALAR_STRING;

  for (int var_i_0d_int_Scalar = 1;
     var_i_0d_int_Scalar <= 3; var_i_0d_int_Scalar++) {
    bool aux_i_read = true;
    cpp_line = cpp_read_line(cont);
    // assign expression to variable HSUB
    var_HSUB_1d_string_NestedVector.set(var_i_0d_int_Scalar, cpp_line.substr(0, 66));
    if ((aux_last_type_read_for_HSUB != NESTEDVECTOR_STRING && aux_last_type_read_for_HSUB != UNKNOWN)) {
      raise_vartype_mismatch();
    }
    aux_last_type_read_for_HSUB = NESTEDVECTOR_STRING;
  }

  for (int var_i_0d_int_Scalar = 1;
     var_i_0d_int_Scalar <= (var_NWD_0d_int_Scalar-5); var_i_0d_int_Scalar++) {
    bool aux_i_read = true;
    cpp_line = cpp_read_line(cont);
    // assign expression to variable DESCRIPTION
    var_DESCRIPTION_1d_string_NestedVector.set(var_i_0d_int_Scalar, cpp_line.substr(0, 66));
    if ((aux_last_type_read_for_DESCRIPTION != NESTEDVECTOR_STRING && aux_last_type_read_for_DESCRIPTION != UNKNOWN)) {
      raise_vartype_mismatch();
    }
    aux_last_type_read_for_DESCRIPTION = NESTEDVECTOR_STRING;
  }

  for (int var_i_0d_int_Scalar = 1;
     var_i_0d_int_Scalar <= var_NXC_0d_int_Scalar; var_i_0d_int_Scalar++) {
    bool aux_i_read = true;
    cpp_line = cpp_read_line(cont);
    // read TEXT record
    // assign expression to variable MFx
    var_MFx_1d_int_NestedVector.set(var_i_0d_int_Scalar, cpp_read_int_field(cpp_line, 2));
    if ((aux_last_type_read_for_MFx != NESTEDVECTOR_INT && aux_last_type_read_for_MFx != UNKNOWN)) {
      raise_vartype_mismatch();
    }
    aux_last_type_read_for_MFx = NESTEDVECTOR_INT;
    // assign expression to variable MTx
    var_MTx_1d_int_NestedVector.set(var_i_0d_int_Scalar, cpp_read_int_field(cpp_line, 3));
    if ((aux_last_type_read_for_MTx != NESTEDVECTOR_INT && aux_last_type_read_for_MTx != UNKNOWN)) {
      raise_vartype_mismatch();
    }
    aux_last_type_read_for_MTx = NESTEDVECTOR_INT;
    // assign expression to variable NCx
    var_NCx_1d_int_NestedVector.set(var_i_0d_int_Scalar, cpp_read_int_field(cpp_line, 4));
    if ((aux_last_type_read_for_NCx != NESTEDVECTOR_INT && aux_last_type_read_for_NCx != UNKNOWN)) {
      raise_vartype_mismatch();
    }
    aux_last_type_read_for_NCx = NESTEDVECTOR_INT;
    // assign expression to variable MOD
    var_MOD_1d_int_NestedVector.set(var_i_0d_int_Scalar, cpp_read_int_field(cpp_line, 5));
    if ((aux_last_type_read_for_MOD != NESTEDVECTOR_INT && aux_last_type_read_for_MOD != UNKNOWN)) {
      raise_vartype_mismatch();
    }
    aux_last_type_read_for_MOD = NESTEDVECTOR_INT;
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LRP == SCALAR_INT) && (aux_LRP_read == true))) {
    cpp_current_dict["LRP"] = var_LRP_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_LFI == SCALAR_INT) && (aux_LFI_read == true))) {
    cpp_current_dict["LFI"] = var_LFI_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NLIB == SCALAR_INT) && (aux_NLIB_read == true))) {
    cpp_current_dict["NLIB"] = var_NLIB_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NMOD == SCALAR_INT) && (aux_NMOD_read == true))) {
    cpp_current_dict["NMOD"] = var_NMOD_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ELIS == SCALAR_DOUBLE) && (aux_ELIS_read == true))) {
    cpp_current_dict["ELIS"] = var_ELIS_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_STA == SCALAR_DOUBLE) && (aux_STA_read == true))) {
    cpp_current_dict["STA"] = var_STA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LIS == SCALAR_INT) && (aux_LIS_read == true))) {
    cpp_current_dict["LIS"] = var_LIS_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_LISO == SCALAR_INT) && (aux_LISO_read == true))) {
    cpp_current_dict["LISO"] = var_LISO_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NFOR == SCALAR_INT) && (aux_NFOR_read == true))) {
    cpp_current_dict["NFOR"] = var_NFOR_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_AWI == SCALAR_DOUBLE) && (aux_AWI_read == true))) {
    cpp_current_dict["AWI"] = var_AWI_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_EMAX == SCALAR_DOUBLE) && (aux_EMAX_read == true))) {
    cpp_current_dict["EMAX"] = var_EMAX_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LREL == SCALAR_INT) && (aux_LREL_read == true))) {
    cpp_current_dict["LREL"] = var_LREL_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NSUB == SCALAR_INT) && (aux_NSUB_read == true))) {
    cpp_current_dict["NSUB"] = var_NSUB_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NVER == SCALAR_INT) && (aux_NVER_read == true))) {
    cpp_current_dict["NVER"] = var_NVER_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_TEMP == SCALAR_DOUBLE) && (aux_TEMP_read == true))) {
    cpp_current_dict["TEMP"] = var_TEMP_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LDRV == SCALAR_INT) && (aux_LDRV_read == true))) {
    cpp_current_dict["LDRV"] = var_LDRV_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NWD == SCALAR_INT) && (aux_NWD_read == true))) {
    cpp_current_dict["NWD"] = var_NWD_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NXC == SCALAR_INT) && (aux_NXC_read == true))) {
    cpp_current_dict["NXC"] = var_NXC_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZSYMAM == SCALAR_STRING) && (aux_ZSYMAM_read == true))) {
    cpp_current_dict["ZSYMAM"] = var_ZSYMAM_0d_string_Scalar;
  }
  if (((aux_last_type_read_for_ALAB == SCALAR_STRING) && (aux_ALAB_read == true))) {
    cpp_current_dict["ALAB"] = var_ALAB_0d_string_Scalar;
  }
  if (((aux_last_type_read_for_EDATE == SCALAR_STRING) && (aux_EDATE_read == true))) {
    cpp_current_dict["EDATE"] = var_EDATE_0d_string_Scalar;
  }
  if (((aux_last_type_read_for_AUTH == SCALAR_STRING) && (aux_AUTH_read == true))) {
    cpp_current_dict["AUTH"] = var_AUTH_0d_string_Scalar;
  }
  if (((aux_last_type_read_for_REF == SCALAR_STRING) && (aux_REF_read == true))) {
    cpp_current_dict["REF"] = var_REF_0d_string_Scalar;
  }
  if (((aux_last_type_read_for_DDATE == SCALAR_STRING) && (aux_DDATE_read == true))) {
    cpp_current_dict["DDATE"] = var_DDATE_0d_string_Scalar;
  }
  if (((aux_last_type_read_for_RDATE == SCALAR_STRING) && (aux_RDATE_read == true))) {
    cpp_current_dict["RDATE"] = var_RDATE_0d_string_Scalar;
  }
  if (((aux_last_type_read_for_ENDATE == SCALAR_STRING) && (aux_ENDATE_read == true))) {
    cpp_current_dict["ENDATE"] = var_ENDATE_0d_string_Scalar;
  }
  if ((var_HSUB_1d_string_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_HSUB_1d_string_NestedVector;
    cpp_current_dict["HSUB"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["HSUB"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_DESCRIPTION_1d_string_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_DESCRIPTION_1d_string_NestedVector;
    cpp_current_dict["DESCRIPTION"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["DESCRIPTION"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_MFx_1d_int_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_MFx_1d_int_NestedVector;
    cpp_current_dict["MFx"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["MFx"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_MTx_1d_int_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_MTx_1d_int_NestedVector;
    cpp_current_dict["MTx"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["MTx"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_NCx_1d_int_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_NCx_1d_int_NestedVector;
    cpp_current_dict["NCx"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["NCx"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_MOD_1d_int_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_MOD_1d_int_NestedVector;
    cpp_current_dict["MOD"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["MOD"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  return cpp_current_dict;
}

py::dict parse_mf1mt452_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_LNU_0d_int_Scalar;
  bool aux_LNU_read = false;
  vartype aux_last_type_read_for_LNU = UNKNOWN;
  int var_NC_0d_int_Scalar;
  bool aux_NC_read = false;
  vartype aux_last_type_read_for_NC = UNKNOWN;
  NestedVector<double> var_C_1d_double_NestedVector;
  vartype aux_last_type_read_for_C = UNKNOWN;
  std::vector<double> var_Eint_0d_floatvec_Scalar;
  bool aux_Eint_read = false;
  vartype aux_last_type_read_for_Eint = UNKNOWN;
  std::vector<double> var_nu_0d_floatvec_Scalar;
  bool aux_nu_read = false;
  vartype aux_last_type_read_for_nu = UNKNOWN;
  std::vector<int> var_INT_0d_intvec_Scalar;
  bool aux_INT_read = false;
  vartype aux_last_type_read_for_INT = UNKNOWN;
  std::vector<int> var_NBT_0d_intvec_Scalar;
  bool aux_NBT_read = false;
  vartype aux_last_type_read_for_NBT = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // assign expression to variable LNU
  var_LNU_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
  aux_LNU_read = true;
  if ((aux_last_type_read_for_LNU != SCALAR_INT && aux_last_type_read_for_LNU != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LNU = SCALAR_INT;
  // evaluate if-elif-else clause
  {
    bool cpp_found_match = false;
    if (! cpp_found_match) {
      if ((((((((aux_LNU_read == true)) && ((var_LNU_0d_int_Scalar)==(1)))))))) {
        // if statement evaluation
        cpp_found_match = true;
        cpp_line = cpp_read_line(cont);
        // read LIST record
        // assign expression to variable NC
        var_NC_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
        aux_NC_read = true;
        if ((aux_last_type_read_for_NC != SCALAR_INT && aux_last_type_read_for_NC != UNKNOWN)) {
          raise_vartype_mismatch();
        }
        aux_last_type_read_for_NC = SCALAR_INT;
        {
          int cpp_npl = cpp_read_int_field(cpp_line, 4);
          cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
          int cpp_j = 0;
          // read LIST body

          for (int var_k_0d_int_Scalar = 1;
             var_k_0d_int_Scalar <= var_NC_0d_int_Scalar; var_k_0d_int_Scalar++) {
            bool aux_k_read = true;
            // read LIST body
            // assign expression to variable C
            var_C_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
            if ((aux_last_type_read_for_C != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_C != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_C = NESTEDVECTOR_DOUBLE;
          }
        }
      }
    }
    if (! cpp_found_match) {
      if (! cpp_found_match) {
        if ((((((((aux_LNU_read == true)) && ((var_LNU_0d_int_Scalar)==(2)))))))) {
          // if statement evaluation
          cpp_found_match = true;
          // read TAB1 record
          cpp_line = cpp_read_line(cont);
          {
            Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
            // assign expression to variable Eint
            var_Eint_0d_floatvec_Scalar = tab_body.X;
            aux_Eint_read = true;
            if ((aux_last_type_read_for_Eint != SCALAR_FLOATVEC && aux_last_type_read_for_Eint != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_Eint = SCALAR_FLOATVEC;
            // assign expression to variable nu
            var_nu_0d_floatvec_Scalar = tab_body.Y;
            aux_nu_read = true;
            if ((aux_last_type_read_for_nu != SCALAR_FLOATVEC && aux_last_type_read_for_nu != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_nu = SCALAR_FLOATVEC;
            // assign expression to variable INT
            var_INT_0d_intvec_Scalar = tab_body.INT;
            aux_INT_read = true;
            if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_INT = SCALAR_INTVEC;
            // assign expression to variable NBT
            var_NBT_0d_intvec_Scalar = tab_body.NBT;
            aux_NBT_read = true;
            if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NBT = SCALAR_INTVEC;
          }
        }
      }
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LNU == SCALAR_INT) && (aux_LNU_read == true))) {
    cpp_current_dict["LNU"] = var_LNU_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NC == SCALAR_INT) && (aux_NC_read == true))) {
    cpp_current_dict["NC"] = var_NC_0d_int_Scalar;
  }
  if ((var_C_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_C_1d_double_NestedVector;
    cpp_current_dict["C"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["C"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if (((aux_last_type_read_for_Eint == SCALAR_FLOATVEC) && (aux_Eint_read == true))) {
    cpp_current_dict["Eint"] = var_Eint_0d_floatvec_Scalar;
  }
  if (((aux_last_type_read_for_nu == SCALAR_FLOATVEC) && (aux_nu_read == true))) {
    cpp_current_dict["nu"] = var_nu_0d_floatvec_Scalar;
  }
  if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
    cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
  }
  if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
    cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_mf1mt455_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_LDG_0d_int_Scalar;
  bool aux_LDG_read = false;
  vartype aux_last_type_read_for_LDG = UNKNOWN;
  int var_LNU_0d_int_Scalar;
  bool aux_LNU_read = false;
  vartype aux_last_type_read_for_LNU = UNKNOWN;
  int var_NNF_0d_int_Scalar;
  bool aux_NNF_read = false;
  vartype aux_last_type_read_for_NNF = UNKNOWN;
  NestedVector<double> var_lambda_1d_double_NestedVector;
  vartype aux_last_type_read_for_lambda = UNKNOWN;
  std::vector<double> var_Eint_0d_floatvec_Scalar;
  bool aux_Eint_read = false;
  vartype aux_last_type_read_for_Eint = UNKNOWN;
  std::vector<double> var_nubar_d_0d_floatvec_Scalar;
  double var_nubar_d_0d_double_Scalar;
  bool aux_nubar_d_read = false;
  vartype aux_last_type_read_for_nubar_d = UNKNOWN;
  std::vector<int> var_INT_0d_intvec_Scalar;
  bool aux_INT_read = false;
  vartype aux_last_type_read_for_INT = UNKNOWN;
  std::vector<int> var_NBT_0d_intvec_Scalar;
  bool aux_NBT_read = false;
  vartype aux_last_type_read_for_NBT = UNKNOWN;
  int var_NE_0d_int_Scalar;
  bool aux_NE_read = false;
  vartype aux_last_type_read_for_NE = UNKNOWN;
  NestedVector<double> var_E_1d_double_NestedVector;
  vartype aux_last_type_read_for_E = UNKNOWN;
  int cpp_int_val;
  bool aux_cpp_int_val_read = false;
  vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
  Matrix2d<double> var_lambda_2d_double_Matrix2d;
  Matrix2d<double> var_alpha_2d_double_Matrix2d;
  vartype aux_last_type_read_for_alpha = UNKNOWN;
  double var_E1_0d_double_Scalar;
  bool aux_E1_read = false;
  vartype aux_last_type_read_for_E1 = UNKNOWN;
  int var_NC_0d_int_Scalar;
  bool aux_NC_read = false;
  vartype aux_last_type_read_for_NC = UNKNOWN;
  NestedVector<double> var_nubar_d_1d_double_NestedVector;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // assign expression to variable LDG
  var_LDG_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
  aux_LDG_read = true;
  if ((aux_last_type_read_for_LDG != SCALAR_INT && aux_last_type_read_for_LDG != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LDG = SCALAR_INT;
  // assign expression to variable LNU
  var_LNU_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
  aux_LNU_read = true;
  if ((aux_last_type_read_for_LNU != SCALAR_INT && aux_last_type_read_for_LNU != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LNU = SCALAR_INT;
  // evaluate if-elif-else clause
  {
    bool cpp_found_match = false;
    if (! cpp_found_match) {
      if (((((((((aux_LDG_read == true)) && ((var_LDG_0d_int_Scalar)==(0)))))&&((((aux_LNU_read == true)) && ((var_LNU_0d_int_Scalar)==(2)))))))) {
        // if statement evaluation
        cpp_found_match = true;
        cpp_line = cpp_read_line(cont);
        // read LIST record
        // assign expression to variable NNF
        var_NNF_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
        aux_NNF_read = true;
        if ((aux_last_type_read_for_NNF != SCALAR_INT && aux_last_type_read_for_NNF != UNKNOWN)) {
          raise_vartype_mismatch();
        }
        aux_last_type_read_for_NNF = SCALAR_INT;
        {
          int cpp_npl = cpp_read_int_field(cpp_line, 4);
          cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
          int cpp_j = 0;
          // read LIST body

          for (int var_k_0d_int_Scalar = 1;
             var_k_0d_int_Scalar <= var_NNF_0d_int_Scalar; var_k_0d_int_Scalar++) {
            bool aux_k_read = true;
            // read LIST body
            // assign expression to variable lambda
            var_lambda_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
            if ((aux_last_type_read_for_lambda != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_lambda != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_lambda = NESTEDVECTOR_DOUBLE;
          }
        }
        // read TAB1 record
        cpp_line = cpp_read_line(cont);
        {
          Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
          // assign expression to variable Eint
          var_Eint_0d_floatvec_Scalar = tab_body.X;
          aux_Eint_read = true;
          if ((aux_last_type_read_for_Eint != SCALAR_FLOATVEC && aux_last_type_read_for_Eint != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_Eint = SCALAR_FLOATVEC;
          // assign expression to variable nubar_d
          var_nubar_d_0d_floatvec_Scalar = tab_body.Y;
          aux_nubar_d_read = true;
          if ((aux_last_type_read_for_nubar_d != SCALAR_FLOATVEC && aux_last_type_read_for_nubar_d != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_nubar_d = SCALAR_FLOATVEC;
          // assign expression to variable INT
          var_INT_0d_intvec_Scalar = tab_body.INT;
          aux_INT_read = true;
          if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_INT = SCALAR_INTVEC;
          // assign expression to variable NBT
          var_NBT_0d_intvec_Scalar = tab_body.NBT;
          aux_NBT_read = true;
          if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NBT = SCALAR_INTVEC;
        }
      }
    }
    if (! cpp_found_match) {
      if (! cpp_found_match) {
        if (((((((((aux_LDG_read == true)) && ((var_LDG_0d_int_Scalar)==(1)))))&&((((aux_LNU_read == true)) && ((var_LNU_0d_int_Scalar)==(2)))))))) {
          // if statement evaluation
          cpp_found_match = true;
          // read TAB2 record
          cpp_line = cpp_read_line(cont);
          // assign expression to variable NE
          var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
          aux_NE_read = true;
          if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NE = SCALAR_INT;
          {
            Tab2Body tab_body = read_tab2_body(cont, cpp_read_int_field(cpp_line, 4));
            // assign expression to variable INT
            var_INT_0d_intvec_Scalar = tab_body.INT;
            aux_INT_read = true;
            if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_INT = SCALAR_INTVEC;
            // assign expression to variable NBT
            var_NBT_0d_intvec_Scalar = tab_body.NBT;
            aux_NBT_read = true;
            if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NBT = SCALAR_INTVEC;
          }
          var_lambda_2d_double_Matrix2d.init(1, var_NE_0d_int_Scalar, 1, var_NNF_0d_int_Scalar, false, false);
          var_alpha_2d_double_Matrix2d.init(1, var_NE_0d_int_Scalar, 1, var_NNF_0d_int_Scalar, false, false);

          for (int var_k_0d_int_Scalar = 1;
             var_k_0d_int_Scalar <= var_NE_0d_int_Scalar; var_k_0d_int_Scalar++) {
            bool aux_k_read = true;
            cpp_line = cpp_read_line(cont);
            // read LIST record
            // assign expression to variable E
            var_E_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 1));
            if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
            // assign expression to variable cpp_int_val
            cpp_int_val = cpp_read_int_field(cpp_line, 4);
            aux_cpp_int_val_read = true;
            if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_cpp_int_val = SCALAR_INT;
            // assign expression to variable NNF
            var_NNF_0d_int_Scalar = (cpp_int_val/2);
            aux_NNF_read = true;
            if ((aux_last_type_read_for_NNF != SCALAR_INT && aux_last_type_read_for_NNF != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NNF = SCALAR_INT;
            {
              int cpp_npl = cpp_read_int_field(cpp_line, 4);
              cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
              int cpp_j = 0;
              // read LIST body

              for (int var_l_0d_int_Scalar = 1;
                 var_l_0d_int_Scalar <= var_NNF_0d_int_Scalar; var_l_0d_int_Scalar++) {
                bool aux_l_read = true;
                // read LIST body
                // assign expression to variable lambda
                var_lambda_2d_double_Matrix2d(var_k_0d_int_Scalar, var_l_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                if ((aux_last_type_read_for_lambda != MATRIX2D_DOUBLE && aux_last_type_read_for_lambda != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_lambda = MATRIX2D_DOUBLE;
                // assign expression to variable alpha
                var_alpha_2d_double_Matrix2d(var_k_0d_int_Scalar, var_l_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                if ((aux_last_type_read_for_alpha != MATRIX2D_DOUBLE && aux_last_type_read_for_alpha != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_alpha = MATRIX2D_DOUBLE;
              }
            }
          }
          // read TAB1 record
          cpp_line = cpp_read_line(cont);
          {
            Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
            // assign expression to variable Eint
            var_Eint_0d_floatvec_Scalar = tab_body.X;
            aux_Eint_read = true;
            if ((aux_last_type_read_for_Eint != SCALAR_FLOATVEC && aux_last_type_read_for_Eint != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_Eint = SCALAR_FLOATVEC;
            // assign expression to variable nubar_d
            var_nubar_d_0d_floatvec_Scalar = tab_body.Y;
            aux_nubar_d_read = true;
            if ((aux_last_type_read_for_nubar_d != SCALAR_FLOATVEC && aux_last_type_read_for_nubar_d != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_nubar_d = SCALAR_FLOATVEC;
            if ((! (aux_INT_read == true))) {
              // assign expression to variable INT
              var_INT_0d_intvec_Scalar = tab_body.INT;
              aux_INT_read = true;
              if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_INT = SCALAR_INTVEC;
            }
            if ((! (aux_NBT_read == true))) {
              // assign expression to variable NBT
              var_NBT_0d_intvec_Scalar = tab_body.NBT;
              aux_NBT_read = true;
              if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NBT = SCALAR_INTVEC;
            }
          }
        }
      }
    }
    if (! cpp_found_match) {
      if (! cpp_found_match) {
        if (((((((((aux_LDG_read == true)) && ((var_LDG_0d_int_Scalar)==(0)))))&&((((aux_LNU_read == true)) && ((var_LNU_0d_int_Scalar)==(1)))))))) {
          // if statement evaluation
          cpp_found_match = true;
          cpp_line = cpp_read_line(cont);
          // read LIST record
          // assign expression to variable NNF
          var_NNF_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
          aux_NNF_read = true;
          if ((aux_last_type_read_for_NNF != SCALAR_INT && aux_last_type_read_for_NNF != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NNF = SCALAR_INT;
          {
            int cpp_npl = cpp_read_int_field(cpp_line, 4);
            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
            int cpp_j = 0;
            // read LIST body

            for (int var_k_0d_int_Scalar = 1;
               var_k_0d_int_Scalar <= var_NNF_0d_int_Scalar; var_k_0d_int_Scalar++) {
              bool aux_k_read = true;
              // read LIST body
              // assign expression to variable lambda
              var_lambda_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
              if ((aux_last_type_read_for_lambda != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_lambda != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_lambda = NESTEDVECTOR_DOUBLE;
            }
          }
          cpp_line = cpp_read_line(cont);
          // read LIST record
          {
            int cpp_npl = cpp_read_int_field(cpp_line, 4);
            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
            int cpp_j = 0;
            // read LIST body
            // assign expression to variable nubar_d
            var_nubar_d_0d_double_Scalar = cpp_floatvec[cpp_j++];
            aux_nubar_d_read = true;
            if ((aux_last_type_read_for_nubar_d != SCALAR_DOUBLE && aux_last_type_read_for_nubar_d != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_nubar_d = SCALAR_DOUBLE;
          }
        }
      }
    }
    if (! cpp_found_match) {
      if (! cpp_found_match) {
        if (((((((((aux_LDG_read == true)) && ((var_LDG_0d_int_Scalar)==(1)))))&&((((aux_LNU_read == true)) && ((var_LNU_0d_int_Scalar)==(1)))))))) {
          // if statement evaluation
          cpp_found_match = true;
          // read TAB2 record
          cpp_line = cpp_read_line(cont);
          // assign expression to variable NE
          var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
          aux_NE_read = true;
          if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NE = SCALAR_INT;
          {
            Tab2Body tab_body = read_tab2_body(cont, cpp_read_int_field(cpp_line, 4));
            // assign expression to variable INT
            var_INT_0d_intvec_Scalar = tab_body.INT;
            aux_INT_read = true;
            if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_INT = SCALAR_INTVEC;
            // assign expression to variable NBT
            var_NBT_0d_intvec_Scalar = tab_body.NBT;
            aux_NBT_read = true;
            if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NBT = SCALAR_INTVEC;
          }
          var_lambda_2d_double_Matrix2d.init(1, var_NE_0d_int_Scalar, 1, var_NNF_0d_int_Scalar, false, false);
          var_alpha_2d_double_Matrix2d.init(1, var_NE_0d_int_Scalar, 1, var_NNF_0d_int_Scalar, false, false);

          for (int var_k_0d_int_Scalar = 1;
             var_k_0d_int_Scalar <= var_NE_0d_int_Scalar; var_k_0d_int_Scalar++) {
            bool aux_k_read = true;
            cpp_line = cpp_read_line(cont);
            // read LIST record
            // assign expression to variable E1
            var_E1_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_E1_read = true;
            if ((aux_last_type_read_for_E1 != SCALAR_DOUBLE && aux_last_type_read_for_E1 != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_E1 = SCALAR_DOUBLE;
            // assign expression to variable cpp_int_val
            cpp_int_val = cpp_read_int_field(cpp_line, 4);
            aux_cpp_int_val_read = true;
            if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_cpp_int_val = SCALAR_INT;
            // assign expression to variable NNF
            var_NNF_0d_int_Scalar = (cpp_int_val/2);
            aux_NNF_read = true;
            if ((aux_last_type_read_for_NNF != SCALAR_INT && aux_last_type_read_for_NNF != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NNF = SCALAR_INT;
            {
              int cpp_npl = cpp_read_int_field(cpp_line, 4);
              cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
              int cpp_j = 0;
              // read LIST body

              for (int var_l_0d_int_Scalar = 1;
                 var_l_0d_int_Scalar <= var_NNF_0d_int_Scalar; var_l_0d_int_Scalar++) {
                bool aux_l_read = true;
                // read LIST body
                // assign expression to variable lambda
                var_lambda_2d_double_Matrix2d(var_k_0d_int_Scalar, var_l_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                if ((aux_last_type_read_for_lambda != MATRIX2D_DOUBLE && aux_last_type_read_for_lambda != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_lambda = MATRIX2D_DOUBLE;
                // assign expression to variable alpha
                var_alpha_2d_double_Matrix2d(var_k_0d_int_Scalar, var_l_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                if ((aux_last_type_read_for_alpha != MATRIX2D_DOUBLE && aux_last_type_read_for_alpha != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_alpha = MATRIX2D_DOUBLE;
              }
            }
          }
          cpp_line = cpp_read_line(cont);
          // read LIST record
          // assign expression to variable NC
          var_NC_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
          aux_NC_read = true;
          if ((aux_last_type_read_for_NC != SCALAR_INT && aux_last_type_read_for_NC != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NC = SCALAR_INT;
          {
            int cpp_npl = cpp_read_int_field(cpp_line, 4);
            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
            int cpp_j = 0;
            // read LIST body

            for (int var_k_0d_int_Scalar = 1;
               var_k_0d_int_Scalar <= var_NC_0d_int_Scalar; var_k_0d_int_Scalar++) {
              bool aux_k_read = true;
              // read LIST body
              // assign expression to variable nubar_d
              var_nubar_d_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
              if ((aux_last_type_read_for_nubar_d != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_nubar_d != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_nubar_d = NESTEDVECTOR_DOUBLE;
            }
          }
        }
      }
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LDG == SCALAR_INT) && (aux_LDG_read == true))) {
    cpp_current_dict["LDG"] = var_LDG_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_LNU == SCALAR_INT) && (aux_LNU_read == true))) {
    cpp_current_dict["LNU"] = var_LNU_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NNF == SCALAR_INT) && (aux_NNF_read == true))) {
    cpp_current_dict["NNF"] = var_NNF_0d_int_Scalar;
  }
  if ((var_lambda_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_lambda_1d_double_NestedVector;
    cpp_current_dict["lambda"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["lambda"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if (((aux_last_type_read_for_Eint == SCALAR_FLOATVEC) && (aux_Eint_read == true))) {
    cpp_current_dict["Eint"] = var_Eint_0d_floatvec_Scalar;
  }
  if (((aux_last_type_read_for_nubar_d == SCALAR_FLOATVEC) && (aux_nubar_d_read == true))) {
    cpp_current_dict["nubar_d"] = var_nubar_d_0d_floatvec_Scalar;
  }
  if (((aux_last_type_read_for_nubar_d == SCALAR_DOUBLE) && (aux_nubar_d_read == true))) {
    cpp_current_dict["nubar_d"] = var_nubar_d_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
    cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
  }
  if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
    cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
  }
  if (((aux_last_type_read_for_NE == SCALAR_INT) && (aux_NE_read == true))) {
    cpp_current_dict["NE"] = var_NE_0d_int_Scalar;
  }
  if ((var_E_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_E_1d_double_NestedVector;
    cpp_current_dict["E"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["E"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if (var_lambda_2d_double_Matrix2d.did_read()) {
      cpp_current_dict["lambda"] = py::dict();
      py::dict cpp_curdict0 = cpp_current_dict["lambda"];
      for (int cpp_i1 = var_lambda_2d_double_Matrix2d.get_row_start_index(); cpp_i1 <= var_lambda_2d_double_Matrix2d.get_row_last_index(); cpp_i1++) {
        cpp_curdict0[py::cast(cpp_i1)] = py::dict();
        py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
        for (int cpp_i2 = var_lambda_2d_double_Matrix2d.get_col_start_index(cpp_i1); cpp_i2 <= var_lambda_2d_double_Matrix2d.get_col_last_index(cpp_i1); cpp_i2++) {
          cpp_curdict1[py::cast(cpp_i2)] = var_lambda_2d_double_Matrix2d(cpp_i1, cpp_i2);
        }
      }
  }
  if (var_alpha_2d_double_Matrix2d.did_read()) {
      cpp_current_dict["alpha"] = py::dict();
      py::dict cpp_curdict0 = cpp_current_dict["alpha"];
      for (int cpp_i1 = var_alpha_2d_double_Matrix2d.get_row_start_index(); cpp_i1 <= var_alpha_2d_double_Matrix2d.get_row_last_index(); cpp_i1++) {
        cpp_curdict0[py::cast(cpp_i1)] = py::dict();
        py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
        for (int cpp_i2 = var_alpha_2d_double_Matrix2d.get_col_start_index(cpp_i1); cpp_i2 <= var_alpha_2d_double_Matrix2d.get_col_last_index(cpp_i1); cpp_i2++) {
          cpp_curdict1[py::cast(cpp_i2)] = var_alpha_2d_double_Matrix2d(cpp_i1, cpp_i2);
        }
      }
  }
  if (((aux_last_type_read_for_E1 == SCALAR_DOUBLE) && (aux_E1_read == true))) {
    cpp_current_dict["E1"] = var_E1_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_NC == SCALAR_INT) && (aux_NC_read == true))) {
    cpp_current_dict["NC"] = var_NC_0d_int_Scalar;
  }
  if ((var_nubar_d_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_nubar_d_1d_double_NestedVector;
    cpp_current_dict["nubar_d"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["nubar_d"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  return cpp_current_dict;
}

py::dict parse_mf1mt456_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_LNU_0d_int_Scalar;
  bool aux_LNU_read = false;
  vartype aux_last_type_read_for_LNU = UNKNOWN;
  std::vector<double> var_Eint_0d_floatvec_Scalar;
  bool aux_Eint_read = false;
  vartype aux_last_type_read_for_Eint = UNKNOWN;
  std::vector<double> var_nubar_p_0d_floatvec_Scalar;
  double var_nubar_p_0d_double_Scalar;
  bool aux_nubar_p_read = false;
  vartype aux_last_type_read_for_nubar_p = UNKNOWN;
  std::vector<int> var_INT_0d_intvec_Scalar;
  bool aux_INT_read = false;
  vartype aux_last_type_read_for_INT = UNKNOWN;
  std::vector<int> var_NBT_0d_intvec_Scalar;
  bool aux_NBT_read = false;
  vartype aux_last_type_read_for_NBT = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // assign expression to variable LNU
  var_LNU_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
  aux_LNU_read = true;
  if ((aux_last_type_read_for_LNU != SCALAR_INT && aux_last_type_read_for_LNU != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LNU = SCALAR_INT;
  // evaluate if-elif-else clause
  {
    bool cpp_found_match = false;
    if (! cpp_found_match) {
      if ((((((((aux_LNU_read == true)) && ((var_LNU_0d_int_Scalar)==(2)))))))) {
        // if statement evaluation
        cpp_found_match = true;
        // read TAB1 record
        cpp_line = cpp_read_line(cont);
        {
          Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
          // assign expression to variable Eint
          var_Eint_0d_floatvec_Scalar = tab_body.X;
          aux_Eint_read = true;
          if ((aux_last_type_read_for_Eint != SCALAR_FLOATVEC && aux_last_type_read_for_Eint != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_Eint = SCALAR_FLOATVEC;
          // assign expression to variable nubar_p
          var_nubar_p_0d_floatvec_Scalar = tab_body.Y;
          aux_nubar_p_read = true;
          if ((aux_last_type_read_for_nubar_p != SCALAR_FLOATVEC && aux_last_type_read_for_nubar_p != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_nubar_p = SCALAR_FLOATVEC;
          // assign expression to variable INT
          var_INT_0d_intvec_Scalar = tab_body.INT;
          aux_INT_read = true;
          if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_INT = SCALAR_INTVEC;
          // assign expression to variable NBT
          var_NBT_0d_intvec_Scalar = tab_body.NBT;
          aux_NBT_read = true;
          if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NBT = SCALAR_INTVEC;
        }
      }
    }
    if (! cpp_found_match) {
      if (! cpp_found_match) {
        if ((((((((aux_LNU_read == true)) && ((var_LNU_0d_int_Scalar)==(1)))))))) {
          // if statement evaluation
          cpp_found_match = true;
          cpp_line = cpp_read_line(cont);
          // read LIST record
          {
            int cpp_npl = cpp_read_int_field(cpp_line, 4);
            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
            int cpp_j = 0;
            // read LIST body
            // assign expression to variable nubar_p
            var_nubar_p_0d_double_Scalar = cpp_floatvec[cpp_j++];
            aux_nubar_p_read = true;
            if ((aux_last_type_read_for_nubar_p != SCALAR_DOUBLE && aux_last_type_read_for_nubar_p != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_nubar_p = SCALAR_DOUBLE;
          }
        }
      }
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LNU == SCALAR_INT) && (aux_LNU_read == true))) {
    cpp_current_dict["LNU"] = var_LNU_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_Eint == SCALAR_FLOATVEC) && (aux_Eint_read == true))) {
    cpp_current_dict["Eint"] = var_Eint_0d_floatvec_Scalar;
  }
  if (((aux_last_type_read_for_nubar_p == SCALAR_FLOATVEC) && (aux_nubar_p_read == true))) {
    cpp_current_dict["nubar_p"] = var_nubar_p_0d_floatvec_Scalar;
  }
  if (((aux_last_type_read_for_nubar_p == SCALAR_DOUBLE) && (aux_nubar_p_read == true))) {
    cpp_current_dict["nubar_p"] = var_nubar_p_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
    cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
  }
  if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
    cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_mf1mt458_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_LFC_0d_int_Scalar;
  bool aux_LFC_read = false;
  vartype aux_last_type_read_for_LFC = UNKNOWN;
  int var_NPLY_0d_int_Scalar;
  bool aux_NPLY_read = false;
  vartype aux_last_type_read_for_NPLY = UNKNOWN;
  double var_EFR_0d_double_Scalar;
  bool aux_EFR_read = false;
  vartype aux_last_type_read_for_EFR = UNKNOWN;
  double var_dEFR_0d_double_Scalar;
  bool aux_dEFR_read = false;
  vartype aux_last_type_read_for_dEFR = UNKNOWN;
  double var_ENP_0d_double_Scalar;
  bool aux_ENP_read = false;
  vartype aux_last_type_read_for_ENP = UNKNOWN;
  double var_dENP_0d_double_Scalar;
  bool aux_dENP_read = false;
  vartype aux_last_type_read_for_dENP = UNKNOWN;
  double var_END_0d_double_Scalar;
  bool aux_END_read = false;
  vartype aux_last_type_read_for_END = UNKNOWN;
  double var_dEND_0d_double_Scalar;
  bool aux_dEND_read = false;
  vartype aux_last_type_read_for_dEND = UNKNOWN;
  double var_EGP_0d_double_Scalar;
  bool aux_EGP_read = false;
  vartype aux_last_type_read_for_EGP = UNKNOWN;
  double var_dEGP_0d_double_Scalar;
  bool aux_dEGP_read = false;
  vartype aux_last_type_read_for_dEGP = UNKNOWN;
  double var_EGD_0d_double_Scalar;
  bool aux_EGD_read = false;
  vartype aux_last_type_read_for_EGD = UNKNOWN;
  double var_dEGD_0d_double_Scalar;
  bool aux_dEGD_read = false;
  vartype aux_last_type_read_for_dEGD = UNKNOWN;
  double var_EB_0d_double_Scalar;
  bool aux_EB_read = false;
  vartype aux_last_type_read_for_EB = UNKNOWN;
  double var_dEB_0d_double_Scalar;
  bool aux_dEB_read = false;
  vartype aux_last_type_read_for_dEB = UNKNOWN;
  double var_ENU_0d_double_Scalar;
  bool aux_ENU_read = false;
  vartype aux_last_type_read_for_ENU = UNKNOWN;
  double var_dENU_0d_double_Scalar;
  bool aux_dENU_read = false;
  vartype aux_last_type_read_for_dENU = UNKNOWN;
  double var_ER_0d_double_Scalar;
  bool aux_ER_read = false;
  vartype aux_last_type_read_for_ER = UNKNOWN;
  double var_dER_0d_double_Scalar;
  bool aux_dER_read = false;
  vartype aux_last_type_read_for_dER = UNKNOWN;
  double var_ET_0d_double_Scalar;
  bool aux_ET_read = false;
  vartype aux_last_type_read_for_ET = UNKNOWN;
  double var_dET_0d_double_Scalar;
  bool aux_dET_read = false;
  vartype aux_last_type_read_for_dET = UNKNOWN;
  int cpp_int_val;
  bool aux_cpp_int_val_read = false;
  vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
  NestedVector<double> var_c_EFR_1d_double_NestedVector;
  vartype aux_last_type_read_for_c_EFR = UNKNOWN;
  NestedVector<double> var_dc_EFR_1d_double_NestedVector;
  vartype aux_last_type_read_for_dc_EFR = UNKNOWN;
  NestedVector<double> var_c_ENP_1d_double_NestedVector;
  vartype aux_last_type_read_for_c_ENP = UNKNOWN;
  NestedVector<double> var_dc_ENP_1d_double_NestedVector;
  vartype aux_last_type_read_for_dc_ENP = UNKNOWN;
  NestedVector<double> var_c_END_1d_double_NestedVector;
  vartype aux_last_type_read_for_c_END = UNKNOWN;
  NestedVector<double> var_dc_END_1d_double_NestedVector;
  vartype aux_last_type_read_for_dc_END = UNKNOWN;
  NestedVector<double> var_c_EGP_1d_double_NestedVector;
  vartype aux_last_type_read_for_c_EGP = UNKNOWN;
  NestedVector<double> var_dc_EGP_1d_double_NestedVector;
  vartype aux_last_type_read_for_dc_EGP = UNKNOWN;
  NestedVector<double> var_c_EGD_1d_double_NestedVector;
  vartype aux_last_type_read_for_c_EGD = UNKNOWN;
  NestedVector<double> var_dc_EGD_1d_double_NestedVector;
  vartype aux_last_type_read_for_dc_EGD = UNKNOWN;
  NestedVector<double> var_c_EB_1d_double_NestedVector;
  vartype aux_last_type_read_for_c_EB = UNKNOWN;
  NestedVector<double> var_dc_EB_1d_double_NestedVector;
  vartype aux_last_type_read_for_dc_EB = UNKNOWN;
  NestedVector<double> var_c_ENU_1d_double_NestedVector;
  vartype aux_last_type_read_for_c_ENU = UNKNOWN;
  NestedVector<double> var_dc_ENU_1d_double_NestedVector;
  vartype aux_last_type_read_for_dc_ENU = UNKNOWN;
  NestedVector<double> var_c_ER_1d_double_NestedVector;
  vartype aux_last_type_read_for_c_ER = UNKNOWN;
  NestedVector<double> var_dc_ER_1d_double_NestedVector;
  vartype aux_last_type_read_for_dc_ER = UNKNOWN;
  NestedVector<double> var_c_ET_1d_double_NestedVector;
  vartype aux_last_type_read_for_c_ET = UNKNOWN;
  NestedVector<double> var_dc_ET_1d_double_NestedVector;
  vartype aux_last_type_read_for_dc_ET = UNKNOWN;
  int var_NFC_0d_int_Scalar;
  bool aux_NFC_read = false;
  vartype aux_last_type_read_for_NFC = UNKNOWN;
  NestedVector<int> var_LDRV_1d_int_NestedVector;
  vartype aux_last_type_read_for_LDRV = UNKNOWN;
  NestedVector<int> var_IFC_1d_int_NestedVector;
  vartype aux_last_type_read_for_IFC = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  // evaluate if-elif-else clause
  {
    bool cpp_found_match = false;
    if (! cpp_found_match) {
      // if statement evaluation with lookahead
      {
        std::streampos cpp_old_streampos = cont.tellg();
        {
          // variable declarations
          int& glob_var_MAT_0d_int_Scalar = var_MAT_0d_int_Scalar;
          int var_MAT_0d_int_Scalar = glob_var_MAT_0d_int_Scalar;
          bool& glob_aux_MAT_read = aux_MAT_read;
          bool aux_MAT_read = glob_aux_MAT_read;
          vartype aux_last_type_read_for_MAT = UNKNOWN;
          int& glob_var_MF_0d_int_Scalar = var_MF_0d_int_Scalar;
          int var_MF_0d_int_Scalar = glob_var_MF_0d_int_Scalar;
          bool& glob_aux_MF_read = aux_MF_read;
          bool aux_MF_read = glob_aux_MF_read;
          vartype aux_last_type_read_for_MF = UNKNOWN;
          int& glob_var_MT_0d_int_Scalar = var_MT_0d_int_Scalar;
          int var_MT_0d_int_Scalar = glob_var_MT_0d_int_Scalar;
          bool& glob_aux_MT_read = aux_MT_read;
          bool aux_MT_read = glob_aux_MT_read;
          vartype aux_last_type_read_for_MT = UNKNOWN;
          double& glob_var_ZA_0d_double_Scalar = var_ZA_0d_double_Scalar;
          double var_ZA_0d_double_Scalar = glob_var_ZA_0d_double_Scalar;
          bool& glob_aux_ZA_read = aux_ZA_read;
          bool aux_ZA_read = glob_aux_ZA_read;
          vartype aux_last_type_read_for_ZA = UNKNOWN;
          double& glob_var_AWR_0d_double_Scalar = var_AWR_0d_double_Scalar;
          double var_AWR_0d_double_Scalar = glob_var_AWR_0d_double_Scalar;
          bool& glob_aux_AWR_read = aux_AWR_read;
          bool aux_AWR_read = glob_aux_AWR_read;
          vartype aux_last_type_read_for_AWR = UNKNOWN;
          int& glob_var_LFC_0d_int_Scalar = var_LFC_0d_int_Scalar;
          int var_LFC_0d_int_Scalar = glob_var_LFC_0d_int_Scalar;
          bool& glob_aux_LFC_read = aux_LFC_read;
          bool aux_LFC_read = glob_aux_LFC_read;
          vartype aux_last_type_read_for_LFC = UNKNOWN;
          int& glob_var_NPLY_0d_int_Scalar = var_NPLY_0d_int_Scalar;
          int var_NPLY_0d_int_Scalar = glob_var_NPLY_0d_int_Scalar;
          bool& glob_aux_NPLY_read = aux_NPLY_read;
          bool aux_NPLY_read = glob_aux_NPLY_read;
          vartype aux_last_type_read_for_NPLY = UNKNOWN;
          cpp_line = cpp_read_line(cont);
          // read CONT record
          // assign expression to variable ZA
          var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
          aux_ZA_read = true;
          if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_ZA = SCALAR_DOUBLE;
          // assign expression to variable AWR
          var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
          aux_AWR_read = true;
          if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_AWR = SCALAR_DOUBLE;
          // assign expression to variable LFC
          var_LFC_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
          aux_LFC_read = true;
          if ((aux_last_type_read_for_LFC != SCALAR_INT && aux_last_type_read_for_LFC != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_LFC = SCALAR_INT;
          cpp_line = cpp_read_line(cont);
          // read LIST record
          // assign expression to variable NPLY
          var_NPLY_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
          aux_NPLY_read = true;
          if ((aux_last_type_read_for_NPLY != SCALAR_INT && aux_last_type_read_for_NPLY != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NPLY = SCALAR_INT;
          if (((((((((aux_LFC_read == true)) && ((var_LFC_0d_int_Scalar)==(0)))))&&((((aux_NPLY_read == true)) && ((var_NPLY_0d_int_Scalar)==(0)))))))) {
            cpp_found_match = true;
          }
          cont.seekg(cpp_old_streampos);
        }
        if (cpp_found_match) {
          cpp_line = cpp_read_line(cont);
          // read CONT record
          // assign expression to variable ZA
          var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
          aux_ZA_read = true;
          if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_ZA = SCALAR_DOUBLE;
          // assign expression to variable AWR
          var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
          aux_AWR_read = true;
          if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_AWR = SCALAR_DOUBLE;
          // assign expression to variable LFC
          var_LFC_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
          aux_LFC_read = true;
          if ((aux_last_type_read_for_LFC != SCALAR_INT && aux_last_type_read_for_LFC != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_LFC = SCALAR_INT;
          cpp_line = cpp_read_line(cont);
          // read LIST record
          // assign expression to variable NPLY
          var_NPLY_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
          aux_NPLY_read = true;
          if ((aux_last_type_read_for_NPLY != SCALAR_INT && aux_last_type_read_for_NPLY != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NPLY = SCALAR_INT;
          {
            int cpp_npl = cpp_read_int_field(cpp_line, 4);
            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
            int cpp_j = 0;
            // read LIST body
            // assign expression to variable EFR
            var_EFR_0d_double_Scalar = cpp_floatvec[cpp_j++];
            aux_EFR_read = true;
            if ((aux_last_type_read_for_EFR != SCALAR_DOUBLE && aux_last_type_read_for_EFR != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_EFR = SCALAR_DOUBLE;
            // assign expression to variable dEFR
            var_dEFR_0d_double_Scalar = cpp_floatvec[cpp_j++];
            aux_dEFR_read = true;
            if ((aux_last_type_read_for_dEFR != SCALAR_DOUBLE && aux_last_type_read_for_dEFR != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_dEFR = SCALAR_DOUBLE;
            // assign expression to variable ENP
            var_ENP_0d_double_Scalar = cpp_floatvec[cpp_j++];
            aux_ENP_read = true;
            if ((aux_last_type_read_for_ENP != SCALAR_DOUBLE && aux_last_type_read_for_ENP != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_ENP = SCALAR_DOUBLE;
            // assign expression to variable dENP
            var_dENP_0d_double_Scalar = cpp_floatvec[cpp_j++];
            aux_dENP_read = true;
            if ((aux_last_type_read_for_dENP != SCALAR_DOUBLE && aux_last_type_read_for_dENP != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_dENP = SCALAR_DOUBLE;
            // assign expression to variable END
            var_END_0d_double_Scalar = cpp_floatvec[cpp_j++];
            aux_END_read = true;
            if ((aux_last_type_read_for_END != SCALAR_DOUBLE && aux_last_type_read_for_END != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_END = SCALAR_DOUBLE;
            // assign expression to variable dEND
            var_dEND_0d_double_Scalar = cpp_floatvec[cpp_j++];
            aux_dEND_read = true;
            if ((aux_last_type_read_for_dEND != SCALAR_DOUBLE && aux_last_type_read_for_dEND != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_dEND = SCALAR_DOUBLE;
            // assign expression to variable EGP
            var_EGP_0d_double_Scalar = cpp_floatvec[cpp_j++];
            aux_EGP_read = true;
            if ((aux_last_type_read_for_EGP != SCALAR_DOUBLE && aux_last_type_read_for_EGP != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_EGP = SCALAR_DOUBLE;
            // assign expression to variable dEGP
            var_dEGP_0d_double_Scalar = cpp_floatvec[cpp_j++];
            aux_dEGP_read = true;
            if ((aux_last_type_read_for_dEGP != SCALAR_DOUBLE && aux_last_type_read_for_dEGP != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_dEGP = SCALAR_DOUBLE;
            // assign expression to variable EGD
            var_EGD_0d_double_Scalar = cpp_floatvec[cpp_j++];
            aux_EGD_read = true;
            if ((aux_last_type_read_for_EGD != SCALAR_DOUBLE && aux_last_type_read_for_EGD != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_EGD = SCALAR_DOUBLE;
            // assign expression to variable dEGD
            var_dEGD_0d_double_Scalar = cpp_floatvec[cpp_j++];
            aux_dEGD_read = true;
            if ((aux_last_type_read_for_dEGD != SCALAR_DOUBLE && aux_last_type_read_for_dEGD != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_dEGD = SCALAR_DOUBLE;
            // assign expression to variable EB
            var_EB_0d_double_Scalar = cpp_floatvec[cpp_j++];
            aux_EB_read = true;
            if ((aux_last_type_read_for_EB != SCALAR_DOUBLE && aux_last_type_read_for_EB != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_EB = SCALAR_DOUBLE;
            // assign expression to variable dEB
            var_dEB_0d_double_Scalar = cpp_floatvec[cpp_j++];
            aux_dEB_read = true;
            if ((aux_last_type_read_for_dEB != SCALAR_DOUBLE && aux_last_type_read_for_dEB != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_dEB = SCALAR_DOUBLE;
            // assign expression to variable ENU
            var_ENU_0d_double_Scalar = cpp_floatvec[cpp_j++];
            aux_ENU_read = true;
            if ((aux_last_type_read_for_ENU != SCALAR_DOUBLE && aux_last_type_read_for_ENU != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_ENU = SCALAR_DOUBLE;
            // assign expression to variable dENU
            var_dENU_0d_double_Scalar = cpp_floatvec[cpp_j++];
            aux_dENU_read = true;
            if ((aux_last_type_read_for_dENU != SCALAR_DOUBLE && aux_last_type_read_for_dENU != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_dENU = SCALAR_DOUBLE;
            // assign expression to variable ER
            var_ER_0d_double_Scalar = cpp_floatvec[cpp_j++];
            aux_ER_read = true;
            if ((aux_last_type_read_for_ER != SCALAR_DOUBLE && aux_last_type_read_for_ER != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_ER = SCALAR_DOUBLE;
            // assign expression to variable dER
            var_dER_0d_double_Scalar = cpp_floatvec[cpp_j++];
            aux_dER_read = true;
            if ((aux_last_type_read_for_dER != SCALAR_DOUBLE && aux_last_type_read_for_dER != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_dER = SCALAR_DOUBLE;
            // assign expression to variable ET
            var_ET_0d_double_Scalar = cpp_floatvec[cpp_j++];
            aux_ET_read = true;
            if ((aux_last_type_read_for_ET != SCALAR_DOUBLE && aux_last_type_read_for_ET != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_ET = SCALAR_DOUBLE;
            // assign expression to variable dET
            var_dET_0d_double_Scalar = cpp_floatvec[cpp_j++];
            aux_dET_read = true;
            if ((aux_last_type_read_for_dET != SCALAR_DOUBLE && aux_last_type_read_for_dET != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_dET = SCALAR_DOUBLE;
          }
        }
      }
    }
    if (! cpp_found_match) {
      if (! cpp_found_match) {
        // if statement evaluation with lookahead
        {
          std::streampos cpp_old_streampos = cont.tellg();
          {
            // variable declarations
            int& glob_var_MAT_0d_int_Scalar = var_MAT_0d_int_Scalar;
            int var_MAT_0d_int_Scalar = glob_var_MAT_0d_int_Scalar;
            bool& glob_aux_MAT_read = aux_MAT_read;
            bool aux_MAT_read = glob_aux_MAT_read;
            vartype aux_last_type_read_for_MAT = UNKNOWN;
            int& glob_var_MF_0d_int_Scalar = var_MF_0d_int_Scalar;
            int var_MF_0d_int_Scalar = glob_var_MF_0d_int_Scalar;
            bool& glob_aux_MF_read = aux_MF_read;
            bool aux_MF_read = glob_aux_MF_read;
            vartype aux_last_type_read_for_MF = UNKNOWN;
            int& glob_var_MT_0d_int_Scalar = var_MT_0d_int_Scalar;
            int var_MT_0d_int_Scalar = glob_var_MT_0d_int_Scalar;
            bool& glob_aux_MT_read = aux_MT_read;
            bool aux_MT_read = glob_aux_MT_read;
            vartype aux_last_type_read_for_MT = UNKNOWN;
            double& glob_var_ZA_0d_double_Scalar = var_ZA_0d_double_Scalar;
            double var_ZA_0d_double_Scalar = glob_var_ZA_0d_double_Scalar;
            bool& glob_aux_ZA_read = aux_ZA_read;
            bool aux_ZA_read = glob_aux_ZA_read;
            vartype aux_last_type_read_for_ZA = UNKNOWN;
            double& glob_var_AWR_0d_double_Scalar = var_AWR_0d_double_Scalar;
            double var_AWR_0d_double_Scalar = glob_var_AWR_0d_double_Scalar;
            bool& glob_aux_AWR_read = aux_AWR_read;
            bool aux_AWR_read = glob_aux_AWR_read;
            vartype aux_last_type_read_for_AWR = UNKNOWN;
            int& glob_var_LFC_0d_int_Scalar = var_LFC_0d_int_Scalar;
            int var_LFC_0d_int_Scalar = glob_var_LFC_0d_int_Scalar;
            bool& glob_aux_LFC_read = aux_LFC_read;
            bool aux_LFC_read = glob_aux_LFC_read;
            vartype aux_last_type_read_for_LFC = UNKNOWN;
            int& glob_var_NPLY_0d_int_Scalar = var_NPLY_0d_int_Scalar;
            int var_NPLY_0d_int_Scalar = glob_var_NPLY_0d_int_Scalar;
            bool& glob_aux_NPLY_read = aux_NPLY_read;
            bool aux_NPLY_read = glob_aux_NPLY_read;
            vartype aux_last_type_read_for_NPLY = UNKNOWN;
            int& glob_cpp_int_val = cpp_int_val;
            int cpp_int_val = glob_cpp_int_val;
            bool& glob_aux_cpp_int_val_read = aux_cpp_int_val_read;
            bool aux_cpp_int_val_read = glob_aux_cpp_int_val_read;
            vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
            cpp_line = cpp_read_line(cont);
            // read CONT record
            // assign expression to variable ZA
            var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_ZA_read = true;
            if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_ZA = SCALAR_DOUBLE;
            // assign expression to variable AWR
            var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_AWR_read = true;
            if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_AWR = SCALAR_DOUBLE;
            // assign expression to variable LFC
            var_LFC_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
            aux_LFC_read = true;
            if ((aux_last_type_read_for_LFC != SCALAR_INT && aux_last_type_read_for_LFC != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LFC = SCALAR_INT;
            cpp_line = cpp_read_line(cont);
            // read LIST record
            // assign expression to variable NPLY
            var_NPLY_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
            aux_NPLY_read = true;
            if ((aux_last_type_read_for_NPLY != SCALAR_INT && aux_last_type_read_for_NPLY != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NPLY = SCALAR_INT;
            if ((! (aux_NPLY_read == true))) {
              // assign expression to variable cpp_int_val
              cpp_int_val = cpp_read_int_field(cpp_line, 4);
              aux_cpp_int_val_read = true;
              if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_cpp_int_val = SCALAR_INT;
              // assign expression to variable NPLY
              var_NPLY_0d_int_Scalar = ((cpp_int_val+(-18))/18);
              aux_NPLY_read = true;
              if ((aux_last_type_read_for_NPLY != SCALAR_INT && aux_last_type_read_for_NPLY != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NPLY = SCALAR_INT;
            }
            if ((! (aux_NPLY_read == true))) {
              // assign expression to variable cpp_int_val
              cpp_int_val = cpp_read_int_field(cpp_line, 5);
              aux_cpp_int_val_read = true;
              if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_cpp_int_val = SCALAR_INT;
              // assign expression to variable NPLY
              var_NPLY_0d_int_Scalar = ((cpp_int_val+(-9))/9);
              aux_NPLY_read = true;
              if ((aux_last_type_read_for_NPLY != SCALAR_INT && aux_last_type_read_for_NPLY != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NPLY = SCALAR_INT;
            }
            if (((((((((aux_LFC_read == true)) && ((var_LFC_0d_int_Scalar)==(0)))))&&((((aux_NPLY_read == true)) && ((var_NPLY_0d_int_Scalar)>(0)))))))) {
              cpp_found_match = true;
            }
            cont.seekg(cpp_old_streampos);
          }
          if (cpp_found_match) {
            cpp_line = cpp_read_line(cont);
            // read CONT record
            // assign expression to variable ZA
            var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_ZA_read = true;
            if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_ZA = SCALAR_DOUBLE;
            // assign expression to variable AWR
            var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_AWR_read = true;
            if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_AWR = SCALAR_DOUBLE;
            // assign expression to variable LFC
            var_LFC_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
            aux_LFC_read = true;
            if ((aux_last_type_read_for_LFC != SCALAR_INT && aux_last_type_read_for_LFC != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LFC = SCALAR_INT;
            cpp_line = cpp_read_line(cont);
            // read LIST record
            // assign expression to variable NPLY
            var_NPLY_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
            aux_NPLY_read = true;
            if ((aux_last_type_read_for_NPLY != SCALAR_INT && aux_last_type_read_for_NPLY != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NPLY = SCALAR_INT;
            if ((! (aux_NPLY_read == true))) {
              // assign expression to variable cpp_int_val
              cpp_int_val = cpp_read_int_field(cpp_line, 4);
              aux_cpp_int_val_read = true;
              if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_cpp_int_val = SCALAR_INT;
              // assign expression to variable NPLY
              var_NPLY_0d_int_Scalar = ((cpp_int_val+(-18))/18);
              aux_NPLY_read = true;
              if ((aux_last_type_read_for_NPLY != SCALAR_INT && aux_last_type_read_for_NPLY != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NPLY = SCALAR_INT;
            }
            if ((! (aux_NPLY_read == true))) {
              // assign expression to variable cpp_int_val
              cpp_int_val = cpp_read_int_field(cpp_line, 5);
              aux_cpp_int_val_read = true;
              if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_cpp_int_val = SCALAR_INT;
              // assign expression to variable NPLY
              var_NPLY_0d_int_Scalar = ((cpp_int_val+(-9))/9);
              aux_NPLY_read = true;
              if ((aux_last_type_read_for_NPLY != SCALAR_INT && aux_last_type_read_for_NPLY != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NPLY = SCALAR_INT;
            }
            {
              int cpp_npl = cpp_read_int_field(cpp_line, 4);
              cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
              int cpp_j = 0;
              // read LIST body

              for (int var_k_0d_int_Scalar = 0;
                 var_k_0d_int_Scalar <= var_NPLY_0d_int_Scalar; var_k_0d_int_Scalar++) {
                bool aux_k_read = true;
                // read LIST body
                // assign expression to variable c_EFR
                var_c_EFR_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_c_EFR != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_c_EFR != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_c_EFR = NESTEDVECTOR_DOUBLE;
                // assign expression to variable dc_EFR
                var_dc_EFR_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_dc_EFR != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_dc_EFR != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_dc_EFR = NESTEDVECTOR_DOUBLE;
                // assign expression to variable c_ENP
                var_c_ENP_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_c_ENP != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_c_ENP != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_c_ENP = NESTEDVECTOR_DOUBLE;
                // assign expression to variable dc_ENP
                var_dc_ENP_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_dc_ENP != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_dc_ENP != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_dc_ENP = NESTEDVECTOR_DOUBLE;
                // assign expression to variable c_END
                var_c_END_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_c_END != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_c_END != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_c_END = NESTEDVECTOR_DOUBLE;
                // assign expression to variable dc_END
                var_dc_END_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_dc_END != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_dc_END != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_dc_END = NESTEDVECTOR_DOUBLE;
                // assign expression to variable c_EGP
                var_c_EGP_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_c_EGP != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_c_EGP != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_c_EGP = NESTEDVECTOR_DOUBLE;
                // assign expression to variable dc_EGP
                var_dc_EGP_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_dc_EGP != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_dc_EGP != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_dc_EGP = NESTEDVECTOR_DOUBLE;
                // assign expression to variable c_EGD
                var_c_EGD_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_c_EGD != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_c_EGD != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_c_EGD = NESTEDVECTOR_DOUBLE;
                // assign expression to variable dc_EGD
                var_dc_EGD_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_dc_EGD != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_dc_EGD != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_dc_EGD = NESTEDVECTOR_DOUBLE;
                // assign expression to variable c_EB
                var_c_EB_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_c_EB != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_c_EB != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_c_EB = NESTEDVECTOR_DOUBLE;
                // assign expression to variable dc_EB
                var_dc_EB_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_dc_EB != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_dc_EB != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_dc_EB = NESTEDVECTOR_DOUBLE;
                // assign expression to variable c_ENU
                var_c_ENU_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_c_ENU != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_c_ENU != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_c_ENU = NESTEDVECTOR_DOUBLE;
                // assign expression to variable dc_ENU
                var_dc_ENU_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_dc_ENU != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_dc_ENU != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_dc_ENU = NESTEDVECTOR_DOUBLE;
                // assign expression to variable c_ER
                var_c_ER_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_c_ER != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_c_ER != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_c_ER = NESTEDVECTOR_DOUBLE;
                // assign expression to variable dc_ER
                var_dc_ER_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_dc_ER != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_dc_ER != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_dc_ER = NESTEDVECTOR_DOUBLE;
                // assign expression to variable c_ET
                var_c_ET_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_c_ET != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_c_ET != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_c_ET = NESTEDVECTOR_DOUBLE;
                // assign expression to variable dc_ET
                var_dc_ET_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_dc_ET != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_dc_ET != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_dc_ET = NESTEDVECTOR_DOUBLE;
              }
            }
          }
        }
      }
    }
    if (! cpp_found_match) {
      if (! cpp_found_match) {
        // if statement evaluation with lookahead
        {
          std::streampos cpp_old_streampos = cont.tellg();
          {
            // variable declarations
            int& glob_var_MAT_0d_int_Scalar = var_MAT_0d_int_Scalar;
            int var_MAT_0d_int_Scalar = glob_var_MAT_0d_int_Scalar;
            bool& glob_aux_MAT_read = aux_MAT_read;
            bool aux_MAT_read = glob_aux_MAT_read;
            vartype aux_last_type_read_for_MAT = UNKNOWN;
            int& glob_var_MF_0d_int_Scalar = var_MF_0d_int_Scalar;
            int var_MF_0d_int_Scalar = glob_var_MF_0d_int_Scalar;
            bool& glob_aux_MF_read = aux_MF_read;
            bool aux_MF_read = glob_aux_MF_read;
            vartype aux_last_type_read_for_MF = UNKNOWN;
            int& glob_var_MT_0d_int_Scalar = var_MT_0d_int_Scalar;
            int var_MT_0d_int_Scalar = glob_var_MT_0d_int_Scalar;
            bool& glob_aux_MT_read = aux_MT_read;
            bool aux_MT_read = glob_aux_MT_read;
            vartype aux_last_type_read_for_MT = UNKNOWN;
            double& glob_var_ZA_0d_double_Scalar = var_ZA_0d_double_Scalar;
            double var_ZA_0d_double_Scalar = glob_var_ZA_0d_double_Scalar;
            bool& glob_aux_ZA_read = aux_ZA_read;
            bool aux_ZA_read = glob_aux_ZA_read;
            vartype aux_last_type_read_for_ZA = UNKNOWN;
            double& glob_var_AWR_0d_double_Scalar = var_AWR_0d_double_Scalar;
            double var_AWR_0d_double_Scalar = glob_var_AWR_0d_double_Scalar;
            bool& glob_aux_AWR_read = aux_AWR_read;
            bool aux_AWR_read = glob_aux_AWR_read;
            vartype aux_last_type_read_for_AWR = UNKNOWN;
            int& glob_var_LFC_0d_int_Scalar = var_LFC_0d_int_Scalar;
            int var_LFC_0d_int_Scalar = glob_var_LFC_0d_int_Scalar;
            bool& glob_aux_LFC_read = aux_LFC_read;
            bool aux_LFC_read = glob_aux_LFC_read;
            vartype aux_last_type_read_for_LFC = UNKNOWN;
            int& glob_var_NFC_0d_int_Scalar = var_NFC_0d_int_Scalar;
            int var_NFC_0d_int_Scalar = glob_var_NFC_0d_int_Scalar;
            bool& glob_aux_NFC_read = aux_NFC_read;
            bool aux_NFC_read = glob_aux_NFC_read;
            vartype aux_last_type_read_for_NFC = UNKNOWN;
            int& glob_var_NPLY_0d_int_Scalar = var_NPLY_0d_int_Scalar;
            int var_NPLY_0d_int_Scalar = glob_var_NPLY_0d_int_Scalar;
            bool& glob_aux_NPLY_read = aux_NPLY_read;
            bool aux_NPLY_read = glob_aux_NPLY_read;
            vartype aux_last_type_read_for_NPLY = UNKNOWN;
            cpp_line = cpp_read_line(cont);
            // read CONT record
            // assign expression to variable ZA
            var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_ZA_read = true;
            if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_ZA = SCALAR_DOUBLE;
            // assign expression to variable AWR
            var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_AWR_read = true;
            if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_AWR = SCALAR_DOUBLE;
            // assign expression to variable LFC
            var_LFC_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
            aux_LFC_read = true;
            if ((aux_last_type_read_for_LFC != SCALAR_INT && aux_last_type_read_for_LFC != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LFC = SCALAR_INT;
            // assign expression to variable NFC
            var_NFC_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
            aux_NFC_read = true;
            if ((aux_last_type_read_for_NFC != SCALAR_INT && aux_last_type_read_for_NFC != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NFC = SCALAR_INT;
            cpp_line = cpp_read_line(cont);
            // read LIST record
            // assign expression to variable NPLY
            var_NPLY_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
            aux_NPLY_read = true;
            if ((aux_last_type_read_for_NPLY != SCALAR_INT && aux_last_type_read_for_NPLY != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NPLY = SCALAR_INT;
            if (((((((((aux_LFC_read == true)) && ((var_LFC_0d_int_Scalar)==(1)))))&&((((aux_NPLY_read == true)) && ((var_NPLY_0d_int_Scalar)==(0)))))))) {
              cpp_found_match = true;
            }
            cont.seekg(cpp_old_streampos);
          }
          if (cpp_found_match) {
            cpp_line = cpp_read_line(cont);
            // read CONT record
            // assign expression to variable ZA
            var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_ZA_read = true;
            if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_ZA = SCALAR_DOUBLE;
            // assign expression to variable AWR
            var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_AWR_read = true;
            if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_AWR = SCALAR_DOUBLE;
            // assign expression to variable LFC
            var_LFC_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
            aux_LFC_read = true;
            if ((aux_last_type_read_for_LFC != SCALAR_INT && aux_last_type_read_for_LFC != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LFC = SCALAR_INT;
            // assign expression to variable NFC
            var_NFC_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
            aux_NFC_read = true;
            if ((aux_last_type_read_for_NFC != SCALAR_INT && aux_last_type_read_for_NFC != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NFC = SCALAR_INT;
            cpp_line = cpp_read_line(cont);
            // read LIST record
            // assign expression to variable NPLY
            var_NPLY_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
            aux_NPLY_read = true;
            if ((aux_last_type_read_for_NPLY != SCALAR_INT && aux_last_type_read_for_NPLY != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NPLY = SCALAR_INT;
            {
              int cpp_npl = cpp_read_int_field(cpp_line, 4);
              cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
              int cpp_j = 0;
              // read LIST body
              // assign expression to variable EFR
              var_EFR_0d_double_Scalar = cpp_floatvec[cpp_j++];
              aux_EFR_read = true;
              if ((aux_last_type_read_for_EFR != SCALAR_DOUBLE && aux_last_type_read_for_EFR != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_EFR = SCALAR_DOUBLE;
              // assign expression to variable dEFR
              var_dEFR_0d_double_Scalar = cpp_floatvec[cpp_j++];
              aux_dEFR_read = true;
              if ((aux_last_type_read_for_dEFR != SCALAR_DOUBLE && aux_last_type_read_for_dEFR != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_dEFR = SCALAR_DOUBLE;
              // assign expression to variable ENP
              var_ENP_0d_double_Scalar = cpp_floatvec[cpp_j++];
              aux_ENP_read = true;
              if ((aux_last_type_read_for_ENP != SCALAR_DOUBLE && aux_last_type_read_for_ENP != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_ENP = SCALAR_DOUBLE;
              // assign expression to variable dENP
              var_dENP_0d_double_Scalar = cpp_floatvec[cpp_j++];
              aux_dENP_read = true;
              if ((aux_last_type_read_for_dENP != SCALAR_DOUBLE && aux_last_type_read_for_dENP != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_dENP = SCALAR_DOUBLE;
              // assign expression to variable END
              var_END_0d_double_Scalar = cpp_floatvec[cpp_j++];
              aux_END_read = true;
              if ((aux_last_type_read_for_END != SCALAR_DOUBLE && aux_last_type_read_for_END != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_END = SCALAR_DOUBLE;
              // assign expression to variable dEND
              var_dEND_0d_double_Scalar = cpp_floatvec[cpp_j++];
              aux_dEND_read = true;
              if ((aux_last_type_read_for_dEND != SCALAR_DOUBLE && aux_last_type_read_for_dEND != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_dEND = SCALAR_DOUBLE;
              // assign expression to variable EGP
              var_EGP_0d_double_Scalar = cpp_floatvec[cpp_j++];
              aux_EGP_read = true;
              if ((aux_last_type_read_for_EGP != SCALAR_DOUBLE && aux_last_type_read_for_EGP != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_EGP = SCALAR_DOUBLE;
              // assign expression to variable dEGP
              var_dEGP_0d_double_Scalar = cpp_floatvec[cpp_j++];
              aux_dEGP_read = true;
              if ((aux_last_type_read_for_dEGP != SCALAR_DOUBLE && aux_last_type_read_for_dEGP != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_dEGP = SCALAR_DOUBLE;
              // assign expression to variable EGD
              var_EGD_0d_double_Scalar = cpp_floatvec[cpp_j++];
              aux_EGD_read = true;
              if ((aux_last_type_read_for_EGD != SCALAR_DOUBLE && aux_last_type_read_for_EGD != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_EGD = SCALAR_DOUBLE;
              // assign expression to variable dEGD
              var_dEGD_0d_double_Scalar = cpp_floatvec[cpp_j++];
              aux_dEGD_read = true;
              if ((aux_last_type_read_for_dEGD != SCALAR_DOUBLE && aux_last_type_read_for_dEGD != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_dEGD = SCALAR_DOUBLE;
              // assign expression to variable EB
              var_EB_0d_double_Scalar = cpp_floatvec[cpp_j++];
              aux_EB_read = true;
              if ((aux_last_type_read_for_EB != SCALAR_DOUBLE && aux_last_type_read_for_EB != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_EB = SCALAR_DOUBLE;
              // assign expression to variable dEB
              var_dEB_0d_double_Scalar = cpp_floatvec[cpp_j++];
              aux_dEB_read = true;
              if ((aux_last_type_read_for_dEB != SCALAR_DOUBLE && aux_last_type_read_for_dEB != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_dEB = SCALAR_DOUBLE;
              // assign expression to variable ENU
              var_ENU_0d_double_Scalar = cpp_floatvec[cpp_j++];
              aux_ENU_read = true;
              if ((aux_last_type_read_for_ENU != SCALAR_DOUBLE && aux_last_type_read_for_ENU != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_ENU = SCALAR_DOUBLE;
              // assign expression to variable dENU
              var_dENU_0d_double_Scalar = cpp_floatvec[cpp_j++];
              aux_dENU_read = true;
              if ((aux_last_type_read_for_dENU != SCALAR_DOUBLE && aux_last_type_read_for_dENU != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_dENU = SCALAR_DOUBLE;
              // assign expression to variable ER
              var_ER_0d_double_Scalar = cpp_floatvec[cpp_j++];
              aux_ER_read = true;
              if ((aux_last_type_read_for_ER != SCALAR_DOUBLE && aux_last_type_read_for_ER != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_ER = SCALAR_DOUBLE;
              // assign expression to variable dER
              var_dER_0d_double_Scalar = cpp_floatvec[cpp_j++];
              aux_dER_read = true;
              if ((aux_last_type_read_for_dER != SCALAR_DOUBLE && aux_last_type_read_for_dER != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_dER = SCALAR_DOUBLE;
              // assign expression to variable ET
              var_ET_0d_double_Scalar = cpp_floatvec[cpp_j++];
              aux_ET_read = true;
              if ((aux_last_type_read_for_ET != SCALAR_DOUBLE && aux_last_type_read_for_ET != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_ET = SCALAR_DOUBLE;
              // assign expression to variable dET
              var_dET_0d_double_Scalar = cpp_floatvec[cpp_j++];
              aux_dET_read = true;
              if ((aux_last_type_read_for_dET != SCALAR_DOUBLE && aux_last_type_read_for_dET != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_dET = SCALAR_DOUBLE;
            }

            for (int var_k_0d_int_Scalar = 1;
               var_k_0d_int_Scalar <= var_NFC_0d_int_Scalar; var_k_0d_int_Scalar++) {
              bool aux_k_read = true;
              // read TAB1 record
              cpp_line = cpp_read_line(cont);
              // assign expression to variable LDRV
              var_LDRV_1d_int_NestedVector.set(var_k_0d_int_Scalar, cpp_read_int_field(cpp_line, 2));
              if ((aux_last_type_read_for_LDRV != NESTEDVECTOR_INT && aux_last_type_read_for_LDRV != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_LDRV = NESTEDVECTOR_INT;
              // assign expression to variable IFC
              var_IFC_1d_int_NestedVector.set(var_k_0d_int_Scalar, cpp_read_int_field(cpp_line, 3));
              if ((aux_last_type_read_for_IFC != NESTEDVECTOR_INT && aux_last_type_read_for_IFC != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_IFC = NESTEDVECTOR_INT;

              {
                  py::dict cpp_parent_dict = cpp_current_dict;
                  if (! cpp_parent_dict.contains("fiscomp")) {
                    cpp_parent_dict["fiscomp"] = py::dict();
                  }
                  py::dict cpp_current_dict = cpp_parent_dict["fiscomp"];

                  if (! cpp_current_dict.contains(py::cast(var_k_0d_int_Scalar))) {
                    cpp_current_dict[py::cast(var_k_0d_int_Scalar)] = py::dict();
                  }
                  cpp_current_dict = cpp_current_dict[py::cast(var_k_0d_int_Scalar)];
                // variable declarations
                std::vector<double> var_Eint_0d_floatvec_Scalar;
                bool aux_Eint_read = false;
                vartype aux_last_type_read_for_Eint = UNKNOWN;
                std::vector<double> var_EIFC_0d_floatvec_Scalar;
                bool aux_EIFC_read = false;
                vartype aux_last_type_read_for_EIFC = UNKNOWN;
                std::vector<int> var_INT_0d_intvec_Scalar;
                bool aux_INT_read = false;
                vartype aux_last_type_read_for_INT = UNKNOWN;
                std::vector<int> var_NBT_0d_intvec_Scalar;
                bool aux_NBT_read = false;
                vartype aux_last_type_read_for_NBT = UNKNOWN;
                {
                  Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                  // assign expression to variable Eint
                  var_Eint_0d_floatvec_Scalar = tab_body.X;
                  aux_Eint_read = true;
                  if ((aux_last_type_read_for_Eint != SCALAR_FLOATVEC && aux_last_type_read_for_Eint != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_Eint = SCALAR_FLOATVEC;
                  // assign expression to variable EIFC
                  var_EIFC_0d_floatvec_Scalar = tab_body.Y;
                  aux_EIFC_read = true;
                  if ((aux_last_type_read_for_EIFC != SCALAR_FLOATVEC && aux_last_type_read_for_EIFC != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_EIFC = SCALAR_FLOATVEC;
                  // assign expression to variable INT
                  var_INT_0d_intvec_Scalar = tab_body.INT;
                  aux_INT_read = true;
                  if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_INT = SCALAR_INTVEC;
                  // assign expression to variable NBT
                  var_NBT_0d_intvec_Scalar = tab_body.NBT;
                  aux_NBT_read = true;
                  if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_NBT = SCALAR_INTVEC;
                }
                // store data in Python dictionary
                if (((aux_last_type_read_for_Eint == SCALAR_FLOATVEC) && (aux_Eint_read == true))) {
                  cpp_current_dict["Eint"] = var_Eint_0d_floatvec_Scalar;
                }
                if (((aux_last_type_read_for_EIFC == SCALAR_FLOATVEC) && (aux_EIFC_read == true))) {
                  cpp_current_dict["EIFC"] = var_EIFC_0d_floatvec_Scalar;
                }
                if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
                  cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
                }
                if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
                  cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
                }
                cpp_current_dict = cpp_parent_dict;
              }
            }
          }
        }
      }
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LFC == SCALAR_INT) && (aux_LFC_read == true))) {
    cpp_current_dict["LFC"] = var_LFC_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NPLY == SCALAR_INT) && (aux_NPLY_read == true))) {
    cpp_current_dict["NPLY"] = var_NPLY_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_EFR == SCALAR_DOUBLE) && (aux_EFR_read == true))) {
    cpp_current_dict["EFR"] = var_EFR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_dEFR == SCALAR_DOUBLE) && (aux_dEFR_read == true))) {
    cpp_current_dict["dEFR"] = var_dEFR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_ENP == SCALAR_DOUBLE) && (aux_ENP_read == true))) {
    cpp_current_dict["ENP"] = var_ENP_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_dENP == SCALAR_DOUBLE) && (aux_dENP_read == true))) {
    cpp_current_dict["dENP"] = var_dENP_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_END == SCALAR_DOUBLE) && (aux_END_read == true))) {
    cpp_current_dict["END"] = var_END_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_dEND == SCALAR_DOUBLE) && (aux_dEND_read == true))) {
    cpp_current_dict["dEND"] = var_dEND_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_EGP == SCALAR_DOUBLE) && (aux_EGP_read == true))) {
    cpp_current_dict["EGP"] = var_EGP_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_dEGP == SCALAR_DOUBLE) && (aux_dEGP_read == true))) {
    cpp_current_dict["dEGP"] = var_dEGP_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_EGD == SCALAR_DOUBLE) && (aux_EGD_read == true))) {
    cpp_current_dict["EGD"] = var_EGD_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_dEGD == SCALAR_DOUBLE) && (aux_dEGD_read == true))) {
    cpp_current_dict["dEGD"] = var_dEGD_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_EB == SCALAR_DOUBLE) && (aux_EB_read == true))) {
    cpp_current_dict["EB"] = var_EB_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_dEB == SCALAR_DOUBLE) && (aux_dEB_read == true))) {
    cpp_current_dict["dEB"] = var_dEB_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_ENU == SCALAR_DOUBLE) && (aux_ENU_read == true))) {
    cpp_current_dict["ENU"] = var_ENU_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_dENU == SCALAR_DOUBLE) && (aux_dENU_read == true))) {
    cpp_current_dict["dENU"] = var_dENU_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_ER == SCALAR_DOUBLE) && (aux_ER_read == true))) {
    cpp_current_dict["ER"] = var_ER_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_dER == SCALAR_DOUBLE) && (aux_dER_read == true))) {
    cpp_current_dict["dER"] = var_dER_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_ET == SCALAR_DOUBLE) && (aux_ET_read == true))) {
    cpp_current_dict["ET"] = var_ET_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_dET == SCALAR_DOUBLE) && (aux_dET_read == true))) {
    cpp_current_dict["dET"] = var_dET_0d_double_Scalar;
  }
  if ((var_c_EFR_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_c_EFR_1d_double_NestedVector;
    cpp_current_dict["c_EFR"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["c_EFR"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_dc_EFR_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_dc_EFR_1d_double_NestedVector;
    cpp_current_dict["dc_EFR"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["dc_EFR"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_c_ENP_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_c_ENP_1d_double_NestedVector;
    cpp_current_dict["c_ENP"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["c_ENP"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_dc_ENP_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_dc_ENP_1d_double_NestedVector;
    cpp_current_dict["dc_ENP"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["dc_ENP"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_c_END_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_c_END_1d_double_NestedVector;
    cpp_current_dict["c_END"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["c_END"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_dc_END_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_dc_END_1d_double_NestedVector;
    cpp_current_dict["dc_END"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["dc_END"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_c_EGP_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_c_EGP_1d_double_NestedVector;
    cpp_current_dict["c_EGP"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["c_EGP"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_dc_EGP_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_dc_EGP_1d_double_NestedVector;
    cpp_current_dict["dc_EGP"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["dc_EGP"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_c_EGD_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_c_EGD_1d_double_NestedVector;
    cpp_current_dict["c_EGD"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["c_EGD"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_dc_EGD_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_dc_EGD_1d_double_NestedVector;
    cpp_current_dict["dc_EGD"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["dc_EGD"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_c_EB_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_c_EB_1d_double_NestedVector;
    cpp_current_dict["c_EB"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["c_EB"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_dc_EB_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_dc_EB_1d_double_NestedVector;
    cpp_current_dict["dc_EB"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["dc_EB"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_c_ENU_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_c_ENU_1d_double_NestedVector;
    cpp_current_dict["c_ENU"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["c_ENU"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_dc_ENU_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_dc_ENU_1d_double_NestedVector;
    cpp_current_dict["dc_ENU"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["dc_ENU"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_c_ER_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_c_ER_1d_double_NestedVector;
    cpp_current_dict["c_ER"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["c_ER"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_dc_ER_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_dc_ER_1d_double_NestedVector;
    cpp_current_dict["dc_ER"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["dc_ER"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_c_ET_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_c_ET_1d_double_NestedVector;
    cpp_current_dict["c_ET"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["c_ET"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_dc_ET_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_dc_ET_1d_double_NestedVector;
    cpp_current_dict["dc_ET"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["dc_ET"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if (((aux_last_type_read_for_NFC == SCALAR_INT) && (aux_NFC_read == true))) {
    cpp_current_dict["NFC"] = var_NFC_0d_int_Scalar;
  }
  if ((var_LDRV_1d_int_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_LDRV_1d_int_NestedVector;
    cpp_current_dict["LDRV"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["LDRV"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_IFC_1d_int_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_IFC_1d_int_NestedVector;
    cpp_current_dict["IFC"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["IFC"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  return cpp_current_dict;
}

py::dict parse_mf1mt460_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_LO_0d_int_Scalar;
  bool aux_LO_read = false;
  vartype aux_last_type_read_for_LO = UNKNOWN;
  int var_NG_0d_int_Scalar;
  bool aux_NG_read = false;
  vartype aux_last_type_read_for_NG = UNKNOWN;
  NestedVector<double> var_E_1d_double_NestedVector;
  vartype aux_last_type_read_for_E = UNKNOWN;
  NestedVector<std::vector<double>> var_tint_1d_floatvec_NestedVector;
  vartype aux_last_type_read_for_tint = UNKNOWN;
  NestedVector<std::vector<double>> var_T_1d_floatvec_NestedVector;
  vartype aux_last_type_read_for_T = UNKNOWN;
  std::vector<int> var_INT_0d_intvec_Scalar;
  bool aux_INT_read = false;
  vartype aux_last_type_read_for_INT = UNKNOWN;
  std::vector<int> var_NBT_0d_intvec_Scalar;
  bool aux_NBT_read = false;
  vartype aux_last_type_read_for_NBT = UNKNOWN;
  int var_NNF_0d_int_Scalar;
  bool aux_NNF_read = false;
  vartype aux_last_type_read_for_NNF = UNKNOWN;
  NestedVector<double> var_lambda_1d_double_NestedVector;
  vartype aux_last_type_read_for_lambda = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  // evaluate if-elif-else clause
  {
    bool cpp_found_match = false;
    if (! cpp_found_match) {
      // if statement evaluation with lookahead
      {
        std::streampos cpp_old_streampos = cont.tellg();
        {
          // variable declarations
          int& glob_var_MAT_0d_int_Scalar = var_MAT_0d_int_Scalar;
          int var_MAT_0d_int_Scalar = glob_var_MAT_0d_int_Scalar;
          bool& glob_aux_MAT_read = aux_MAT_read;
          bool aux_MAT_read = glob_aux_MAT_read;
          vartype aux_last_type_read_for_MAT = UNKNOWN;
          int& glob_var_MF_0d_int_Scalar = var_MF_0d_int_Scalar;
          int var_MF_0d_int_Scalar = glob_var_MF_0d_int_Scalar;
          bool& glob_aux_MF_read = aux_MF_read;
          bool aux_MF_read = glob_aux_MF_read;
          vartype aux_last_type_read_for_MF = UNKNOWN;
          int& glob_var_MT_0d_int_Scalar = var_MT_0d_int_Scalar;
          int var_MT_0d_int_Scalar = glob_var_MT_0d_int_Scalar;
          bool& glob_aux_MT_read = aux_MT_read;
          bool aux_MT_read = glob_aux_MT_read;
          vartype aux_last_type_read_for_MT = UNKNOWN;
          double& glob_var_ZA_0d_double_Scalar = var_ZA_0d_double_Scalar;
          double var_ZA_0d_double_Scalar = glob_var_ZA_0d_double_Scalar;
          bool& glob_aux_ZA_read = aux_ZA_read;
          bool aux_ZA_read = glob_aux_ZA_read;
          vartype aux_last_type_read_for_ZA = UNKNOWN;
          double& glob_var_AWR_0d_double_Scalar = var_AWR_0d_double_Scalar;
          double var_AWR_0d_double_Scalar = glob_var_AWR_0d_double_Scalar;
          bool& glob_aux_AWR_read = aux_AWR_read;
          bool aux_AWR_read = glob_aux_AWR_read;
          vartype aux_last_type_read_for_AWR = UNKNOWN;
          int& glob_var_LO_0d_int_Scalar = var_LO_0d_int_Scalar;
          int var_LO_0d_int_Scalar = glob_var_LO_0d_int_Scalar;
          bool& glob_aux_LO_read = aux_LO_read;
          bool aux_LO_read = glob_aux_LO_read;
          vartype aux_last_type_read_for_LO = UNKNOWN;
          int& glob_var_NG_0d_int_Scalar = var_NG_0d_int_Scalar;
          int var_NG_0d_int_Scalar = glob_var_NG_0d_int_Scalar;
          bool& glob_aux_NG_read = aux_NG_read;
          bool aux_NG_read = glob_aux_NG_read;
          vartype aux_last_type_read_for_NG = UNKNOWN;
          cpp_line = cpp_read_line(cont);
          // read CONT record
          // assign expression to variable ZA
          var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
          aux_ZA_read = true;
          if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_ZA = SCALAR_DOUBLE;
          // assign expression to variable AWR
          var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
          aux_AWR_read = true;
          if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_AWR = SCALAR_DOUBLE;
          // assign expression to variable LO
          var_LO_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
          aux_LO_read = true;
          if ((aux_last_type_read_for_LO != SCALAR_INT && aux_last_type_read_for_LO != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_LO = SCALAR_INT;
          // assign expression to variable NG
          var_NG_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
          aux_NG_read = true;
          if ((aux_last_type_read_for_NG != SCALAR_INT && aux_last_type_read_for_NG != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NG = SCALAR_INT;
          if ((((((((aux_LO_read == true)) && ((var_LO_0d_int_Scalar)==(1)))))))) {
            cpp_found_match = true;
          }
          cont.seekg(cpp_old_streampos);
        }
        if (cpp_found_match) {
          cpp_line = cpp_read_line(cont);
          // read CONT record
          // assign expression to variable ZA
          var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
          aux_ZA_read = true;
          if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_ZA = SCALAR_DOUBLE;
          // assign expression to variable AWR
          var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
          aux_AWR_read = true;
          if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_AWR = SCALAR_DOUBLE;
          // assign expression to variable LO
          var_LO_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
          aux_LO_read = true;
          if ((aux_last_type_read_for_LO != SCALAR_INT && aux_last_type_read_for_LO != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_LO = SCALAR_INT;
          // assign expression to variable NG
          var_NG_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
          aux_NG_read = true;
          if ((aux_last_type_read_for_NG != SCALAR_INT && aux_last_type_read_for_NG != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NG = SCALAR_INT;

          for (int var_i_0d_int_Scalar = 1;
             var_i_0d_int_Scalar <= var_NG_0d_int_Scalar; var_i_0d_int_Scalar++) {
            bool aux_i_read = true;
            // read TAB1 record
            cpp_line = cpp_read_line(cont);
            // assign expression to variable E
            var_E_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 0));
            if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
            if ((! (aux_i_read == true))) {
              // assign expression to variable i
            }
            {
              Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
              // assign expression to variable tint
              var_tint_1d_floatvec_NestedVector.set(var_i_0d_int_Scalar, tab_body.X);
              if ((aux_last_type_read_for_tint != NESTEDVECTOR_FLOATVEC && aux_last_type_read_for_tint != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_tint = NESTEDVECTOR_FLOATVEC;
              // assign expression to variable T
              var_T_1d_floatvec_NestedVector.set(var_i_0d_int_Scalar, tab_body.Y);
              if ((aux_last_type_read_for_T != NESTEDVECTOR_FLOATVEC && aux_last_type_read_for_T != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_T = NESTEDVECTOR_FLOATVEC;
              // assign expression to variable INT
              var_INT_0d_intvec_Scalar = tab_body.INT;
              aux_INT_read = true;
              if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_INT = SCALAR_INTVEC;
              // assign expression to variable NBT
              var_NBT_0d_intvec_Scalar = tab_body.NBT;
              aux_NBT_read = true;
              if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NBT = SCALAR_INTVEC;
            }
          }
        }
      }
    }
    if (! cpp_found_match) {
      if (! cpp_found_match) {
        // if statement evaluation with lookahead
        {
          std::streampos cpp_old_streampos = cont.tellg();
          {
            // variable declarations
            int& glob_var_MAT_0d_int_Scalar = var_MAT_0d_int_Scalar;
            int var_MAT_0d_int_Scalar = glob_var_MAT_0d_int_Scalar;
            bool& glob_aux_MAT_read = aux_MAT_read;
            bool aux_MAT_read = glob_aux_MAT_read;
            vartype aux_last_type_read_for_MAT = UNKNOWN;
            int& glob_var_MF_0d_int_Scalar = var_MF_0d_int_Scalar;
            int var_MF_0d_int_Scalar = glob_var_MF_0d_int_Scalar;
            bool& glob_aux_MF_read = aux_MF_read;
            bool aux_MF_read = glob_aux_MF_read;
            vartype aux_last_type_read_for_MF = UNKNOWN;
            int& glob_var_MT_0d_int_Scalar = var_MT_0d_int_Scalar;
            int var_MT_0d_int_Scalar = glob_var_MT_0d_int_Scalar;
            bool& glob_aux_MT_read = aux_MT_read;
            bool aux_MT_read = glob_aux_MT_read;
            vartype aux_last_type_read_for_MT = UNKNOWN;
            double& glob_var_ZA_0d_double_Scalar = var_ZA_0d_double_Scalar;
            double var_ZA_0d_double_Scalar = glob_var_ZA_0d_double_Scalar;
            bool& glob_aux_ZA_read = aux_ZA_read;
            bool aux_ZA_read = glob_aux_ZA_read;
            vartype aux_last_type_read_for_ZA = UNKNOWN;
            double& glob_var_AWR_0d_double_Scalar = var_AWR_0d_double_Scalar;
            double var_AWR_0d_double_Scalar = glob_var_AWR_0d_double_Scalar;
            bool& glob_aux_AWR_read = aux_AWR_read;
            bool aux_AWR_read = glob_aux_AWR_read;
            vartype aux_last_type_read_for_AWR = UNKNOWN;
            int& glob_var_LO_0d_int_Scalar = var_LO_0d_int_Scalar;
            int var_LO_0d_int_Scalar = glob_var_LO_0d_int_Scalar;
            bool& glob_aux_LO_read = aux_LO_read;
            bool aux_LO_read = glob_aux_LO_read;
            vartype aux_last_type_read_for_LO = UNKNOWN;
            cpp_line = cpp_read_line(cont);
            // read CONT record
            // assign expression to variable ZA
            var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_ZA_read = true;
            if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_ZA = SCALAR_DOUBLE;
            // assign expression to variable AWR
            var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_AWR_read = true;
            if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_AWR = SCALAR_DOUBLE;
            // assign expression to variable LO
            var_LO_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
            aux_LO_read = true;
            if ((aux_last_type_read_for_LO != SCALAR_INT && aux_last_type_read_for_LO != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LO = SCALAR_INT;
            if ((((((((aux_LO_read == true)) && ((var_LO_0d_int_Scalar)==(2)))))))) {
              cpp_found_match = true;
            }
            cont.seekg(cpp_old_streampos);
          }
          if (cpp_found_match) {
            cpp_line = cpp_read_line(cont);
            // read CONT record
            // assign expression to variable ZA
            var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_ZA_read = true;
            if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_ZA = SCALAR_DOUBLE;
            // assign expression to variable AWR
            var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_AWR_read = true;
            if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_AWR = SCALAR_DOUBLE;
            // assign expression to variable LO
            var_LO_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
            aux_LO_read = true;
            if ((aux_last_type_read_for_LO != SCALAR_INT && aux_last_type_read_for_LO != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LO = SCALAR_INT;
            cpp_line = cpp_read_line(cont);
            // read LIST record
            // assign expression to variable NNF
            var_NNF_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
            aux_NNF_read = true;
            if ((aux_last_type_read_for_NNF != SCALAR_INT && aux_last_type_read_for_NNF != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NNF = SCALAR_INT;
            {
              int cpp_npl = cpp_read_int_field(cpp_line, 4);
              cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
              int cpp_j = 0;
              // read LIST body

              for (int var_i_0d_int_Scalar = 1;
                 var_i_0d_int_Scalar <= var_NNF_0d_int_Scalar; var_i_0d_int_Scalar++) {
                bool aux_i_read = true;
                // read LIST body
                // assign expression to variable lambda
                var_lambda_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_lambda != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_lambda != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_lambda = NESTEDVECTOR_DOUBLE;
              }
            }
          }
        }
      }
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LO == SCALAR_INT) && (aux_LO_read == true))) {
    cpp_current_dict["LO"] = var_LO_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NG == SCALAR_INT) && (aux_NG_read == true))) {
    cpp_current_dict["NG"] = var_NG_0d_int_Scalar;
  }
  if ((var_E_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_E_1d_double_NestedVector;
    cpp_current_dict["E"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["E"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_tint_1d_floatvec_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_tint_1d_floatvec_NestedVector;
    cpp_current_dict["tint"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["tint"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_T_1d_floatvec_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_T_1d_floatvec_NestedVector;
    cpp_current_dict["T"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["T"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
    cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
  }
  if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
    cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
  }
  if (((aux_last_type_read_for_NNF == SCALAR_INT) && (aux_NNF_read == true))) {
    cpp_current_dict["NNF"] = var_NNF_0d_int_Scalar;
  }
  if ((var_lambda_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_lambda_1d_double_NestedVector;
    cpp_current_dict["lambda"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["lambda"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  return cpp_current_dict;
}

py::dict parse_mf2mt151_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_NIS_0d_int_Scalar;
  bool aux_NIS_read = false;
  vartype aux_last_type_read_for_NIS = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // assign expression to variable NIS
  var_NIS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
  aux_NIS_read = true;
  if ((aux_last_type_read_for_NIS != SCALAR_INT && aux_last_type_read_for_NIS != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NIS = SCALAR_INT;

  for (int var_i_0d_int_Scalar = 1;
     var_i_0d_int_Scalar <= var_NIS_0d_int_Scalar; var_i_0d_int_Scalar++) {
    bool aux_i_read = true;
    // open section isotope

    {
        py::dict cpp_parent_dict = cpp_current_dict;
        if (! cpp_parent_dict.contains("isotope")) {
          cpp_parent_dict["isotope"] = py::dict();
        }
        py::dict cpp_current_dict = cpp_parent_dict["isotope"];

        if (! cpp_current_dict.contains(py::cast(var_i_0d_int_Scalar))) {
          cpp_current_dict[py::cast(var_i_0d_int_Scalar)] = py::dict();
        }
        cpp_current_dict = cpp_current_dict[py::cast(var_i_0d_int_Scalar)];
      // variable declarations
      double var_ZAI_0d_double_Scalar;
      bool aux_ZAI_read = false;
      vartype aux_last_type_read_for_ZAI = UNKNOWN;
      double var_ABN_0d_double_Scalar;
      bool aux_ABN_read = false;
      vartype aux_last_type_read_for_ABN = UNKNOWN;
      int var_LFW_0d_int_Scalar;
      bool aux_LFW_read = false;
      vartype aux_last_type_read_for_LFW = UNKNOWN;
      int var_NER_0d_int_Scalar;
      bool aux_NER_read = false;
      vartype aux_last_type_read_for_NER = UNKNOWN;
      cpp_line = cpp_read_line(cont);
      // read CONT record
      // assign expression to variable ZAI
      var_ZAI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
      aux_ZAI_read = true;
      if ((aux_last_type_read_for_ZAI != SCALAR_DOUBLE && aux_last_type_read_for_ZAI != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_ZAI = SCALAR_DOUBLE;
      // assign expression to variable ABN
      var_ABN_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
      aux_ABN_read = true;
      if ((aux_last_type_read_for_ABN != SCALAR_DOUBLE && aux_last_type_read_for_ABN != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_ABN = SCALAR_DOUBLE;
      // assign expression to variable LFW
      var_LFW_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
      aux_LFW_read = true;
      if ((aux_last_type_read_for_LFW != SCALAR_INT && aux_last_type_read_for_LFW != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_LFW = SCALAR_INT;
      // assign expression to variable NER
      var_NER_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
      aux_NER_read = true;
      if ((aux_last_type_read_for_NER != SCALAR_INT && aux_last_type_read_for_NER != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_NER = SCALAR_INT;

      for (int var_j_0d_int_Scalar = 1;
         var_j_0d_int_Scalar <= var_NER_0d_int_Scalar; var_j_0d_int_Scalar++) {
        bool aux_j_read = true;
        // open section range

        {
            py::dict cpp_parent_dict = cpp_current_dict;
            if (! cpp_parent_dict.contains("range")) {
              cpp_parent_dict["range"] = py::dict();
            }
            py::dict cpp_current_dict = cpp_parent_dict["range"];

            if (! cpp_current_dict.contains(py::cast(var_j_0d_int_Scalar))) {
              cpp_current_dict[py::cast(var_j_0d_int_Scalar)] = py::dict();
            }
            cpp_current_dict = cpp_current_dict[py::cast(var_j_0d_int_Scalar)];
          // variable declarations
          double var_EL_0d_double_Scalar;
          bool aux_EL_read = false;
          vartype aux_last_type_read_for_EL = UNKNOWN;
          double var_EH_0d_double_Scalar;
          bool aux_EH_read = false;
          vartype aux_last_type_read_for_EH = UNKNOWN;
          int var_LRU_0d_int_Scalar;
          bool aux_LRU_read = false;
          vartype aux_last_type_read_for_LRU = UNKNOWN;
          int var_LRF_0d_int_Scalar;
          bool aux_LRF_read = false;
          vartype aux_last_type_read_for_LRF = UNKNOWN;
          int var_NRO_0d_int_Scalar;
          bool aux_NRO_read = false;
          vartype aux_last_type_read_for_NRO = UNKNOWN;
          int var_NAPS_0d_int_Scalar;
          bool aux_NAPS_read = false;
          vartype aux_last_type_read_for_NAPS = UNKNOWN;
          double var_SPI_0d_double_Scalar;
          bool aux_SPI_read = false;
          vartype aux_last_type_read_for_SPI = UNKNOWN;
          double var_AP_0d_double_Scalar;
          std::vector<double> var_AP_0d_floatvec_Scalar;
          bool aux_AP_read = false;
          vartype aux_last_type_read_for_AP = UNKNOWN;
          int var_NLS_0d_int_Scalar;
          bool aux_NLS_read = false;
          vartype aux_last_type_read_for_NLS = UNKNOWN;
          std::vector<double> var_Eint_0d_floatvec_Scalar;
          bool aux_Eint_read = false;
          vartype aux_last_type_read_for_Eint = UNKNOWN;
          std::vector<int> var_INT_0d_intvec_Scalar;
          bool aux_INT_read = false;
          vartype aux_last_type_read_for_INT = UNKNOWN;
          std::vector<int> var_NBT_0d_intvec_Scalar;
          bool aux_NBT_read = false;
          vartype aux_last_type_read_for_NBT = UNKNOWN;
          int var_LAD_0d_int_Scalar;
          bool aux_LAD_read = false;
          vartype aux_last_type_read_for_LAD = UNKNOWN;
          int var_NLSC_0d_int_Scalar;
          bool aux_NLSC_read = false;
          vartype aux_last_type_read_for_NLSC = UNKNOWN;
          int var_IFG_0d_int_Scalar;
          bool aux_IFG_read = false;
          vartype aux_last_type_read_for_IFG = UNKNOWN;
          int var_KRM_0d_int_Scalar;
          bool aux_KRM_read = false;
          vartype aux_last_type_read_for_KRM = UNKNOWN;
          int var_NJS_0d_int_Scalar;
          bool aux_NJS_read = false;
          vartype aux_last_type_read_for_NJS = UNKNOWN;
          int var_KRL_0d_int_Scalar;
          bool aux_KRL_read = false;
          vartype aux_last_type_read_for_KRL = UNKNOWN;
          int var_NPP_0d_int_Scalar;
          bool aux_NPP_read = false;
          vartype aux_last_type_read_for_NPP = UNKNOWN;
          int cpp_int_val;
          bool aux_cpp_int_val_read = false;
          vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
          NestedVector<double> var_MA_1d_double_NestedVector;
          vartype aux_last_type_read_for_MA = UNKNOWN;
          NestedVector<double> var_MB_1d_double_NestedVector;
          vartype aux_last_type_read_for_MB = UNKNOWN;
          NestedVector<double> var_ZA_1d_double_NestedVector;
          vartype aux_last_type_read_for_ZA = UNKNOWN;
          NestedVector<double> var_ZB_1d_double_NestedVector;
          vartype aux_last_type_read_for_ZB = UNKNOWN;
          NestedVector<double> var_IA_1d_double_NestedVector;
          vartype aux_last_type_read_for_IA = UNKNOWN;
          NestedVector<double> var_IB_1d_double_NestedVector;
          vartype aux_last_type_read_for_IB = UNKNOWN;
          NestedVector<double> var_Q_1d_double_NestedVector;
          vartype aux_last_type_read_for_Q = UNKNOWN;
          NestedVector<double> var_PNT_1d_double_NestedVector;
          vartype aux_last_type_read_for_PNT = UNKNOWN;
          NestedVector<double> var_SHF_1d_double_NestedVector;
          vartype aux_last_type_read_for_SHF = UNKNOWN;
          NestedVector<double> var_MT_1d_double_NestedVector;
          vartype aux_last_type_read_for_MT = UNKNOWN;
          NestedVector<double> var_PA_1d_double_NestedVector;
          vartype aux_last_type_read_for_PA = UNKNOWN;
          NestedVector<double> var_PB_1d_double_NestedVector;
          vartype aux_last_type_read_for_PB = UNKNOWN;
          int var_LSSF_0d_int_Scalar;
          bool aux_LSSF_read = false;
          vartype aux_last_type_read_for_LSSF = UNKNOWN;
          int var_NE_0d_int_Scalar;
          bool aux_NE_read = false;
          vartype aux_last_type_read_for_NE = UNKNOWN;
          NestedVector<double> var_ES_1d_double_NestedVector;
          vartype aux_last_type_read_for_ES = UNKNOWN;
          cpp_line = cpp_read_line(cont);
          // read CONT record
          // assign expression to variable EL
          var_EL_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
          aux_EL_read = true;
          if ((aux_last_type_read_for_EL != SCALAR_DOUBLE && aux_last_type_read_for_EL != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_EL = SCALAR_DOUBLE;
          // assign expression to variable EH
          var_EH_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
          aux_EH_read = true;
          if ((aux_last_type_read_for_EH != SCALAR_DOUBLE && aux_last_type_read_for_EH != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_EH = SCALAR_DOUBLE;
          // assign expression to variable LRU
          var_LRU_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
          aux_LRU_read = true;
          if ((aux_last_type_read_for_LRU != SCALAR_INT && aux_last_type_read_for_LRU != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_LRU = SCALAR_INT;
          // assign expression to variable LRF
          var_LRF_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
          aux_LRF_read = true;
          if ((aux_last_type_read_for_LRF != SCALAR_INT && aux_last_type_read_for_LRF != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_LRF = SCALAR_INT;
          // assign expression to variable NRO
          var_NRO_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
          aux_NRO_read = true;
          if ((aux_last_type_read_for_NRO != SCALAR_INT && aux_last_type_read_for_NRO != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NRO = SCALAR_INT;
          // assign expression to variable NAPS
          var_NAPS_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
          aux_NAPS_read = true;
          if ((aux_last_type_read_for_NAPS != SCALAR_INT && aux_last_type_read_for_NAPS != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NAPS = SCALAR_INT;
          // evaluate if-elif-else clause
          {
            bool cpp_found_match = false;
            if (! cpp_found_match) {
              if ((((((((((((aux_NIS_read == true)) && ((var_NIS_0d_int_Scalar)==(1)))))&&((((aux_ZAI_read == true)) && ((var_ZAI_0d_double_Scalar)==(var_ZA_0d_double_Scalar)))))&&((((aux_ABN_read == true)) && ((var_ABN_0d_double_Scalar)==(1)))))&&((((aux_LFW_read == true)) && ((var_LFW_0d_int_Scalar)==(0)))))&&((((aux_NER_read == true)) && ((var_NER_0d_int_Scalar)==(1)))))))) {
                // if statement evaluation
                cpp_found_match = true;
                // evaluate if-elif-else clause
                {
                  bool cpp_found_match = false;
                  if (! cpp_found_match) {
                    if (((((((((((aux_LRU_read == true)) && ((var_LRU_0d_int_Scalar)==(0)))))&&((((aux_LRF_read == true)) && ((var_LRF_0d_int_Scalar)==(0)))))&&((((aux_NRO_read == true)) && ((var_NRO_0d_int_Scalar)==(0)))))&&((((aux_NAPS_read == true)) && ((var_NAPS_0d_int_Scalar)==(0)))))))) {
                      // if statement evaluation
                      cpp_found_match = true;
                      // evaluate if-elif-else clause
                      {
                        bool cpp_found_match = false;
                        if (! cpp_found_match) {
                          // if statement evaluation with lookahead
                          {
                            std::streampos cpp_old_streampos = cont.tellg();
                            {
                              // variable declarations
                              double& glob_var_EL_0d_double_Scalar = var_EL_0d_double_Scalar;
                              double var_EL_0d_double_Scalar = glob_var_EL_0d_double_Scalar;
                              bool& glob_aux_EL_read = aux_EL_read;
                              bool aux_EL_read = glob_aux_EL_read;
                              vartype aux_last_type_read_for_EL = UNKNOWN;
                              double& glob_var_EH_0d_double_Scalar = var_EH_0d_double_Scalar;
                              double var_EH_0d_double_Scalar = glob_var_EH_0d_double_Scalar;
                              bool& glob_aux_EH_read = aux_EH_read;
                              bool aux_EH_read = glob_aux_EH_read;
                              vartype aux_last_type_read_for_EH = UNKNOWN;
                              int& glob_var_LRU_0d_int_Scalar = var_LRU_0d_int_Scalar;
                              int var_LRU_0d_int_Scalar = glob_var_LRU_0d_int_Scalar;
                              bool& glob_aux_LRU_read = aux_LRU_read;
                              bool aux_LRU_read = glob_aux_LRU_read;
                              vartype aux_last_type_read_for_LRU = UNKNOWN;
                              int& glob_var_LRF_0d_int_Scalar = var_LRF_0d_int_Scalar;
                              int var_LRF_0d_int_Scalar = glob_var_LRF_0d_int_Scalar;
                              bool& glob_aux_LRF_read = aux_LRF_read;
                              bool aux_LRF_read = glob_aux_LRF_read;
                              vartype aux_last_type_read_for_LRF = UNKNOWN;
                              int& glob_var_NRO_0d_int_Scalar = var_NRO_0d_int_Scalar;
                              int var_NRO_0d_int_Scalar = glob_var_NRO_0d_int_Scalar;
                              bool& glob_aux_NRO_read = aux_NRO_read;
                              bool aux_NRO_read = glob_aux_NRO_read;
                              vartype aux_last_type_read_for_NRO = UNKNOWN;
                              int& glob_var_NAPS_0d_int_Scalar = var_NAPS_0d_int_Scalar;
                              int var_NAPS_0d_int_Scalar = glob_var_NAPS_0d_int_Scalar;
                              bool& glob_aux_NAPS_read = aux_NAPS_read;
                              bool aux_NAPS_read = glob_aux_NAPS_read;
                              vartype aux_last_type_read_for_NAPS = UNKNOWN;
                              double& glob_var_SPI_0d_double_Scalar = var_SPI_0d_double_Scalar;
                              double var_SPI_0d_double_Scalar = glob_var_SPI_0d_double_Scalar;
                              bool& glob_aux_SPI_read = aux_SPI_read;
                              bool aux_SPI_read = glob_aux_SPI_read;
                              vartype aux_last_type_read_for_SPI = UNKNOWN;
                              double& glob_var_AP_0d_double_Scalar = var_AP_0d_double_Scalar;
                              double var_AP_0d_double_Scalar = glob_var_AP_0d_double_Scalar;
                              bool& glob_aux_AP_read = aux_AP_read;
                              bool aux_AP_read = glob_aux_AP_read;
                              vartype aux_last_type_read_for_AP = UNKNOWN;
                              int& glob_var_NLS_0d_int_Scalar = var_NLS_0d_int_Scalar;
                              int var_NLS_0d_int_Scalar = glob_var_NLS_0d_int_Scalar;
                              bool& glob_aux_NLS_read = aux_NLS_read;
                              bool aux_NLS_read = glob_aux_NLS_read;
                              vartype aux_last_type_read_for_NLS = UNKNOWN;
                              cpp_line = cpp_read_line(cont);
                              // read CONT record
                              // assign expression to variable SPI
                              var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                              aux_SPI_read = true;
                              if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_SPI = SCALAR_DOUBLE;
                              // assign expression to variable AP
                              var_AP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                              aux_AP_read = true;
                              if ((aux_last_type_read_for_AP != SCALAR_DOUBLE && aux_last_type_read_for_AP != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_AP = SCALAR_DOUBLE;
                              // assign expression to variable NLS
                              var_NLS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                              aux_NLS_read = true;
                              if ((aux_last_type_read_for_NLS != SCALAR_INT && aux_last_type_read_for_NLS != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_NLS = SCALAR_INT;
                              if ((((((((aux_NLS_read == true)) && ((var_NLS_0d_int_Scalar)==(0)))))))) {
                                cpp_found_match = true;
                              }
                              cont.seekg(cpp_old_streampos);
                            }
                            if (cpp_found_match) {
                              cpp_line = cpp_read_line(cont);
                              // read CONT record
                              // assign expression to variable SPI
                              var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                              aux_SPI_read = true;
                              if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_SPI = SCALAR_DOUBLE;
                              // assign expression to variable AP
                              var_AP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                              aux_AP_read = true;
                              if ((aux_last_type_read_for_AP != SCALAR_DOUBLE && aux_last_type_read_for_AP != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_AP = SCALAR_DOUBLE;
                              // assign expression to variable NLS
                              var_NLS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                              aux_NLS_read = true;
                              if ((aux_last_type_read_for_NLS != SCALAR_INT && aux_last_type_read_for_NLS != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_NLS = SCALAR_INT;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          // evaluate if-elif-else clause
          {
            bool cpp_found_match = false;
            if (! cpp_found_match) {
              if ((((((((aux_LRU_read == true)) && ((var_LRU_0d_int_Scalar)==(1)))))))) {
                // if statement evaluation
                cpp_found_match = true;
                // evaluate if-elif-else clause
                {
                  bool cpp_found_match = false;
                  if (! cpp_found_match) {
                    if (((((((((aux_LRF_read == true)) && ((var_LRF_0d_int_Scalar)==(1))))))||(((((aux_LRF_read == true)) && ((var_LRF_0d_int_Scalar)==(2)))))))) {
                      // if statement evaluation
                      cpp_found_match = true;
                      // evaluate if-elif-else clause
                      {
                        bool cpp_found_match = false;
                        if (! cpp_found_match) {
                          if ((((((((aux_NRO_read == true)) && ((var_NRO_0d_int_Scalar)!=(0)))))))) {
                            // if statement evaluation
                            cpp_found_match = true;
                            // read TAB1 record
                            cpp_line = cpp_read_line(cont);
                            {
                              Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                              // assign expression to variable Eint
                              var_Eint_0d_floatvec_Scalar = tab_body.X;
                              aux_Eint_read = true;
                              if ((aux_last_type_read_for_Eint != SCALAR_FLOATVEC && aux_last_type_read_for_Eint != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_Eint = SCALAR_FLOATVEC;
                              if ((! (aux_AP_read == true))) {
                                // assign expression to variable AP
                                var_AP_0d_floatvec_Scalar = tab_body.Y;
                                aux_AP_read = true;
                                if ((aux_last_type_read_for_AP != SCALAR_FLOATVEC && aux_last_type_read_for_AP != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_AP = SCALAR_FLOATVEC;
                              }
                              // assign expression to variable INT
                              var_INT_0d_intvec_Scalar = tab_body.INT;
                              aux_INT_read = true;
                              if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_INT = SCALAR_INTVEC;
                              // assign expression to variable NBT
                              var_NBT_0d_intvec_Scalar = tab_body.NBT;
                              aux_NBT_read = true;
                              if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_NBT = SCALAR_INTVEC;
                            }
                          }
                        }
                      }
                      // evaluate if-elif-else clause
                      {
                        bool cpp_found_match = false;
                        if (! cpp_found_match) {
                          if (((((((((aux_NRO_read == true)) && ((var_NRO_0d_int_Scalar)!=(0)))))&&(((((((((aux_NAPS_read == true)) && ((var_NAPS_0d_int_Scalar)==(0))))))||(((((aux_NAPS_read == true)) && ((var_NAPS_0d_int_Scalar)==(1)))))))))))) {
                            // if statement evaluation
                            cpp_found_match = true;
                            cpp_line = cpp_read_line(cont);
                            // read CONT record
                            if ((! (aux_SPI_read == true))) {
                              // assign expression to variable SPI
                              var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                              aux_SPI_read = true;
                              if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_SPI = SCALAR_DOUBLE;
                            }
                            if ((! (aux_NLS_read == true))) {
                              // assign expression to variable NLS
                              var_NLS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                              aux_NLS_read = true;
                              if ((aux_last_type_read_for_NLS != SCALAR_INT && aux_last_type_read_for_NLS != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_NLS = SCALAR_INT;
                            }
                          }
                        }
                        if (! cpp_found_match) {
                          cpp_line = cpp_read_line(cont);
                          // read CONT record
                          if ((! (aux_SPI_read == true))) {
                            // assign expression to variable SPI
                            var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                            aux_SPI_read = true;
                            if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_SPI = SCALAR_DOUBLE;
                          }
                          if ((! (aux_AP_read == true))) {
                            // assign expression to variable AP
                            var_AP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                            aux_AP_read = true;
                            if ((aux_last_type_read_for_AP != SCALAR_DOUBLE && aux_last_type_read_for_AP != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_AP = SCALAR_DOUBLE;
                          }
                          if ((! (aux_NLS_read == true))) {
                            // assign expression to variable NLS
                            var_NLS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                            aux_NLS_read = true;
                            if ((aux_last_type_read_for_NLS != SCALAR_INT && aux_last_type_read_for_NLS != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_NLS = SCALAR_INT;
                          }
                        }
                      }

                      for (int var_m_0d_int_Scalar = 1;
                         var_m_0d_int_Scalar <= var_NLS_0d_int_Scalar; var_m_0d_int_Scalar++) {
                        bool aux_m_read = true;
                        // open section spingroup

                        {
                            py::dict cpp_parent_dict = cpp_current_dict;
                            if (! cpp_parent_dict.contains("spingroup")) {
                              cpp_parent_dict["spingroup"] = py::dict();
                            }
                            py::dict cpp_current_dict = cpp_parent_dict["spingroup"];

                            if (! cpp_current_dict.contains(py::cast(var_m_0d_int_Scalar))) {
                              cpp_current_dict[py::cast(var_m_0d_int_Scalar)] = py::dict();
                            }
                            cpp_current_dict = cpp_current_dict[py::cast(var_m_0d_int_Scalar)];
                          // variable declarations
                          double var_AWRI_0d_double_Scalar;
                          bool aux_AWRI_read = false;
                          vartype aux_last_type_read_for_AWRI = UNKNOWN;
                          double var_QX_0d_double_Scalar;
                          bool aux_QX_read = false;
                          vartype aux_last_type_read_for_QX = UNKNOWN;
                          int var_L_0d_int_Scalar;
                          bool aux_L_read = false;
                          vartype aux_last_type_read_for_L = UNKNOWN;
                          int var_LRX_0d_int_Scalar;
                          bool aux_LRX_read = false;
                          vartype aux_last_type_read_for_LRX = UNKNOWN;
                          int cpp_int_val;
                          bool aux_cpp_int_val_read = false;
                          vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                          int var_NRS_0d_int_Scalar;
                          bool aux_NRS_read = false;
                          vartype aux_last_type_read_for_NRS = UNKNOWN;
                          NestedVector<double> var_ER_1d_double_NestedVector;
                          vartype aux_last_type_read_for_ER = UNKNOWN;
                          NestedVector<double> var_AJ_1d_double_NestedVector;
                          vartype aux_last_type_read_for_AJ = UNKNOWN;
                          NestedVector<double> var_GT_1d_double_NestedVector;
                          vartype aux_last_type_read_for_GT = UNKNOWN;
                          NestedVector<double> var_GN_1d_double_NestedVector;
                          vartype aux_last_type_read_for_GN = UNKNOWN;
                          NestedVector<double> var_GG_1d_double_NestedVector;
                          vartype aux_last_type_read_for_GG = UNKNOWN;
                          NestedVector<double> var_GF_1d_double_NestedVector;
                          vartype aux_last_type_read_for_GF = UNKNOWN;
                          cpp_line = cpp_read_line(cont);
                          // read LIST record
                          // assign expression to variable AWRI
                          var_AWRI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                          aux_AWRI_read = true;
                          if ((aux_last_type_read_for_AWRI != SCALAR_DOUBLE && aux_last_type_read_for_AWRI != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_AWRI = SCALAR_DOUBLE;
                          // assign expression to variable QX
                          var_QX_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                          aux_QX_read = true;
                          if ((aux_last_type_read_for_QX != SCALAR_DOUBLE && aux_last_type_read_for_QX != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_QX = SCALAR_DOUBLE;
                          // assign expression to variable L
                          var_L_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                          aux_L_read = true;
                          if ((aux_last_type_read_for_L != SCALAR_INT && aux_last_type_read_for_L != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_L = SCALAR_INT;
                          // assign expression to variable LRX
                          var_LRX_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                          aux_LRX_read = true;
                          if ((aux_last_type_read_for_LRX != SCALAR_INT && aux_last_type_read_for_LRX != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LRX = SCALAR_INT;
                          // assign expression to variable cpp_int_val
                          cpp_int_val = cpp_read_int_field(cpp_line, 4);
                          aux_cpp_int_val_read = true;
                          if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                          // assign expression to variable NRS
                          var_NRS_0d_int_Scalar = (cpp_int_val/6);
                          aux_NRS_read = true;
                          if ((aux_last_type_read_for_NRS != SCALAR_INT && aux_last_type_read_for_NRS != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NRS = SCALAR_INT;
                          if ((! (aux_NRS_read == true))) {
                            // assign expression to variable NRS
                            var_NRS_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                            aux_NRS_read = true;
                            if ((aux_last_type_read_for_NRS != SCALAR_INT && aux_last_type_read_for_NRS != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_NRS = SCALAR_INT;
                          }
                          {
                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                            int cpp_j = 0;
                            // read LIST body

                            for (int var_k_0d_int_Scalar = 1;
                               var_k_0d_int_Scalar <= var_NRS_0d_int_Scalar; var_k_0d_int_Scalar++) {
                              bool aux_k_read = true;
                              // read LIST body
                              // assign expression to variable ER
                              var_ER_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                              if ((aux_last_type_read_for_ER != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ER != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_ER = NESTEDVECTOR_DOUBLE;
                              // assign expression to variable AJ
                              var_AJ_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                              if ((aux_last_type_read_for_AJ != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_AJ != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_AJ = NESTEDVECTOR_DOUBLE;
                              // assign expression to variable GT
                              var_GT_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                              if ((aux_last_type_read_for_GT != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GT != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_GT = NESTEDVECTOR_DOUBLE;
                              // assign expression to variable GN
                              var_GN_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                              if ((aux_last_type_read_for_GN != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GN != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_GN = NESTEDVECTOR_DOUBLE;
                              // assign expression to variable GG
                              var_GG_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                              if ((aux_last_type_read_for_GG != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GG != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_GG = NESTEDVECTOR_DOUBLE;
                              // assign expression to variable GF
                              var_GF_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                              if ((aux_last_type_read_for_GF != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GF != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_GF = NESTEDVECTOR_DOUBLE;
                            }
                          }
                          // store data in Python dictionary
                          if (((aux_last_type_read_for_AWRI == SCALAR_DOUBLE) && (aux_AWRI_read == true))) {
                            cpp_current_dict["AWRI"] = var_AWRI_0d_double_Scalar;
                          }
                          if (((aux_last_type_read_for_QX == SCALAR_DOUBLE) && (aux_QX_read == true))) {
                            cpp_current_dict["QX"] = var_QX_0d_double_Scalar;
                          }
                          if (((aux_last_type_read_for_L == SCALAR_INT) && (aux_L_read == true))) {
                            cpp_current_dict["L"] = var_L_0d_int_Scalar;
                          }
                          if (((aux_last_type_read_for_LRX == SCALAR_INT) && (aux_LRX_read == true))) {
                            cpp_current_dict["LRX"] = var_LRX_0d_int_Scalar;
                          }
                          if (((aux_last_type_read_for_NRS == SCALAR_INT) && (aux_NRS_read == true))) {
                            cpp_current_dict["NRS"] = var_NRS_0d_int_Scalar;
                          }
                          if ((var_ER_1d_double_NestedVector.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_ER_1d_double_NestedVector;
                            cpp_current_dict["ER"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["ER"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                          }
                          if ((var_AJ_1d_double_NestedVector.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_AJ_1d_double_NestedVector;
                            cpp_current_dict["AJ"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["AJ"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                          }
                          if ((var_GT_1d_double_NestedVector.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_GT_1d_double_NestedVector;
                            cpp_current_dict["GT"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["GT"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                          }
                          if ((var_GN_1d_double_NestedVector.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_GN_1d_double_NestedVector;
                            cpp_current_dict["GN"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["GN"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                          }
                          if ((var_GG_1d_double_NestedVector.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_GG_1d_double_NestedVector;
                            cpp_current_dict["GG"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["GG"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                          }
                          if ((var_GF_1d_double_NestedVector.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_GF_1d_double_NestedVector;
                            cpp_current_dict["GF"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["GF"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                          }
                          cpp_current_dict = cpp_parent_dict;
                        }
                      }
                    }
                  }
                  if (! cpp_found_match) {
                    if (! cpp_found_match) {
                      if ((((((((aux_LRF_read == true)) && ((var_LRF_0d_int_Scalar)==(3)))))))) {
                        // if statement evaluation
                        cpp_found_match = true;
                        // evaluate if-elif-else clause
                        {
                          bool cpp_found_match = false;
                          if (! cpp_found_match) {
                            if ((((((((aux_NRO_read == true)) && ((var_NRO_0d_int_Scalar)!=(0)))))))) {
                              // if statement evaluation
                              cpp_found_match = true;
                              // read TAB1 record
                              cpp_line = cpp_read_line(cont);
                              {
                                Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                                // assign expression to variable Eint
                                var_Eint_0d_floatvec_Scalar = tab_body.X;
                                aux_Eint_read = true;
                                if ((aux_last_type_read_for_Eint != SCALAR_FLOATVEC && aux_last_type_read_for_Eint != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_Eint = SCALAR_FLOATVEC;
                                if ((! (aux_AP_read == true))) {
                                  // assign expression to variable AP
                                  var_AP_0d_floatvec_Scalar = tab_body.Y;
                                  aux_AP_read = true;
                                  if ((aux_last_type_read_for_AP != SCALAR_FLOATVEC && aux_last_type_read_for_AP != UNKNOWN)) {
                                    raise_vartype_mismatch();
                                  }
                                  aux_last_type_read_for_AP = SCALAR_FLOATVEC;
                                }
                                // assign expression to variable INT
                                var_INT_0d_intvec_Scalar = tab_body.INT;
                                aux_INT_read = true;
                                if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_INT = SCALAR_INTVEC;
                                // assign expression to variable NBT
                                var_NBT_0d_intvec_Scalar = tab_body.NBT;
                                aux_NBT_read = true;
                                if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_NBT = SCALAR_INTVEC;
                              }
                            }
                          }
                        }
                        // evaluate if-elif-else clause
                        {
                          bool cpp_found_match = false;
                          if (! cpp_found_match) {
                            if (((((((((aux_NRO_read == true)) && ((var_NRO_0d_int_Scalar)!=(0)))))&&(((((((((aux_NAPS_read == true)) && ((var_NAPS_0d_int_Scalar)==(0))))))||(((((aux_NAPS_read == true)) && ((var_NAPS_0d_int_Scalar)==(1)))))))))))) {
                              // if statement evaluation
                              cpp_found_match = true;
                              cpp_line = cpp_read_line(cont);
                              // read CONT record
                              if ((! (aux_SPI_read == true))) {
                                // assign expression to variable SPI
                                var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                                aux_SPI_read = true;
                                if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_SPI = SCALAR_DOUBLE;
                              }
                              // assign expression to variable LAD
                              var_LAD_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                              aux_LAD_read = true;
                              if ((aux_last_type_read_for_LAD != SCALAR_INT && aux_last_type_read_for_LAD != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_LAD = SCALAR_INT;
                              if ((! (aux_NLS_read == true))) {
                                // assign expression to variable NLS
                                var_NLS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                                aux_NLS_read = true;
                                if ((aux_last_type_read_for_NLS != SCALAR_INT && aux_last_type_read_for_NLS != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_NLS = SCALAR_INT;
                              }
                              // assign expression to variable NLSC
                              var_NLSC_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                              aux_NLSC_read = true;
                              if ((aux_last_type_read_for_NLSC != SCALAR_INT && aux_last_type_read_for_NLSC != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_NLSC = SCALAR_INT;
                            }
                          }
                          if (! cpp_found_match) {
                            cpp_line = cpp_read_line(cont);
                            // read CONT record
                            if ((! (aux_SPI_read == true))) {
                              // assign expression to variable SPI
                              var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                              aux_SPI_read = true;
                              if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_SPI = SCALAR_DOUBLE;
                            }
                            if ((! (aux_AP_read == true))) {
                              // assign expression to variable AP
                              var_AP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                              aux_AP_read = true;
                              if ((aux_last_type_read_for_AP != SCALAR_DOUBLE && aux_last_type_read_for_AP != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_AP = SCALAR_DOUBLE;
                            }
                            // assign expression to variable LAD
                            var_LAD_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                            aux_LAD_read = true;
                            if ((aux_last_type_read_for_LAD != SCALAR_INT && aux_last_type_read_for_LAD != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_LAD = SCALAR_INT;
                            if ((! (aux_NLS_read == true))) {
                              // assign expression to variable NLS
                              var_NLS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                              aux_NLS_read = true;
                              if ((aux_last_type_read_for_NLS != SCALAR_INT && aux_last_type_read_for_NLS != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_NLS = SCALAR_INT;
                            }
                            // assign expression to variable NLSC
                            var_NLSC_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                            aux_NLSC_read = true;
                            if ((aux_last_type_read_for_NLSC != SCALAR_INT && aux_last_type_read_for_NLSC != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_NLSC = SCALAR_INT;
                          }
                        }

                        for (int var_m_0d_int_Scalar = 1;
                           var_m_0d_int_Scalar <= var_NLS_0d_int_Scalar; var_m_0d_int_Scalar++) {
                          bool aux_m_read = true;
                          // open section spingroup

                          {
                              py::dict cpp_parent_dict = cpp_current_dict;
                              if (! cpp_parent_dict.contains("spingroup")) {
                                cpp_parent_dict["spingroup"] = py::dict();
                              }
                              py::dict cpp_current_dict = cpp_parent_dict["spingroup"];

                              if (! cpp_current_dict.contains(py::cast(var_m_0d_int_Scalar))) {
                                cpp_current_dict[py::cast(var_m_0d_int_Scalar)] = py::dict();
                              }
                              cpp_current_dict = cpp_current_dict[py::cast(var_m_0d_int_Scalar)];
                            // variable declarations
                            double var_AWRI_0d_double_Scalar;
                            bool aux_AWRI_read = false;
                            vartype aux_last_type_read_for_AWRI = UNKNOWN;
                            double var_APL_0d_double_Scalar;
                            bool aux_APL_read = false;
                            vartype aux_last_type_read_for_APL = UNKNOWN;
                            int var_L_0d_int_Scalar;
                            bool aux_L_read = false;
                            vartype aux_last_type_read_for_L = UNKNOWN;
                            int cpp_int_val;
                            bool aux_cpp_int_val_read = false;
                            vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                            int var_NRS_0d_int_Scalar;
                            bool aux_NRS_read = false;
                            vartype aux_last_type_read_for_NRS = UNKNOWN;
                            NestedVector<double> var_ER_1d_double_NestedVector;
                            vartype aux_last_type_read_for_ER = UNKNOWN;
                            NestedVector<double> var_AJ_1d_double_NestedVector;
                            vartype aux_last_type_read_for_AJ = UNKNOWN;
                            NestedVector<double> var_GN_1d_double_NestedVector;
                            vartype aux_last_type_read_for_GN = UNKNOWN;
                            NestedVector<double> var_GG_1d_double_NestedVector;
                            vartype aux_last_type_read_for_GG = UNKNOWN;
                            NestedVector<double> var_GFA_1d_double_NestedVector;
                            vartype aux_last_type_read_for_GFA = UNKNOWN;
                            NestedVector<double> var_GFB_1d_double_NestedVector;
                            vartype aux_last_type_read_for_GFB = UNKNOWN;
                            cpp_line = cpp_read_line(cont);
                            // read LIST record
                            // assign expression to variable AWRI
                            var_AWRI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                            aux_AWRI_read = true;
                            if ((aux_last_type_read_for_AWRI != SCALAR_DOUBLE && aux_last_type_read_for_AWRI != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_AWRI = SCALAR_DOUBLE;
                            // assign expression to variable APL
                            var_APL_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                            aux_APL_read = true;
                            if ((aux_last_type_read_for_APL != SCALAR_DOUBLE && aux_last_type_read_for_APL != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_APL = SCALAR_DOUBLE;
                            // assign expression to variable L
                            var_L_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                            aux_L_read = true;
                            if ((aux_last_type_read_for_L != SCALAR_INT && aux_last_type_read_for_L != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_L = SCALAR_INT;
                            // assign expression to variable cpp_int_val
                            cpp_int_val = cpp_read_int_field(cpp_line, 4);
                            aux_cpp_int_val_read = true;
                            if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                            // assign expression to variable NRS
                            var_NRS_0d_int_Scalar = (cpp_int_val/6);
                            aux_NRS_read = true;
                            if ((aux_last_type_read_for_NRS != SCALAR_INT && aux_last_type_read_for_NRS != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_NRS = SCALAR_INT;
                            if ((! (aux_NRS_read == true))) {
                              // assign expression to variable NRS
                              var_NRS_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                              aux_NRS_read = true;
                              if ((aux_last_type_read_for_NRS != SCALAR_INT && aux_last_type_read_for_NRS != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_NRS = SCALAR_INT;
                            }
                            {
                              int cpp_npl = cpp_read_int_field(cpp_line, 4);
                              cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                              int cpp_j = 0;
                              // read LIST body

                              for (int var_k_0d_int_Scalar = 1;
                                 var_k_0d_int_Scalar <= var_NRS_0d_int_Scalar; var_k_0d_int_Scalar++) {
                                bool aux_k_read = true;
                                // read LIST body
                                // assign expression to variable ER
                                var_ER_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                if ((aux_last_type_read_for_ER != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ER != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_ER = NESTEDVECTOR_DOUBLE;
                                // assign expression to variable AJ
                                var_AJ_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                if ((aux_last_type_read_for_AJ != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_AJ != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_AJ = NESTEDVECTOR_DOUBLE;
                                // assign expression to variable GN
                                var_GN_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                if ((aux_last_type_read_for_GN != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GN != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_GN = NESTEDVECTOR_DOUBLE;
                                // assign expression to variable GG
                                var_GG_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                if ((aux_last_type_read_for_GG != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GG != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_GG = NESTEDVECTOR_DOUBLE;
                                // assign expression to variable GFA
                                var_GFA_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                if ((aux_last_type_read_for_GFA != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GFA != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_GFA = NESTEDVECTOR_DOUBLE;
                                // assign expression to variable GFB
                                var_GFB_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                if ((aux_last_type_read_for_GFB != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GFB != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_GFB = NESTEDVECTOR_DOUBLE;
                              }
                            }
                            // store data in Python dictionary
                            if (((aux_last_type_read_for_AWRI == SCALAR_DOUBLE) && (aux_AWRI_read == true))) {
                              cpp_current_dict["AWRI"] = var_AWRI_0d_double_Scalar;
                            }
                            if (((aux_last_type_read_for_APL == SCALAR_DOUBLE) && (aux_APL_read == true))) {
                              cpp_current_dict["APL"] = var_APL_0d_double_Scalar;
                            }
                            if (((aux_last_type_read_for_L == SCALAR_INT) && (aux_L_read == true))) {
                              cpp_current_dict["L"] = var_L_0d_int_Scalar;
                            }
                            if (((aux_last_type_read_for_NRS == SCALAR_INT) && (aux_NRS_read == true))) {
                              cpp_current_dict["NRS"] = var_NRS_0d_int_Scalar;
                            }
                            if ((var_ER_1d_double_NestedVector.get_last_index() != -1)) {
                              auto& cpp_curvar0 = var_ER_1d_double_NestedVector;
                              cpp_current_dict["ER"] = py::dict();
                              py::dict cpp_curdict0 = cpp_current_dict["ER"];
                              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                              }
                            }
                            if ((var_AJ_1d_double_NestedVector.get_last_index() != -1)) {
                              auto& cpp_curvar0 = var_AJ_1d_double_NestedVector;
                              cpp_current_dict["AJ"] = py::dict();
                              py::dict cpp_curdict0 = cpp_current_dict["AJ"];
                              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                              }
                            }
                            if ((var_GN_1d_double_NestedVector.get_last_index() != -1)) {
                              auto& cpp_curvar0 = var_GN_1d_double_NestedVector;
                              cpp_current_dict["GN"] = py::dict();
                              py::dict cpp_curdict0 = cpp_current_dict["GN"];
                              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                              }
                            }
                            if ((var_GG_1d_double_NestedVector.get_last_index() != -1)) {
                              auto& cpp_curvar0 = var_GG_1d_double_NestedVector;
                              cpp_current_dict["GG"] = py::dict();
                              py::dict cpp_curdict0 = cpp_current_dict["GG"];
                              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                              }
                            }
                            if ((var_GFA_1d_double_NestedVector.get_last_index() != -1)) {
                              auto& cpp_curvar0 = var_GFA_1d_double_NestedVector;
                              cpp_current_dict["GFA"] = py::dict();
                              py::dict cpp_curdict0 = cpp_current_dict["GFA"];
                              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                              }
                            }
                            if ((var_GFB_1d_double_NestedVector.get_last_index() != -1)) {
                              auto& cpp_curvar0 = var_GFB_1d_double_NestedVector;
                              cpp_current_dict["GFB"] = py::dict();
                              py::dict cpp_curdict0 = cpp_current_dict["GFB"];
                              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                              }
                            }
                            cpp_current_dict = cpp_parent_dict;
                          }
                        }
                      }
                    }
                  }
                  if (! cpp_found_match) {
                    if (! cpp_found_match) {
                      if ((((((((aux_LRF_read == true)) && ((var_LRF_0d_int_Scalar)==(7)))))))) {
                        // if statement evaluation
                        cpp_found_match = true;
                        cpp_line = cpp_read_line(cont);
                        // read CONT record
                        // assign expression to variable IFG
                        var_IFG_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                        aux_IFG_read = true;
                        if ((aux_last_type_read_for_IFG != SCALAR_INT && aux_last_type_read_for_IFG != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_IFG = SCALAR_INT;
                        // assign expression to variable KRM
                        var_KRM_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                        aux_KRM_read = true;
                        if ((aux_last_type_read_for_KRM != SCALAR_INT && aux_last_type_read_for_KRM != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_KRM = SCALAR_INT;
                        // assign expression to variable NJS
                        var_NJS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                        aux_NJS_read = true;
                        if ((aux_last_type_read_for_NJS != SCALAR_INT && aux_last_type_read_for_NJS != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NJS = SCALAR_INT;
                        // assign expression to variable KRL
                        var_KRL_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                        aux_KRL_read = true;
                        if ((aux_last_type_read_for_KRL != SCALAR_INT && aux_last_type_read_for_KRL != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_KRL = SCALAR_INT;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable NPP
                        var_NPP_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                        aux_NPP_read = true;
                        if ((aux_last_type_read_for_NPP != SCALAR_INT && aux_last_type_read_for_NPP != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NPP = SCALAR_INT;
                        if ((! (aux_NPP_read == true))) {
                          // assign expression to variable cpp_int_val
                          cpp_int_val = cpp_read_int_field(cpp_line, 4);
                          aux_cpp_int_val_read = true;
                          if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                          // assign expression to variable NPP
                          var_NPP_0d_int_Scalar = (cpp_int_val/12);
                          aux_NPP_read = true;
                          if ((aux_last_type_read_for_NPP != SCALAR_INT && aux_last_type_read_for_NPP != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NPP = SCALAR_INT;
                        }
                        if ((! (aux_NPP_read == true))) {
                          // assign expression to variable cpp_int_val
                          cpp_int_val = cpp_read_int_field(cpp_line, 5);
                          aux_cpp_int_val_read = true;
                          if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                          // assign expression to variable NPP
                          var_NPP_0d_int_Scalar = (cpp_int_val/2);
                          aux_NPP_read = true;
                          if ((aux_last_type_read_for_NPP != SCALAR_INT && aux_last_type_read_for_NPP != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NPP = SCALAR_INT;
                        }
                        {
                          int cpp_npl = cpp_read_int_field(cpp_line, 4);
                          cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                          int cpp_j = 0;
                          // read LIST body

                          for (int var_k_0d_int_Scalar = 1;
                             var_k_0d_int_Scalar <= var_NPP_0d_int_Scalar; var_k_0d_int_Scalar++) {
                            bool aux_k_read = true;
                            // read LIST body
                            // assign expression to variable MA
                            var_MA_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_MA != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_MA != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_MA = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable MB
                            var_MB_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_MB != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_MB != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_MB = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable ZA
                            var_ZA_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_ZA != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_ZA = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable ZB
                            var_ZB_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_ZB != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ZB != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_ZB = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable IA
                            var_IA_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_IA != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_IA != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_IA = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable IB
                            var_IB_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_IB != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_IB != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_IB = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable Q
                            var_Q_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_Q != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_Q != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_Q = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable PNT
                            var_PNT_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_PNT != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_PNT != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_PNT = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable SHF
                            var_SHF_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_SHF != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_SHF != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_SHF = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable MT
                            var_MT_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_MT != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_MT != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_MT = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable PA
                            var_PA_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_PA != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_PA != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_PA = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable PB
                            var_PB_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_PB != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_PB != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_PB = NESTEDVECTOR_DOUBLE;
                          }
                        }

                        for (int var_k_0d_int_Scalar = 1;
                           var_k_0d_int_Scalar <= var_NJS_0d_int_Scalar; var_k_0d_int_Scalar++) {
                          bool aux_k_read = true;
                          // open section spingroup

                          {
                              py::dict cpp_parent_dict = cpp_current_dict;
                              if (! cpp_parent_dict.contains("spingroup")) {
                                cpp_parent_dict["spingroup"] = py::dict();
                              }
                              py::dict cpp_current_dict = cpp_parent_dict["spingroup"];

                              if (! cpp_current_dict.contains(py::cast(var_k_0d_int_Scalar))) {
                                cpp_current_dict[py::cast(var_k_0d_int_Scalar)] = py::dict();
                              }
                              cpp_current_dict = cpp_current_dict[py::cast(var_k_0d_int_Scalar)];
                            // variable declarations
                            double var_AJ_0d_double_Scalar;
                            bool aux_AJ_read = false;
                            vartype aux_last_type_read_for_AJ = UNKNOWN;
                            double var_PJ_0d_double_Scalar;
                            bool aux_PJ_read = false;
                            vartype aux_last_type_read_for_PJ = UNKNOWN;
                            int var_KBK_0d_int_Scalar;
                            bool aux_KBK_read = false;
                            vartype aux_last_type_read_for_KBK = UNKNOWN;
                            int var_KPS_0d_int_Scalar;
                            bool aux_KPS_read = false;
                            vartype aux_last_type_read_for_KPS = UNKNOWN;
                            int cpp_int_val;
                            bool aux_cpp_int_val_read = false;
                            vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                            int var_NCH_0d_int_Scalar;
                            bool aux_NCH_read = false;
                            vartype aux_last_type_read_for_NCH = UNKNOWN;
                            NestedVector<double> var_PPI_1d_double_NestedVector;
                            vartype aux_last_type_read_for_PPI = UNKNOWN;
                            NestedVector<double> var_L_1d_double_NestedVector;
                            vartype aux_last_type_read_for_L = UNKNOWN;
                            NestedVector<double> var_SCH_1d_double_NestedVector;
                            vartype aux_last_type_read_for_SCH = UNKNOWN;
                            NestedVector<double> var_BND_1d_double_NestedVector;
                            vartype aux_last_type_read_for_BND = UNKNOWN;
                            NestedVector<double> var_APE_1d_double_NestedVector;
                            vartype aux_last_type_read_for_APE = UNKNOWN;
                            NestedVector<double> var_APT_1d_double_NestedVector;
                            vartype aux_last_type_read_for_APT = UNKNOWN;
                            int var_NRS_0d_int_Scalar;
                            bool aux_NRS_read = false;
                            vartype aux_last_type_read_for_NRS = UNKNOWN;
                            NestedVector<double> var_ER_1d_double_NestedVector;
                            vartype aux_last_type_read_for_ER = UNKNOWN;
                            Matrix2d<double> var_GAM_2d_double_Matrix2d;
                            vartype aux_last_type_read_for_GAM = UNKNOWN;
                            int var_NX_0d_int_Scalar;
                            bool aux_NX_read = false;
                            vartype aux_last_type_read_for_NX = UNKNOWN;
                            cpp_line = cpp_read_line(cont);
                            // read LIST record
                            // assign expression to variable AJ
                            var_AJ_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                            aux_AJ_read = true;
                            if ((aux_last_type_read_for_AJ != SCALAR_DOUBLE && aux_last_type_read_for_AJ != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_AJ = SCALAR_DOUBLE;
                            // assign expression to variable PJ
                            var_PJ_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                            aux_PJ_read = true;
                            if ((aux_last_type_read_for_PJ != SCALAR_DOUBLE && aux_last_type_read_for_PJ != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_PJ = SCALAR_DOUBLE;
                            // assign expression to variable KBK
                            var_KBK_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                            aux_KBK_read = true;
                            if ((aux_last_type_read_for_KBK != SCALAR_INT && aux_last_type_read_for_KBK != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_KBK = SCALAR_INT;
                            // assign expression to variable KPS
                            var_KPS_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                            aux_KPS_read = true;
                            if ((aux_last_type_read_for_KPS != SCALAR_INT && aux_last_type_read_for_KPS != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_KPS = SCALAR_INT;
                            // assign expression to variable cpp_int_val
                            cpp_int_val = cpp_read_int_field(cpp_line, 4);
                            aux_cpp_int_val_read = true;
                            if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                            // assign expression to variable NCH
                            var_NCH_0d_int_Scalar = (cpp_int_val/6);
                            aux_NCH_read = true;
                            if ((aux_last_type_read_for_NCH != SCALAR_INT && aux_last_type_read_for_NCH != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_NCH = SCALAR_INT;
                            if ((! (aux_NCH_read == true))) {
                              // assign expression to variable NCH
                              var_NCH_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                              aux_NCH_read = true;
                              if ((aux_last_type_read_for_NCH != SCALAR_INT && aux_last_type_read_for_NCH != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_NCH = SCALAR_INT;
                            }
                            {
                              int cpp_npl = cpp_read_int_field(cpp_line, 4);
                              cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                              int cpp_j = 0;
                              // read LIST body

                              for (int var_l_0d_int_Scalar = 1;
                                 var_l_0d_int_Scalar <= var_NCH_0d_int_Scalar; var_l_0d_int_Scalar++) {
                                bool aux_l_read = true;
                                // read LIST body
                                // assign expression to variable PPI
                                var_PPI_1d_double_NestedVector.set(var_l_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                if ((aux_last_type_read_for_PPI != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_PPI != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_PPI = NESTEDVECTOR_DOUBLE;
                                // assign expression to variable L
                                var_L_1d_double_NestedVector.set(var_l_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                if ((aux_last_type_read_for_L != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_L != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_L = NESTEDVECTOR_DOUBLE;
                                // assign expression to variable SCH
                                var_SCH_1d_double_NestedVector.set(var_l_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                if ((aux_last_type_read_for_SCH != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_SCH != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_SCH = NESTEDVECTOR_DOUBLE;
                                // assign expression to variable BND
                                var_BND_1d_double_NestedVector.set(var_l_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                if ((aux_last_type_read_for_BND != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_BND != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_BND = NESTEDVECTOR_DOUBLE;
                                // assign expression to variable APE
                                var_APE_1d_double_NestedVector.set(var_l_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                if ((aux_last_type_read_for_APE != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_APE != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_APE = NESTEDVECTOR_DOUBLE;
                                // assign expression to variable APT
                                var_APT_1d_double_NestedVector.set(var_l_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                if ((aux_last_type_read_for_APT != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_APT != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_APT = NESTEDVECTOR_DOUBLE;
                              }
                            }
                            // evaluate if-elif-else clause
                            {
                              bool cpp_found_match = false;
                              if (! cpp_found_match) {
                                // if statement evaluation with lookahead
                                {
                                  std::streampos cpp_old_streampos = cont.tellg();
                                  {
                                    // variable declarations
                                    double& glob_var_AJ_0d_double_Scalar = var_AJ_0d_double_Scalar;
                                    double var_AJ_0d_double_Scalar = glob_var_AJ_0d_double_Scalar;
                                    bool& glob_aux_AJ_read = aux_AJ_read;
                                    bool aux_AJ_read = glob_aux_AJ_read;
                                    vartype aux_last_type_read_for_AJ = UNKNOWN;
                                    double& glob_var_PJ_0d_double_Scalar = var_PJ_0d_double_Scalar;
                                    double var_PJ_0d_double_Scalar = glob_var_PJ_0d_double_Scalar;
                                    bool& glob_aux_PJ_read = aux_PJ_read;
                                    bool aux_PJ_read = glob_aux_PJ_read;
                                    vartype aux_last_type_read_for_PJ = UNKNOWN;
                                    int& glob_var_KBK_0d_int_Scalar = var_KBK_0d_int_Scalar;
                                    int var_KBK_0d_int_Scalar = glob_var_KBK_0d_int_Scalar;
                                    bool& glob_aux_KBK_read = aux_KBK_read;
                                    bool aux_KBK_read = glob_aux_KBK_read;
                                    vartype aux_last_type_read_for_KBK = UNKNOWN;
                                    int& glob_var_KPS_0d_int_Scalar = var_KPS_0d_int_Scalar;
                                    int var_KPS_0d_int_Scalar = glob_var_KPS_0d_int_Scalar;
                                    bool& glob_aux_KPS_read = aux_KPS_read;
                                    bool aux_KPS_read = glob_aux_KPS_read;
                                    vartype aux_last_type_read_for_KPS = UNKNOWN;
                                    int& glob_cpp_int_val = cpp_int_val;
                                    int cpp_int_val = glob_cpp_int_val;
                                    bool& glob_aux_cpp_int_val_read = aux_cpp_int_val_read;
                                    bool aux_cpp_int_val_read = glob_aux_cpp_int_val_read;
                                    vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                                    int& glob_var_NCH_0d_int_Scalar = var_NCH_0d_int_Scalar;
                                    int var_NCH_0d_int_Scalar = glob_var_NCH_0d_int_Scalar;
                                    bool& glob_aux_NCH_read = aux_NCH_read;
                                    bool aux_NCH_read = glob_aux_NCH_read;
                                    vartype aux_last_type_read_for_NCH = UNKNOWN;
                                    NestedVector<double>& glob_var_PPI_1d_double_NestedVector = var_PPI_1d_double_NestedVector;
                                    NestedVector<double> var_PPI_1d_double_NestedVector = glob_var_PPI_1d_double_NestedVector;
                                    vartype aux_last_type_read_for_PPI = UNKNOWN;
                                    NestedVector<double>& glob_var_L_1d_double_NestedVector = var_L_1d_double_NestedVector;
                                    NestedVector<double> var_L_1d_double_NestedVector = glob_var_L_1d_double_NestedVector;
                                    vartype aux_last_type_read_for_L = UNKNOWN;
                                    NestedVector<double>& glob_var_SCH_1d_double_NestedVector = var_SCH_1d_double_NestedVector;
                                    NestedVector<double> var_SCH_1d_double_NestedVector = glob_var_SCH_1d_double_NestedVector;
                                    vartype aux_last_type_read_for_SCH = UNKNOWN;
                                    NestedVector<double>& glob_var_BND_1d_double_NestedVector = var_BND_1d_double_NestedVector;
                                    NestedVector<double> var_BND_1d_double_NestedVector = glob_var_BND_1d_double_NestedVector;
                                    vartype aux_last_type_read_for_BND = UNKNOWN;
                                    NestedVector<double>& glob_var_APE_1d_double_NestedVector = var_APE_1d_double_NestedVector;
                                    NestedVector<double> var_APE_1d_double_NestedVector = glob_var_APE_1d_double_NestedVector;
                                    vartype aux_last_type_read_for_APE = UNKNOWN;
                                    NestedVector<double>& glob_var_APT_1d_double_NestedVector = var_APT_1d_double_NestedVector;
                                    NestedVector<double> var_APT_1d_double_NestedVector = glob_var_APT_1d_double_NestedVector;
                                    vartype aux_last_type_read_for_APT = UNKNOWN;
                                    int& glob_var_NRS_0d_int_Scalar = var_NRS_0d_int_Scalar;
                                    int var_NRS_0d_int_Scalar = glob_var_NRS_0d_int_Scalar;
                                    bool& glob_aux_NRS_read = aux_NRS_read;
                                    bool aux_NRS_read = glob_aux_NRS_read;
                                    vartype aux_last_type_read_for_NRS = UNKNOWN;
                                    cpp_line = cpp_read_line(cont);
                                    // read LIST record
                                    // assign expression to variable NRS
                                    var_NRS_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                                    aux_NRS_read = true;
                                    if ((aux_last_type_read_for_NRS != SCALAR_INT && aux_last_type_read_for_NRS != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_NRS = SCALAR_INT;
                                    if ((! (aux_NCH_read == true))) {
                                      throw std::runtime_error("The equation (6*((((1+NCH)+((5-NCH)%6))*NRS)/6))==value cannot be solved for NCH because the modulo operator is not supported.");
                                    }
                                    if ((! (aux_NRS_read == true))) {
                                      throw std::runtime_error("The equation (6*((((1+NCH)+((5-NCH)%6))*NRS)/6))==value cannot be solved for NRS because the modulo operator is not supported.");
                                    }
                                    if ((! (aux_NCH_read == true))) {
                                      throw std::runtime_error("The equation ((((1+NCH)+((5-NCH)%6))*NRS)/6)==value cannot be solved for NCH because the modulo operator is not supported.");
                                    }
                                    if ((! (aux_NRS_read == true))) {
                                      throw std::runtime_error("The equation ((((1+NCH)+((5-NCH)%6))*NRS)/6)==value cannot be solved for NRS because the modulo operator is not supported.");
                                    }
                                    if ((((((((aux_NRS_read == true)) && ((var_NRS_0d_int_Scalar)>(0)))))))) {
                                      cpp_found_match = true;
                                    }
                                    cont.seekg(cpp_old_streampos);
                                  }
                                  if (cpp_found_match) {
                                    cpp_line = cpp_read_line(cont);
                                    // read LIST record
                                    // assign expression to variable NRS
                                    var_NRS_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                                    aux_NRS_read = true;
                                    if ((aux_last_type_read_for_NRS != SCALAR_INT && aux_last_type_read_for_NRS != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_NRS = SCALAR_INT;
                                    if ((! (aux_NCH_read == true))) {
                                      throw std::runtime_error("The equation (6*((((1+NCH)+((5-NCH)%6))*NRS)/6))==value cannot be solved for NCH because the modulo operator is not supported.");
                                    }
                                    if ((! (aux_NRS_read == true))) {
                                      throw std::runtime_error("The equation (6*((((1+NCH)+((5-NCH)%6))*NRS)/6))==value cannot be solved for NRS because the modulo operator is not supported.");
                                    }
                                    if ((! (aux_NCH_read == true))) {
                                      throw std::runtime_error("The equation ((((1+NCH)+((5-NCH)%6))*NRS)/6)==value cannot be solved for NCH because the modulo operator is not supported.");
                                    }
                                    if ((! (aux_NRS_read == true))) {
                                      throw std::runtime_error("The equation ((((1+NCH)+((5-NCH)%6))*NRS)/6)==value cannot be solved for NRS because the modulo operator is not supported.");
                                    }
                                    {
                                      int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                      cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                      int cpp_j = 0;
                                      // read LIST body
                                      var_GAM_2d_double_Matrix2d.init(1, var_NCH_0d_int_Scalar, 1, var_NRS_0d_int_Scalar, false, false);

                                      for (int var_n_0d_int_Scalar = 1;
                                         var_n_0d_int_Scalar <= var_NRS_0d_int_Scalar; var_n_0d_int_Scalar++) {
                                        bool aux_n_read = true;
                                        // read LIST body
                                        // assign expression to variable ER
                                        var_ER_1d_double_NestedVector.set(var_n_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                        if ((aux_last_type_read_for_ER != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ER != UNKNOWN)) {
                                          raise_vartype_mismatch();
                                        }
                                        aux_last_type_read_for_ER = NESTEDVECTOR_DOUBLE;

                                        for (int var_m_0d_int_Scalar = 1;
                                           var_m_0d_int_Scalar <= var_NCH_0d_int_Scalar; var_m_0d_int_Scalar++) {
                                          bool aux_m_read = true;
                                          // read LIST body
                                          // assign expression to variable GAM
                                          var_GAM_2d_double_Matrix2d(var_m_0d_int_Scalar, var_n_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                                          if ((aux_last_type_read_for_GAM != MATRIX2D_DOUBLE && aux_last_type_read_for_GAM != UNKNOWN)) {
                                            raise_vartype_mismatch();
                                          }
                                          aux_last_type_read_for_GAM = MATRIX2D_DOUBLE;
                                        }

                                        for (int var_p_0d_int_Scalar = 1;
                                           var_p_0d_int_Scalar <= ((5-var_NCH_0d_int_Scalar)%6); var_p_0d_int_Scalar++) {
                                          bool aux_p_read = true;
                                          // read LIST body
                                          cpp_j++;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            // evaluate if-elif-else clause
                            {
                              bool cpp_found_match = false;
                              if (! cpp_found_match) {
                                // if statement evaluation with lookahead
                                {
                                  std::streampos cpp_old_streampos = cont.tellg();
                                  {
                                    // variable declarations
                                    double& glob_var_AJ_0d_double_Scalar = var_AJ_0d_double_Scalar;
                                    double var_AJ_0d_double_Scalar = glob_var_AJ_0d_double_Scalar;
                                    bool& glob_aux_AJ_read = aux_AJ_read;
                                    bool aux_AJ_read = glob_aux_AJ_read;
                                    vartype aux_last_type_read_for_AJ = UNKNOWN;
                                    double& glob_var_PJ_0d_double_Scalar = var_PJ_0d_double_Scalar;
                                    double var_PJ_0d_double_Scalar = glob_var_PJ_0d_double_Scalar;
                                    bool& glob_aux_PJ_read = aux_PJ_read;
                                    bool aux_PJ_read = glob_aux_PJ_read;
                                    vartype aux_last_type_read_for_PJ = UNKNOWN;
                                    int& glob_var_KBK_0d_int_Scalar = var_KBK_0d_int_Scalar;
                                    int var_KBK_0d_int_Scalar = glob_var_KBK_0d_int_Scalar;
                                    bool& glob_aux_KBK_read = aux_KBK_read;
                                    bool aux_KBK_read = glob_aux_KBK_read;
                                    vartype aux_last_type_read_for_KBK = UNKNOWN;
                                    int& glob_var_KPS_0d_int_Scalar = var_KPS_0d_int_Scalar;
                                    int var_KPS_0d_int_Scalar = glob_var_KPS_0d_int_Scalar;
                                    bool& glob_aux_KPS_read = aux_KPS_read;
                                    bool aux_KPS_read = glob_aux_KPS_read;
                                    vartype aux_last_type_read_for_KPS = UNKNOWN;
                                    int& glob_cpp_int_val = cpp_int_val;
                                    int cpp_int_val = glob_cpp_int_val;
                                    bool& glob_aux_cpp_int_val_read = aux_cpp_int_val_read;
                                    bool aux_cpp_int_val_read = glob_aux_cpp_int_val_read;
                                    vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                                    int& glob_var_NCH_0d_int_Scalar = var_NCH_0d_int_Scalar;
                                    int var_NCH_0d_int_Scalar = glob_var_NCH_0d_int_Scalar;
                                    bool& glob_aux_NCH_read = aux_NCH_read;
                                    bool aux_NCH_read = glob_aux_NCH_read;
                                    vartype aux_last_type_read_for_NCH = UNKNOWN;
                                    NestedVector<double>& glob_var_PPI_1d_double_NestedVector = var_PPI_1d_double_NestedVector;
                                    NestedVector<double> var_PPI_1d_double_NestedVector = glob_var_PPI_1d_double_NestedVector;
                                    vartype aux_last_type_read_for_PPI = UNKNOWN;
                                    NestedVector<double>& glob_var_L_1d_double_NestedVector = var_L_1d_double_NestedVector;
                                    NestedVector<double> var_L_1d_double_NestedVector = glob_var_L_1d_double_NestedVector;
                                    vartype aux_last_type_read_for_L = UNKNOWN;
                                    NestedVector<double>& glob_var_SCH_1d_double_NestedVector = var_SCH_1d_double_NestedVector;
                                    NestedVector<double> var_SCH_1d_double_NestedVector = glob_var_SCH_1d_double_NestedVector;
                                    vartype aux_last_type_read_for_SCH = UNKNOWN;
                                    NestedVector<double>& glob_var_BND_1d_double_NestedVector = var_BND_1d_double_NestedVector;
                                    NestedVector<double> var_BND_1d_double_NestedVector = glob_var_BND_1d_double_NestedVector;
                                    vartype aux_last_type_read_for_BND = UNKNOWN;
                                    NestedVector<double>& glob_var_APE_1d_double_NestedVector = var_APE_1d_double_NestedVector;
                                    NestedVector<double> var_APE_1d_double_NestedVector = glob_var_APE_1d_double_NestedVector;
                                    vartype aux_last_type_read_for_APE = UNKNOWN;
                                    NestedVector<double>& glob_var_APT_1d_double_NestedVector = var_APT_1d_double_NestedVector;
                                    NestedVector<double> var_APT_1d_double_NestedVector = glob_var_APT_1d_double_NestedVector;
                                    vartype aux_last_type_read_for_APT = UNKNOWN;
                                    int& glob_var_NRS_0d_int_Scalar = var_NRS_0d_int_Scalar;
                                    int var_NRS_0d_int_Scalar = glob_var_NRS_0d_int_Scalar;
                                    bool& glob_aux_NRS_read = aux_NRS_read;
                                    bool aux_NRS_read = glob_aux_NRS_read;
                                    vartype aux_last_type_read_for_NRS = UNKNOWN;
                                    NestedVector<double>& glob_var_ER_1d_double_NestedVector = var_ER_1d_double_NestedVector;
                                    NestedVector<double> var_ER_1d_double_NestedVector = glob_var_ER_1d_double_NestedVector;
                                    vartype aux_last_type_read_for_ER = UNKNOWN;
                                    Matrix2d<double>& glob_var_GAM_2d_double_Matrix2d = var_GAM_2d_double_Matrix2d;
                                    Matrix2d<double> var_GAM_2d_double_Matrix2d = glob_var_GAM_2d_double_Matrix2d;
                                    vartype aux_last_type_read_for_GAM = UNKNOWN;
                                    int& glob_var_NX_0d_int_Scalar = var_NX_0d_int_Scalar;
                                    int var_NX_0d_int_Scalar = glob_var_NX_0d_int_Scalar;
                                    bool& glob_aux_NX_read = aux_NX_read;
                                    bool aux_NX_read = glob_aux_NX_read;
                                    vartype aux_last_type_read_for_NX = UNKNOWN;
                                    cpp_line = cpp_read_line(cont);
                                    // read LIST record
                                    if ((! (aux_NRS_read == true))) {
                                      // assign expression to variable NRS
                                      var_NRS_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                                      aux_NRS_read = true;
                                      if ((aux_last_type_read_for_NRS != SCALAR_INT && aux_last_type_read_for_NRS != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_NRS = SCALAR_INT;
                                    }
                                    // assign expression to variable cpp_int_val
                                    cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                    aux_cpp_int_val_read = true;
                                    if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                                    // assign expression to variable NX
                                    var_NX_0d_int_Scalar = (cpp_int_val/6);
                                    aux_NX_read = true;
                                    if ((aux_last_type_read_for_NX != SCALAR_INT && aux_last_type_read_for_NX != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_NX = SCALAR_INT;
                                    if ((! (aux_NX_read == true))) {
                                      // assign expression to variable NX
                                      var_NX_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                                      aux_NX_read = true;
                                      if ((aux_last_type_read_for_NX != SCALAR_INT && aux_last_type_read_for_NX != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_NX = SCALAR_INT;
                                    }
                                    if (((((((((aux_NRS_read == true)) && ((var_NRS_0d_int_Scalar)==(0)))))&&((((aux_NX_read == true)) && ((var_NX_0d_int_Scalar)==(1)))))))) {
                                      cpp_found_match = true;
                                    }
                                    cont.seekg(cpp_old_streampos);
                                  }
                                  if (cpp_found_match) {
                                    cpp_line = cpp_read_line(cont);
                                    // read LIST record
                                    if ((! (aux_NRS_read == true))) {
                                      // assign expression to variable NRS
                                      var_NRS_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                                      aux_NRS_read = true;
                                      if ((aux_last_type_read_for_NRS != SCALAR_INT && aux_last_type_read_for_NRS != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_NRS = SCALAR_INT;
                                    }
                                    // assign expression to variable cpp_int_val
                                    cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                    aux_cpp_int_val_read = true;
                                    if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                                    // assign expression to variable NX
                                    var_NX_0d_int_Scalar = (cpp_int_val/6);
                                    aux_NX_read = true;
                                    if ((aux_last_type_read_for_NX != SCALAR_INT && aux_last_type_read_for_NX != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_NX = SCALAR_INT;
                                    if ((! (aux_NX_read == true))) {
                                      // assign expression to variable NX
                                      var_NX_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                                      aux_NX_read = true;
                                      if ((aux_last_type_read_for_NX != SCALAR_INT && aux_last_type_read_for_NX != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_NX = SCALAR_INT;
                                    }
                                    {
                                      int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                      cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                      int cpp_j = 0;
                                      // read LIST body

                                      for (int var_m_0d_int_Scalar = 1;
                                         var_m_0d_int_Scalar <= 6; var_m_0d_int_Scalar++) {
                                        bool aux_m_read = true;
                                        // read LIST body
                                        cpp_j++;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            // store data in Python dictionary
                            if (((aux_last_type_read_for_AJ == SCALAR_DOUBLE) && (aux_AJ_read == true))) {
                              cpp_current_dict["AJ"] = var_AJ_0d_double_Scalar;
                            }
                            if (((aux_last_type_read_for_PJ == SCALAR_DOUBLE) && (aux_PJ_read == true))) {
                              cpp_current_dict["PJ"] = var_PJ_0d_double_Scalar;
                            }
                            if (((aux_last_type_read_for_KBK == SCALAR_INT) && (aux_KBK_read == true))) {
                              cpp_current_dict["KBK"] = var_KBK_0d_int_Scalar;
                            }
                            if (((aux_last_type_read_for_KPS == SCALAR_INT) && (aux_KPS_read == true))) {
                              cpp_current_dict["KPS"] = var_KPS_0d_int_Scalar;
                            }
                            if (((aux_last_type_read_for_NCH == SCALAR_INT) && (aux_NCH_read == true))) {
                              cpp_current_dict["NCH"] = var_NCH_0d_int_Scalar;
                            }
                            if ((var_PPI_1d_double_NestedVector.get_last_index() != -1)) {
                              auto& cpp_curvar0 = var_PPI_1d_double_NestedVector;
                              cpp_current_dict["PPI"] = py::dict();
                              py::dict cpp_curdict0 = cpp_current_dict["PPI"];
                              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                              }
                            }
                            if ((var_L_1d_double_NestedVector.get_last_index() != -1)) {
                              auto& cpp_curvar0 = var_L_1d_double_NestedVector;
                              cpp_current_dict["L"] = py::dict();
                              py::dict cpp_curdict0 = cpp_current_dict["L"];
                              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                              }
                            }
                            if ((var_SCH_1d_double_NestedVector.get_last_index() != -1)) {
                              auto& cpp_curvar0 = var_SCH_1d_double_NestedVector;
                              cpp_current_dict["SCH"] = py::dict();
                              py::dict cpp_curdict0 = cpp_current_dict["SCH"];
                              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                              }
                            }
                            if ((var_BND_1d_double_NestedVector.get_last_index() != -1)) {
                              auto& cpp_curvar0 = var_BND_1d_double_NestedVector;
                              cpp_current_dict["BND"] = py::dict();
                              py::dict cpp_curdict0 = cpp_current_dict["BND"];
                              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                              }
                            }
                            if ((var_APE_1d_double_NestedVector.get_last_index() != -1)) {
                              auto& cpp_curvar0 = var_APE_1d_double_NestedVector;
                              cpp_current_dict["APE"] = py::dict();
                              py::dict cpp_curdict0 = cpp_current_dict["APE"];
                              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                              }
                            }
                            if ((var_APT_1d_double_NestedVector.get_last_index() != -1)) {
                              auto& cpp_curvar0 = var_APT_1d_double_NestedVector;
                              cpp_current_dict["APT"] = py::dict();
                              py::dict cpp_curdict0 = cpp_current_dict["APT"];
                              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                              }
                            }
                            if (((aux_last_type_read_for_NRS == SCALAR_INT) && (aux_NRS_read == true))) {
                              cpp_current_dict["NRS"] = var_NRS_0d_int_Scalar;
                            }
                            if ((var_ER_1d_double_NestedVector.get_last_index() != -1)) {
                              auto& cpp_curvar0 = var_ER_1d_double_NestedVector;
                              cpp_current_dict["ER"] = py::dict();
                              py::dict cpp_curdict0 = cpp_current_dict["ER"];
                              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                              }
                            }
                            if (var_GAM_2d_double_Matrix2d.did_read()) {
                                cpp_current_dict["GAM"] = py::dict();
                                py::dict cpp_curdict0 = cpp_current_dict["GAM"];
                                for (int cpp_i1 = var_GAM_2d_double_Matrix2d.get_row_start_index(); cpp_i1 <= var_GAM_2d_double_Matrix2d.get_row_last_index(); cpp_i1++) {
                                  cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                                  py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                                  for (int cpp_i2 = var_GAM_2d_double_Matrix2d.get_col_start_index(cpp_i1); cpp_i2 <= var_GAM_2d_double_Matrix2d.get_col_last_index(cpp_i1); cpp_i2++) {
                                    cpp_curdict1[py::cast(cpp_i2)] = var_GAM_2d_double_Matrix2d(cpp_i1, cpp_i2);
                                  }
                                }
                            }
                            if (((aux_last_type_read_for_NX == SCALAR_INT) && (aux_NX_read == true))) {
                              cpp_current_dict["NX"] = var_NX_0d_int_Scalar;
                            }
                            cpp_current_dict = cpp_parent_dict;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (! cpp_found_match) {
              if (! cpp_found_match) {
                if ((((((((aux_LRU_read == true)) && ((var_LRU_0d_int_Scalar)==(2)))))))) {
                  // if statement evaluation
                  cpp_found_match = true;
                  // evaluate if-elif-else clause
                  {
                    bool cpp_found_match = false;
                    if (! cpp_found_match) {
                      if (((((((((aux_LFW_read == true)) && ((var_LFW_0d_int_Scalar)==(0)))))&&((((aux_LRF_read == true)) && ((var_LRF_0d_int_Scalar)==(1)))))))) {
                        // if statement evaluation
                        cpp_found_match = true;
                        // evaluate if-elif-else clause
                        {
                          bool cpp_found_match = false;
                          if (! cpp_found_match) {
                            if ((((((((aux_NRO_read == true)) && ((var_NRO_0d_int_Scalar)!=(0)))))))) {
                              // if statement evaluation
                              cpp_found_match = true;
                              // read TAB1 record
                              cpp_line = cpp_read_line(cont);
                              {
                                Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                                // assign expression to variable Eint
                                var_Eint_0d_floatvec_Scalar = tab_body.X;
                                aux_Eint_read = true;
                                if ((aux_last_type_read_for_Eint != SCALAR_FLOATVEC && aux_last_type_read_for_Eint != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_Eint = SCALAR_FLOATVEC;
                                if ((! (aux_AP_read == true))) {
                                  // assign expression to variable AP
                                  var_AP_0d_floatvec_Scalar = tab_body.Y;
                                  aux_AP_read = true;
                                  if ((aux_last_type_read_for_AP != SCALAR_FLOATVEC && aux_last_type_read_for_AP != UNKNOWN)) {
                                    raise_vartype_mismatch();
                                  }
                                  aux_last_type_read_for_AP = SCALAR_FLOATVEC;
                                }
                                // assign expression to variable INT
                                var_INT_0d_intvec_Scalar = tab_body.INT;
                                aux_INT_read = true;
                                if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_INT = SCALAR_INTVEC;
                                // assign expression to variable NBT
                                var_NBT_0d_intvec_Scalar = tab_body.NBT;
                                aux_NBT_read = true;
                                if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_NBT = SCALAR_INTVEC;
                              }
                            }
                          }
                        }
                        // evaluate if-elif-else clause
                        {
                          bool cpp_found_match = false;
                          if (! cpp_found_match) {
                            if (((((((((aux_NRO_read == true)) && ((var_NRO_0d_int_Scalar)!=(0)))))&&(((((((((aux_NAPS_read == true)) && ((var_NAPS_0d_int_Scalar)==(0))))))||(((((aux_NAPS_read == true)) && ((var_NAPS_0d_int_Scalar)==(1)))))))))))) {
                              // if statement evaluation
                              cpp_found_match = true;
                              cpp_line = cpp_read_line(cont);
                              // read CONT record
                              if ((! (aux_SPI_read == true))) {
                                // assign expression to variable SPI
                                var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                                aux_SPI_read = true;
                                if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_SPI = SCALAR_DOUBLE;
                              }
                              // assign expression to variable LSSF
                              var_LSSF_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                              aux_LSSF_read = true;
                              if ((aux_last_type_read_for_LSSF != SCALAR_INT && aux_last_type_read_for_LSSF != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_LSSF = SCALAR_INT;
                              if ((! (aux_NLS_read == true))) {
                                // assign expression to variable NLS
                                var_NLS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                                aux_NLS_read = true;
                                if ((aux_last_type_read_for_NLS != SCALAR_INT && aux_last_type_read_for_NLS != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_NLS = SCALAR_INT;
                              }
                            }
                          }
                          if (! cpp_found_match) {
                            cpp_line = cpp_read_line(cont);
                            // read CONT record
                            if ((! (aux_SPI_read == true))) {
                              // assign expression to variable SPI
                              var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                              aux_SPI_read = true;
                              if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_SPI = SCALAR_DOUBLE;
                            }
                            if ((! (aux_AP_read == true))) {
                              // assign expression to variable AP
                              var_AP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                              aux_AP_read = true;
                              if ((aux_last_type_read_for_AP != SCALAR_DOUBLE && aux_last_type_read_for_AP != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_AP = SCALAR_DOUBLE;
                            }
                            // assign expression to variable LSSF
                            var_LSSF_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                            aux_LSSF_read = true;
                            if ((aux_last_type_read_for_LSSF != SCALAR_INT && aux_last_type_read_for_LSSF != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_LSSF = SCALAR_INT;
                            if ((! (aux_NLS_read == true))) {
                              // assign expression to variable NLS
                              var_NLS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                              aux_NLS_read = true;
                              if ((aux_last_type_read_for_NLS != SCALAR_INT && aux_last_type_read_for_NLS != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_NLS = SCALAR_INT;
                            }
                          }
                        }

                        for (int var_p_0d_int_Scalar = 1;
                           var_p_0d_int_Scalar <= var_NLS_0d_int_Scalar; var_p_0d_int_Scalar++) {
                          bool aux_p_read = true;
                          // open section l_group

                          {
                              py::dict cpp_parent_dict = cpp_current_dict;
                              if (! cpp_parent_dict.contains("l_group")) {
                                cpp_parent_dict["l_group"] = py::dict();
                              }
                              py::dict cpp_current_dict = cpp_parent_dict["l_group"];

                              if (! cpp_current_dict.contains(py::cast(var_p_0d_int_Scalar))) {
                                cpp_current_dict[py::cast(var_p_0d_int_Scalar)] = py::dict();
                              }
                              cpp_current_dict = cpp_current_dict[py::cast(var_p_0d_int_Scalar)];
                            // variable declarations
                            double var_AWRI_0d_double_Scalar;
                            bool aux_AWRI_read = false;
                            vartype aux_last_type_read_for_AWRI = UNKNOWN;
                            int var_L_0d_int_Scalar;
                            bool aux_L_read = false;
                            vartype aux_last_type_read_for_L = UNKNOWN;
                            int cpp_int_val;
                            bool aux_cpp_int_val_read = false;
                            vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                            int var_NJS_0d_int_Scalar;
                            bool aux_NJS_read = false;
                            vartype aux_last_type_read_for_NJS = UNKNOWN;
                            NestedVector<double> var_D_1d_double_NestedVector;
                            vartype aux_last_type_read_for_D = UNKNOWN;
                            NestedVector<double> var_AJ_1d_double_NestedVector;
                            vartype aux_last_type_read_for_AJ = UNKNOWN;
                            NestedVector<double> var_AMUN_1d_double_NestedVector;
                            vartype aux_last_type_read_for_AMUN = UNKNOWN;
                            NestedVector<double> var_GN0_1d_double_NestedVector;
                            vartype aux_last_type_read_for_GN0 = UNKNOWN;
                            NestedVector<double> var_GG_1d_double_NestedVector;
                            vartype aux_last_type_read_for_GG = UNKNOWN;
                            cpp_line = cpp_read_line(cont);
                            // read LIST record
                            // assign expression to variable AWRI
                            var_AWRI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                            aux_AWRI_read = true;
                            if ((aux_last_type_read_for_AWRI != SCALAR_DOUBLE && aux_last_type_read_for_AWRI != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_AWRI = SCALAR_DOUBLE;
                            // assign expression to variable L
                            var_L_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                            aux_L_read = true;
                            if ((aux_last_type_read_for_L != SCALAR_INT && aux_last_type_read_for_L != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_L = SCALAR_INT;
                            // assign expression to variable cpp_int_val
                            cpp_int_val = cpp_read_int_field(cpp_line, 4);
                            aux_cpp_int_val_read = true;
                            if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                            // assign expression to variable NJS
                            var_NJS_0d_int_Scalar = (cpp_int_val/6);
                            aux_NJS_read = true;
                            if ((aux_last_type_read_for_NJS != SCALAR_INT && aux_last_type_read_for_NJS != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_NJS = SCALAR_INT;
                            if ((! (aux_NJS_read == true))) {
                              // assign expression to variable NJS
                              var_NJS_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                              aux_NJS_read = true;
                              if ((aux_last_type_read_for_NJS != SCALAR_INT && aux_last_type_read_for_NJS != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_NJS = SCALAR_INT;
                            }
                            {
                              int cpp_npl = cpp_read_int_field(cpp_line, 4);
                              cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                              int cpp_j = 0;
                              // read LIST body

                              for (int var_m_0d_int_Scalar = 1;
                                 var_m_0d_int_Scalar <= var_NJS_0d_int_Scalar; var_m_0d_int_Scalar++) {
                                bool aux_m_read = true;
                                // read LIST body
                                // assign expression to variable D
                                var_D_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                if ((aux_last_type_read_for_D != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_D != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_D = NESTEDVECTOR_DOUBLE;
                                // assign expression to variable AJ
                                var_AJ_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                if ((aux_last_type_read_for_AJ != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_AJ != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_AJ = NESTEDVECTOR_DOUBLE;
                                // assign expression to variable AMUN
                                var_AMUN_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                if ((aux_last_type_read_for_AMUN != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_AMUN != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_AMUN = NESTEDVECTOR_DOUBLE;
                                // assign expression to variable GN0
                                var_GN0_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                if ((aux_last_type_read_for_GN0 != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GN0 != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_GN0 = NESTEDVECTOR_DOUBLE;
                                // assign expression to variable GG
                                var_GG_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                if ((aux_last_type_read_for_GG != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GG != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_GG = NESTEDVECTOR_DOUBLE;
                                cpp_j++;
                              }
                            }
                            // store data in Python dictionary
                            if (((aux_last_type_read_for_AWRI == SCALAR_DOUBLE) && (aux_AWRI_read == true))) {
                              cpp_current_dict["AWRI"] = var_AWRI_0d_double_Scalar;
                            }
                            if (((aux_last_type_read_for_L == SCALAR_INT) && (aux_L_read == true))) {
                              cpp_current_dict["L"] = var_L_0d_int_Scalar;
                            }
                            if (((aux_last_type_read_for_NJS == SCALAR_INT) && (aux_NJS_read == true))) {
                              cpp_current_dict["NJS"] = var_NJS_0d_int_Scalar;
                            }
                            if ((var_D_1d_double_NestedVector.get_last_index() != -1)) {
                              auto& cpp_curvar0 = var_D_1d_double_NestedVector;
                              cpp_current_dict["D"] = py::dict();
                              py::dict cpp_curdict0 = cpp_current_dict["D"];
                              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                              }
                            }
                            if ((var_AJ_1d_double_NestedVector.get_last_index() != -1)) {
                              auto& cpp_curvar0 = var_AJ_1d_double_NestedVector;
                              cpp_current_dict["AJ"] = py::dict();
                              py::dict cpp_curdict0 = cpp_current_dict["AJ"];
                              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                              }
                            }
                            if ((var_AMUN_1d_double_NestedVector.get_last_index() != -1)) {
                              auto& cpp_curvar0 = var_AMUN_1d_double_NestedVector;
                              cpp_current_dict["AMUN"] = py::dict();
                              py::dict cpp_curdict0 = cpp_current_dict["AMUN"];
                              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                              }
                            }
                            if ((var_GN0_1d_double_NestedVector.get_last_index() != -1)) {
                              auto& cpp_curvar0 = var_GN0_1d_double_NestedVector;
                              cpp_current_dict["GN0"] = py::dict();
                              py::dict cpp_curdict0 = cpp_current_dict["GN0"];
                              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                              }
                            }
                            if ((var_GG_1d_double_NestedVector.get_last_index() != -1)) {
                              auto& cpp_curvar0 = var_GG_1d_double_NestedVector;
                              cpp_current_dict["GG"] = py::dict();
                              py::dict cpp_curdict0 = cpp_current_dict["GG"];
                              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                              }
                            }
                            cpp_current_dict = cpp_parent_dict;
                          }
                        }
                      }
                    }
                    if (! cpp_found_match) {
                      if (! cpp_found_match) {
                        if (((((((((aux_LFW_read == true)) && ((var_LFW_0d_int_Scalar)==(1)))))&&((((aux_LRF_read == true)) && ((var_LRF_0d_int_Scalar)==(1)))))))) {
                          // if statement evaluation
                          cpp_found_match = true;
                          cpp_line = cpp_read_line(cont);
                          // read LIST record
                          if ((! (aux_SPI_read == true))) {
                            // assign expression to variable SPI
                            var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                            aux_SPI_read = true;
                            if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_SPI = SCALAR_DOUBLE;
                          }
                          if ((! (aux_AP_read == true))) {
                            // assign expression to variable AP
                            var_AP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                            aux_AP_read = true;
                            if ((aux_last_type_read_for_AP != SCALAR_DOUBLE && aux_last_type_read_for_AP != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_AP = SCALAR_DOUBLE;
                          }
                          // assign expression to variable LSSF
                          var_LSSF_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                          aux_LSSF_read = true;
                          if ((aux_last_type_read_for_LSSF != SCALAR_INT && aux_last_type_read_for_LSSF != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LSSF = SCALAR_INT;
                          // assign expression to variable NE
                          var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                          aux_NE_read = true;
                          if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NE = SCALAR_INT;
                          if ((! (aux_NLS_read == true))) {
                            // assign expression to variable NLS
                            var_NLS_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                            aux_NLS_read = true;
                            if ((aux_last_type_read_for_NLS != SCALAR_INT && aux_last_type_read_for_NLS != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_NLS = SCALAR_INT;
                          }
                          {
                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                            int cpp_j = 0;
                            // read LIST body

                            for (int var_p_0d_int_Scalar = 1;
                               var_p_0d_int_Scalar <= var_NE_0d_int_Scalar; var_p_0d_int_Scalar++) {
                              bool aux_p_read = true;
                              // read LIST body
                              // assign expression to variable ES
                              var_ES_1d_double_NestedVector.set(var_p_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                              if ((aux_last_type_read_for_ES != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ES != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_ES = NESTEDVECTOR_DOUBLE;
                            }
                          }

                          for (int var_p_0d_int_Scalar = 1;
                             var_p_0d_int_Scalar <= var_NLS_0d_int_Scalar; var_p_0d_int_Scalar++) {
                            bool aux_p_read = true;
                            // open section j_group

                            {
                                py::dict cpp_parent_dict = cpp_current_dict;
                                if (! cpp_parent_dict.contains("j_group")) {
                                  cpp_parent_dict["j_group"] = py::dict();
                                }
                                py::dict cpp_current_dict = cpp_parent_dict["j_group"];

                                if (! cpp_current_dict.contains(py::cast(var_p_0d_int_Scalar))) {
                                  cpp_current_dict[py::cast(var_p_0d_int_Scalar)] = py::dict();
                                }
                                cpp_current_dict = cpp_current_dict[py::cast(var_p_0d_int_Scalar)];
                              // variable declarations
                              double var_AWRI_0d_double_Scalar;
                              bool aux_AWRI_read = false;
                              vartype aux_last_type_read_for_AWRI = UNKNOWN;
                              int var_L_0d_int_Scalar;
                              bool aux_L_read = false;
                              vartype aux_last_type_read_for_L = UNKNOWN;
                              int var_NJS_0d_int_Scalar;
                              bool aux_NJS_read = false;
                              vartype aux_last_type_read_for_NJS = UNKNOWN;
                              cpp_line = cpp_read_line(cont);
                              // read CONT record
                              // assign expression to variable AWRI
                              var_AWRI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                              aux_AWRI_read = true;
                              if ((aux_last_type_read_for_AWRI != SCALAR_DOUBLE && aux_last_type_read_for_AWRI != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_AWRI = SCALAR_DOUBLE;
                              // assign expression to variable L
                              var_L_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                              aux_L_read = true;
                              if ((aux_last_type_read_for_L != SCALAR_INT && aux_last_type_read_for_L != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_L = SCALAR_INT;
                              // assign expression to variable NJS
                              var_NJS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                              aux_NJS_read = true;
                              if ((aux_last_type_read_for_NJS != SCALAR_INT && aux_last_type_read_for_NJS != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_NJS = SCALAR_INT;

                              for (int var_n_0d_int_Scalar = 1;
                                 var_n_0d_int_Scalar <= var_NJS_0d_int_Scalar; var_n_0d_int_Scalar++) {
                                bool aux_n_read = true;
                                // open section subsec

                                {
                                    py::dict cpp_parent_dict = cpp_current_dict;
                                    if (! cpp_parent_dict.contains("subsec")) {
                                      cpp_parent_dict["subsec"] = py::dict();
                                    }
                                    py::dict cpp_current_dict = cpp_parent_dict["subsec"];

                                    if (! cpp_current_dict.contains(py::cast(var_n_0d_int_Scalar))) {
                                      cpp_current_dict[py::cast(var_n_0d_int_Scalar)] = py::dict();
                                    }
                                    cpp_current_dict = cpp_current_dict[py::cast(var_n_0d_int_Scalar)];
                                  // variable declarations
                                  int var_L_0d_int_Scalar;
                                  bool aux_L_read = false;
                                  vartype aux_last_type_read_for_L = UNKNOWN;
                                  int var_MUF_0d_int_Scalar;
                                  bool aux_MUF_read = false;
                                  vartype aux_last_type_read_for_MUF = UNKNOWN;
                                  int cpp_int_val;
                                  bool aux_cpp_int_val_read = false;
                                  vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                                  int var_NE_0d_int_Scalar;
                                  bool aux_NE_read = false;
                                  vartype aux_last_type_read_for_NE = UNKNOWN;
                                  double var_D_0d_double_Scalar;
                                  bool aux_D_read = false;
                                  vartype aux_last_type_read_for_D = UNKNOWN;
                                  double var_AJ_0d_double_Scalar;
                                  bool aux_AJ_read = false;
                                  vartype aux_last_type_read_for_AJ = UNKNOWN;
                                  double var_AMUN_0d_double_Scalar;
                                  bool aux_AMUN_read = false;
                                  vartype aux_last_type_read_for_AMUN = UNKNOWN;
                                  double var_GN0_0d_double_Scalar;
                                  bool aux_GN0_read = false;
                                  vartype aux_last_type_read_for_GN0 = UNKNOWN;
                                  double var_GG_0d_double_Scalar;
                                  bool aux_GG_read = false;
                                  vartype aux_last_type_read_for_GG = UNKNOWN;
                                  NestedVector<double> var_GF_1d_double_NestedVector;
                                  vartype aux_last_type_read_for_GF = UNKNOWN;
                                  cpp_line = cpp_read_line(cont);
                                  // read LIST record
                                  if ((! (aux_L_read == true))) {
                                    // assign expression to variable L
                                    var_L_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                                    aux_L_read = true;
                                    if ((aux_last_type_read_for_L != SCALAR_INT && aux_last_type_read_for_L != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_L = SCALAR_INT;
                                  }
                                  // assign expression to variable MUF
                                  var_MUF_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                                  aux_MUF_read = true;
                                  if ((aux_last_type_read_for_MUF != SCALAR_INT && aux_last_type_read_for_MUF != UNKNOWN)) {
                                    raise_vartype_mismatch();
                                  }
                                  aux_last_type_read_for_MUF = SCALAR_INT;
                                  if ((! (aux_NE_read == true))) {
                                    // assign expression to variable cpp_int_val
                                    cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                    aux_cpp_int_val_read = true;
                                    if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                                    // assign expression to variable NE
                                    var_NE_0d_int_Scalar = (cpp_int_val+(-6));
                                    aux_NE_read = true;
                                    if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_NE = SCALAR_INT;
                                  }
                                  {
                                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                    int cpp_j = 0;
                                    // read LIST body
                                    // assign expression to variable D
                                    var_D_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                    aux_D_read = true;
                                    if ((aux_last_type_read_for_D != SCALAR_DOUBLE && aux_last_type_read_for_D != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_D = SCALAR_DOUBLE;
                                    // assign expression to variable AJ
                                    var_AJ_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                    aux_AJ_read = true;
                                    if ((aux_last_type_read_for_AJ != SCALAR_DOUBLE && aux_last_type_read_for_AJ != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_AJ = SCALAR_DOUBLE;
                                    // assign expression to variable AMUN
                                    var_AMUN_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                    aux_AMUN_read = true;
                                    if ((aux_last_type_read_for_AMUN != SCALAR_DOUBLE && aux_last_type_read_for_AMUN != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_AMUN = SCALAR_DOUBLE;
                                    // assign expression to variable GN0
                                    var_GN0_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                    aux_GN0_read = true;
                                    if ((aux_last_type_read_for_GN0 != SCALAR_DOUBLE && aux_last_type_read_for_GN0 != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_GN0 = SCALAR_DOUBLE;
                                    // assign expression to variable GG
                                    var_GG_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                    aux_GG_read = true;
                                    if ((aux_last_type_read_for_GG != SCALAR_DOUBLE && aux_last_type_read_for_GG != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_GG = SCALAR_DOUBLE;
                                    cpp_j++;

                                    for (int var_m_0d_int_Scalar = 1;
                                       var_m_0d_int_Scalar <= var_NE_0d_int_Scalar; var_m_0d_int_Scalar++) {
                                      bool aux_m_read = true;
                                      // read LIST body
                                      // assign expression to variable GF
                                      var_GF_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                      if ((aux_last_type_read_for_GF != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GF != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_GF = NESTEDVECTOR_DOUBLE;
                                    }
                                  }
                                  // store data in Python dictionary
                                  if (((aux_last_type_read_for_L == SCALAR_INT) && (aux_L_read == true))) {
                                    cpp_current_dict["L"] = var_L_0d_int_Scalar;
                                  }
                                  if (((aux_last_type_read_for_MUF == SCALAR_INT) && (aux_MUF_read == true))) {
                                    cpp_current_dict["MUF"] = var_MUF_0d_int_Scalar;
                                  }
                                  if (((aux_last_type_read_for_NE == SCALAR_INT) && (aux_NE_read == true))) {
                                    cpp_current_dict["NE"] = var_NE_0d_int_Scalar;
                                  }
                                  if (((aux_last_type_read_for_D == SCALAR_DOUBLE) && (aux_D_read == true))) {
                                    cpp_current_dict["D"] = var_D_0d_double_Scalar;
                                  }
                                  if (((aux_last_type_read_for_AJ == SCALAR_DOUBLE) && (aux_AJ_read == true))) {
                                    cpp_current_dict["AJ"] = var_AJ_0d_double_Scalar;
                                  }
                                  if (((aux_last_type_read_for_AMUN == SCALAR_DOUBLE) && (aux_AMUN_read == true))) {
                                    cpp_current_dict["AMUN"] = var_AMUN_0d_double_Scalar;
                                  }
                                  if (((aux_last_type_read_for_GN0 == SCALAR_DOUBLE) && (aux_GN0_read == true))) {
                                    cpp_current_dict["GN0"] = var_GN0_0d_double_Scalar;
                                  }
                                  if (((aux_last_type_read_for_GG == SCALAR_DOUBLE) && (aux_GG_read == true))) {
                                    cpp_current_dict["GG"] = var_GG_0d_double_Scalar;
                                  }
                                  if ((var_GF_1d_double_NestedVector.get_last_index() != -1)) {
                                    auto& cpp_curvar0 = var_GF_1d_double_NestedVector;
                                    cpp_current_dict["GF"] = py::dict();
                                    py::dict cpp_curdict0 = cpp_current_dict["GF"];
                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                    }
                                  }
                                  cpp_current_dict = cpp_parent_dict;
                                }
                              }
                              // store data in Python dictionary
                              if (((aux_last_type_read_for_AWRI == SCALAR_DOUBLE) && (aux_AWRI_read == true))) {
                                cpp_current_dict["AWRI"] = var_AWRI_0d_double_Scalar;
                              }
                              if (((aux_last_type_read_for_L == SCALAR_INT) && (aux_L_read == true))) {
                                cpp_current_dict["L"] = var_L_0d_int_Scalar;
                              }
                              if (((aux_last_type_read_for_NJS == SCALAR_INT) && (aux_NJS_read == true))) {
                                cpp_current_dict["NJS"] = var_NJS_0d_int_Scalar;
                              }
                              cpp_current_dict = cpp_parent_dict;
                            }
                          }
                        }
                      }
                    }
                    if (! cpp_found_match) {
                      if (! cpp_found_match) {
                        if ((((((((((((((aux_LFW_read == true)) && ((var_LFW_0d_int_Scalar)==(0))))))||(((((aux_LFW_read == true)) && ((var_LFW_0d_int_Scalar)==(1)))))))))&&((((aux_LRF_read == true)) && ((var_LRF_0d_int_Scalar)==(2)))))))) {
                          // if statement evaluation
                          cpp_found_match = true;
                          // evaluate if-elif-else clause
                          {
                            bool cpp_found_match = false;
                            if (! cpp_found_match) {
                              if ((((((((aux_NRO_read == true)) && ((var_NRO_0d_int_Scalar)!=(0)))))))) {
                                // if statement evaluation
                                cpp_found_match = true;
                                // read TAB1 record
                                cpp_line = cpp_read_line(cont);
                                {
                                  Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                                  // assign expression to variable Eint
                                  var_Eint_0d_floatvec_Scalar = tab_body.X;
                                  aux_Eint_read = true;
                                  if ((aux_last_type_read_for_Eint != SCALAR_FLOATVEC && aux_last_type_read_for_Eint != UNKNOWN)) {
                                    raise_vartype_mismatch();
                                  }
                                  aux_last_type_read_for_Eint = SCALAR_FLOATVEC;
                                  if ((! (aux_AP_read == true))) {
                                    // assign expression to variable AP
                                    var_AP_0d_floatvec_Scalar = tab_body.Y;
                                    aux_AP_read = true;
                                    if ((aux_last_type_read_for_AP != SCALAR_FLOATVEC && aux_last_type_read_for_AP != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_AP = SCALAR_FLOATVEC;
                                  }
                                  // assign expression to variable INT
                                  var_INT_0d_intvec_Scalar = tab_body.INT;
                                  aux_INT_read = true;
                                  if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                                    raise_vartype_mismatch();
                                  }
                                  aux_last_type_read_for_INT = SCALAR_INTVEC;
                                  // assign expression to variable NBT
                                  var_NBT_0d_intvec_Scalar = tab_body.NBT;
                                  aux_NBT_read = true;
                                  if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                                    raise_vartype_mismatch();
                                  }
                                  aux_last_type_read_for_NBT = SCALAR_INTVEC;
                                }
                              }
                            }
                          }
                          // evaluate if-elif-else clause
                          {
                            bool cpp_found_match = false;
                            if (! cpp_found_match) {
                              if (((((((((aux_NRO_read == true)) && ((var_NRO_0d_int_Scalar)!=(0)))))&&(((((((((aux_NAPS_read == true)) && ((var_NAPS_0d_int_Scalar)==(0))))))||(((((aux_NAPS_read == true)) && ((var_NAPS_0d_int_Scalar)==(1)))))))))))) {
                                // if statement evaluation
                                cpp_found_match = true;
                                cpp_line = cpp_read_line(cont);
                                // read CONT record
                                if ((! (aux_SPI_read == true))) {
                                  // assign expression to variable SPI
                                  var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                                  aux_SPI_read = true;
                                  if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
                                    raise_vartype_mismatch();
                                  }
                                  aux_last_type_read_for_SPI = SCALAR_DOUBLE;
                                }
                                // assign expression to variable LSSF
                                var_LSSF_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                                aux_LSSF_read = true;
                                if ((aux_last_type_read_for_LSSF != SCALAR_INT && aux_last_type_read_for_LSSF != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_LSSF = SCALAR_INT;
                                if ((! (aux_NLS_read == true))) {
                                  // assign expression to variable NLS
                                  var_NLS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                                  aux_NLS_read = true;
                                  if ((aux_last_type_read_for_NLS != SCALAR_INT && aux_last_type_read_for_NLS != UNKNOWN)) {
                                    raise_vartype_mismatch();
                                  }
                                  aux_last_type_read_for_NLS = SCALAR_INT;
                                }
                              }
                            }
                            if (! cpp_found_match) {
                              cpp_line = cpp_read_line(cont);
                              // read CONT record
                              if ((! (aux_SPI_read == true))) {
                                // assign expression to variable SPI
                                var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                                aux_SPI_read = true;
                                if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_SPI = SCALAR_DOUBLE;
                              }
                              if ((! (aux_AP_read == true))) {
                                // assign expression to variable AP
                                var_AP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                                aux_AP_read = true;
                                if ((aux_last_type_read_for_AP != SCALAR_DOUBLE && aux_last_type_read_for_AP != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_AP = SCALAR_DOUBLE;
                              }
                              // assign expression to variable LSSF
                              var_LSSF_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                              aux_LSSF_read = true;
                              if ((aux_last_type_read_for_LSSF != SCALAR_INT && aux_last_type_read_for_LSSF != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_LSSF = SCALAR_INT;
                              if ((! (aux_NLS_read == true))) {
                                // assign expression to variable NLS
                                var_NLS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                                aux_NLS_read = true;
                                if ((aux_last_type_read_for_NLS != SCALAR_INT && aux_last_type_read_for_NLS != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_NLS = SCALAR_INT;
                              }
                            }
                          }

                          for (int var_p_0d_int_Scalar = 1;
                             var_p_0d_int_Scalar <= var_NLS_0d_int_Scalar; var_p_0d_int_Scalar++) {
                            bool aux_p_read = true;
                            // open section l_group

                            {
                                py::dict cpp_parent_dict = cpp_current_dict;
                                if (! cpp_parent_dict.contains("l_group")) {
                                  cpp_parent_dict["l_group"] = py::dict();
                                }
                                py::dict cpp_current_dict = cpp_parent_dict["l_group"];

                                if (! cpp_current_dict.contains(py::cast(var_p_0d_int_Scalar))) {
                                  cpp_current_dict[py::cast(var_p_0d_int_Scalar)] = py::dict();
                                }
                                cpp_current_dict = cpp_current_dict[py::cast(var_p_0d_int_Scalar)];
                              // variable declarations
                              double var_AWRI_0d_double_Scalar;
                              bool aux_AWRI_read = false;
                              vartype aux_last_type_read_for_AWRI = UNKNOWN;
                              int var_L_0d_int_Scalar;
                              bool aux_L_read = false;
                              vartype aux_last_type_read_for_L = UNKNOWN;
                              int var_NJS_0d_int_Scalar;
                              bool aux_NJS_read = false;
                              vartype aux_last_type_read_for_NJS = UNKNOWN;
                              cpp_line = cpp_read_line(cont);
                              // read CONT record
                              // assign expression to variable AWRI
                              var_AWRI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                              aux_AWRI_read = true;
                              if ((aux_last_type_read_for_AWRI != SCALAR_DOUBLE && aux_last_type_read_for_AWRI != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_AWRI = SCALAR_DOUBLE;
                              // assign expression to variable L
                              var_L_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                              aux_L_read = true;
                              if ((aux_last_type_read_for_L != SCALAR_INT && aux_last_type_read_for_L != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_L = SCALAR_INT;
                              // assign expression to variable NJS
                              var_NJS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                              aux_NJS_read = true;
                              if ((aux_last_type_read_for_NJS != SCALAR_INT && aux_last_type_read_for_NJS != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_NJS = SCALAR_INT;

                              for (int var_n_0d_int_Scalar = 1;
                                 var_n_0d_int_Scalar <= var_NJS_0d_int_Scalar; var_n_0d_int_Scalar++) {
                                bool aux_n_read = true;
                                // open section subsec

                                {
                                    py::dict cpp_parent_dict = cpp_current_dict;
                                    if (! cpp_parent_dict.contains("subsec")) {
                                      cpp_parent_dict["subsec"] = py::dict();
                                    }
                                    py::dict cpp_current_dict = cpp_parent_dict["subsec"];

                                    if (! cpp_current_dict.contains(py::cast(var_n_0d_int_Scalar))) {
                                      cpp_current_dict[py::cast(var_n_0d_int_Scalar)] = py::dict();
                                    }
                                    cpp_current_dict = cpp_current_dict[py::cast(var_n_0d_int_Scalar)];
                                  // variable declarations
                                  double var_AJ_0d_double_Scalar;
                                  bool aux_AJ_read = false;
                                  vartype aux_last_type_read_for_AJ = UNKNOWN;
                                  int var_INT_0d_int_Scalar;
                                  bool aux_INT_read = false;
                                  vartype aux_last_type_read_for_INT = UNKNOWN;
                                  int cpp_int_val;
                                  bool aux_cpp_int_val_read = false;
                                  vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                                  int var_NE_0d_int_Scalar;
                                  bool aux_NE_read = false;
                                  vartype aux_last_type_read_for_NE = UNKNOWN;
                                  double var_AMUX_0d_double_Scalar;
                                  bool aux_AMUX_read = false;
                                  vartype aux_last_type_read_for_AMUX = UNKNOWN;
                                  double var_AMUN_0d_double_Scalar;
                                  bool aux_AMUN_read = false;
                                  vartype aux_last_type_read_for_AMUN = UNKNOWN;
                                  double var_AMUG_0d_double_Scalar;
                                  bool aux_AMUG_read = false;
                                  vartype aux_last_type_read_for_AMUG = UNKNOWN;
                                  double var_AMUF_0d_double_Scalar;
                                  bool aux_AMUF_read = false;
                                  vartype aux_last_type_read_for_AMUF = UNKNOWN;
                                  NestedVector<double> var_ES_1d_double_NestedVector;
                                  vartype aux_last_type_read_for_ES = UNKNOWN;
                                  NestedVector<double> var_D_1d_double_NestedVector;
                                  vartype aux_last_type_read_for_D = UNKNOWN;
                                  NestedVector<double> var_GX_1d_double_NestedVector;
                                  vartype aux_last_type_read_for_GX = UNKNOWN;
                                  NestedVector<double> var_GN0_1d_double_NestedVector;
                                  vartype aux_last_type_read_for_GN0 = UNKNOWN;
                                  NestedVector<double> var_GG_1d_double_NestedVector;
                                  vartype aux_last_type_read_for_GG = UNKNOWN;
                                  NestedVector<double> var_GF_1d_double_NestedVector;
                                  vartype aux_last_type_read_for_GF = UNKNOWN;
                                  cpp_line = cpp_read_line(cont);
                                  // read LIST record
                                  // assign expression to variable AJ
                                  var_AJ_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                                  aux_AJ_read = true;
                                  if ((aux_last_type_read_for_AJ != SCALAR_DOUBLE && aux_last_type_read_for_AJ != UNKNOWN)) {
                                    raise_vartype_mismatch();
                                  }
                                  aux_last_type_read_for_AJ = SCALAR_DOUBLE;
                                  if ((! (aux_INT_read == true))) {
                                    // assign expression to variable INT
                                    var_INT_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                                    aux_INT_read = true;
                                    if ((aux_last_type_read_for_INT != SCALAR_INT && aux_last_type_read_for_INT != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_INT = SCALAR_INT;
                                  }
                                  // assign expression to variable cpp_int_val
                                  cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                  aux_cpp_int_val_read = true;
                                  if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                                    raise_vartype_mismatch();
                                  }
                                  aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                                  // assign expression to variable NE
                                  var_NE_0d_int_Scalar = ((cpp_int_val+(-6))/6);
                                  aux_NE_read = true;
                                  if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                                    raise_vartype_mismatch();
                                  }
                                  aux_last_type_read_for_NE = SCALAR_INT;
                                  if ((! (aux_NE_read == true))) {
                                    // assign expression to variable NE
                                    var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                                    aux_NE_read = true;
                                    if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_NE = SCALAR_INT;
                                  }
                                  {
                                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                    int cpp_j = 0;
                                    // read LIST body
                                    cpp_j++;
                                    cpp_j++;
                                    // assign expression to variable AMUX
                                    var_AMUX_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                    aux_AMUX_read = true;
                                    if ((aux_last_type_read_for_AMUX != SCALAR_DOUBLE && aux_last_type_read_for_AMUX != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_AMUX = SCALAR_DOUBLE;
                                    // assign expression to variable AMUN
                                    var_AMUN_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                    aux_AMUN_read = true;
                                    if ((aux_last_type_read_for_AMUN != SCALAR_DOUBLE && aux_last_type_read_for_AMUN != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_AMUN = SCALAR_DOUBLE;
                                    // assign expression to variable AMUG
                                    var_AMUG_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                    aux_AMUG_read = true;
                                    if ((aux_last_type_read_for_AMUG != SCALAR_DOUBLE && aux_last_type_read_for_AMUG != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_AMUG = SCALAR_DOUBLE;
                                    // assign expression to variable AMUF
                                    var_AMUF_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                    aux_AMUF_read = true;
                                    if ((aux_last_type_read_for_AMUF != SCALAR_DOUBLE && aux_last_type_read_for_AMUF != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_AMUF = SCALAR_DOUBLE;

                                    for (int var_m_0d_int_Scalar = 1;
                                       var_m_0d_int_Scalar <= var_NE_0d_int_Scalar; var_m_0d_int_Scalar++) {
                                      bool aux_m_read = true;
                                      // read LIST body
                                      // assign expression to variable ES
                                      var_ES_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                      if ((aux_last_type_read_for_ES != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ES != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_ES = NESTEDVECTOR_DOUBLE;
                                      // assign expression to variable D
                                      var_D_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                      if ((aux_last_type_read_for_D != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_D != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_D = NESTEDVECTOR_DOUBLE;
                                      // assign expression to variable GX
                                      var_GX_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                      if ((aux_last_type_read_for_GX != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GX != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_GX = NESTEDVECTOR_DOUBLE;
                                      // assign expression to variable GN0
                                      var_GN0_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                      if ((aux_last_type_read_for_GN0 != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GN0 != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_GN0 = NESTEDVECTOR_DOUBLE;
                                      // assign expression to variable GG
                                      var_GG_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                      if ((aux_last_type_read_for_GG != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GG != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_GG = NESTEDVECTOR_DOUBLE;
                                      // assign expression to variable GF
                                      var_GF_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                      if ((aux_last_type_read_for_GF != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GF != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_GF = NESTEDVECTOR_DOUBLE;
                                    }
                                  }
                                  // store data in Python dictionary
                                  if (((aux_last_type_read_for_AJ == SCALAR_DOUBLE) && (aux_AJ_read == true))) {
                                    cpp_current_dict["AJ"] = var_AJ_0d_double_Scalar;
                                  }
                                  if (((aux_last_type_read_for_INT == SCALAR_INT) && (aux_INT_read == true))) {
                                    cpp_current_dict["INT"] = var_INT_0d_int_Scalar;
                                  }
                                  if (((aux_last_type_read_for_NE == SCALAR_INT) && (aux_NE_read == true))) {
                                    cpp_current_dict["NE"] = var_NE_0d_int_Scalar;
                                  }
                                  if (((aux_last_type_read_for_AMUX == SCALAR_DOUBLE) && (aux_AMUX_read == true))) {
                                    cpp_current_dict["AMUX"] = var_AMUX_0d_double_Scalar;
                                  }
                                  if (((aux_last_type_read_for_AMUN == SCALAR_DOUBLE) && (aux_AMUN_read == true))) {
                                    cpp_current_dict["AMUN"] = var_AMUN_0d_double_Scalar;
                                  }
                                  if (((aux_last_type_read_for_AMUG == SCALAR_DOUBLE) && (aux_AMUG_read == true))) {
                                    cpp_current_dict["AMUG"] = var_AMUG_0d_double_Scalar;
                                  }
                                  if (((aux_last_type_read_for_AMUF == SCALAR_DOUBLE) && (aux_AMUF_read == true))) {
                                    cpp_current_dict["AMUF"] = var_AMUF_0d_double_Scalar;
                                  }
                                  if ((var_ES_1d_double_NestedVector.get_last_index() != -1)) {
                                    auto& cpp_curvar0 = var_ES_1d_double_NestedVector;
                                    cpp_current_dict["ES"] = py::dict();
                                    py::dict cpp_curdict0 = cpp_current_dict["ES"];
                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                    }
                                  }
                                  if ((var_D_1d_double_NestedVector.get_last_index() != -1)) {
                                    auto& cpp_curvar0 = var_D_1d_double_NestedVector;
                                    cpp_current_dict["D"] = py::dict();
                                    py::dict cpp_curdict0 = cpp_current_dict["D"];
                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                    }
                                  }
                                  if ((var_GX_1d_double_NestedVector.get_last_index() != -1)) {
                                    auto& cpp_curvar0 = var_GX_1d_double_NestedVector;
                                    cpp_current_dict["GX"] = py::dict();
                                    py::dict cpp_curdict0 = cpp_current_dict["GX"];
                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                    }
                                  }
                                  if ((var_GN0_1d_double_NestedVector.get_last_index() != -1)) {
                                    auto& cpp_curvar0 = var_GN0_1d_double_NestedVector;
                                    cpp_current_dict["GN0"] = py::dict();
                                    py::dict cpp_curdict0 = cpp_current_dict["GN0"];
                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                    }
                                  }
                                  if ((var_GG_1d_double_NestedVector.get_last_index() != -1)) {
                                    auto& cpp_curvar0 = var_GG_1d_double_NestedVector;
                                    cpp_current_dict["GG"] = py::dict();
                                    py::dict cpp_curdict0 = cpp_current_dict["GG"];
                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                    }
                                  }
                                  if ((var_GF_1d_double_NestedVector.get_last_index() != -1)) {
                                    auto& cpp_curvar0 = var_GF_1d_double_NestedVector;
                                    cpp_current_dict["GF"] = py::dict();
                                    py::dict cpp_curdict0 = cpp_current_dict["GF"];
                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                    }
                                  }
                                  cpp_current_dict = cpp_parent_dict;
                                }
                              }
                              // store data in Python dictionary
                              if (((aux_last_type_read_for_AWRI == SCALAR_DOUBLE) && (aux_AWRI_read == true))) {
                                cpp_current_dict["AWRI"] = var_AWRI_0d_double_Scalar;
                              }
                              if (((aux_last_type_read_for_L == SCALAR_INT) && (aux_L_read == true))) {
                                cpp_current_dict["L"] = var_L_0d_int_Scalar;
                              }
                              if (((aux_last_type_read_for_NJS == SCALAR_INT) && (aux_NJS_read == true))) {
                                cpp_current_dict["NJS"] = var_NJS_0d_int_Scalar;
                              }
                              cpp_current_dict = cpp_parent_dict;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          // store data in Python dictionary
          if (((aux_last_type_read_for_EL == SCALAR_DOUBLE) && (aux_EL_read == true))) {
            cpp_current_dict["EL"] = var_EL_0d_double_Scalar;
          }
          if (((aux_last_type_read_for_EH == SCALAR_DOUBLE) && (aux_EH_read == true))) {
            cpp_current_dict["EH"] = var_EH_0d_double_Scalar;
          }
          if (((aux_last_type_read_for_LRU == SCALAR_INT) && (aux_LRU_read == true))) {
            cpp_current_dict["LRU"] = var_LRU_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_LRF == SCALAR_INT) && (aux_LRF_read == true))) {
            cpp_current_dict["LRF"] = var_LRF_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_NRO == SCALAR_INT) && (aux_NRO_read == true))) {
            cpp_current_dict["NRO"] = var_NRO_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_NAPS == SCALAR_INT) && (aux_NAPS_read == true))) {
            cpp_current_dict["NAPS"] = var_NAPS_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_SPI == SCALAR_DOUBLE) && (aux_SPI_read == true))) {
            cpp_current_dict["SPI"] = var_SPI_0d_double_Scalar;
          }
          if (((aux_last_type_read_for_AP == SCALAR_DOUBLE) && (aux_AP_read == true))) {
            cpp_current_dict["AP"] = var_AP_0d_double_Scalar;
          }
          if (((aux_last_type_read_for_AP == SCALAR_FLOATVEC) && (aux_AP_read == true))) {
            cpp_current_dict["AP"] = var_AP_0d_floatvec_Scalar;
          }
          if (((aux_last_type_read_for_NLS == SCALAR_INT) && (aux_NLS_read == true))) {
            cpp_current_dict["NLS"] = var_NLS_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_Eint == SCALAR_FLOATVEC) && (aux_Eint_read == true))) {
            cpp_current_dict["Eint"] = var_Eint_0d_floatvec_Scalar;
          }
          if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
            cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
          }
          if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
            cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
          }
          if (((aux_last_type_read_for_LAD == SCALAR_INT) && (aux_LAD_read == true))) {
            cpp_current_dict["LAD"] = var_LAD_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_NLSC == SCALAR_INT) && (aux_NLSC_read == true))) {
            cpp_current_dict["NLSC"] = var_NLSC_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_IFG == SCALAR_INT) && (aux_IFG_read == true))) {
            cpp_current_dict["IFG"] = var_IFG_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_KRM == SCALAR_INT) && (aux_KRM_read == true))) {
            cpp_current_dict["KRM"] = var_KRM_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_NJS == SCALAR_INT) && (aux_NJS_read == true))) {
            cpp_current_dict["NJS"] = var_NJS_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_KRL == SCALAR_INT) && (aux_KRL_read == true))) {
            cpp_current_dict["KRL"] = var_KRL_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_NPP == SCALAR_INT) && (aux_NPP_read == true))) {
            cpp_current_dict["NPP"] = var_NPP_0d_int_Scalar;
          }
          if ((var_MA_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_MA_1d_double_NestedVector;
            cpp_current_dict["MA"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["MA"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_MB_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_MB_1d_double_NestedVector;
            cpp_current_dict["MB"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["MB"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_ZA_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_ZA_1d_double_NestedVector;
            cpp_current_dict["ZA"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["ZA"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_ZB_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_ZB_1d_double_NestedVector;
            cpp_current_dict["ZB"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["ZB"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_IA_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_IA_1d_double_NestedVector;
            cpp_current_dict["IA"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["IA"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_IB_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_IB_1d_double_NestedVector;
            cpp_current_dict["IB"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["IB"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_Q_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_Q_1d_double_NestedVector;
            cpp_current_dict["Q"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["Q"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_PNT_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_PNT_1d_double_NestedVector;
            cpp_current_dict["PNT"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["PNT"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_SHF_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_SHF_1d_double_NestedVector;
            cpp_current_dict["SHF"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["SHF"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_MT_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_MT_1d_double_NestedVector;
            cpp_current_dict["MT"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["MT"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_PA_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_PA_1d_double_NestedVector;
            cpp_current_dict["PA"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["PA"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_PB_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_PB_1d_double_NestedVector;
            cpp_current_dict["PB"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["PB"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if (((aux_last_type_read_for_LSSF == SCALAR_INT) && (aux_LSSF_read == true))) {
            cpp_current_dict["LSSF"] = var_LSSF_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_NE == SCALAR_INT) && (aux_NE_read == true))) {
            cpp_current_dict["NE"] = var_NE_0d_int_Scalar;
          }
          if ((var_ES_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_ES_1d_double_NestedVector;
            cpp_current_dict["ES"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["ES"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          cpp_current_dict = cpp_parent_dict;
        }
      }
      // store data in Python dictionary
      if (((aux_last_type_read_for_ZAI == SCALAR_DOUBLE) && (aux_ZAI_read == true))) {
        cpp_current_dict["ZAI"] = var_ZAI_0d_double_Scalar;
      }
      if (((aux_last_type_read_for_ABN == SCALAR_DOUBLE) && (aux_ABN_read == true))) {
        cpp_current_dict["ABN"] = var_ABN_0d_double_Scalar;
      }
      if (((aux_last_type_read_for_LFW == SCALAR_INT) && (aux_LFW_read == true))) {
        cpp_current_dict["LFW"] = var_LFW_0d_int_Scalar;
      }
      if (((aux_last_type_read_for_NER == SCALAR_INT) && (aux_NER_read == true))) {
        cpp_current_dict["NER"] = var_NER_0d_int_Scalar;
      }
      cpp_current_dict = cpp_parent_dict;
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_NIS == SCALAR_INT) && (aux_NIS_read == true))) {
    cpp_current_dict["NIS"] = var_NIS_0d_int_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_mf3_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  double var_QM_0d_double_Scalar;
  bool aux_QM_read = false;
  vartype aux_last_type_read_for_QM = UNKNOWN;
  double var_QI_0d_double_Scalar;
  bool aux_QI_read = false;
  vartype aux_last_type_read_for_QI = UNKNOWN;
  int var_LR_0d_int_Scalar;
  bool aux_LR_read = false;
  vartype aux_last_type_read_for_LR = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // read TAB1 record
  cpp_line = cpp_read_line(cont);
  // assign expression to variable QM
  var_QM_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_QM_read = true;
  if ((aux_last_type_read_for_QM != SCALAR_DOUBLE && aux_last_type_read_for_QM != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_QM = SCALAR_DOUBLE;
  // assign expression to variable QI
  var_QI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_QI_read = true;
  if ((aux_last_type_read_for_QI != SCALAR_DOUBLE && aux_last_type_read_for_QI != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_QI = SCALAR_DOUBLE;
  // assign expression to variable LR
  var_LR_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
  aux_LR_read = true;
  if ((aux_last_type_read_for_LR != SCALAR_INT && aux_last_type_read_for_LR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LR = SCALAR_INT;

  {
      py::dict cpp_parent_dict = cpp_current_dict;
      if (! cpp_parent_dict.contains("xstable")) {
        cpp_parent_dict["xstable"] = py::dict();
      }
      py::dict cpp_current_dict = cpp_parent_dict["xstable"];
    // variable declarations
    std::vector<double> var_E_0d_floatvec_Scalar;
    bool aux_E_read = false;
    vartype aux_last_type_read_for_E = UNKNOWN;
    std::vector<double> var_xs_0d_floatvec_Scalar;
    bool aux_xs_read = false;
    vartype aux_last_type_read_for_xs = UNKNOWN;
    std::vector<int> var_INT_0d_intvec_Scalar;
    bool aux_INT_read = false;
    vartype aux_last_type_read_for_INT = UNKNOWN;
    std::vector<int> var_NBT_0d_intvec_Scalar;
    bool aux_NBT_read = false;
    vartype aux_last_type_read_for_NBT = UNKNOWN;
    {
      Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
      // assign expression to variable E
      var_E_0d_floatvec_Scalar = tab_body.X;
      aux_E_read = true;
      if ((aux_last_type_read_for_E != SCALAR_FLOATVEC && aux_last_type_read_for_E != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_E = SCALAR_FLOATVEC;
      // assign expression to variable xs
      var_xs_0d_floatvec_Scalar = tab_body.Y;
      aux_xs_read = true;
      if ((aux_last_type_read_for_xs != SCALAR_FLOATVEC && aux_last_type_read_for_xs != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_xs = SCALAR_FLOATVEC;
      // assign expression to variable INT
      var_INT_0d_intvec_Scalar = tab_body.INT;
      aux_INT_read = true;
      if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_INT = SCALAR_INTVEC;
      // assign expression to variable NBT
      var_NBT_0d_intvec_Scalar = tab_body.NBT;
      aux_NBT_read = true;
      if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_NBT = SCALAR_INTVEC;
    }
    // store data in Python dictionary
    if (((aux_last_type_read_for_E == SCALAR_FLOATVEC) && (aux_E_read == true))) {
      cpp_current_dict["E"] = var_E_0d_floatvec_Scalar;
    }
    if (((aux_last_type_read_for_xs == SCALAR_FLOATVEC) && (aux_xs_read == true))) {
      cpp_current_dict["xs"] = var_xs_0d_floatvec_Scalar;
    }
    if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
      cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
    }
    if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
      cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
    }
    cpp_current_dict = cpp_parent_dict;
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_QM == SCALAR_DOUBLE) && (aux_QM_read == true))) {
    cpp_current_dict["QM"] = var_QM_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_QI == SCALAR_DOUBLE) && (aux_QI_read == true))) {
    cpp_current_dict["QI"] = var_QI_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LR == SCALAR_INT) && (aux_LR_read == true))) {
    cpp_current_dict["LR"] = var_LR_0d_int_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_mf4_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_LTT_0d_int_Scalar;
  bool aux_LTT_read = false;
  vartype aux_last_type_read_for_LTT = UNKNOWN;
  int var_LI_0d_int_Scalar;
  bool aux_LI_read = false;
  vartype aux_last_type_read_for_LI = UNKNOWN;
  int var_LCT_0d_int_Scalar;
  bool aux_LCT_read = false;
  vartype aux_last_type_read_for_LCT = UNKNOWN;
  int var_NM_0d_int_Scalar;
  bool aux_NM_read = false;
  vartype aux_last_type_read_for_NM = UNKNOWN;
  int var_NE_0d_int_Scalar;
  bool aux_NE_read = false;
  vartype aux_last_type_read_for_NE = UNKNOWN;
  std::vector<int> var_INT_0d_intvec_Scalar;
  bool aux_INT_read = false;
  vartype aux_last_type_read_for_INT = UNKNOWN;
  std::vector<int> var_NBT_0d_intvec_Scalar;
  bool aux_NBT_read = false;
  vartype aux_last_type_read_for_NBT = UNKNOWN;
  double var_T_0d_double_Scalar;
  bool aux_T_read = false;
  vartype aux_last_type_read_for_T = UNKNOWN;
  NestedVector<double> var_E_1d_double_NestedVector;
  vartype aux_last_type_read_for_E = UNKNOWN;
  int var_LT_0d_int_Scalar;
  bool aux_LT_read = false;
  vartype aux_last_type_read_for_LT = UNKNOWN;
  NestedVector<int> var_NL_1d_int_NestedVector;
  vartype aux_last_type_read_for_NL = UNKNOWN;
  NestedVector<NestedVector<double>> var_a_2d_double_NestedVector;
  NestedVector<double>* ptr_a_2d_idx0;
  vartype aux_last_type_read_for_a = UNKNOWN;
  int var_NE1_0d_int_Scalar;
  bool aux_NE1_read = false;
  vartype aux_last_type_read_for_NE1 = UNKNOWN;
  NestedVector<NestedVector<double>> var_al_2d_double_NestedVector;
  NestedVector<double>* ptr_al_2d_idx0;
  vartype aux_last_type_read_for_al = UNKNOWN;
  int var_NE2_0d_int_Scalar;
  bool aux_NE2_read = false;
  vartype aux_last_type_read_for_NE2 = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // assign expression to variable LTT
  var_LTT_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
  aux_LTT_read = true;
  if ((aux_last_type_read_for_LTT != SCALAR_INT && aux_last_type_read_for_LTT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LTT = SCALAR_INT;
  // evaluate if-elif-else clause
  {
    bool cpp_found_match = false;
    if (! cpp_found_match) {
      // if statement evaluation with lookahead
      {
        std::streampos cpp_old_streampos = cont.tellg();
        {
          // variable declarations
          int& glob_var_MAT_0d_int_Scalar = var_MAT_0d_int_Scalar;
          int var_MAT_0d_int_Scalar = glob_var_MAT_0d_int_Scalar;
          bool& glob_aux_MAT_read = aux_MAT_read;
          bool aux_MAT_read = glob_aux_MAT_read;
          vartype aux_last_type_read_for_MAT = UNKNOWN;
          int& glob_var_MF_0d_int_Scalar = var_MF_0d_int_Scalar;
          int var_MF_0d_int_Scalar = glob_var_MF_0d_int_Scalar;
          bool& glob_aux_MF_read = aux_MF_read;
          bool aux_MF_read = glob_aux_MF_read;
          vartype aux_last_type_read_for_MF = UNKNOWN;
          int& glob_var_MT_0d_int_Scalar = var_MT_0d_int_Scalar;
          int var_MT_0d_int_Scalar = glob_var_MT_0d_int_Scalar;
          bool& glob_aux_MT_read = aux_MT_read;
          bool aux_MT_read = glob_aux_MT_read;
          vartype aux_last_type_read_for_MT = UNKNOWN;
          double& glob_var_ZA_0d_double_Scalar = var_ZA_0d_double_Scalar;
          double var_ZA_0d_double_Scalar = glob_var_ZA_0d_double_Scalar;
          bool& glob_aux_ZA_read = aux_ZA_read;
          bool aux_ZA_read = glob_aux_ZA_read;
          vartype aux_last_type_read_for_ZA = UNKNOWN;
          double& glob_var_AWR_0d_double_Scalar = var_AWR_0d_double_Scalar;
          double var_AWR_0d_double_Scalar = glob_var_AWR_0d_double_Scalar;
          bool& glob_aux_AWR_read = aux_AWR_read;
          bool aux_AWR_read = glob_aux_AWR_read;
          vartype aux_last_type_read_for_AWR = UNKNOWN;
          int& glob_var_LTT_0d_int_Scalar = var_LTT_0d_int_Scalar;
          int var_LTT_0d_int_Scalar = glob_var_LTT_0d_int_Scalar;
          bool& glob_aux_LTT_read = aux_LTT_read;
          bool aux_LTT_read = glob_aux_LTT_read;
          vartype aux_last_type_read_for_LTT = UNKNOWN;
          int& glob_var_LI_0d_int_Scalar = var_LI_0d_int_Scalar;
          int var_LI_0d_int_Scalar = glob_var_LI_0d_int_Scalar;
          bool& glob_aux_LI_read = aux_LI_read;
          bool aux_LI_read = glob_aux_LI_read;
          vartype aux_last_type_read_for_LI = UNKNOWN;
          int& glob_var_LCT_0d_int_Scalar = var_LCT_0d_int_Scalar;
          int var_LCT_0d_int_Scalar = glob_var_LCT_0d_int_Scalar;
          bool& glob_aux_LCT_read = aux_LCT_read;
          bool aux_LCT_read = glob_aux_LCT_read;
          vartype aux_last_type_read_for_LCT = UNKNOWN;
          int& glob_var_NM_0d_int_Scalar = var_NM_0d_int_Scalar;
          int var_NM_0d_int_Scalar = glob_var_NM_0d_int_Scalar;
          bool& glob_aux_NM_read = aux_NM_read;
          bool aux_NM_read = glob_aux_NM_read;
          vartype aux_last_type_read_for_NM = UNKNOWN;
          cpp_line = cpp_read_line(cont);
          // read CONT record
          if ((! (aux_AWR_read == true))) {
            // assign expression to variable AWR
            var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_AWR_read = true;
            if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_AWR = SCALAR_DOUBLE;
          }
          // assign expression to variable LI
          var_LI_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
          aux_LI_read = true;
          if ((aux_last_type_read_for_LI != SCALAR_INT && aux_last_type_read_for_LI != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_LI = SCALAR_INT;
          // assign expression to variable LCT
          var_LCT_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
          aux_LCT_read = true;
          if ((aux_last_type_read_for_LCT != SCALAR_INT && aux_last_type_read_for_LCT != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_LCT = SCALAR_INT;
          // assign expression to variable NM
          var_NM_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
          aux_NM_read = true;
          if ((aux_last_type_read_for_NM != SCALAR_INT && aux_last_type_read_for_NM != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NM = SCALAR_INT;
          if (((((((((aux_LTT_read == true)) && ((var_LTT_0d_int_Scalar)==(3)))))&&((((aux_LI_read == true)) && ((var_LI_0d_int_Scalar)==(0)))))))) {
            cpp_found_match = true;
          }
          cont.seekg(cpp_old_streampos);
        }
        if (cpp_found_match) {
          cpp_line = cpp_read_line(cont);
          // read CONT record
          if ((! (aux_AWR_read == true))) {
            // assign expression to variable AWR
            var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_AWR_read = true;
            if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_AWR = SCALAR_DOUBLE;
          }
          // assign expression to variable LI
          var_LI_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
          aux_LI_read = true;
          if ((aux_last_type_read_for_LI != SCALAR_INT && aux_last_type_read_for_LI != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_LI = SCALAR_INT;
          // assign expression to variable LCT
          var_LCT_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
          aux_LCT_read = true;
          if ((aux_last_type_read_for_LCT != SCALAR_INT && aux_last_type_read_for_LCT != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_LCT = SCALAR_INT;
          // assign expression to variable NM
          var_NM_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
          aux_NM_read = true;
          if ((aux_last_type_read_for_NM != SCALAR_INT && aux_last_type_read_for_NM != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NM = SCALAR_INT;
        }
      }
    }
    if (! cpp_found_match) {
      cpp_line = cpp_read_line(cont);
      // read CONT record
      if ((! (aux_AWR_read == true))) {
        // assign expression to variable AWR
        var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
        aux_AWR_read = true;
        if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
          raise_vartype_mismatch();
        }
        aux_last_type_read_for_AWR = SCALAR_DOUBLE;
      }
      // assign expression to variable LI
      var_LI_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
      aux_LI_read = true;
      if ((aux_last_type_read_for_LI != SCALAR_INT && aux_last_type_read_for_LI != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_LI = SCALAR_INT;
      // assign expression to variable LCT
      var_LCT_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
      aux_LCT_read = true;
      if ((aux_last_type_read_for_LCT != SCALAR_INT && aux_last_type_read_for_LCT != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_LCT = SCALAR_INT;
    }
  }
  // evaluate if-elif-else clause
  {
    bool cpp_found_match = false;
    if (! cpp_found_match) {
      if (((((((((aux_LTT_read == true)) && ((var_LTT_0d_int_Scalar)==(1)))))&&((((aux_LI_read == true)) && ((var_LI_0d_int_Scalar)==(0)))))))) {
        // if statement evaluation
        cpp_found_match = true;
        // read TAB2 record
        cpp_line = cpp_read_line(cont);
        // assign expression to variable NE
        var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
        aux_NE_read = true;
        if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
          raise_vartype_mismatch();
        }
        aux_last_type_read_for_NE = SCALAR_INT;
        {
          Tab2Body tab_body = read_tab2_body(cont, cpp_read_int_field(cpp_line, 4));
          // assign expression to variable INT
          var_INT_0d_intvec_Scalar = tab_body.INT;
          aux_INT_read = true;
          if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_INT = SCALAR_INTVEC;
          // assign expression to variable NBT
          var_NBT_0d_intvec_Scalar = tab_body.NBT;
          aux_NBT_read = true;
          if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NBT = SCALAR_INTVEC;
        }

        for (int var_i_0d_int_Scalar = 1;
           var_i_0d_int_Scalar <= var_NE_0d_int_Scalar; var_i_0d_int_Scalar++) {
          bool aux_i_read = true;
          cpp_line = cpp_read_line(cont);
          // read LIST record
          // assign expression to variable T
          var_T_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
          aux_T_read = true;
          if ((aux_last_type_read_for_T != SCALAR_DOUBLE && aux_last_type_read_for_T != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_T = SCALAR_DOUBLE;
          // assign expression to variable E
          var_E_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 1));
          if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
          // assign expression to variable LT
          var_LT_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
          aux_LT_read = true;
          if ((aux_last_type_read_for_LT != SCALAR_INT && aux_last_type_read_for_LT != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_LT = SCALAR_INT;
          // assign expression to variable NL
          var_NL_1d_int_NestedVector.set(var_i_0d_int_Scalar, cpp_read_int_field(cpp_line, 4));
          if ((aux_last_type_read_for_NL != NESTEDVECTOR_INT && aux_last_type_read_for_NL != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NL = NESTEDVECTOR_INT;
          {
            int cpp_npl = cpp_read_int_field(cpp_line, 4);
            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
            int cpp_j = 0;
            // read LIST body
            ptr_a_2d_idx0 = var_a_2d_double_NestedVector.prepare(var_i_0d_int_Scalar);

            for (int var_l_0d_int_Scalar = 1;
               var_l_0d_int_Scalar <= var_NL_1d_int_NestedVector[var_i_0d_int_Scalar]; var_l_0d_int_Scalar++) {
              bool aux_l_read = true;
              // read LIST body
              // assign expression to variable a
              ptr_a_2d_idx0->set(var_l_0d_int_Scalar, cpp_floatvec[cpp_j++]);
              if ((aux_last_type_read_for_a != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_a != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_a = NESTEDVECTOR_DOUBLE;
            }
          }
        }
      }
    }
    if (! cpp_found_match) {
      if (! cpp_found_match) {
        if (((((((((aux_LTT_read == true)) && ((var_LTT_0d_int_Scalar)==(2)))))&&((((aux_LI_read == true)) && ((var_LI_0d_int_Scalar)==(0)))))))) {
          // if statement evaluation
          cpp_found_match = true;
          // read TAB2 record
          cpp_line = cpp_read_line(cont);
          // assign expression to variable NE
          var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
          aux_NE_read = true;
          if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NE = SCALAR_INT;

          {
              py::dict cpp_parent_dict = cpp_current_dict;
              if (! cpp_parent_dict.contains("energy_table")) {
                cpp_parent_dict["energy_table"] = py::dict();
              }
              py::dict cpp_current_dict = cpp_parent_dict["energy_table"];
            // variable declarations
            std::vector<int> var_INT_0d_intvec_Scalar;
            bool aux_INT_read = false;
            vartype aux_last_type_read_for_INT = UNKNOWN;
            std::vector<int> var_NBT_0d_intvec_Scalar;
            bool aux_NBT_read = false;
            vartype aux_last_type_read_for_NBT = UNKNOWN;
            {
              Tab2Body tab_body = read_tab2_body(cont, cpp_read_int_field(cpp_line, 4));
              // assign expression to variable INT
              var_INT_0d_intvec_Scalar = tab_body.INT;
              aux_INT_read = true;
              if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_INT = SCALAR_INTVEC;
              // assign expression to variable NBT
              var_NBT_0d_intvec_Scalar = tab_body.NBT;
              aux_NBT_read = true;
              if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NBT = SCALAR_INTVEC;
            }
            // store data in Python dictionary
            if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
              cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
            }
            if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
              cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
            }
            cpp_current_dict = cpp_parent_dict;
          }

          for (int var_i_0d_int_Scalar = 1;
             var_i_0d_int_Scalar <= var_NE_0d_int_Scalar; var_i_0d_int_Scalar++) {
            bool aux_i_read = true;
            // read TAB1 record
            cpp_line = cpp_read_line(cont);
            // assign expression to variable T
            var_T_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_T_read = true;
            if ((aux_last_type_read_for_T != SCALAR_DOUBLE && aux_last_type_read_for_T != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_T = SCALAR_DOUBLE;
            // assign expression to variable E
            var_E_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 1));
            if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
            // assign expression to variable LT
            var_LT_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
            aux_LT_read = true;
            if ((aux_last_type_read_for_LT != SCALAR_INT && aux_last_type_read_for_LT != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LT = SCALAR_INT;

            {
                py::dict cpp_parent_dict = cpp_current_dict;
                if (! cpp_parent_dict.contains("angtable")) {
                  cpp_parent_dict["angtable"] = py::dict();
                }
                py::dict cpp_current_dict = cpp_parent_dict["angtable"];

                if (! cpp_current_dict.contains(py::cast(var_i_0d_int_Scalar))) {
                  cpp_current_dict[py::cast(var_i_0d_int_Scalar)] = py::dict();
                }
                cpp_current_dict = cpp_current_dict[py::cast(var_i_0d_int_Scalar)];
              // variable declarations
              std::vector<double> var_mu_0d_floatvec_Scalar;
              bool aux_mu_read = false;
              vartype aux_last_type_read_for_mu = UNKNOWN;
              std::vector<double> var_f_0d_floatvec_Scalar;
              bool aux_f_read = false;
              vartype aux_last_type_read_for_f = UNKNOWN;
              std::vector<int> var_INT_0d_intvec_Scalar;
              bool aux_INT_read = false;
              vartype aux_last_type_read_for_INT = UNKNOWN;
              std::vector<int> var_NBT_0d_intvec_Scalar;
              bool aux_NBT_read = false;
              vartype aux_last_type_read_for_NBT = UNKNOWN;
              {
                Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                // assign expression to variable mu
                var_mu_0d_floatvec_Scalar = tab_body.X;
                aux_mu_read = true;
                if ((aux_last_type_read_for_mu != SCALAR_FLOATVEC && aux_last_type_read_for_mu != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_mu = SCALAR_FLOATVEC;
                // assign expression to variable f
                var_f_0d_floatvec_Scalar = tab_body.Y;
                aux_f_read = true;
                if ((aux_last_type_read_for_f != SCALAR_FLOATVEC && aux_last_type_read_for_f != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_f = SCALAR_FLOATVEC;
                // assign expression to variable INT
                var_INT_0d_intvec_Scalar = tab_body.INT;
                aux_INT_read = true;
                if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_INT = SCALAR_INTVEC;
                // assign expression to variable NBT
                var_NBT_0d_intvec_Scalar = tab_body.NBT;
                aux_NBT_read = true;
                if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_NBT = SCALAR_INTVEC;
              }
              // store data in Python dictionary
              if (((aux_last_type_read_for_mu == SCALAR_FLOATVEC) && (aux_mu_read == true))) {
                cpp_current_dict["mu"] = var_mu_0d_floatvec_Scalar;
              }
              if (((aux_last_type_read_for_f == SCALAR_FLOATVEC) && (aux_f_read == true))) {
                cpp_current_dict["f"] = var_f_0d_floatvec_Scalar;
              }
              if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
                cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
              }
              if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
                cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
              }
              cpp_current_dict = cpp_parent_dict;
            }
          }
        }
      }
    }
    if (! cpp_found_match) {
      if (! cpp_found_match) {
        if (((((((((aux_LTT_read == true)) && ((var_LTT_0d_int_Scalar)==(3)))))&&((((aux_LI_read == true)) && ((var_LI_0d_int_Scalar)==(0)))))))) {
          // if statement evaluation
          cpp_found_match = true;
          // read TAB2 record
          cpp_line = cpp_read_line(cont);
          // assign expression to variable NE1
          var_NE1_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
          aux_NE1_read = true;
          if ((aux_last_type_read_for_NE1 != SCALAR_INT && aux_last_type_read_for_NE1 != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NE1 = SCALAR_INT;

          {
              py::dict cpp_parent_dict = cpp_current_dict;
              if (! cpp_parent_dict.contains("leg_int")) {
                cpp_parent_dict["leg_int"] = py::dict();
              }
              py::dict cpp_current_dict = cpp_parent_dict["leg_int"];
            // variable declarations
            std::vector<int> var_INT_0d_intvec_Scalar;
            bool aux_INT_read = false;
            vartype aux_last_type_read_for_INT = UNKNOWN;
            std::vector<int> var_NBT_0d_intvec_Scalar;
            bool aux_NBT_read = false;
            vartype aux_last_type_read_for_NBT = UNKNOWN;
            {
              Tab2Body tab_body = read_tab2_body(cont, cpp_read_int_field(cpp_line, 4));
              // assign expression to variable INT
              var_INT_0d_intvec_Scalar = tab_body.INT;
              aux_INT_read = true;
              if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_INT = SCALAR_INTVEC;
              // assign expression to variable NBT
              var_NBT_0d_intvec_Scalar = tab_body.NBT;
              aux_NBT_read = true;
              if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NBT = SCALAR_INTVEC;
            }
            // store data in Python dictionary
            if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
              cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
            }
            if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
              cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
            }
            cpp_current_dict = cpp_parent_dict;
          }

          for (int var_i_0d_int_Scalar = 1;
             var_i_0d_int_Scalar <= var_NE1_0d_int_Scalar; var_i_0d_int_Scalar++) {
            bool aux_i_read = true;
            cpp_line = cpp_read_line(cont);
            // read LIST record
            // assign expression to variable T
            var_T_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_T_read = true;
            if ((aux_last_type_read_for_T != SCALAR_DOUBLE && aux_last_type_read_for_T != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_T = SCALAR_DOUBLE;
            // assign expression to variable E
            var_E_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 1));
            if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
            // assign expression to variable LT
            var_LT_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
            aux_LT_read = true;
            if ((aux_last_type_read_for_LT != SCALAR_INT && aux_last_type_read_for_LT != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LT = SCALAR_INT;
            // assign expression to variable NL
            var_NL_1d_int_NestedVector.set(var_i_0d_int_Scalar, cpp_read_int_field(cpp_line, 4));
            if ((aux_last_type_read_for_NL != NESTEDVECTOR_INT && aux_last_type_read_for_NL != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NL = NESTEDVECTOR_INT;
            {
              int cpp_npl = cpp_read_int_field(cpp_line, 4);
              cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
              int cpp_j = 0;
              // read LIST body
              ptr_al_2d_idx0 = var_al_2d_double_NestedVector.prepare(var_i_0d_int_Scalar);

              for (int var_j_0d_int_Scalar = 1;
                 var_j_0d_int_Scalar <= var_NL_1d_int_NestedVector[var_i_0d_int_Scalar]; var_j_0d_int_Scalar++) {
                bool aux_j_read = true;
                // read LIST body
                // assign expression to variable al
                ptr_al_2d_idx0->set(var_j_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_al != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_al != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_al = NESTEDVECTOR_DOUBLE;
              }
            }
          }
          // read TAB2 record
          cpp_line = cpp_read_line(cont);
          // assign expression to variable NE2
          var_NE2_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
          aux_NE2_read = true;
          if ((aux_last_type_read_for_NE2 != SCALAR_INT && aux_last_type_read_for_NE2 != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NE2 = SCALAR_INT;

          {
              py::dict cpp_parent_dict = cpp_current_dict;
              if (! cpp_parent_dict.contains("ang_int")) {
                cpp_parent_dict["ang_int"] = py::dict();
              }
              py::dict cpp_current_dict = cpp_parent_dict["ang_int"];
            // variable declarations
            std::vector<int> var_INT_0d_intvec_Scalar;
            bool aux_INT_read = false;
            vartype aux_last_type_read_for_INT = UNKNOWN;
            std::vector<int> var_NBT_0d_intvec_Scalar;
            bool aux_NBT_read = false;
            vartype aux_last_type_read_for_NBT = UNKNOWN;
            {
              Tab2Body tab_body = read_tab2_body(cont, cpp_read_int_field(cpp_line, 4));
              // assign expression to variable INT
              var_INT_0d_intvec_Scalar = tab_body.INT;
              aux_INT_read = true;
              if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_INT = SCALAR_INTVEC;
              // assign expression to variable NBT
              var_NBT_0d_intvec_Scalar = tab_body.NBT;
              aux_NBT_read = true;
              if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NBT = SCALAR_INTVEC;
            }
            // store data in Python dictionary
            if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
              cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
            }
            if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
              cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
            }
            cpp_current_dict = cpp_parent_dict;
          }

          for (int var_i_0d_int_Scalar = var_NE1_0d_int_Scalar;
             var_i_0d_int_Scalar <= ((var_NE1_0d_int_Scalar+var_NE2_0d_int_Scalar)-1); var_i_0d_int_Scalar++) {
            bool aux_i_read = true;
            // read TAB1 record
            cpp_line = cpp_read_line(cont);
            if ((! (aux_T_read == true))) {
              // assign expression to variable T
              var_T_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
              aux_T_read = true;
              if ((aux_last_type_read_for_T != SCALAR_DOUBLE && aux_last_type_read_for_T != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_T = SCALAR_DOUBLE;
            }
            if ((! var_E_1d_double_NestedVector.contains(var_i_0d_int_Scalar))) {
              // assign expression to variable E
              var_E_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 1));
              if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
            }
            if ((! (aux_LT_read == true))) {
              // assign expression to variable LT
              var_LT_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
              aux_LT_read = true;
              if ((aux_last_type_read_for_LT != SCALAR_INT && aux_last_type_read_for_LT != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_LT = SCALAR_INT;
            }

            {
                py::dict cpp_parent_dict = cpp_current_dict;
                if (! cpp_parent_dict.contains("angtable")) {
                  cpp_parent_dict["angtable"] = py::dict();
                }
                py::dict cpp_current_dict = cpp_parent_dict["angtable"];

                if (! cpp_current_dict.contains(py::cast(var_i_0d_int_Scalar))) {
                  cpp_current_dict[py::cast(var_i_0d_int_Scalar)] = py::dict();
                }
                cpp_current_dict = cpp_current_dict[py::cast(var_i_0d_int_Scalar)];
              // variable declarations
              std::vector<double> var_mu_0d_floatvec_Scalar;
              bool aux_mu_read = false;
              vartype aux_last_type_read_for_mu = UNKNOWN;
              std::vector<double> var_f_0d_floatvec_Scalar;
              bool aux_f_read = false;
              vartype aux_last_type_read_for_f = UNKNOWN;
              std::vector<int> var_INT_0d_intvec_Scalar;
              bool aux_INT_read = false;
              vartype aux_last_type_read_for_INT = UNKNOWN;
              std::vector<int> var_NBT_0d_intvec_Scalar;
              bool aux_NBT_read = false;
              vartype aux_last_type_read_for_NBT = UNKNOWN;
              {
                Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                // assign expression to variable mu
                var_mu_0d_floatvec_Scalar = tab_body.X;
                aux_mu_read = true;
                if ((aux_last_type_read_for_mu != SCALAR_FLOATVEC && aux_last_type_read_for_mu != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_mu = SCALAR_FLOATVEC;
                // assign expression to variable f
                var_f_0d_floatvec_Scalar = tab_body.Y;
                aux_f_read = true;
                if ((aux_last_type_read_for_f != SCALAR_FLOATVEC && aux_last_type_read_for_f != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_f = SCALAR_FLOATVEC;
                // assign expression to variable INT
                var_INT_0d_intvec_Scalar = tab_body.INT;
                aux_INT_read = true;
                if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_INT = SCALAR_INTVEC;
                // assign expression to variable NBT
                var_NBT_0d_intvec_Scalar = tab_body.NBT;
                aux_NBT_read = true;
                if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_NBT = SCALAR_INTVEC;
              }
              // store data in Python dictionary
              if (((aux_last_type_read_for_mu == SCALAR_FLOATVEC) && (aux_mu_read == true))) {
                cpp_current_dict["mu"] = var_mu_0d_floatvec_Scalar;
              }
              if (((aux_last_type_read_for_f == SCALAR_FLOATVEC) && (aux_f_read == true))) {
                cpp_current_dict["f"] = var_f_0d_floatvec_Scalar;
              }
              if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
                cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
              }
              if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
                cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
              }
              cpp_current_dict = cpp_parent_dict;
            }
          }
        }
      }
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LTT == SCALAR_INT) && (aux_LTT_read == true))) {
    cpp_current_dict["LTT"] = var_LTT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_LI == SCALAR_INT) && (aux_LI_read == true))) {
    cpp_current_dict["LI"] = var_LI_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_LCT == SCALAR_INT) && (aux_LCT_read == true))) {
    cpp_current_dict["LCT"] = var_LCT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NM == SCALAR_INT) && (aux_NM_read == true))) {
    cpp_current_dict["NM"] = var_NM_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NE == SCALAR_INT) && (aux_NE_read == true))) {
    cpp_current_dict["NE"] = var_NE_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
    cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
  }
  if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
    cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
  }
  if (((aux_last_type_read_for_T == SCALAR_DOUBLE) && (aux_T_read == true))) {
    cpp_current_dict["T"] = var_T_0d_double_Scalar;
  }
  if ((var_E_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_E_1d_double_NestedVector;
    cpp_current_dict["E"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["E"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if (((aux_last_type_read_for_LT == SCALAR_INT) && (aux_LT_read == true))) {
    cpp_current_dict["LT"] = var_LT_0d_int_Scalar;
  }
  if ((var_NL_1d_int_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_NL_1d_int_NestedVector;
    cpp_current_dict["NL"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["NL"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_a_2d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_a_2d_double_NestedVector;
    cpp_current_dict["a"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["a"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
      cpp_curdict0[py::cast(cpp_i1)] = py::dict();
      py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
      for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
        cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
      }
    }
  }
  if (((aux_last_type_read_for_NE1 == SCALAR_INT) && (aux_NE1_read == true))) {
    cpp_current_dict["NE1"] = var_NE1_0d_int_Scalar;
  }
  if ((var_al_2d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_al_2d_double_NestedVector;
    cpp_current_dict["al"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["al"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
      cpp_curdict0[py::cast(cpp_i1)] = py::dict();
      py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
      for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
        cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
      }
    }
  }
  if (((aux_last_type_read_for_NE2 == SCALAR_INT) && (aux_NE2_read == true))) {
    cpp_current_dict["NE2"] = var_NE2_0d_int_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_mf5_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_NK_0d_int_Scalar;
  bool aux_NK_read = false;
  vartype aux_last_type_read_for_NK = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // assign expression to variable NK
  var_NK_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
  aux_NK_read = true;
  if ((aux_last_type_read_for_NK != SCALAR_INT && aux_last_type_read_for_NK != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NK = SCALAR_INT;

  for (int var_k_0d_int_Scalar = 1;
     var_k_0d_int_Scalar <= var_NK_0d_int_Scalar; var_k_0d_int_Scalar++) {
    bool aux_k_read = true;
    // open section contribution

    {
        py::dict cpp_parent_dict = cpp_current_dict;
        if (! cpp_parent_dict.contains("contribution")) {
          cpp_parent_dict["contribution"] = py::dict();
        }
        py::dict cpp_current_dict = cpp_parent_dict["contribution"];

        if (! cpp_current_dict.contains(py::cast(var_k_0d_int_Scalar))) {
          cpp_current_dict[py::cast(var_k_0d_int_Scalar)] = py::dict();
        }
        cpp_current_dict = cpp_current_dict[py::cast(var_k_0d_int_Scalar)];
      // variable declarations
      int var_LF_0d_int_Scalar;
      bool aux_LF_read = false;
      vartype aux_last_type_read_for_LF = UNKNOWN;
      int var_NE_0d_int_Scalar;
      bool aux_NE_read = false;
      vartype aux_last_type_read_for_NE = UNKNOWN;
      NestedVector<double> var_E_1d_double_NestedVector;
      vartype aux_last_type_read_for_E = UNKNOWN;
      double var_U_0d_double_Scalar;
      bool aux_U_read = false;
      vartype aux_last_type_read_for_U = UNKNOWN;
      std::vector<double> var_E_0d_floatvec_Scalar;
      bool aux_E_read = false;
      std::vector<double> var_p_0d_floatvec_Scalar;
      bool aux_p_read = false;
      vartype aux_last_type_read_for_p = UNKNOWN;
      std::vector<int> var_INT_0d_intvec_Scalar;
      bool aux_INT_read = false;
      vartype aux_last_type_read_for_INT = UNKNOWN;
      std::vector<int> var_NBT_0d_intvec_Scalar;
      bool aux_NBT_read = false;
      vartype aux_last_type_read_for_NBT = UNKNOWN;
      // evaluate if-elif-else clause
      {
        bool cpp_found_match = false;
        if (! cpp_found_match) {
          // if statement evaluation with lookahead
          {
            std::streampos cpp_old_streampos = cont.tellg();
            {
              // variable declarations
              int& glob_var_LF_0d_int_Scalar = var_LF_0d_int_Scalar;
              int var_LF_0d_int_Scalar = glob_var_LF_0d_int_Scalar;
              bool& glob_aux_LF_read = aux_LF_read;
              bool aux_LF_read = glob_aux_LF_read;
              vartype aux_last_type_read_for_LF = UNKNOWN;
              // read TAB1 record
              cpp_line = cpp_read_line(cont);
              // assign expression to variable LF
              var_LF_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
              aux_LF_read = true;
              if ((aux_last_type_read_for_LF != SCALAR_INT && aux_last_type_read_for_LF != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_LF = SCALAR_INT;
              if ((((((((aux_LF_read == true)) && ((var_LF_0d_int_Scalar)==(1)))))))) {
                cpp_found_match = true;
              }
              cont.seekg(cpp_old_streampos);
            }
            if (cpp_found_match) {
              // read TAB1 record
              cpp_line = cpp_read_line(cont);
              // assign expression to variable LF
              var_LF_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
              aux_LF_read = true;
              if ((aux_last_type_read_for_LF != SCALAR_INT && aux_last_type_read_for_LF != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_LF = SCALAR_INT;

              {
                  py::dict cpp_parent_dict = cpp_current_dict;
                  if (! cpp_parent_dict.contains("p_table")) {
                    cpp_parent_dict["p_table"] = py::dict();
                  }
                  py::dict cpp_current_dict = cpp_parent_dict["p_table"];
                // variable declarations
                std::vector<double> var_E_0d_floatvec_Scalar;
                bool aux_E_read = false;
                vartype aux_last_type_read_for_E = UNKNOWN;
                std::vector<double> var_p_0d_floatvec_Scalar;
                bool aux_p_read = false;
                vartype aux_last_type_read_for_p = UNKNOWN;
                std::vector<int> var_INT_0d_intvec_Scalar;
                bool aux_INT_read = false;
                vartype aux_last_type_read_for_INT = UNKNOWN;
                std::vector<int> var_NBT_0d_intvec_Scalar;
                bool aux_NBT_read = false;
                vartype aux_last_type_read_for_NBT = UNKNOWN;
                {
                  Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                  // assign expression to variable E
                  var_E_0d_floatvec_Scalar = tab_body.X;
                  aux_E_read = true;
                  if ((aux_last_type_read_for_E != SCALAR_FLOATVEC && aux_last_type_read_for_E != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_E = SCALAR_FLOATVEC;
                  // assign expression to variable p
                  var_p_0d_floatvec_Scalar = tab_body.Y;
                  aux_p_read = true;
                  if ((aux_last_type_read_for_p != SCALAR_FLOATVEC && aux_last_type_read_for_p != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_p = SCALAR_FLOATVEC;
                  // assign expression to variable INT
                  var_INT_0d_intvec_Scalar = tab_body.INT;
                  aux_INT_read = true;
                  if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_INT = SCALAR_INTVEC;
                  // assign expression to variable NBT
                  var_NBT_0d_intvec_Scalar = tab_body.NBT;
                  aux_NBT_read = true;
                  if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_NBT = SCALAR_INTVEC;
                }
                // store data in Python dictionary
                if (((aux_last_type_read_for_E == SCALAR_FLOATVEC) && (aux_E_read == true))) {
                  cpp_current_dict["E"] = var_E_0d_floatvec_Scalar;
                }
                if (((aux_last_type_read_for_p == SCALAR_FLOATVEC) && (aux_p_read == true))) {
                  cpp_current_dict["p"] = var_p_0d_floatvec_Scalar;
                }
                if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
                  cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
                }
                if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
                  cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
                }
                cpp_current_dict = cpp_parent_dict;
              }
              // read TAB2 record
              cpp_line = cpp_read_line(cont);
              // assign expression to variable NE
              var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
              aux_NE_read = true;
              if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NE = SCALAR_INT;

              {
                  py::dict cpp_parent_dict = cpp_current_dict;
                  if (! cpp_parent_dict.contains("E_interp")) {
                    cpp_parent_dict["E_interp"] = py::dict();
                  }
                  py::dict cpp_current_dict = cpp_parent_dict["E_interp"];
                // variable declarations
                std::vector<int> var_INT_0d_intvec_Scalar;
                bool aux_INT_read = false;
                vartype aux_last_type_read_for_INT = UNKNOWN;
                std::vector<int> var_NBT_0d_intvec_Scalar;
                bool aux_NBT_read = false;
                vartype aux_last_type_read_for_NBT = UNKNOWN;
                {
                  Tab2Body tab_body = read_tab2_body(cont, cpp_read_int_field(cpp_line, 4));
                  // assign expression to variable INT
                  var_INT_0d_intvec_Scalar = tab_body.INT;
                  aux_INT_read = true;
                  if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_INT = SCALAR_INTVEC;
                  // assign expression to variable NBT
                  var_NBT_0d_intvec_Scalar = tab_body.NBT;
                  aux_NBT_read = true;
                  if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_NBT = SCALAR_INTVEC;
                }
                // store data in Python dictionary
                if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
                  cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
                }
                if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
                  cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
                }
                cpp_current_dict = cpp_parent_dict;
              }

              for (int var_l_0d_int_Scalar = 1;
                 var_l_0d_int_Scalar <= var_NE_0d_int_Scalar; var_l_0d_int_Scalar++) {
                bool aux_l_read = true;
                // read TAB1 record
                cpp_line = cpp_read_line(cont);
                // assign expression to variable E
                var_E_1d_double_NestedVector.set(var_l_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 1));
                if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;

                {
                    py::dict cpp_parent_dict = cpp_current_dict;
                    if (! cpp_parent_dict.contains("spectrum")) {
                      cpp_parent_dict["spectrum"] = py::dict();
                    }
                    py::dict cpp_current_dict = cpp_parent_dict["spectrum"];

                    if (! cpp_current_dict.contains(py::cast(var_l_0d_int_Scalar))) {
                      cpp_current_dict[py::cast(var_l_0d_int_Scalar)] = py::dict();
                    }
                    cpp_current_dict = cpp_current_dict[py::cast(var_l_0d_int_Scalar)];
                  // variable declarations
                  std::vector<double> var_Eout_0d_floatvec_Scalar;
                  bool aux_Eout_read = false;
                  vartype aux_last_type_read_for_Eout = UNKNOWN;
                  std::vector<double> var_g_0d_floatvec_Scalar;
                  bool aux_g_read = false;
                  vartype aux_last_type_read_for_g = UNKNOWN;
                  std::vector<int> var_INT_0d_intvec_Scalar;
                  bool aux_INT_read = false;
                  vartype aux_last_type_read_for_INT = UNKNOWN;
                  std::vector<int> var_NBT_0d_intvec_Scalar;
                  bool aux_NBT_read = false;
                  vartype aux_last_type_read_for_NBT = UNKNOWN;
                  {
                    Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                    // assign expression to variable Eout
                    var_Eout_0d_floatvec_Scalar = tab_body.X;
                    aux_Eout_read = true;
                    if ((aux_last_type_read_for_Eout != SCALAR_FLOATVEC && aux_last_type_read_for_Eout != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_Eout = SCALAR_FLOATVEC;
                    // assign expression to variable g
                    var_g_0d_floatvec_Scalar = tab_body.Y;
                    aux_g_read = true;
                    if ((aux_last_type_read_for_g != SCALAR_FLOATVEC && aux_last_type_read_for_g != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_g = SCALAR_FLOATVEC;
                    // assign expression to variable INT
                    var_INT_0d_intvec_Scalar = tab_body.INT;
                    aux_INT_read = true;
                    if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_INT = SCALAR_INTVEC;
                    // assign expression to variable NBT
                    var_NBT_0d_intvec_Scalar = tab_body.NBT;
                    aux_NBT_read = true;
                    if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NBT = SCALAR_INTVEC;
                  }
                  // store data in Python dictionary
                  if (((aux_last_type_read_for_Eout == SCALAR_FLOATVEC) && (aux_Eout_read == true))) {
                    cpp_current_dict["Eout"] = var_Eout_0d_floatvec_Scalar;
                  }
                  if (((aux_last_type_read_for_g == SCALAR_FLOATVEC) && (aux_g_read == true))) {
                    cpp_current_dict["g"] = var_g_0d_floatvec_Scalar;
                  }
                  if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
                    cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
                  }
                  if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
                    cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
                  }
                  cpp_current_dict = cpp_parent_dict;
                }
              }
            }
          }
        }
        if (! cpp_found_match) {
          if (! cpp_found_match) {
            // if statement evaluation with lookahead
            {
              std::streampos cpp_old_streampos = cont.tellg();
              {
                // variable declarations
                double& glob_var_U_0d_double_Scalar = var_U_0d_double_Scalar;
                double var_U_0d_double_Scalar = glob_var_U_0d_double_Scalar;
                bool& glob_aux_U_read = aux_U_read;
                bool aux_U_read = glob_aux_U_read;
                vartype aux_last_type_read_for_U = UNKNOWN;
                int& glob_var_LF_0d_int_Scalar = var_LF_0d_int_Scalar;
                int var_LF_0d_int_Scalar = glob_var_LF_0d_int_Scalar;
                bool& glob_aux_LF_read = aux_LF_read;
                bool aux_LF_read = glob_aux_LF_read;
                vartype aux_last_type_read_for_LF = UNKNOWN;
                // read TAB1 record
                cpp_line = cpp_read_line(cont);
                // assign expression to variable U
                var_U_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                aux_U_read = true;
                if ((aux_last_type_read_for_U != SCALAR_DOUBLE && aux_last_type_read_for_U != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_U = SCALAR_DOUBLE;
                // assign expression to variable LF
                var_LF_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                aux_LF_read = true;
                if ((aux_last_type_read_for_LF != SCALAR_INT && aux_last_type_read_for_LF != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_LF = SCALAR_INT;
                if ((((((((aux_LF_read == true)) && ((var_LF_0d_int_Scalar)==(5)))))))) {
                  cpp_found_match = true;
                }
                cont.seekg(cpp_old_streampos);
              }
              if (cpp_found_match) {
                // read TAB1 record
                cpp_line = cpp_read_line(cont);
                // assign expression to variable U
                var_U_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                aux_U_read = true;
                if ((aux_last_type_read_for_U != SCALAR_DOUBLE && aux_last_type_read_for_U != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_U = SCALAR_DOUBLE;
                // assign expression to variable LF
                var_LF_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                aux_LF_read = true;
                if ((aux_last_type_read_for_LF != SCALAR_INT && aux_last_type_read_for_LF != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_LF = SCALAR_INT;

                {
                    py::dict cpp_parent_dict = cpp_current_dict;
                    if (! cpp_parent_dict.contains("p_table")) {
                      cpp_parent_dict["p_table"] = py::dict();
                    }
                    py::dict cpp_current_dict = cpp_parent_dict["p_table"];
                  // variable declarations
                  std::vector<double> var_E_0d_floatvec_Scalar;
                  bool aux_E_read = false;
                  vartype aux_last_type_read_for_E = UNKNOWN;
                  std::vector<double> var_p_0d_floatvec_Scalar;
                  bool aux_p_read = false;
                  vartype aux_last_type_read_for_p = UNKNOWN;
                  std::vector<int> var_INT_0d_intvec_Scalar;
                  bool aux_INT_read = false;
                  vartype aux_last_type_read_for_INT = UNKNOWN;
                  std::vector<int> var_NBT_0d_intvec_Scalar;
                  bool aux_NBT_read = false;
                  vartype aux_last_type_read_for_NBT = UNKNOWN;
                  {
                    Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                    // assign expression to variable E
                    var_E_0d_floatvec_Scalar = tab_body.X;
                    aux_E_read = true;
                    if ((aux_last_type_read_for_E != SCALAR_FLOATVEC && aux_last_type_read_for_E != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_E = SCALAR_FLOATVEC;
                    // assign expression to variable p
                    var_p_0d_floatvec_Scalar = tab_body.Y;
                    aux_p_read = true;
                    if ((aux_last_type_read_for_p != SCALAR_FLOATVEC && aux_last_type_read_for_p != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_p = SCALAR_FLOATVEC;
                    // assign expression to variable INT
                    var_INT_0d_intvec_Scalar = tab_body.INT;
                    aux_INT_read = true;
                    if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_INT = SCALAR_INTVEC;
                    // assign expression to variable NBT
                    var_NBT_0d_intvec_Scalar = tab_body.NBT;
                    aux_NBT_read = true;
                    if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NBT = SCALAR_INTVEC;
                  }
                  // store data in Python dictionary
                  if (((aux_last_type_read_for_E == SCALAR_FLOATVEC) && (aux_E_read == true))) {
                    cpp_current_dict["E"] = var_E_0d_floatvec_Scalar;
                  }
                  if (((aux_last_type_read_for_p == SCALAR_FLOATVEC) && (aux_p_read == true))) {
                    cpp_current_dict["p"] = var_p_0d_floatvec_Scalar;
                  }
                  if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
                    cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
                  }
                  if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
                    cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
                  }
                  cpp_current_dict = cpp_parent_dict;
                }
                // read TAB1 record
                cpp_line = cpp_read_line(cont);

                {
                    py::dict cpp_parent_dict = cpp_current_dict;
                    if (! cpp_parent_dict.contains("theta_table")) {
                      cpp_parent_dict["theta_table"] = py::dict();
                    }
                    py::dict cpp_current_dict = cpp_parent_dict["theta_table"];
                  // variable declarations
                  std::vector<double> var_E_0d_floatvec_Scalar;
                  bool aux_E_read = false;
                  vartype aux_last_type_read_for_E = UNKNOWN;
                  std::vector<double> var_theta_0d_floatvec_Scalar;
                  bool aux_theta_read = false;
                  vartype aux_last_type_read_for_theta = UNKNOWN;
                  std::vector<int> var_INT_0d_intvec_Scalar;
                  bool aux_INT_read = false;
                  vartype aux_last_type_read_for_INT = UNKNOWN;
                  std::vector<int> var_NBT_0d_intvec_Scalar;
                  bool aux_NBT_read = false;
                  vartype aux_last_type_read_for_NBT = UNKNOWN;
                  {
                    Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                    // assign expression to variable E
                    var_E_0d_floatvec_Scalar = tab_body.X;
                    aux_E_read = true;
                    if ((aux_last_type_read_for_E != SCALAR_FLOATVEC && aux_last_type_read_for_E != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_E = SCALAR_FLOATVEC;
                    // assign expression to variable theta
                    var_theta_0d_floatvec_Scalar = tab_body.Y;
                    aux_theta_read = true;
                    if ((aux_last_type_read_for_theta != SCALAR_FLOATVEC && aux_last_type_read_for_theta != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_theta = SCALAR_FLOATVEC;
                    // assign expression to variable INT
                    var_INT_0d_intvec_Scalar = tab_body.INT;
                    aux_INT_read = true;
                    if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_INT = SCALAR_INTVEC;
                    // assign expression to variable NBT
                    var_NBT_0d_intvec_Scalar = tab_body.NBT;
                    aux_NBT_read = true;
                    if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NBT = SCALAR_INTVEC;
                  }
                  // store data in Python dictionary
                  if (((aux_last_type_read_for_E == SCALAR_FLOATVEC) && (aux_E_read == true))) {
                    cpp_current_dict["E"] = var_E_0d_floatvec_Scalar;
                  }
                  if (((aux_last_type_read_for_theta == SCALAR_FLOATVEC) && (aux_theta_read == true))) {
                    cpp_current_dict["theta"] = var_theta_0d_floatvec_Scalar;
                  }
                  if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
                    cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
                  }
                  if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
                    cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
                  }
                  cpp_current_dict = cpp_parent_dict;
                }
                // read TAB1 record
                cpp_line = cpp_read_line(cont);

                {
                    py::dict cpp_parent_dict = cpp_current_dict;
                    if (! cpp_parent_dict.contains("g_table")) {
                      cpp_parent_dict["g_table"] = py::dict();
                    }
                    py::dict cpp_current_dict = cpp_parent_dict["g_table"];
                  // variable declarations
                  std::vector<double> var_x_0d_floatvec_Scalar;
                  bool aux_x_read = false;
                  vartype aux_last_type_read_for_x = UNKNOWN;
                  std::vector<double> var_g_0d_floatvec_Scalar;
                  bool aux_g_read = false;
                  vartype aux_last_type_read_for_g = UNKNOWN;
                  std::vector<int> var_INT_0d_intvec_Scalar;
                  bool aux_INT_read = false;
                  vartype aux_last_type_read_for_INT = UNKNOWN;
                  std::vector<int> var_NBT_0d_intvec_Scalar;
                  bool aux_NBT_read = false;
                  vartype aux_last_type_read_for_NBT = UNKNOWN;
                  {
                    Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                    // assign expression to variable x
                    var_x_0d_floatvec_Scalar = tab_body.X;
                    aux_x_read = true;
                    if ((aux_last_type_read_for_x != SCALAR_FLOATVEC && aux_last_type_read_for_x != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_x = SCALAR_FLOATVEC;
                    // assign expression to variable g
                    var_g_0d_floatvec_Scalar = tab_body.Y;
                    aux_g_read = true;
                    if ((aux_last_type_read_for_g != SCALAR_FLOATVEC && aux_last_type_read_for_g != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_g = SCALAR_FLOATVEC;
                    // assign expression to variable INT
                    var_INT_0d_intvec_Scalar = tab_body.INT;
                    aux_INT_read = true;
                    if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_INT = SCALAR_INTVEC;
                    // assign expression to variable NBT
                    var_NBT_0d_intvec_Scalar = tab_body.NBT;
                    aux_NBT_read = true;
                    if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NBT = SCALAR_INTVEC;
                  }
                  // store data in Python dictionary
                  if (((aux_last_type_read_for_x == SCALAR_FLOATVEC) && (aux_x_read == true))) {
                    cpp_current_dict["x"] = var_x_0d_floatvec_Scalar;
                  }
                  if (((aux_last_type_read_for_g == SCALAR_FLOATVEC) && (aux_g_read == true))) {
                    cpp_current_dict["g"] = var_g_0d_floatvec_Scalar;
                  }
                  if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
                    cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
                  }
                  if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
                    cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
                  }
                  cpp_current_dict = cpp_parent_dict;
                }
              }
            }
          }
        }
        if (! cpp_found_match) {
          if (! cpp_found_match) {
            // if statement evaluation with lookahead
            {
              std::streampos cpp_old_streampos = cont.tellg();
              {
                // variable declarations
                double& glob_var_U_0d_double_Scalar = var_U_0d_double_Scalar;
                double var_U_0d_double_Scalar = glob_var_U_0d_double_Scalar;
                bool& glob_aux_U_read = aux_U_read;
                bool aux_U_read = glob_aux_U_read;
                vartype aux_last_type_read_for_U = UNKNOWN;
                int& glob_var_LF_0d_int_Scalar = var_LF_0d_int_Scalar;
                int var_LF_0d_int_Scalar = glob_var_LF_0d_int_Scalar;
                bool& glob_aux_LF_read = aux_LF_read;
                bool aux_LF_read = glob_aux_LF_read;
                vartype aux_last_type_read_for_LF = UNKNOWN;
                // read TAB1 record
                cpp_line = cpp_read_line(cont);
                // assign expression to variable U
                var_U_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                aux_U_read = true;
                if ((aux_last_type_read_for_U != SCALAR_DOUBLE && aux_last_type_read_for_U != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_U = SCALAR_DOUBLE;
                // assign expression to variable LF
                var_LF_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                aux_LF_read = true;
                if ((aux_last_type_read_for_LF != SCALAR_INT && aux_last_type_read_for_LF != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_LF = SCALAR_INT;
                if ((((((((aux_LF_read == true)) && ((var_LF_0d_int_Scalar)==(7)))))))) {
                  cpp_found_match = true;
                }
                cont.seekg(cpp_old_streampos);
              }
              if (cpp_found_match) {
                // read TAB1 record
                cpp_line = cpp_read_line(cont);
                // assign expression to variable U
                var_U_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                aux_U_read = true;
                if ((aux_last_type_read_for_U != SCALAR_DOUBLE && aux_last_type_read_for_U != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_U = SCALAR_DOUBLE;
                // assign expression to variable LF
                var_LF_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                aux_LF_read = true;
                if ((aux_last_type_read_for_LF != SCALAR_INT && aux_last_type_read_for_LF != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_LF = SCALAR_INT;

                {
                    py::dict cpp_parent_dict = cpp_current_dict;
                    if (! cpp_parent_dict.contains("p_table")) {
                      cpp_parent_dict["p_table"] = py::dict();
                    }
                    py::dict cpp_current_dict = cpp_parent_dict["p_table"];
                  // variable declarations
                  std::vector<double> var_E_0d_floatvec_Scalar;
                  bool aux_E_read = false;
                  vartype aux_last_type_read_for_E = UNKNOWN;
                  std::vector<double> var_p_0d_floatvec_Scalar;
                  bool aux_p_read = false;
                  vartype aux_last_type_read_for_p = UNKNOWN;
                  std::vector<int> var_INT_0d_intvec_Scalar;
                  bool aux_INT_read = false;
                  vartype aux_last_type_read_for_INT = UNKNOWN;
                  std::vector<int> var_NBT_0d_intvec_Scalar;
                  bool aux_NBT_read = false;
                  vartype aux_last_type_read_for_NBT = UNKNOWN;
                  {
                    Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                    // assign expression to variable E
                    var_E_0d_floatvec_Scalar = tab_body.X;
                    aux_E_read = true;
                    if ((aux_last_type_read_for_E != SCALAR_FLOATVEC && aux_last_type_read_for_E != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_E = SCALAR_FLOATVEC;
                    // assign expression to variable p
                    var_p_0d_floatvec_Scalar = tab_body.Y;
                    aux_p_read = true;
                    if ((aux_last_type_read_for_p != SCALAR_FLOATVEC && aux_last_type_read_for_p != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_p = SCALAR_FLOATVEC;
                    // assign expression to variable INT
                    var_INT_0d_intvec_Scalar = tab_body.INT;
                    aux_INT_read = true;
                    if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_INT = SCALAR_INTVEC;
                    // assign expression to variable NBT
                    var_NBT_0d_intvec_Scalar = tab_body.NBT;
                    aux_NBT_read = true;
                    if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NBT = SCALAR_INTVEC;
                  }
                  // store data in Python dictionary
                  if (((aux_last_type_read_for_E == SCALAR_FLOATVEC) && (aux_E_read == true))) {
                    cpp_current_dict["E"] = var_E_0d_floatvec_Scalar;
                  }
                  if (((aux_last_type_read_for_p == SCALAR_FLOATVEC) && (aux_p_read == true))) {
                    cpp_current_dict["p"] = var_p_0d_floatvec_Scalar;
                  }
                  if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
                    cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
                  }
                  if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
                    cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
                  }
                  cpp_current_dict = cpp_parent_dict;
                }
                // read TAB1 record
                cpp_line = cpp_read_line(cont);

                {
                    py::dict cpp_parent_dict = cpp_current_dict;
                    if (! cpp_parent_dict.contains("theta_table")) {
                      cpp_parent_dict["theta_table"] = py::dict();
                    }
                    py::dict cpp_current_dict = cpp_parent_dict["theta_table"];
                  // variable declarations
                  std::vector<double> var_E_0d_floatvec_Scalar;
                  bool aux_E_read = false;
                  vartype aux_last_type_read_for_E = UNKNOWN;
                  std::vector<double> var_theta_0d_floatvec_Scalar;
                  bool aux_theta_read = false;
                  vartype aux_last_type_read_for_theta = UNKNOWN;
                  std::vector<int> var_INT_0d_intvec_Scalar;
                  bool aux_INT_read = false;
                  vartype aux_last_type_read_for_INT = UNKNOWN;
                  std::vector<int> var_NBT_0d_intvec_Scalar;
                  bool aux_NBT_read = false;
                  vartype aux_last_type_read_for_NBT = UNKNOWN;
                  {
                    Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                    // assign expression to variable E
                    var_E_0d_floatvec_Scalar = tab_body.X;
                    aux_E_read = true;
                    if ((aux_last_type_read_for_E != SCALAR_FLOATVEC && aux_last_type_read_for_E != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_E = SCALAR_FLOATVEC;
                    // assign expression to variable theta
                    var_theta_0d_floatvec_Scalar = tab_body.Y;
                    aux_theta_read = true;
                    if ((aux_last_type_read_for_theta != SCALAR_FLOATVEC && aux_last_type_read_for_theta != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_theta = SCALAR_FLOATVEC;
                    // assign expression to variable INT
                    var_INT_0d_intvec_Scalar = tab_body.INT;
                    aux_INT_read = true;
                    if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_INT = SCALAR_INTVEC;
                    // assign expression to variable NBT
                    var_NBT_0d_intvec_Scalar = tab_body.NBT;
                    aux_NBT_read = true;
                    if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NBT = SCALAR_INTVEC;
                  }
                  // store data in Python dictionary
                  if (((aux_last_type_read_for_E == SCALAR_FLOATVEC) && (aux_E_read == true))) {
                    cpp_current_dict["E"] = var_E_0d_floatvec_Scalar;
                  }
                  if (((aux_last_type_read_for_theta == SCALAR_FLOATVEC) && (aux_theta_read == true))) {
                    cpp_current_dict["theta"] = var_theta_0d_floatvec_Scalar;
                  }
                  if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
                    cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
                  }
                  if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
                    cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
                  }
                  cpp_current_dict = cpp_parent_dict;
                }
              }
            }
          }
        }
        if (! cpp_found_match) {
          if (! cpp_found_match) {
            // if statement evaluation with lookahead
            {
              std::streampos cpp_old_streampos = cont.tellg();
              {
                // variable declarations
                double& glob_var_U_0d_double_Scalar = var_U_0d_double_Scalar;
                double var_U_0d_double_Scalar = glob_var_U_0d_double_Scalar;
                bool& glob_aux_U_read = aux_U_read;
                bool aux_U_read = glob_aux_U_read;
                vartype aux_last_type_read_for_U = UNKNOWN;
                int& glob_var_LF_0d_int_Scalar = var_LF_0d_int_Scalar;
                int var_LF_0d_int_Scalar = glob_var_LF_0d_int_Scalar;
                bool& glob_aux_LF_read = aux_LF_read;
                bool aux_LF_read = glob_aux_LF_read;
                vartype aux_last_type_read_for_LF = UNKNOWN;
                // read TAB1 record
                cpp_line = cpp_read_line(cont);
                // assign expression to variable U
                var_U_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                aux_U_read = true;
                if ((aux_last_type_read_for_U != SCALAR_DOUBLE && aux_last_type_read_for_U != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_U = SCALAR_DOUBLE;
                // assign expression to variable LF
                var_LF_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                aux_LF_read = true;
                if ((aux_last_type_read_for_LF != SCALAR_INT && aux_last_type_read_for_LF != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_LF = SCALAR_INT;
                if ((((((((aux_LF_read == true)) && ((var_LF_0d_int_Scalar)==(9)))))))) {
                  cpp_found_match = true;
                }
                cont.seekg(cpp_old_streampos);
              }
              if (cpp_found_match) {
                // read TAB1 record
                cpp_line = cpp_read_line(cont);
                // assign expression to variable U
                var_U_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                aux_U_read = true;
                if ((aux_last_type_read_for_U != SCALAR_DOUBLE && aux_last_type_read_for_U != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_U = SCALAR_DOUBLE;
                // assign expression to variable LF
                var_LF_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                aux_LF_read = true;
                if ((aux_last_type_read_for_LF != SCALAR_INT && aux_last_type_read_for_LF != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_LF = SCALAR_INT;

                {
                    py::dict cpp_parent_dict = cpp_current_dict;
                    if (! cpp_parent_dict.contains("p_table")) {
                      cpp_parent_dict["p_table"] = py::dict();
                    }
                    py::dict cpp_current_dict = cpp_parent_dict["p_table"];
                  // variable declarations
                  std::vector<double> var_E_0d_floatvec_Scalar;
                  bool aux_E_read = false;
                  vartype aux_last_type_read_for_E = UNKNOWN;
                  std::vector<double> var_p_0d_floatvec_Scalar;
                  bool aux_p_read = false;
                  vartype aux_last_type_read_for_p = UNKNOWN;
                  std::vector<int> var_INT_0d_intvec_Scalar;
                  bool aux_INT_read = false;
                  vartype aux_last_type_read_for_INT = UNKNOWN;
                  std::vector<int> var_NBT_0d_intvec_Scalar;
                  bool aux_NBT_read = false;
                  vartype aux_last_type_read_for_NBT = UNKNOWN;
                  {
                    Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                    // assign expression to variable E
                    var_E_0d_floatvec_Scalar = tab_body.X;
                    aux_E_read = true;
                    if ((aux_last_type_read_for_E != SCALAR_FLOATVEC && aux_last_type_read_for_E != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_E = SCALAR_FLOATVEC;
                    // assign expression to variable p
                    var_p_0d_floatvec_Scalar = tab_body.Y;
                    aux_p_read = true;
                    if ((aux_last_type_read_for_p != SCALAR_FLOATVEC && aux_last_type_read_for_p != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_p = SCALAR_FLOATVEC;
                    // assign expression to variable INT
                    var_INT_0d_intvec_Scalar = tab_body.INT;
                    aux_INT_read = true;
                    if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_INT = SCALAR_INTVEC;
                    // assign expression to variable NBT
                    var_NBT_0d_intvec_Scalar = tab_body.NBT;
                    aux_NBT_read = true;
                    if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NBT = SCALAR_INTVEC;
                  }
                  // store data in Python dictionary
                  if (((aux_last_type_read_for_E == SCALAR_FLOATVEC) && (aux_E_read == true))) {
                    cpp_current_dict["E"] = var_E_0d_floatvec_Scalar;
                  }
                  if (((aux_last_type_read_for_p == SCALAR_FLOATVEC) && (aux_p_read == true))) {
                    cpp_current_dict["p"] = var_p_0d_floatvec_Scalar;
                  }
                  if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
                    cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
                  }
                  if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
                    cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
                  }
                  cpp_current_dict = cpp_parent_dict;
                }
                // read TAB1 record
                cpp_line = cpp_read_line(cont);

                {
                    py::dict cpp_parent_dict = cpp_current_dict;
                    if (! cpp_parent_dict.contains("theta_table")) {
                      cpp_parent_dict["theta_table"] = py::dict();
                    }
                    py::dict cpp_current_dict = cpp_parent_dict["theta_table"];
                  // variable declarations
                  std::vector<double> var_E_0d_floatvec_Scalar;
                  bool aux_E_read = false;
                  vartype aux_last_type_read_for_E = UNKNOWN;
                  std::vector<double> var_theta_0d_floatvec_Scalar;
                  bool aux_theta_read = false;
                  vartype aux_last_type_read_for_theta = UNKNOWN;
                  std::vector<int> var_INT_0d_intvec_Scalar;
                  bool aux_INT_read = false;
                  vartype aux_last_type_read_for_INT = UNKNOWN;
                  std::vector<int> var_NBT_0d_intvec_Scalar;
                  bool aux_NBT_read = false;
                  vartype aux_last_type_read_for_NBT = UNKNOWN;
                  {
                    Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                    // assign expression to variable E
                    var_E_0d_floatvec_Scalar = tab_body.X;
                    aux_E_read = true;
                    if ((aux_last_type_read_for_E != SCALAR_FLOATVEC && aux_last_type_read_for_E != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_E = SCALAR_FLOATVEC;
                    // assign expression to variable theta
                    var_theta_0d_floatvec_Scalar = tab_body.Y;
                    aux_theta_read = true;
                    if ((aux_last_type_read_for_theta != SCALAR_FLOATVEC && aux_last_type_read_for_theta != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_theta = SCALAR_FLOATVEC;
                    // assign expression to variable INT
                    var_INT_0d_intvec_Scalar = tab_body.INT;
                    aux_INT_read = true;
                    if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_INT = SCALAR_INTVEC;
                    // assign expression to variable NBT
                    var_NBT_0d_intvec_Scalar = tab_body.NBT;
                    aux_NBT_read = true;
                    if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NBT = SCALAR_INTVEC;
                  }
                  // store data in Python dictionary
                  if (((aux_last_type_read_for_E == SCALAR_FLOATVEC) && (aux_E_read == true))) {
                    cpp_current_dict["E"] = var_E_0d_floatvec_Scalar;
                  }
                  if (((aux_last_type_read_for_theta == SCALAR_FLOATVEC) && (aux_theta_read == true))) {
                    cpp_current_dict["theta"] = var_theta_0d_floatvec_Scalar;
                  }
                  if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
                    cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
                  }
                  if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
                    cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
                  }
                  cpp_current_dict = cpp_parent_dict;
                }
              }
            }
          }
        }
        if (! cpp_found_match) {
          if (! cpp_found_match) {
            // if statement evaluation with lookahead
            {
              std::streampos cpp_old_streampos = cont.tellg();
              {
                // variable declarations
                double& glob_var_U_0d_double_Scalar = var_U_0d_double_Scalar;
                double var_U_0d_double_Scalar = glob_var_U_0d_double_Scalar;
                bool& glob_aux_U_read = aux_U_read;
                bool aux_U_read = glob_aux_U_read;
                vartype aux_last_type_read_for_U = UNKNOWN;
                int& glob_var_LF_0d_int_Scalar = var_LF_0d_int_Scalar;
                int var_LF_0d_int_Scalar = glob_var_LF_0d_int_Scalar;
                bool& glob_aux_LF_read = aux_LF_read;
                bool aux_LF_read = glob_aux_LF_read;
                vartype aux_last_type_read_for_LF = UNKNOWN;
                // read TAB1 record
                cpp_line = cpp_read_line(cont);
                // assign expression to variable U
                var_U_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                aux_U_read = true;
                if ((aux_last_type_read_for_U != SCALAR_DOUBLE && aux_last_type_read_for_U != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_U = SCALAR_DOUBLE;
                // assign expression to variable LF
                var_LF_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                aux_LF_read = true;
                if ((aux_last_type_read_for_LF != SCALAR_INT && aux_last_type_read_for_LF != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_LF = SCALAR_INT;
                if ((((((((aux_LF_read == true)) && ((var_LF_0d_int_Scalar)==(11)))))))) {
                  cpp_found_match = true;
                }
                cont.seekg(cpp_old_streampos);
              }
              if (cpp_found_match) {
                // read TAB1 record
                cpp_line = cpp_read_line(cont);
                // assign expression to variable U
                var_U_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                aux_U_read = true;
                if ((aux_last_type_read_for_U != SCALAR_DOUBLE && aux_last_type_read_for_U != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_U = SCALAR_DOUBLE;
                // assign expression to variable LF
                var_LF_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                aux_LF_read = true;
                if ((aux_last_type_read_for_LF != SCALAR_INT && aux_last_type_read_for_LF != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_LF = SCALAR_INT;
                {
                  Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                  // assign expression to variable E
                  var_E_0d_floatvec_Scalar = tab_body.X;
                  aux_E_read = true;
                  if ((aux_last_type_read_for_E != SCALAR_FLOATVEC && aux_last_type_read_for_E != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_E = SCALAR_FLOATVEC;
                  // assign expression to variable p
                  var_p_0d_floatvec_Scalar = tab_body.Y;
                  aux_p_read = true;
                  if ((aux_last_type_read_for_p != SCALAR_FLOATVEC && aux_last_type_read_for_p != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_p = SCALAR_FLOATVEC;
                  // assign expression to variable INT
                  var_INT_0d_intvec_Scalar = tab_body.INT;
                  aux_INT_read = true;
                  if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_INT = SCALAR_INTVEC;
                  // assign expression to variable NBT
                  var_NBT_0d_intvec_Scalar = tab_body.NBT;
                  aux_NBT_read = true;
                  if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_NBT = SCALAR_INTVEC;
                }
              }
            }
          }
        }
        if (! cpp_found_match) {
          if (! cpp_found_match) {
            // if statement evaluation with lookahead
            {
              std::streampos cpp_old_streampos = cont.tellg();
              {
                // variable declarations
                int& glob_var_LF_0d_int_Scalar = var_LF_0d_int_Scalar;
                int var_LF_0d_int_Scalar = glob_var_LF_0d_int_Scalar;
                bool& glob_aux_LF_read = aux_LF_read;
                bool aux_LF_read = glob_aux_LF_read;
                vartype aux_last_type_read_for_LF = UNKNOWN;
                // read TAB1 record
                cpp_line = cpp_read_line(cont);
                // assign expression to variable LF
                var_LF_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                aux_LF_read = true;
                if ((aux_last_type_read_for_LF != SCALAR_INT && aux_last_type_read_for_LF != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_LF = SCALAR_INT;
                if ((((((((aux_LF_read == true)) && ((var_LF_0d_int_Scalar)==(12)))))))) {
                  cpp_found_match = true;
                }
                cont.seekg(cpp_old_streampos);
              }
              if (cpp_found_match) {
                // read TAB1 record
                cpp_line = cpp_read_line(cont);
                // assign expression to variable LF
                var_LF_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                aux_LF_read = true;
                if ((aux_last_type_read_for_LF != SCALAR_INT && aux_last_type_read_for_LF != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_LF = SCALAR_INT;
                {
                  Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                  // assign expression to variable E
                  var_E_0d_floatvec_Scalar = tab_body.X;
                  aux_E_read = true;
                  if ((aux_last_type_read_for_E != SCALAR_FLOATVEC && aux_last_type_read_for_E != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_E = SCALAR_FLOATVEC;
                  // assign expression to variable p
                  var_p_0d_floatvec_Scalar = tab_body.Y;
                  aux_p_read = true;
                  if ((aux_last_type_read_for_p != SCALAR_FLOATVEC && aux_last_type_read_for_p != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_p = SCALAR_FLOATVEC;
                  // assign expression to variable INT
                  var_INT_0d_intvec_Scalar = tab_body.INT;
                  aux_INT_read = true;
                  if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_INT = SCALAR_INTVEC;
                  // assign expression to variable NBT
                  var_NBT_0d_intvec_Scalar = tab_body.NBT;
                  aux_NBT_read = true;
                  if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_NBT = SCALAR_INTVEC;
                }
              }
            }
          }
        }
      }
      // store data in Python dictionary
      if (((aux_last_type_read_for_LF == SCALAR_INT) && (aux_LF_read == true))) {
        cpp_current_dict["LF"] = var_LF_0d_int_Scalar;
      }
      if (((aux_last_type_read_for_NE == SCALAR_INT) && (aux_NE_read == true))) {
        cpp_current_dict["NE"] = var_NE_0d_int_Scalar;
      }
      if ((var_E_1d_double_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_E_1d_double_NestedVector;
        cpp_current_dict["E"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["E"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
        }
      }
      if (((aux_last_type_read_for_U == SCALAR_DOUBLE) && (aux_U_read == true))) {
        cpp_current_dict["U"] = var_U_0d_double_Scalar;
      }
      if (((aux_last_type_read_for_E == SCALAR_FLOATVEC) && (aux_E_read == true))) {
        cpp_current_dict["E"] = var_E_0d_floatvec_Scalar;
      }
      if (((aux_last_type_read_for_p == SCALAR_FLOATVEC) && (aux_p_read == true))) {
        cpp_current_dict["p"] = var_p_0d_floatvec_Scalar;
      }
      if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
        cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
      }
      if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
        cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
      }
      cpp_current_dict = cpp_parent_dict;
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_NK == SCALAR_INT) && (aux_NK_read == true))) {
    cpp_current_dict["NK"] = var_NK_0d_int_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_mf6_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_JP_0d_int_Scalar;
  bool aux_JP_read = false;
  vartype aux_last_type_read_for_JP = UNKNOWN;
  int var_LCT_0d_int_Scalar;
  bool aux_LCT_read = false;
  vartype aux_last_type_read_for_LCT = UNKNOWN;
  int var_NK_0d_int_Scalar;
  bool aux_NK_read = false;
  vartype aux_last_type_read_for_NK = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // assign expression to variable JP
  var_JP_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
  aux_JP_read = true;
  if ((aux_last_type_read_for_JP != SCALAR_INT && aux_last_type_read_for_JP != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_JP = SCALAR_INT;
  // assign expression to variable LCT
  var_LCT_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
  aux_LCT_read = true;
  if ((aux_last_type_read_for_LCT != SCALAR_INT && aux_last_type_read_for_LCT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LCT = SCALAR_INT;
  // assign expression to variable NK
  var_NK_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
  aux_NK_read = true;
  if ((aux_last_type_read_for_NK != SCALAR_INT && aux_last_type_read_for_NK != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NK = SCALAR_INT;

  for (int var_i_0d_int_Scalar = 1;
     var_i_0d_int_Scalar <= var_NK_0d_int_Scalar; var_i_0d_int_Scalar++) {
    bool aux_i_read = true;
    // open section subsection

    {
        py::dict cpp_parent_dict = cpp_current_dict;
        if (! cpp_parent_dict.contains("subsection")) {
          cpp_parent_dict["subsection"] = py::dict();
        }
        py::dict cpp_current_dict = cpp_parent_dict["subsection"];

        if (! cpp_current_dict.contains(py::cast(var_i_0d_int_Scalar))) {
          cpp_current_dict[py::cast(var_i_0d_int_Scalar)] = py::dict();
        }
        cpp_current_dict = cpp_current_dict[py::cast(var_i_0d_int_Scalar)];
      // variable declarations
      double var_ZAP_0d_double_Scalar;
      bool aux_ZAP_read = false;
      vartype aux_last_type_read_for_ZAP = UNKNOWN;
      double var_AWP_0d_double_Scalar;
      bool aux_AWP_read = false;
      vartype aux_last_type_read_for_AWP = UNKNOWN;
      int var_LIP_0d_int_Scalar;
      bool aux_LIP_read = false;
      vartype aux_last_type_read_for_LIP = UNKNOWN;
      int var_LAW_0d_int_Scalar;
      bool aux_LAW_read = false;
      vartype aux_last_type_read_for_LAW = UNKNOWN;
      int var_LANG_0d_int_Scalar;
      bool aux_LANG_read = false;
      vartype aux_last_type_read_for_LANG = UNKNOWN;
      int var_LEP_0d_int_Scalar;
      bool aux_LEP_read = false;
      vartype aux_last_type_read_for_LEP = UNKNOWN;
      int var_NE_0d_int_Scalar;
      bool aux_NE_read = false;
      vartype aux_last_type_read_for_NE = UNKNOWN;
      std::vector<int> var_INT_0d_intvec_Scalar;
      bool aux_INT_read = false;
      vartype aux_last_type_read_for_INT = UNKNOWN;
      std::vector<int> var_NBT_0d_intvec_Scalar;
      bool aux_NBT_read = false;
      vartype aux_last_type_read_for_NBT = UNKNOWN;
      NestedVector<double> var_E_1d_double_NestedVector;
      vartype aux_last_type_read_for_E = UNKNOWN;
      NestedVector<int> var_ND_1d_int_NestedVector;
      vartype aux_last_type_read_for_ND = UNKNOWN;
      NestedVector<int> var_NA_1d_int_NestedVector;
      vartype aux_last_type_read_for_NA = UNKNOWN;
      int cpp_int_val;
      bool aux_cpp_int_val_read = false;
      vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
      NestedVector<int> var_NEP_1d_int_NestedVector;
      vartype aux_last_type_read_for_NEP = UNKNOWN;
      NestedVector<NestedVector<double>> var_Ep_2d_double_NestedVector;
      NestedVector<double>* ptr_Ep_2d_idx0;
      vartype aux_last_type_read_for_Ep = UNKNOWN;
      NestedVector<NestedVector<NestedVector<double>>> var_b_3d_double_NestedVector;
      NestedVector<double>* ptr_b_3d_idx1;
      NestedVector<NestedVector<double>>* ptr_b_3d_idx0;
      vartype aux_last_type_read_for_b = UNKNOWN;
      NestedVector<int> var_NLW_1d_int_NestedVector;
      vartype aux_last_type_read_for_NLW = UNKNOWN;
      NestedVector<int> var_NL_1d_int_NestedVector;
      vartype aux_last_type_read_for_NL = UNKNOWN;
      NestedVector<NestedVector<double>> var_A_2d_double_NestedVector;
      NestedVector<double>* ptr_A_2d_idx0;
      vartype aux_last_type_read_for_A = UNKNOWN;
      double var_SPI_0d_double_Scalar;
      bool aux_SPI_read = false;
      vartype aux_last_type_read_for_SPI = UNKNOWN;
      int var_LIDP_0d_int_Scalar;
      bool aux_LIDP_read = false;
      vartype aux_last_type_read_for_LIDP = UNKNOWN;
      NestedVector<int> var_LTP_1d_int_NestedVector;
      vartype aux_last_type_read_for_LTP = UNKNOWN;
      NestedVector<int> var_NW_1d_int_NestedVector;
      vartype aux_last_type_read_for_NW = UNKNOWN;
      double var_APSX_0d_double_Scalar;
      bool aux_APSX_read = false;
      vartype aux_last_type_read_for_APSX = UNKNOWN;
      int var_NPSX_0d_int_Scalar;
      bool aux_NPSX_read = false;
      vartype aux_last_type_read_for_NPSX = UNKNOWN;
      NestedVector<int> var_NMU_1d_int_NestedVector;
      vartype aux_last_type_read_for_NMU = UNKNOWN;
      NestedVector<NestedVector<double>> var_mu_2d_double_NestedVector;
      NestedVector<double>* ptr_mu_2d_idx0;
      vartype aux_last_type_read_for_mu = UNKNOWN;
      // read TAB1 record
      cpp_line = cpp_read_line(cont);
      // assign expression to variable ZAP
      var_ZAP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
      aux_ZAP_read = true;
      if ((aux_last_type_read_for_ZAP != SCALAR_DOUBLE && aux_last_type_read_for_ZAP != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_ZAP = SCALAR_DOUBLE;
      // assign expression to variable AWP
      var_AWP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
      aux_AWP_read = true;
      if ((aux_last_type_read_for_AWP != SCALAR_DOUBLE && aux_last_type_read_for_AWP != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_AWP = SCALAR_DOUBLE;
      // assign expression to variable LIP
      var_LIP_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
      aux_LIP_read = true;
      if ((aux_last_type_read_for_LIP != SCALAR_INT && aux_last_type_read_for_LIP != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_LIP = SCALAR_INT;
      // assign expression to variable LAW
      var_LAW_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
      aux_LAW_read = true;
      if ((aux_last_type_read_for_LAW != SCALAR_INT && aux_last_type_read_for_LAW != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_LAW = SCALAR_INT;

      {
          py::dict cpp_parent_dict = cpp_current_dict;
          if (! cpp_parent_dict.contains("yields")) {
            cpp_parent_dict["yields"] = py::dict();
          }
          py::dict cpp_current_dict = cpp_parent_dict["yields"];
        // variable declarations
        std::vector<double> var_Eint_0d_floatvec_Scalar;
        bool aux_Eint_read = false;
        vartype aux_last_type_read_for_Eint = UNKNOWN;
        std::vector<double> var_yi_0d_floatvec_Scalar;
        bool aux_yi_read = false;
        vartype aux_last_type_read_for_yi = UNKNOWN;
        std::vector<int> var_INT_0d_intvec_Scalar;
        bool aux_INT_read = false;
        vartype aux_last_type_read_for_INT = UNKNOWN;
        std::vector<int> var_NBT_0d_intvec_Scalar;
        bool aux_NBT_read = false;
        vartype aux_last_type_read_for_NBT = UNKNOWN;
        {
          Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
          // assign expression to variable Eint
          var_Eint_0d_floatvec_Scalar = tab_body.X;
          aux_Eint_read = true;
          if ((aux_last_type_read_for_Eint != SCALAR_FLOATVEC && aux_last_type_read_for_Eint != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_Eint = SCALAR_FLOATVEC;
          // assign expression to variable yi
          var_yi_0d_floatvec_Scalar = tab_body.Y;
          aux_yi_read = true;
          if ((aux_last_type_read_for_yi != SCALAR_FLOATVEC && aux_last_type_read_for_yi != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_yi = SCALAR_FLOATVEC;
          // assign expression to variable INT
          var_INT_0d_intvec_Scalar = tab_body.INT;
          aux_INT_read = true;
          if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_INT = SCALAR_INTVEC;
          // assign expression to variable NBT
          var_NBT_0d_intvec_Scalar = tab_body.NBT;
          aux_NBT_read = true;
          if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NBT = SCALAR_INTVEC;
        }
        // store data in Python dictionary
        if (((aux_last_type_read_for_Eint == SCALAR_FLOATVEC) && (aux_Eint_read == true))) {
          cpp_current_dict["Eint"] = var_Eint_0d_floatvec_Scalar;
        }
        if (((aux_last_type_read_for_yi == SCALAR_FLOATVEC) && (aux_yi_read == true))) {
          cpp_current_dict["yi"] = var_yi_0d_floatvec_Scalar;
        }
        if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
          cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
        }
        if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
          cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
        }
        cpp_current_dict = cpp_parent_dict;
      }
      // evaluate if-elif-else clause
      {
        bool cpp_found_match = false;
        if (! cpp_found_match) {
          if ((((((((aux_LAW_read == true)) && ((var_LAW_0d_int_Scalar)==(1)))))))) {
            // if statement evaluation
            cpp_found_match = true;
            // read TAB2 record
            cpp_line = cpp_read_line(cont);
            // assign expression to variable LANG
            var_LANG_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
            aux_LANG_read = true;
            if ((aux_last_type_read_for_LANG != SCALAR_INT && aux_last_type_read_for_LANG != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LANG = SCALAR_INT;
            // assign expression to variable LEP
            var_LEP_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
            aux_LEP_read = true;
            if ((aux_last_type_read_for_LEP != SCALAR_INT && aux_last_type_read_for_LEP != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LEP = SCALAR_INT;
            // assign expression to variable NE
            var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
            aux_NE_read = true;
            if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NE = SCALAR_INT;
            {
              Tab2Body tab_body = read_tab2_body(cont, cpp_read_int_field(cpp_line, 4));
              // assign expression to variable INT
              var_INT_0d_intvec_Scalar = tab_body.INT;
              aux_INT_read = true;
              if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_INT = SCALAR_INTVEC;
              // assign expression to variable NBT
              var_NBT_0d_intvec_Scalar = tab_body.NBT;
              aux_NBT_read = true;
              if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NBT = SCALAR_INTVEC;
            }

            for (int var_j_0d_int_Scalar = 1;
               var_j_0d_int_Scalar <= var_NE_0d_int_Scalar; var_j_0d_int_Scalar++) {
              bool aux_j_read = true;
              cpp_line = cpp_read_line(cont);
              // read LIST record
              // assign expression to variable E
              var_E_1d_double_NestedVector.set(var_j_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 1));
              if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
              // assign expression to variable ND
              var_ND_1d_int_NestedVector.set(var_j_0d_int_Scalar, cpp_read_int_field(cpp_line, 2));
              if ((aux_last_type_read_for_ND != NESTEDVECTOR_INT && aux_last_type_read_for_ND != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_ND = NESTEDVECTOR_INT;
              // assign expression to variable NA
              var_NA_1d_int_NestedVector.set(var_j_0d_int_Scalar, cpp_read_int_field(cpp_line, 3));
              if ((aux_last_type_read_for_NA != NESTEDVECTOR_INT && aux_last_type_read_for_NA != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NA = NESTEDVECTOR_INT;
              // assign expression to variable cpp_int_val
              cpp_int_val = cpp_read_int_field(cpp_line, 4);
              aux_cpp_int_val_read = true;
              if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_cpp_int_val = SCALAR_INT;
              // assign expression to variable NEP
              var_NEP_1d_int_NestedVector.set(var_j_0d_int_Scalar, (cpp_int_val/(var_NA_1d_int_NestedVector[var_j_0d_int_Scalar]+2)));
              if ((aux_last_type_read_for_NEP != NESTEDVECTOR_INT && aux_last_type_read_for_NEP != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NEP = NESTEDVECTOR_INT;
              if ((! var_NEP_1d_int_NestedVector.contains(var_j_0d_int_Scalar))) {
                // assign expression to variable NEP
                var_NEP_1d_int_NestedVector.set(var_j_0d_int_Scalar, cpp_read_int_field(cpp_line, 5));
                if ((aux_last_type_read_for_NEP != NESTEDVECTOR_INT && aux_last_type_read_for_NEP != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_NEP = NESTEDVECTOR_INT;
              }
              {
                int cpp_npl = cpp_read_int_field(cpp_line, 4);
                cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                int cpp_j = 0;
                // read LIST body
                ptr_Ep_2d_idx0 = var_Ep_2d_double_NestedVector.prepare(var_j_0d_int_Scalar);
                ptr_b_3d_idx0 = var_b_3d_double_NestedVector.prepare(var_j_0d_int_Scalar);

                for (int var_k_0d_int_Scalar = 1;
                   var_k_0d_int_Scalar <= var_NEP_1d_int_NestedVector[var_j_0d_int_Scalar]; var_k_0d_int_Scalar++) {
                  bool aux_k_read = true;
                  // read LIST body
                  // assign expression to variable Ep
                  ptr_Ep_2d_idx0->set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                  if ((aux_last_type_read_for_Ep != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_Ep != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_Ep = NESTEDVECTOR_DOUBLE;
                  ptr_b_3d_idx1 = ptr_b_3d_idx0->prepare(var_k_0d_int_Scalar);

                  for (int var_m_0d_int_Scalar = 0;
                     var_m_0d_int_Scalar <= var_NA_1d_int_NestedVector[var_j_0d_int_Scalar]; var_m_0d_int_Scalar++) {
                    bool aux_m_read = true;
                    // read LIST body
                    // assign expression to variable b
                    ptr_b_3d_idx1->set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                    if ((aux_last_type_read_for_b != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_b != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_b = NESTEDVECTOR_DOUBLE;
                  }
                }
              }
            }
          }
        }
        if (! cpp_found_match) {
          if (! cpp_found_match) {
            if ((((((((aux_LAW_read == true)) && ((var_LAW_0d_int_Scalar)==(2)))))))) {
              // if statement evaluation
              cpp_found_match = true;
              // read TAB2 record
              cpp_line = cpp_read_line(cont);
              // assign expression to variable NE
              var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
              aux_NE_read = true;
              if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NE = SCALAR_INT;
              {
                Tab2Body tab_body = read_tab2_body(cont, cpp_read_int_field(cpp_line, 4));
                // assign expression to variable INT
                var_INT_0d_intvec_Scalar = tab_body.INT;
                aux_INT_read = true;
                if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_INT = SCALAR_INTVEC;
                // assign expression to variable NBT
                var_NBT_0d_intvec_Scalar = tab_body.NBT;
                aux_NBT_read = true;
                if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_NBT = SCALAR_INTVEC;
              }

              for (int var_j_0d_int_Scalar = 1;
                 var_j_0d_int_Scalar <= var_NE_0d_int_Scalar; var_j_0d_int_Scalar++) {
                bool aux_j_read = true;
                cpp_line = cpp_read_line(cont);
                // read LIST record
                // assign expression to variable E
                var_E_1d_double_NestedVector.set(var_j_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 1));
                if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
                // assign expression to variable LANG
                var_LANG_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                aux_LANG_read = true;
                if ((aux_last_type_read_for_LANG != SCALAR_INT && aux_last_type_read_for_LANG != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_LANG = SCALAR_INT;
                // assign expression to variable NLW
                var_NLW_1d_int_NestedVector.set(var_j_0d_int_Scalar, cpp_read_int_field(cpp_line, 4));
                if ((aux_last_type_read_for_NLW != NESTEDVECTOR_INT && aux_last_type_read_for_NLW != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_NLW = NESTEDVECTOR_INT;
                // assign expression to variable NL
                var_NL_1d_int_NestedVector.set(var_j_0d_int_Scalar, cpp_read_int_field(cpp_line, 5));
                if ((aux_last_type_read_for_NL != NESTEDVECTOR_INT && aux_last_type_read_for_NL != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_NL = NESTEDVECTOR_INT;
                {
                  int cpp_npl = cpp_read_int_field(cpp_line, 4);
                  cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                  int cpp_j = 0;
                  // read LIST body
                  ptr_A_2d_idx0 = var_A_2d_double_NestedVector.prepare(var_j_0d_int_Scalar);

                  for (int var_l_0d_int_Scalar = 1;
                     var_l_0d_int_Scalar <= var_NLW_1d_int_NestedVector[var_j_0d_int_Scalar]; var_l_0d_int_Scalar++) {
                    bool aux_l_read = true;
                    // read LIST body
                    // assign expression to variable A
                    ptr_A_2d_idx0->set(var_l_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                    if ((aux_last_type_read_for_A != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_A != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_A = NESTEDVECTOR_DOUBLE;
                  }
                }
              }
            }
          }
        }
        if (! cpp_found_match) {
          if (! cpp_found_match) {
            if ((((((((aux_LAW_read == true)) && ((var_LAW_0d_int_Scalar)==(5)))))))) {
              // if statement evaluation
              cpp_found_match = true;
              // read TAB2 record
              cpp_line = cpp_read_line(cont);
              // assign expression to variable SPI
              var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
              aux_SPI_read = true;
              if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_SPI = SCALAR_DOUBLE;
              // assign expression to variable LIDP
              var_LIDP_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
              aux_LIDP_read = true;
              if ((aux_last_type_read_for_LIDP != SCALAR_INT && aux_last_type_read_for_LIDP != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_LIDP = SCALAR_INT;
              // assign expression to variable NE
              var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
              aux_NE_read = true;
              if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NE = SCALAR_INT;
              {
                Tab2Body tab_body = read_tab2_body(cont, cpp_read_int_field(cpp_line, 4));
                // assign expression to variable INT
                var_INT_0d_intvec_Scalar = tab_body.INT;
                aux_INT_read = true;
                if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_INT = SCALAR_INTVEC;
                // assign expression to variable NBT
                var_NBT_0d_intvec_Scalar = tab_body.NBT;
                aux_NBT_read = true;
                if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_NBT = SCALAR_INTVEC;
              }

              for (int var_j_0d_int_Scalar = 1;
                 var_j_0d_int_Scalar <= var_NE_0d_int_Scalar; var_j_0d_int_Scalar++) {
                bool aux_j_read = true;
                cpp_line = cpp_read_line(cont);
                // read LIST record
                // assign expression to variable E
                var_E_1d_double_NestedVector.set(var_j_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 1));
                if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
                // assign expression to variable LTP
                var_LTP_1d_int_NestedVector.set(var_j_0d_int_Scalar, cpp_read_int_field(cpp_line, 2));
                if ((aux_last_type_read_for_LTP != NESTEDVECTOR_INT && aux_last_type_read_for_LTP != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_LTP = NESTEDVECTOR_INT;
                // assign expression to variable NW
                var_NW_1d_int_NestedVector.set(var_j_0d_int_Scalar, cpp_read_int_field(cpp_line, 4));
                if ((aux_last_type_read_for_NW != NESTEDVECTOR_INT && aux_last_type_read_for_NW != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_NW = NESTEDVECTOR_INT;
                // assign expression to variable NL
                var_NL_1d_int_NestedVector.set(var_j_0d_int_Scalar, cpp_read_int_field(cpp_line, 5));
                if ((aux_last_type_read_for_NL != NESTEDVECTOR_INT && aux_last_type_read_for_NL != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_NL = NESTEDVECTOR_INT;
                {
                  int cpp_npl = cpp_read_int_field(cpp_line, 4);
                  cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                  int cpp_j = 0;
                  // read LIST body
                  ptr_A_2d_idx0 = var_A_2d_double_NestedVector.prepare(var_j_0d_int_Scalar);

                  for (int var_k_0d_int_Scalar = 1;
                     var_k_0d_int_Scalar <= var_NW_1d_int_NestedVector[var_j_0d_int_Scalar]; var_k_0d_int_Scalar++) {
                    bool aux_k_read = true;
                    // read LIST body
                    // assign expression to variable A
                    ptr_A_2d_idx0->set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                    if ((aux_last_type_read_for_A != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_A != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_A = NESTEDVECTOR_DOUBLE;
                  }
                }
              }
            }
          }
        }
        if (! cpp_found_match) {
          if (! cpp_found_match) {
            if ((((((((aux_LAW_read == true)) && ((var_LAW_0d_int_Scalar)==(6)))))))) {
              // if statement evaluation
              cpp_found_match = true;
              cpp_line = cpp_read_line(cont);
              // read CONT record
              // assign expression to variable APSX
              var_APSX_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
              aux_APSX_read = true;
              if ((aux_last_type_read_for_APSX != SCALAR_DOUBLE && aux_last_type_read_for_APSX != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_APSX = SCALAR_DOUBLE;
              // assign expression to variable NPSX
              var_NPSX_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
              aux_NPSX_read = true;
              if ((aux_last_type_read_for_NPSX != SCALAR_INT && aux_last_type_read_for_NPSX != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NPSX = SCALAR_INT;
            }
          }
        }
        if (! cpp_found_match) {
          if (! cpp_found_match) {
            if ((((((((aux_LAW_read == true)) && ((var_LAW_0d_int_Scalar)==(7)))))))) {
              // if statement evaluation
              cpp_found_match = true;
              // read TAB2 record
              cpp_line = cpp_read_line(cont);
              // assign expression to variable NE
              var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
              aux_NE_read = true;
              if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NE = SCALAR_INT;

              {
                  py::dict cpp_parent_dict = cpp_current_dict;
                  if (! cpp_parent_dict.contains("E_interpol")) {
                    cpp_parent_dict["E_interpol"] = py::dict();
                  }
                  py::dict cpp_current_dict = cpp_parent_dict["E_interpol"];
                // variable declarations
                std::vector<int> var_INT_0d_intvec_Scalar;
                bool aux_INT_read = false;
                vartype aux_last_type_read_for_INT = UNKNOWN;
                std::vector<int> var_NBT_0d_intvec_Scalar;
                bool aux_NBT_read = false;
                vartype aux_last_type_read_for_NBT = UNKNOWN;
                {
                  Tab2Body tab_body = read_tab2_body(cont, cpp_read_int_field(cpp_line, 4));
                  // assign expression to variable INT
                  var_INT_0d_intvec_Scalar = tab_body.INT;
                  aux_INT_read = true;
                  if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_INT = SCALAR_INTVEC;
                  // assign expression to variable NBT
                  var_NBT_0d_intvec_Scalar = tab_body.NBT;
                  aux_NBT_read = true;
                  if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_NBT = SCALAR_INTVEC;
                }
                // store data in Python dictionary
                if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
                  cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
                }
                if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
                  cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
                }
                cpp_current_dict = cpp_parent_dict;
              }

              for (int var_j_0d_int_Scalar = 1;
                 var_j_0d_int_Scalar <= var_NE_0d_int_Scalar; var_j_0d_int_Scalar++) {
                bool aux_j_read = true;
                // read TAB2 record
                cpp_line = cpp_read_line(cont);
                // assign expression to variable E
                var_E_1d_double_NestedVector.set(var_j_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 1));
                if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
                // assign expression to variable NMU
                var_NMU_1d_int_NestedVector.set(var_j_0d_int_Scalar, cpp_read_int_field(cpp_line, 5));
                if ((aux_last_type_read_for_NMU != NESTEDVECTOR_INT && aux_last_type_read_for_NMU != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_NMU = NESTEDVECTOR_INT;

                {
                    py::dict cpp_parent_dict = cpp_current_dict;
                    if (! cpp_parent_dict.contains("mu_interpol")) {
                      cpp_parent_dict["mu_interpol"] = py::dict();
                    }
                    py::dict cpp_current_dict = cpp_parent_dict["mu_interpol"];

                    if (! cpp_current_dict.contains(py::cast(var_j_0d_int_Scalar))) {
                      cpp_current_dict[py::cast(var_j_0d_int_Scalar)] = py::dict();
                    }
                    cpp_current_dict = cpp_current_dict[py::cast(var_j_0d_int_Scalar)];
                  // variable declarations
                  std::vector<int> var_INT_0d_intvec_Scalar;
                  bool aux_INT_read = false;
                  vartype aux_last_type_read_for_INT = UNKNOWN;
                  std::vector<int> var_NBT_0d_intvec_Scalar;
                  bool aux_NBT_read = false;
                  vartype aux_last_type_read_for_NBT = UNKNOWN;
                  {
                    Tab2Body tab_body = read_tab2_body(cont, cpp_read_int_field(cpp_line, 4));
                    // assign expression to variable INT
                    var_INT_0d_intvec_Scalar = tab_body.INT;
                    aux_INT_read = true;
                    if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_INT = SCALAR_INTVEC;
                    // assign expression to variable NBT
                    var_NBT_0d_intvec_Scalar = tab_body.NBT;
                    aux_NBT_read = true;
                    if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NBT = SCALAR_INTVEC;
                  }
                  // store data in Python dictionary
                  if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
                    cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
                  }
                  if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
                    cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
                  }
                  cpp_current_dict = cpp_parent_dict;
                }
                ptr_mu_2d_idx0 = var_mu_2d_double_NestedVector.prepare(var_j_0d_int_Scalar);

                for (int var_k_0d_int_Scalar = 1;
                   var_k_0d_int_Scalar <= var_NMU_1d_int_NestedVector[var_j_0d_int_Scalar]; var_k_0d_int_Scalar++) {
                  bool aux_k_read = true;
                  // read TAB1 record
                  cpp_line = cpp_read_line(cont);
                  // assign expression to variable mu
                  ptr_mu_2d_idx0->set(var_k_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 1));
                  if ((aux_last_type_read_for_mu != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_mu != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_mu = NESTEDVECTOR_DOUBLE;

                  {
                      py::dict cpp_parent_dict = cpp_current_dict;
                      if (! cpp_parent_dict.contains("table")) {
                        cpp_parent_dict["table"] = py::dict();
                      }
                      py::dict cpp_current_dict = cpp_parent_dict["table"];

                      if (! cpp_current_dict.contains(py::cast(var_j_0d_int_Scalar))) {
                        cpp_current_dict[py::cast(var_j_0d_int_Scalar)] = py::dict();
                      }
                      cpp_current_dict = cpp_current_dict[py::cast(var_j_0d_int_Scalar)];

                      if (! cpp_current_dict.contains(py::cast(var_k_0d_int_Scalar))) {
                        cpp_current_dict[py::cast(var_k_0d_int_Scalar)] = py::dict();
                      }
                      cpp_current_dict = cpp_current_dict[py::cast(var_k_0d_int_Scalar)];
                    // variable declarations
                    std::vector<double> var_Ep_0d_floatvec_Scalar;
                    bool aux_Ep_read = false;
                    vartype aux_last_type_read_for_Ep = UNKNOWN;
                    std::vector<double> var_f_0d_floatvec_Scalar;
                    bool aux_f_read = false;
                    vartype aux_last_type_read_for_f = UNKNOWN;
                    std::vector<int> var_INT_0d_intvec_Scalar;
                    bool aux_INT_read = false;
                    vartype aux_last_type_read_for_INT = UNKNOWN;
                    std::vector<int> var_NBT_0d_intvec_Scalar;
                    bool aux_NBT_read = false;
                    vartype aux_last_type_read_for_NBT = UNKNOWN;
                    {
                      Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                      // assign expression to variable Ep
                      var_Ep_0d_floatvec_Scalar = tab_body.X;
                      aux_Ep_read = true;
                      if ((aux_last_type_read_for_Ep != SCALAR_FLOATVEC && aux_last_type_read_for_Ep != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_Ep = SCALAR_FLOATVEC;
                      // assign expression to variable f
                      var_f_0d_floatvec_Scalar = tab_body.Y;
                      aux_f_read = true;
                      if ((aux_last_type_read_for_f != SCALAR_FLOATVEC && aux_last_type_read_for_f != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_f = SCALAR_FLOATVEC;
                      // assign expression to variable INT
                      var_INT_0d_intvec_Scalar = tab_body.INT;
                      aux_INT_read = true;
                      if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_INT = SCALAR_INTVEC;
                      // assign expression to variable NBT
                      var_NBT_0d_intvec_Scalar = tab_body.NBT;
                      aux_NBT_read = true;
                      if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_NBT = SCALAR_INTVEC;
                    }
                    // store data in Python dictionary
                    if (((aux_last_type_read_for_Ep == SCALAR_FLOATVEC) && (aux_Ep_read == true))) {
                      cpp_current_dict["Ep"] = var_Ep_0d_floatvec_Scalar;
                    }
                    if (((aux_last_type_read_for_f == SCALAR_FLOATVEC) && (aux_f_read == true))) {
                      cpp_current_dict["f"] = var_f_0d_floatvec_Scalar;
                    }
                    if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
                      cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
                    }
                    if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
                      cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
                    }
                    cpp_current_dict = cpp_parent_dict;
                  }
                }
              }
            }
          }
        }
      }
      // store data in Python dictionary
      if (((aux_last_type_read_for_ZAP == SCALAR_DOUBLE) && (aux_ZAP_read == true))) {
        cpp_current_dict["ZAP"] = var_ZAP_0d_double_Scalar;
      }
      if (((aux_last_type_read_for_AWP == SCALAR_DOUBLE) && (aux_AWP_read == true))) {
        cpp_current_dict["AWP"] = var_AWP_0d_double_Scalar;
      }
      if (((aux_last_type_read_for_LIP == SCALAR_INT) && (aux_LIP_read == true))) {
        cpp_current_dict["LIP"] = var_LIP_0d_int_Scalar;
      }
      if (((aux_last_type_read_for_LAW == SCALAR_INT) && (aux_LAW_read == true))) {
        cpp_current_dict["LAW"] = var_LAW_0d_int_Scalar;
      }
      if (((aux_last_type_read_for_LANG == SCALAR_INT) && (aux_LANG_read == true))) {
        cpp_current_dict["LANG"] = var_LANG_0d_int_Scalar;
      }
      if (((aux_last_type_read_for_LEP == SCALAR_INT) && (aux_LEP_read == true))) {
        cpp_current_dict["LEP"] = var_LEP_0d_int_Scalar;
      }
      if (((aux_last_type_read_for_NE == SCALAR_INT) && (aux_NE_read == true))) {
        cpp_current_dict["NE"] = var_NE_0d_int_Scalar;
      }
      if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
        cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
      }
      if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
        cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
      }
      if ((var_E_1d_double_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_E_1d_double_NestedVector;
        cpp_current_dict["E"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["E"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
        }
      }
      if ((var_ND_1d_int_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_ND_1d_int_NestedVector;
        cpp_current_dict["ND"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["ND"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
        }
      }
      if ((var_NA_1d_int_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_NA_1d_int_NestedVector;
        cpp_current_dict["NA"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["NA"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
        }
      }
      if ((var_NEP_1d_int_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_NEP_1d_int_NestedVector;
        cpp_current_dict["NEP"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["NEP"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
        }
      }
      if ((var_Ep_2d_double_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_Ep_2d_double_NestedVector;
        cpp_current_dict["Ep"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["Ep"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
          cpp_curdict0[py::cast(cpp_i1)] = py::dict();
          py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
          for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
            cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
          }
        }
      }
      if ((var_b_3d_double_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_b_3d_double_NestedVector;
        cpp_current_dict["b"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["b"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
          cpp_curdict0[py::cast(cpp_i1)] = py::dict();
          py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
          for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
            auto& cpp_curvar2 = cpp_curvar1[cpp_i2];
            cpp_curdict1[py::cast(cpp_i2)] = py::dict();
            py::dict cpp_curdict2 = cpp_curdict1[py::cast(cpp_i2)];
            for (int cpp_i3 = cpp_curvar2.get_start_index(); cpp_i3 <= cpp_curvar2.get_last_index(); cpp_i3++) {
              cpp_curdict2[py::cast(cpp_i3)] = cpp_curvar2[cpp_i3];
            }
          }
        }
      }
      if ((var_NLW_1d_int_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_NLW_1d_int_NestedVector;
        cpp_current_dict["NLW"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["NLW"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
        }
      }
      if ((var_NL_1d_int_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_NL_1d_int_NestedVector;
        cpp_current_dict["NL"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["NL"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
        }
      }
      if ((var_A_2d_double_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_A_2d_double_NestedVector;
        cpp_current_dict["A"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["A"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
          cpp_curdict0[py::cast(cpp_i1)] = py::dict();
          py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
          for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
            cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
          }
        }
      }
      if (((aux_last_type_read_for_SPI == SCALAR_DOUBLE) && (aux_SPI_read == true))) {
        cpp_current_dict["SPI"] = var_SPI_0d_double_Scalar;
      }
      if (((aux_last_type_read_for_LIDP == SCALAR_INT) && (aux_LIDP_read == true))) {
        cpp_current_dict["LIDP"] = var_LIDP_0d_int_Scalar;
      }
      if ((var_LTP_1d_int_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_LTP_1d_int_NestedVector;
        cpp_current_dict["LTP"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["LTP"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
        }
      }
      if ((var_NW_1d_int_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_NW_1d_int_NestedVector;
        cpp_current_dict["NW"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["NW"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
        }
      }
      if (((aux_last_type_read_for_APSX == SCALAR_DOUBLE) && (aux_APSX_read == true))) {
        cpp_current_dict["APSX"] = var_APSX_0d_double_Scalar;
      }
      if (((aux_last_type_read_for_NPSX == SCALAR_INT) && (aux_NPSX_read == true))) {
        cpp_current_dict["NPSX"] = var_NPSX_0d_int_Scalar;
      }
      if ((var_NMU_1d_int_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_NMU_1d_int_NestedVector;
        cpp_current_dict["NMU"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["NMU"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
        }
      }
      if ((var_mu_2d_double_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_mu_2d_double_NestedVector;
        cpp_current_dict["mu"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["mu"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
          cpp_curdict0[py::cast(cpp_i1)] = py::dict();
          py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
          for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
            cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
          }
        }
      }
      cpp_current_dict = cpp_parent_dict;
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_JP == SCALAR_INT) && (aux_JP_read == true))) {
    cpp_current_dict["JP"] = var_JP_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_LCT == SCALAR_INT) && (aux_LCT_read == true))) {
    cpp_current_dict["LCT"] = var_LCT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NK == SCALAR_INT) && (aux_NK_read == true))) {
    cpp_current_dict["NK"] = var_NK_0d_int_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_mf7mt2_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_LTHR_0d_int_Scalar;
  bool aux_LTHR_read = false;
  vartype aux_last_type_read_for_LTHR = UNKNOWN;
  double var_T0_0d_double_Scalar;
  bool aux_T0_read = false;
  vartype aux_last_type_read_for_T0 = UNKNOWN;
  int var_LT_0d_int_Scalar;
  bool aux_LT_read = false;
  vartype aux_last_type_read_for_LT = UNKNOWN;
  NestedVector<double> var_T_1d_double_NestedVector;
  vartype aux_last_type_read_for_T = UNKNOWN;
  int var_LI_0d_int_Scalar;
  bool aux_LI_read = false;
  vartype aux_last_type_read_for_LI = UNKNOWN;
  int var_NP_0d_int_Scalar;
  bool aux_NP_read = false;
  vartype aux_last_type_read_for_NP = UNKNOWN;
  Matrix2d<double> var_S_2d_double_Matrix2d;
  vartype aux_last_type_read_for_S = UNKNOWN;
  double var_SB_0d_double_Scalar;
  bool aux_SB_read = false;
  vartype aux_last_type_read_for_SB = UNKNOWN;
  std::vector<double> var_Tint_0d_floatvec_Scalar;
  bool aux_Tint_read = false;
  vartype aux_last_type_read_for_Tint = UNKNOWN;
  std::vector<double> var_Wp_0d_floatvec_Scalar;
  bool aux_Wp_read = false;
  vartype aux_last_type_read_for_Wp = UNKNOWN;
  std::vector<int> var_INT_0d_intvec_Scalar;
  bool aux_INT_read = false;
  vartype aux_last_type_read_for_INT = UNKNOWN;
  std::vector<int> var_NBT_0d_intvec_Scalar;
  bool aux_NBT_read = false;
  vartype aux_last_type_read_for_NBT = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // assign expression to variable LTHR
  var_LTHR_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
  aux_LTHR_read = true;
  if ((aux_last_type_read_for_LTHR != SCALAR_INT && aux_last_type_read_for_LTHR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LTHR = SCALAR_INT;
  // evaluate if-elif-else clause
  {
    bool cpp_found_match = false;
    if (! cpp_found_match) {
      if ((((((((aux_LTHR_read == true)) && ((var_LTHR_0d_int_Scalar)==(1)))))))) {
        // if statement evaluation
        cpp_found_match = true;
        // read TAB1 record
        cpp_line = cpp_read_line(cont);
        // assign expression to variable T0
        var_T0_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
        aux_T0_read = true;
        if ((aux_last_type_read_for_T0 != SCALAR_DOUBLE && aux_last_type_read_for_T0 != UNKNOWN)) {
          raise_vartype_mismatch();
        }
        aux_last_type_read_for_T0 = SCALAR_DOUBLE;
        // assign expression to variable LT
        var_LT_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
        aux_LT_read = true;
        if ((aux_last_type_read_for_LT != SCALAR_INT && aux_last_type_read_for_LT != UNKNOWN)) {
          raise_vartype_mismatch();
        }
        aux_last_type_read_for_LT = SCALAR_INT;

        {
            py::dict cpp_parent_dict = cpp_current_dict;
            if (! cpp_parent_dict.contains("S_T0_table")) {
              cpp_parent_dict["S_T0_table"] = py::dict();
            }
            py::dict cpp_current_dict = cpp_parent_dict["S_T0_table"];
          // variable declarations
          std::vector<double> var_Eint_0d_floatvec_Scalar;
          bool aux_Eint_read = false;
          vartype aux_last_type_read_for_Eint = UNKNOWN;
          std::vector<double> var_S_0d_floatvec_Scalar;
          bool aux_S_read = false;
          vartype aux_last_type_read_for_S = UNKNOWN;
          std::vector<int> var_INT_0d_intvec_Scalar;
          bool aux_INT_read = false;
          vartype aux_last_type_read_for_INT = UNKNOWN;
          std::vector<int> var_NBT_0d_intvec_Scalar;
          bool aux_NBT_read = false;
          vartype aux_last_type_read_for_NBT = UNKNOWN;
          {
            Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
            // assign expression to variable Eint
            var_Eint_0d_floatvec_Scalar = tab_body.X;
            aux_Eint_read = true;
            if ((aux_last_type_read_for_Eint != SCALAR_FLOATVEC && aux_last_type_read_for_Eint != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_Eint = SCALAR_FLOATVEC;
            // assign expression to variable S
            var_S_0d_floatvec_Scalar = tab_body.Y;
            aux_S_read = true;
            if ((aux_last_type_read_for_S != SCALAR_FLOATVEC && aux_last_type_read_for_S != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_S = SCALAR_FLOATVEC;
            // assign expression to variable INT
            var_INT_0d_intvec_Scalar = tab_body.INT;
            aux_INT_read = true;
            if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_INT = SCALAR_INTVEC;
            // assign expression to variable NBT
            var_NBT_0d_intvec_Scalar = tab_body.NBT;
            aux_NBT_read = true;
            if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NBT = SCALAR_INTVEC;
          }
          // store data in Python dictionary
          if (((aux_last_type_read_for_Eint == SCALAR_FLOATVEC) && (aux_Eint_read == true))) {
            cpp_current_dict["Eint"] = var_Eint_0d_floatvec_Scalar;
          }
          if (((aux_last_type_read_for_S == SCALAR_FLOATVEC) && (aux_S_read == true))) {
            cpp_current_dict["S"] = var_S_0d_floatvec_Scalar;
          }
          if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
            cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
          }
          if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
            cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
          }
          cpp_current_dict = cpp_parent_dict;
        }
        var_S_2d_double_Matrix2d.init(1, var_NP_0d_int_Scalar, 1, var_LT_0d_int_Scalar, false, false);

        for (int var_i_0d_int_Scalar = 1;
           var_i_0d_int_Scalar <= var_LT_0d_int_Scalar; var_i_0d_int_Scalar++) {
          bool aux_i_read = true;
          cpp_line = cpp_read_line(cont);
          // read LIST record
          // assign expression to variable T
          var_T_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 0));
          if ((aux_last_type_read_for_T != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_T != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_T = NESTEDVECTOR_DOUBLE;
          // assign expression to variable LI
          var_LI_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
          aux_LI_read = true;
          if ((aux_last_type_read_for_LI != SCALAR_INT && aux_last_type_read_for_LI != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_LI = SCALAR_INT;
          // assign expression to variable NP
          var_NP_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
          aux_NP_read = true;
          if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NP = SCALAR_INT;
          {
            int cpp_npl = cpp_read_int_field(cpp_line, 4);
            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
            int cpp_j = 0;
            // read LIST body

            for (int var_q_0d_int_Scalar = 1;
               var_q_0d_int_Scalar <= var_NP_0d_int_Scalar; var_q_0d_int_Scalar++) {
              bool aux_q_read = true;
              // read LIST body
              // assign expression to variable S
              var_S_2d_double_Matrix2d(var_q_0d_int_Scalar, var_i_0d_int_Scalar) = cpp_floatvec[cpp_j++];
              if ((aux_last_type_read_for_S != MATRIX2D_DOUBLE && aux_last_type_read_for_S != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_S = MATRIX2D_DOUBLE;
            }
          }
        }
      }
    }
    if (! cpp_found_match) {
      if (! cpp_found_match) {
        if ((((((((aux_LTHR_read == true)) && ((var_LTHR_0d_int_Scalar)==(2)))))))) {
          // if statement evaluation
          cpp_found_match = true;
          // read TAB1 record
          cpp_line = cpp_read_line(cont);
          // assign expression to variable SB
          var_SB_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
          aux_SB_read = true;
          if ((aux_last_type_read_for_SB != SCALAR_DOUBLE && aux_last_type_read_for_SB != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_SB = SCALAR_DOUBLE;
          {
            Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
            // assign expression to variable Tint
            var_Tint_0d_floatvec_Scalar = tab_body.X;
            aux_Tint_read = true;
            if ((aux_last_type_read_for_Tint != SCALAR_FLOATVEC && aux_last_type_read_for_Tint != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_Tint = SCALAR_FLOATVEC;
            // assign expression to variable Wp
            var_Wp_0d_floatvec_Scalar = tab_body.Y;
            aux_Wp_read = true;
            if ((aux_last_type_read_for_Wp != SCALAR_FLOATVEC && aux_last_type_read_for_Wp != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_Wp = SCALAR_FLOATVEC;
            // assign expression to variable INT
            var_INT_0d_intvec_Scalar = tab_body.INT;
            aux_INT_read = true;
            if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_INT = SCALAR_INTVEC;
            // assign expression to variable NBT
            var_NBT_0d_intvec_Scalar = tab_body.NBT;
            aux_NBT_read = true;
            if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NBT = SCALAR_INTVEC;
          }
        }
      }
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LTHR == SCALAR_INT) && (aux_LTHR_read == true))) {
    cpp_current_dict["LTHR"] = var_LTHR_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_T0 == SCALAR_DOUBLE) && (aux_T0_read == true))) {
    cpp_current_dict["T0"] = var_T0_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LT == SCALAR_INT) && (aux_LT_read == true))) {
    cpp_current_dict["LT"] = var_LT_0d_int_Scalar;
  }
  if ((var_T_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_T_1d_double_NestedVector;
    cpp_current_dict["T"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["T"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if (((aux_last_type_read_for_LI == SCALAR_INT) && (aux_LI_read == true))) {
    cpp_current_dict["LI"] = var_LI_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NP == SCALAR_INT) && (aux_NP_read == true))) {
    cpp_current_dict["NP"] = var_NP_0d_int_Scalar;
  }
  if (var_S_2d_double_Matrix2d.did_read()) {
      cpp_current_dict["S"] = py::dict();
      py::dict cpp_curdict0 = cpp_current_dict["S"];
      for (int cpp_i1 = var_S_2d_double_Matrix2d.get_row_start_index(); cpp_i1 <= var_S_2d_double_Matrix2d.get_row_last_index(); cpp_i1++) {
        cpp_curdict0[py::cast(cpp_i1)] = py::dict();
        py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
        for (int cpp_i2 = var_S_2d_double_Matrix2d.get_col_start_index(cpp_i1); cpp_i2 <= var_S_2d_double_Matrix2d.get_col_last_index(cpp_i1); cpp_i2++) {
          cpp_curdict1[py::cast(cpp_i2)] = var_S_2d_double_Matrix2d(cpp_i1, cpp_i2);
        }
      }
  }
  if (((aux_last_type_read_for_SB == SCALAR_DOUBLE) && (aux_SB_read == true))) {
    cpp_current_dict["SB"] = var_SB_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_Tint == SCALAR_FLOATVEC) && (aux_Tint_read == true))) {
    cpp_current_dict["Tint"] = var_Tint_0d_floatvec_Scalar;
  }
  if (((aux_last_type_read_for_Wp == SCALAR_FLOATVEC) && (aux_Wp_read == true))) {
    cpp_current_dict["Wp"] = var_Wp_0d_floatvec_Scalar;
  }
  if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
    cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
  }
  if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
    cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_mf7mt4_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_LAT_0d_int_Scalar;
  bool aux_LAT_read = false;
  vartype aux_last_type_read_for_LAT = UNKNOWN;
  int var_LASYM_0d_int_Scalar;
  bool aux_LASYM_read = false;
  vartype aux_last_type_read_for_LASYM = UNKNOWN;
  int var_LLN_0d_int_Scalar;
  bool aux_LLN_read = false;
  vartype aux_last_type_read_for_LLN = UNKNOWN;
  int var_NI_0d_int_Scalar;
  bool aux_NI_read = false;
  vartype aux_last_type_read_for_NI = UNKNOWN;
  int var_NS_0d_int_Scalar;
  bool aux_NS_read = false;
  vartype aux_last_type_read_for_NS = UNKNOWN;
  NestedVector<double> var_B_1d_double_NestedVector;
  vartype aux_last_type_read_for_B = UNKNOWN;
  int var_NB_0d_int_Scalar;
  bool aux_NB_read = false;
  vartype aux_last_type_read_for_NB = UNKNOWN;
  double var_T0_0d_double_Scalar;
  bool aux_T0_read = false;
  vartype aux_last_type_read_for_T0 = UNKNOWN;
  NestedVector<double> var_beta_1d_double_NestedVector;
  vartype aux_last_type_read_for_beta = UNKNOWN;
  NestedVector<int> var_LT_1d_int_NestedVector;
  vartype aux_last_type_read_for_LT = UNKNOWN;
  NestedVector<double> var_T_1d_double_NestedVector;
  vartype aux_last_type_read_for_T = UNKNOWN;
  NestedVector<int> var_LI_1d_int_NestedVector;
  vartype aux_last_type_read_for_LI = UNKNOWN;
  int var_NP_0d_int_Scalar;
  bool aux_NP_read = false;
  vartype aux_last_type_read_for_NP = UNKNOWN;
  NestedVector<NestedVector<NestedVector<double>>> var_S_3d_double_NestedVector;
  NestedVector<double>* ptr_S_3d_idx1;
  NestedVector<NestedVector<double>>* ptr_S_3d_idx0;
  vartype aux_last_type_read_for_S = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // assign expression to variable LAT
  var_LAT_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
  aux_LAT_read = true;
  if ((aux_last_type_read_for_LAT != SCALAR_INT && aux_last_type_read_for_LAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LAT = SCALAR_INT;
  // assign expression to variable LASYM
  var_LASYM_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
  aux_LASYM_read = true;
  if ((aux_last_type_read_for_LASYM != SCALAR_INT && aux_last_type_read_for_LASYM != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LASYM = SCALAR_INT;
  cpp_line = cpp_read_line(cont);
  // read LIST record
  // assign expression to variable LLN
  var_LLN_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
  aux_LLN_read = true;
  if ((aux_last_type_read_for_LLN != SCALAR_INT && aux_last_type_read_for_LLN != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LLN = SCALAR_INT;
  // assign expression to variable NI
  var_NI_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
  aux_NI_read = true;
  if ((aux_last_type_read_for_NI != SCALAR_INT && aux_last_type_read_for_NI != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NI = SCALAR_INT;
  // assign expression to variable NS
  var_NS_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
  aux_NS_read = true;
  if ((aux_last_type_read_for_NS != SCALAR_INT && aux_last_type_read_for_NS != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NS = SCALAR_INT;
  {
    int cpp_npl = cpp_read_int_field(cpp_line, 4);
    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
    int cpp_j = 0;
    // read LIST body

    for (int var_n_0d_int_Scalar = 1;
       var_n_0d_int_Scalar <= var_NI_0d_int_Scalar; var_n_0d_int_Scalar++) {
      bool aux_n_read = true;
      // read LIST body
      // assign expression to variable B
      var_B_1d_double_NestedVector.set(var_n_0d_int_Scalar, cpp_floatvec[cpp_j++]);
      if ((aux_last_type_read_for_B != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_B != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_B = NESTEDVECTOR_DOUBLE;
    }
  }
  // read TAB2 record
  cpp_line = cpp_read_line(cont);
  // assign expression to variable NB
  var_NB_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
  aux_NB_read = true;
  if ((aux_last_type_read_for_NB != SCALAR_INT && aux_last_type_read_for_NB != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NB = SCALAR_INT;

  {
      py::dict cpp_parent_dict = cpp_current_dict;
      if (! cpp_parent_dict.contains("beta_interp")) {
        cpp_parent_dict["beta_interp"] = py::dict();
      }
      py::dict cpp_current_dict = cpp_parent_dict["beta_interp"];
    // variable declarations
    std::vector<int> var_INT_0d_intvec_Scalar;
    bool aux_INT_read = false;
    vartype aux_last_type_read_for_INT = UNKNOWN;
    std::vector<int> var_NBT_0d_intvec_Scalar;
    bool aux_NBT_read = false;
    vartype aux_last_type_read_for_NBT = UNKNOWN;
    {
      Tab2Body tab_body = read_tab2_body(cont, cpp_read_int_field(cpp_line, 4));
      // assign expression to variable INT
      var_INT_0d_intvec_Scalar = tab_body.INT;
      aux_INT_read = true;
      if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_INT = SCALAR_INTVEC;
      // assign expression to variable NBT
      var_NBT_0d_intvec_Scalar = tab_body.NBT;
      aux_NBT_read = true;
      if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_NBT = SCALAR_INTVEC;
    }
    // store data in Python dictionary
    if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
      cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
    }
    if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
      cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
    }
    cpp_current_dict = cpp_parent_dict;
  }

  for (int var_i_0d_int_Scalar = 1;
     var_i_0d_int_Scalar <= var_NB_0d_int_Scalar; var_i_0d_int_Scalar++) {
    bool aux_i_read = true;
    // read TAB1 record
    cpp_line = cpp_read_line(cont);
    // assign expression to variable T0
    var_T0_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_T0_read = true;
    if ((aux_last_type_read_for_T0 != SCALAR_DOUBLE && aux_last_type_read_for_T0 != UNKNOWN)) {
      raise_vartype_mismatch();
    }
    aux_last_type_read_for_T0 = SCALAR_DOUBLE;
    // assign expression to variable beta
    var_beta_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 1));
    if ((aux_last_type_read_for_beta != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_beta != UNKNOWN)) {
      raise_vartype_mismatch();
    }
    aux_last_type_read_for_beta = NESTEDVECTOR_DOUBLE;
    // assign expression to variable LT
    var_LT_1d_int_NestedVector.set(var_i_0d_int_Scalar, cpp_read_int_field(cpp_line, 2));
    if ((aux_last_type_read_for_LT != NESTEDVECTOR_INT && aux_last_type_read_for_LT != UNKNOWN)) {
      raise_vartype_mismatch();
    }
    aux_last_type_read_for_LT = NESTEDVECTOR_INT;

    {
        py::dict cpp_parent_dict = cpp_current_dict;
        if (! cpp_parent_dict.contains("S_table")) {
          cpp_parent_dict["S_table"] = py::dict();
        }
        py::dict cpp_current_dict = cpp_parent_dict["S_table"];

        if (! cpp_current_dict.contains(py::cast(var_i_0d_int_Scalar))) {
          cpp_current_dict[py::cast(var_i_0d_int_Scalar)] = py::dict();
        }
        cpp_current_dict = cpp_current_dict[py::cast(var_i_0d_int_Scalar)];
      // variable declarations
      std::vector<double> var_alpha_0d_floatvec_Scalar;
      bool aux_alpha_read = false;
      vartype aux_last_type_read_for_alpha = UNKNOWN;
      std::vector<double> var_S_0d_floatvec_Scalar;
      bool aux_S_read = false;
      vartype aux_last_type_read_for_S = UNKNOWN;
      std::vector<int> var_INT_0d_intvec_Scalar;
      bool aux_INT_read = false;
      vartype aux_last_type_read_for_INT = UNKNOWN;
      std::vector<int> var_NBT_0d_intvec_Scalar;
      bool aux_NBT_read = false;
      vartype aux_last_type_read_for_NBT = UNKNOWN;
      {
        Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
        // assign expression to variable alpha
        var_alpha_0d_floatvec_Scalar = tab_body.X;
        aux_alpha_read = true;
        if ((aux_last_type_read_for_alpha != SCALAR_FLOATVEC && aux_last_type_read_for_alpha != UNKNOWN)) {
          raise_vartype_mismatch();
        }
        aux_last_type_read_for_alpha = SCALAR_FLOATVEC;
        // assign expression to variable S
        var_S_0d_floatvec_Scalar = tab_body.Y;
        aux_S_read = true;
        if ((aux_last_type_read_for_S != SCALAR_FLOATVEC && aux_last_type_read_for_S != UNKNOWN)) {
          raise_vartype_mismatch();
        }
        aux_last_type_read_for_S = SCALAR_FLOATVEC;
        // assign expression to variable INT
        var_INT_0d_intvec_Scalar = tab_body.INT;
        aux_INT_read = true;
        if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
          raise_vartype_mismatch();
        }
        aux_last_type_read_for_INT = SCALAR_INTVEC;
        // assign expression to variable NBT
        var_NBT_0d_intvec_Scalar = tab_body.NBT;
        aux_NBT_read = true;
        if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
          raise_vartype_mismatch();
        }
        aux_last_type_read_for_NBT = SCALAR_INTVEC;
      }
      // store data in Python dictionary
      if (((aux_last_type_read_for_alpha == SCALAR_FLOATVEC) && (aux_alpha_read == true))) {
        cpp_current_dict["alpha"] = var_alpha_0d_floatvec_Scalar;
      }
      if (((aux_last_type_read_for_S == SCALAR_FLOATVEC) && (aux_S_read == true))) {
        cpp_current_dict["S"] = var_S_0d_floatvec_Scalar;
      }
      if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
        cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
      }
      if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
        cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
      }
      cpp_current_dict = cpp_parent_dict;
    }
    ptr_S_3d_idx1 = ptr_S_3d_idx0->prepare(var_i_0d_int_Scalar);

    for (int var_j_0d_int_Scalar = 1;
       var_j_0d_int_Scalar <= var_LT_1d_int_NestedVector[var_i_0d_int_Scalar]; var_j_0d_int_Scalar++) {
      bool aux_j_read = true;
      cpp_line = cpp_read_line(cont);
      // read LIST record
      // assign expression to variable T
      var_T_1d_double_NestedVector.set(var_j_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 0));
      if ((aux_last_type_read_for_T != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_T != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_T = NESTEDVECTOR_DOUBLE;
      if ((! var_beta_1d_double_NestedVector.contains(var_i_0d_int_Scalar))) {
        // assign expression to variable beta
        var_beta_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 1));
        if ((aux_last_type_read_for_beta != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_beta != UNKNOWN)) {
          raise_vartype_mismatch();
        }
        aux_last_type_read_for_beta = NESTEDVECTOR_DOUBLE;
      }
      // assign expression to variable LI
      var_LI_1d_int_NestedVector.set(var_j_0d_int_Scalar, cpp_read_int_field(cpp_line, 2));
      if ((aux_last_type_read_for_LI != NESTEDVECTOR_INT && aux_last_type_read_for_LI != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_LI = NESTEDVECTOR_INT;
      // assign expression to variable NP
      var_NP_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
      aux_NP_read = true;
      if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_NP = SCALAR_INT;
      {
        int cpp_npl = cpp_read_int_field(cpp_line, 4);
        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
        int cpp_j = 0;
        // read LIST body

        for (int var_q_0d_int_Scalar = 1;
           var_q_0d_int_Scalar <= var_NP_0d_int_Scalar; var_q_0d_int_Scalar++) {
          bool aux_q_read = true;
          // read LIST body
          // assign expression to variable S
          ptr_S_3d_idx0 = var_S_3d_double_NestedVector.prepare(var_q_0d_int_Scalar);
          ptr_S_3d_idx1->set(var_j_0d_int_Scalar, cpp_floatvec[cpp_j++]);
          if ((aux_last_type_read_for_S != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_S != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_S = NESTEDVECTOR_DOUBLE;
        }
      }
    }
  }
  // read TAB1 record
  cpp_line = cpp_read_line(cont);

  {
      py::dict cpp_parent_dict = cpp_current_dict;
      if (! cpp_parent_dict.contains("teff0_table")) {
        cpp_parent_dict["teff0_table"] = py::dict();
      }
      py::dict cpp_current_dict = cpp_parent_dict["teff0_table"];
    // variable declarations
    std::vector<double> var_Tint_0d_floatvec_Scalar;
    bool aux_Tint_read = false;
    vartype aux_last_type_read_for_Tint = UNKNOWN;
    std::vector<double> var_Teff0_0d_floatvec_Scalar;
    bool aux_Teff0_read = false;
    vartype aux_last_type_read_for_Teff0 = UNKNOWN;
    std::vector<int> var_INT_0d_intvec_Scalar;
    bool aux_INT_read = false;
    vartype aux_last_type_read_for_INT = UNKNOWN;
    std::vector<int> var_NBT_0d_intvec_Scalar;
    bool aux_NBT_read = false;
    vartype aux_last_type_read_for_NBT = UNKNOWN;
    {
      Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
      // assign expression to variable Tint
      var_Tint_0d_floatvec_Scalar = tab_body.X;
      aux_Tint_read = true;
      if ((aux_last_type_read_for_Tint != SCALAR_FLOATVEC && aux_last_type_read_for_Tint != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_Tint = SCALAR_FLOATVEC;
      // assign expression to variable Teff0
      var_Teff0_0d_floatvec_Scalar = tab_body.Y;
      aux_Teff0_read = true;
      if ((aux_last_type_read_for_Teff0 != SCALAR_FLOATVEC && aux_last_type_read_for_Teff0 != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_Teff0 = SCALAR_FLOATVEC;
      // assign expression to variable INT
      var_INT_0d_intvec_Scalar = tab_body.INT;
      aux_INT_read = true;
      if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_INT = SCALAR_INTVEC;
      // assign expression to variable NBT
      var_NBT_0d_intvec_Scalar = tab_body.NBT;
      aux_NBT_read = true;
      if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_NBT = SCALAR_INTVEC;
    }
    // store data in Python dictionary
    if (((aux_last_type_read_for_Tint == SCALAR_FLOATVEC) && (aux_Tint_read == true))) {
      cpp_current_dict["Tint"] = var_Tint_0d_floatvec_Scalar;
    }
    if (((aux_last_type_read_for_Teff0 == SCALAR_FLOATVEC) && (aux_Teff0_read == true))) {
      cpp_current_dict["Teff0"] = var_Teff0_0d_floatvec_Scalar;
    }
    if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
      cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
    }
    if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
      cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
    }
    cpp_current_dict = cpp_parent_dict;
  }
  // evaluate if-elif-else clause
  {
    bool cpp_found_match = false;
    if (! cpp_found_match) {
      if (((((((((aux_NI_read == true)) && ((var_NI_0d_int_Scalar)>=(7)))))&&(((var_B_1d_double_NestedVector.contains(7)) && ((var_B_1d_double_NestedVector[7])==(0)))))))) {
        // if statement evaluation
        cpp_found_match = true;
        // read TAB1 record
        cpp_line = cpp_read_line(cont);

        {
            py::dict cpp_parent_dict = cpp_current_dict;
            if (! cpp_parent_dict.contains("teff1_table")) {
              cpp_parent_dict["teff1_table"] = py::dict();
            }
            py::dict cpp_current_dict = cpp_parent_dict["teff1_table"];
          // variable declarations
          std::vector<double> var_Tint_0d_floatvec_Scalar;
          bool aux_Tint_read = false;
          vartype aux_last_type_read_for_Tint = UNKNOWN;
          std::vector<double> var_Teff1_0d_floatvec_Scalar;
          bool aux_Teff1_read = false;
          vartype aux_last_type_read_for_Teff1 = UNKNOWN;
          std::vector<int> var_INT_0d_intvec_Scalar;
          bool aux_INT_read = false;
          vartype aux_last_type_read_for_INT = UNKNOWN;
          std::vector<int> var_NBT_0d_intvec_Scalar;
          bool aux_NBT_read = false;
          vartype aux_last_type_read_for_NBT = UNKNOWN;
          {
            Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
            // assign expression to variable Tint
            var_Tint_0d_floatvec_Scalar = tab_body.X;
            aux_Tint_read = true;
            if ((aux_last_type_read_for_Tint != SCALAR_FLOATVEC && aux_last_type_read_for_Tint != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_Tint = SCALAR_FLOATVEC;
            // assign expression to variable Teff1
            var_Teff1_0d_floatvec_Scalar = tab_body.Y;
            aux_Teff1_read = true;
            if ((aux_last_type_read_for_Teff1 != SCALAR_FLOATVEC && aux_last_type_read_for_Teff1 != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_Teff1 = SCALAR_FLOATVEC;
            // assign expression to variable INT
            var_INT_0d_intvec_Scalar = tab_body.INT;
            aux_INT_read = true;
            if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_INT = SCALAR_INTVEC;
            // assign expression to variable NBT
            var_NBT_0d_intvec_Scalar = tab_body.NBT;
            aux_NBT_read = true;
            if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NBT = SCALAR_INTVEC;
          }
          // store data in Python dictionary
          if (((aux_last_type_read_for_Tint == SCALAR_FLOATVEC) && (aux_Tint_read == true))) {
            cpp_current_dict["Tint"] = var_Tint_0d_floatvec_Scalar;
          }
          if (((aux_last_type_read_for_Teff1 == SCALAR_FLOATVEC) && (aux_Teff1_read == true))) {
            cpp_current_dict["Teff1"] = var_Teff1_0d_floatvec_Scalar;
          }
          if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
            cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
          }
          if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
            cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
          }
          cpp_current_dict = cpp_parent_dict;
        }
      }
    }
  }
  // evaluate if-elif-else clause
  {
    bool cpp_found_match = false;
    if (! cpp_found_match) {
      if (((((((((aux_NI_read == true)) && ((var_NI_0d_int_Scalar)>=(13)))))&&(((var_B_1d_double_NestedVector.contains(13)) && ((var_B_1d_double_NestedVector[13])==(0.0)))))))) {
        // if statement evaluation
        cpp_found_match = true;
        // read TAB1 record
        cpp_line = cpp_read_line(cont);

        {
            py::dict cpp_parent_dict = cpp_current_dict;
            if (! cpp_parent_dict.contains("teff2_table")) {
              cpp_parent_dict["teff2_table"] = py::dict();
            }
            py::dict cpp_current_dict = cpp_parent_dict["teff2_table"];
          // variable declarations
          std::vector<double> var_Tint_0d_floatvec_Scalar;
          bool aux_Tint_read = false;
          vartype aux_last_type_read_for_Tint = UNKNOWN;
          std::vector<double> var_Teff2_0d_floatvec_Scalar;
          bool aux_Teff2_read = false;
          vartype aux_last_type_read_for_Teff2 = UNKNOWN;
          std::vector<int> var_INT_0d_intvec_Scalar;
          bool aux_INT_read = false;
          vartype aux_last_type_read_for_INT = UNKNOWN;
          std::vector<int> var_NBT_0d_intvec_Scalar;
          bool aux_NBT_read = false;
          vartype aux_last_type_read_for_NBT = UNKNOWN;
          {
            Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
            // assign expression to variable Tint
            var_Tint_0d_floatvec_Scalar = tab_body.X;
            aux_Tint_read = true;
            if ((aux_last_type_read_for_Tint != SCALAR_FLOATVEC && aux_last_type_read_for_Tint != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_Tint = SCALAR_FLOATVEC;
            // assign expression to variable Teff2
            var_Teff2_0d_floatvec_Scalar = tab_body.Y;
            aux_Teff2_read = true;
            if ((aux_last_type_read_for_Teff2 != SCALAR_FLOATVEC && aux_last_type_read_for_Teff2 != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_Teff2 = SCALAR_FLOATVEC;
            // assign expression to variable INT
            var_INT_0d_intvec_Scalar = tab_body.INT;
            aux_INT_read = true;
            if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_INT = SCALAR_INTVEC;
            // assign expression to variable NBT
            var_NBT_0d_intvec_Scalar = tab_body.NBT;
            aux_NBT_read = true;
            if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NBT = SCALAR_INTVEC;
          }
          // store data in Python dictionary
          if (((aux_last_type_read_for_Tint == SCALAR_FLOATVEC) && (aux_Tint_read == true))) {
            cpp_current_dict["Tint"] = var_Tint_0d_floatvec_Scalar;
          }
          if (((aux_last_type_read_for_Teff2 == SCALAR_FLOATVEC) && (aux_Teff2_read == true))) {
            cpp_current_dict["Teff2"] = var_Teff2_0d_floatvec_Scalar;
          }
          if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
            cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
          }
          if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
            cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
          }
          cpp_current_dict = cpp_parent_dict;
        }
      }
    }
  }
  // evaluate if-elif-else clause
  {
    bool cpp_found_match = false;
    if (! cpp_found_match) {
      if (((((((((aux_NI_read == true)) && ((var_NI_0d_int_Scalar)>=(19)))))&&(((var_B_1d_double_NestedVector.contains(19)) && ((var_B_1d_double_NestedVector[19])==(0.0)))))))) {
        // if statement evaluation
        cpp_found_match = true;
        // read TAB1 record
        cpp_line = cpp_read_line(cont);

        {
            py::dict cpp_parent_dict = cpp_current_dict;
            if (! cpp_parent_dict.contains("teff3_table")) {
              cpp_parent_dict["teff3_table"] = py::dict();
            }
            py::dict cpp_current_dict = cpp_parent_dict["teff3_table"];
          // variable declarations
          std::vector<double> var_Tint_0d_floatvec_Scalar;
          bool aux_Tint_read = false;
          vartype aux_last_type_read_for_Tint = UNKNOWN;
          std::vector<double> var_Teff3_0d_floatvec_Scalar;
          bool aux_Teff3_read = false;
          vartype aux_last_type_read_for_Teff3 = UNKNOWN;
          std::vector<int> var_INT_0d_intvec_Scalar;
          bool aux_INT_read = false;
          vartype aux_last_type_read_for_INT = UNKNOWN;
          std::vector<int> var_NBT_0d_intvec_Scalar;
          bool aux_NBT_read = false;
          vartype aux_last_type_read_for_NBT = UNKNOWN;
          {
            Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
            // assign expression to variable Tint
            var_Tint_0d_floatvec_Scalar = tab_body.X;
            aux_Tint_read = true;
            if ((aux_last_type_read_for_Tint != SCALAR_FLOATVEC && aux_last_type_read_for_Tint != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_Tint = SCALAR_FLOATVEC;
            // assign expression to variable Teff3
            var_Teff3_0d_floatvec_Scalar = tab_body.Y;
            aux_Teff3_read = true;
            if ((aux_last_type_read_for_Teff3 != SCALAR_FLOATVEC && aux_last_type_read_for_Teff3 != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_Teff3 = SCALAR_FLOATVEC;
            // assign expression to variable INT
            var_INT_0d_intvec_Scalar = tab_body.INT;
            aux_INT_read = true;
            if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_INT = SCALAR_INTVEC;
            // assign expression to variable NBT
            var_NBT_0d_intvec_Scalar = tab_body.NBT;
            aux_NBT_read = true;
            if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NBT = SCALAR_INTVEC;
          }
          // store data in Python dictionary
          if (((aux_last_type_read_for_Tint == SCALAR_FLOATVEC) && (aux_Tint_read == true))) {
            cpp_current_dict["Tint"] = var_Tint_0d_floatvec_Scalar;
          }
          if (((aux_last_type_read_for_Teff3 == SCALAR_FLOATVEC) && (aux_Teff3_read == true))) {
            cpp_current_dict["Teff3"] = var_Teff3_0d_floatvec_Scalar;
          }
          if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
            cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
          }
          if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
            cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
          }
          cpp_current_dict = cpp_parent_dict;
        }
      }
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LAT == SCALAR_INT) && (aux_LAT_read == true))) {
    cpp_current_dict["LAT"] = var_LAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_LASYM == SCALAR_INT) && (aux_LASYM_read == true))) {
    cpp_current_dict["LASYM"] = var_LASYM_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_LLN == SCALAR_INT) && (aux_LLN_read == true))) {
    cpp_current_dict["LLN"] = var_LLN_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NI == SCALAR_INT) && (aux_NI_read == true))) {
    cpp_current_dict["NI"] = var_NI_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NS == SCALAR_INT) && (aux_NS_read == true))) {
    cpp_current_dict["NS"] = var_NS_0d_int_Scalar;
  }
  if ((var_B_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_B_1d_double_NestedVector;
    cpp_current_dict["B"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["B"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if (((aux_last_type_read_for_NB == SCALAR_INT) && (aux_NB_read == true))) {
    cpp_current_dict["NB"] = var_NB_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_T0 == SCALAR_DOUBLE) && (aux_T0_read == true))) {
    cpp_current_dict["T0"] = var_T0_0d_double_Scalar;
  }
  if ((var_beta_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_beta_1d_double_NestedVector;
    cpp_current_dict["beta"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["beta"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_LT_1d_int_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_LT_1d_int_NestedVector;
    cpp_current_dict["LT"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["LT"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_T_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_T_1d_double_NestedVector;
    cpp_current_dict["T"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["T"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_LI_1d_int_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_LI_1d_int_NestedVector;
    cpp_current_dict["LI"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["LI"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if (((aux_last_type_read_for_NP == SCALAR_INT) && (aux_NP_read == true))) {
    cpp_current_dict["NP"] = var_NP_0d_int_Scalar;
  }
  if ((var_S_3d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_S_3d_double_NestedVector;
    cpp_current_dict["S"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["S"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
      cpp_curdict0[py::cast(cpp_i1)] = py::dict();
      py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
      for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
        auto& cpp_curvar2 = cpp_curvar1[cpp_i2];
        cpp_curdict1[py::cast(cpp_i2)] = py::dict();
        py::dict cpp_curdict2 = cpp_curdict1[py::cast(cpp_i2)];
        for (int cpp_i3 = cpp_curvar2.get_start_index(); cpp_i3 <= cpp_curvar2.get_last_index(); cpp_i3++) {
          cpp_curdict2[py::cast(cpp_i3)] = cpp_curvar2[cpp_i3];
        }
      }
    }
  }
  return cpp_current_dict;
}

py::dict parse_mf8_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_LIS_0d_int_Scalar;
  bool aux_LIS_read = false;
  vartype aux_last_type_read_for_LIS = UNKNOWN;
  int var_LISO_0d_int_Scalar;
  bool aux_LISO_read = false;
  vartype aux_last_type_read_for_LISO = UNKNOWN;
  int var_NS_0d_int_Scalar;
  bool aux_NS_read = false;
  vartype aux_last_type_read_for_NS = UNKNOWN;
  int var_NO_0d_int_Scalar;
  bool aux_NO_read = false;
  vartype aux_last_type_read_for_NO = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // assign expression to variable LIS
  var_LIS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
  aux_LIS_read = true;
  if ((aux_last_type_read_for_LIS != SCALAR_INT && aux_last_type_read_for_LIS != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LIS = SCALAR_INT;
  // assign expression to variable LISO
  var_LISO_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
  aux_LISO_read = true;
  if ((aux_last_type_read_for_LISO != SCALAR_INT && aux_last_type_read_for_LISO != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LISO = SCALAR_INT;
  // assign expression to variable NS
  var_NS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
  aux_NS_read = true;
  if ((aux_last_type_read_for_NS != SCALAR_INT && aux_last_type_read_for_NS != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NS = SCALAR_INT;
  // assign expression to variable NO
  var_NO_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
  aux_NO_read = true;
  if ((aux_last_type_read_for_NO != SCALAR_INT && aux_last_type_read_for_NO != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NO = SCALAR_INT;
  // evaluate if-elif-else clause
  {
    bool cpp_found_match = false;
    if (! cpp_found_match) {
      if ((((((((aux_NO_read == true)) && ((var_NO_0d_int_Scalar)==(0)))))))) {
        // if statement evaluation
        cpp_found_match = true;

        for (int var_k_0d_int_Scalar = 1;
           var_k_0d_int_Scalar <= var_NS_0d_int_Scalar; var_k_0d_int_Scalar++) {
          bool aux_k_read = true;
          // open section subsection

          {
              py::dict cpp_parent_dict = cpp_current_dict;
              if (! cpp_parent_dict.contains("subsection")) {
                cpp_parent_dict["subsection"] = py::dict();
              }
              py::dict cpp_current_dict = cpp_parent_dict["subsection"];

              if (! cpp_current_dict.contains(py::cast(var_k_0d_int_Scalar))) {
                cpp_current_dict[py::cast(var_k_0d_int_Scalar)] = py::dict();
              }
              cpp_current_dict = cpp_current_dict[py::cast(var_k_0d_int_Scalar)];
            // variable declarations
            double var_ZAP_0d_double_Scalar;
            bool aux_ZAP_read = false;
            vartype aux_last_type_read_for_ZAP = UNKNOWN;
            double var_ELFS_0d_double_Scalar;
            bool aux_ELFS_read = false;
            vartype aux_last_type_read_for_ELFS = UNKNOWN;
            int var_LMF_0d_int_Scalar;
            bool aux_LMF_read = false;
            vartype aux_last_type_read_for_LMF = UNKNOWN;
            int var_LFS_0d_int_Scalar;
            bool aux_LFS_read = false;
            vartype aux_last_type_read_for_LFS = UNKNOWN;
            int cpp_int_val;
            bool aux_cpp_int_val_read = false;
            vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
            int var_ND_0d_int_Scalar;
            bool aux_ND_read = false;
            vartype aux_last_type_read_for_ND = UNKNOWN;
            NestedVector<double> var_HL_1d_double_NestedVector;
            vartype aux_last_type_read_for_HL = UNKNOWN;
            NestedVector<double> var_RTYP_1d_double_NestedVector;
            vartype aux_last_type_read_for_RTYP = UNKNOWN;
            NestedVector<double> var_ZAN_1d_double_NestedVector;
            vartype aux_last_type_read_for_ZAN = UNKNOWN;
            NestedVector<double> var_BR_1d_double_NestedVector;
            vartype aux_last_type_read_for_BR = UNKNOWN;
            NestedVector<double> var_END_1d_double_NestedVector;
            vartype aux_last_type_read_for_END = UNKNOWN;
            NestedVector<double> var_CT_1d_double_NestedVector;
            vartype aux_last_type_read_for_CT = UNKNOWN;
            cpp_line = cpp_read_line(cont);
            // read LIST record
            // assign expression to variable ZAP
            var_ZAP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_ZAP_read = true;
            if ((aux_last_type_read_for_ZAP != SCALAR_DOUBLE && aux_last_type_read_for_ZAP != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_ZAP = SCALAR_DOUBLE;
            // assign expression to variable ELFS
            var_ELFS_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_ELFS_read = true;
            if ((aux_last_type_read_for_ELFS != SCALAR_DOUBLE && aux_last_type_read_for_ELFS != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_ELFS = SCALAR_DOUBLE;
            // assign expression to variable LMF
            var_LMF_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
            aux_LMF_read = true;
            if ((aux_last_type_read_for_LMF != SCALAR_INT && aux_last_type_read_for_LMF != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LMF = SCALAR_INT;
            // assign expression to variable LFS
            var_LFS_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
            aux_LFS_read = true;
            if ((aux_last_type_read_for_LFS != SCALAR_INT && aux_last_type_read_for_LFS != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LFS = SCALAR_INT;
            // assign expression to variable cpp_int_val
            cpp_int_val = cpp_read_int_field(cpp_line, 4);
            aux_cpp_int_val_read = true;
            if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_cpp_int_val = SCALAR_INT;
            // assign expression to variable ND
            var_ND_0d_int_Scalar = (cpp_int_val/6);
            aux_ND_read = true;
            if ((aux_last_type_read_for_ND != SCALAR_INT && aux_last_type_read_for_ND != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_ND = SCALAR_INT;
            {
              int cpp_npl = cpp_read_int_field(cpp_line, 4);
              cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
              int cpp_j = 0;
              // read LIST body

              for (int var_l_0d_int_Scalar = 1;
                 var_l_0d_int_Scalar <= var_ND_0d_int_Scalar; var_l_0d_int_Scalar++) {
                bool aux_l_read = true;
                // read LIST body
                // assign expression to variable HL
                var_HL_1d_double_NestedVector.set(var_l_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_HL != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_HL != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_HL = NESTEDVECTOR_DOUBLE;
                // assign expression to variable RTYP
                var_RTYP_1d_double_NestedVector.set(var_l_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_RTYP != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_RTYP != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_RTYP = NESTEDVECTOR_DOUBLE;
                // assign expression to variable ZAN
                var_ZAN_1d_double_NestedVector.set(var_l_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_ZAN != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ZAN != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_ZAN = NESTEDVECTOR_DOUBLE;
                // assign expression to variable BR
                var_BR_1d_double_NestedVector.set(var_l_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_BR != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_BR != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_BR = NESTEDVECTOR_DOUBLE;
                // assign expression to variable END
                var_END_1d_double_NestedVector.set(var_l_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_END != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_END != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_END = NESTEDVECTOR_DOUBLE;
                // assign expression to variable CT
                var_CT_1d_double_NestedVector.set(var_l_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                if ((aux_last_type_read_for_CT != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_CT != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_CT = NESTEDVECTOR_DOUBLE;
              }
            }
            // store data in Python dictionary
            if (((aux_last_type_read_for_ZAP == SCALAR_DOUBLE) && (aux_ZAP_read == true))) {
              cpp_current_dict["ZAP"] = var_ZAP_0d_double_Scalar;
            }
            if (((aux_last_type_read_for_ELFS == SCALAR_DOUBLE) && (aux_ELFS_read == true))) {
              cpp_current_dict["ELFS"] = var_ELFS_0d_double_Scalar;
            }
            if (((aux_last_type_read_for_LMF == SCALAR_INT) && (aux_LMF_read == true))) {
              cpp_current_dict["LMF"] = var_LMF_0d_int_Scalar;
            }
            if (((aux_last_type_read_for_LFS == SCALAR_INT) && (aux_LFS_read == true))) {
              cpp_current_dict["LFS"] = var_LFS_0d_int_Scalar;
            }
            if (((aux_last_type_read_for_ND == SCALAR_INT) && (aux_ND_read == true))) {
              cpp_current_dict["ND"] = var_ND_0d_int_Scalar;
            }
            if ((var_HL_1d_double_NestedVector.get_last_index() != -1)) {
              auto& cpp_curvar0 = var_HL_1d_double_NestedVector;
              cpp_current_dict["HL"] = py::dict();
              py::dict cpp_curdict0 = cpp_current_dict["HL"];
              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
              }
            }
            if ((var_RTYP_1d_double_NestedVector.get_last_index() != -1)) {
              auto& cpp_curvar0 = var_RTYP_1d_double_NestedVector;
              cpp_current_dict["RTYP"] = py::dict();
              py::dict cpp_curdict0 = cpp_current_dict["RTYP"];
              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
              }
            }
            if ((var_ZAN_1d_double_NestedVector.get_last_index() != -1)) {
              auto& cpp_curvar0 = var_ZAN_1d_double_NestedVector;
              cpp_current_dict["ZAN"] = py::dict();
              py::dict cpp_curdict0 = cpp_current_dict["ZAN"];
              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
              }
            }
            if ((var_BR_1d_double_NestedVector.get_last_index() != -1)) {
              auto& cpp_curvar0 = var_BR_1d_double_NestedVector;
              cpp_current_dict["BR"] = py::dict();
              py::dict cpp_curdict0 = cpp_current_dict["BR"];
              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
              }
            }
            if ((var_END_1d_double_NestedVector.get_last_index() != -1)) {
              auto& cpp_curvar0 = var_END_1d_double_NestedVector;
              cpp_current_dict["END"] = py::dict();
              py::dict cpp_curdict0 = cpp_current_dict["END"];
              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
              }
            }
            if ((var_CT_1d_double_NestedVector.get_last_index() != -1)) {
              auto& cpp_curvar0 = var_CT_1d_double_NestedVector;
              cpp_current_dict["CT"] = py::dict();
              py::dict cpp_curdict0 = cpp_current_dict["CT"];
              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
              }
            }
            cpp_current_dict = cpp_parent_dict;
          }
        }
      }
    }
    if (! cpp_found_match) {
      if (! cpp_found_match) {
        if ((((((((aux_NO_read == true)) && ((var_NO_0d_int_Scalar)==(1)))))))) {
          // if statement evaluation
          cpp_found_match = true;

          for (int var_k_0d_int_Scalar = 1;
             var_k_0d_int_Scalar <= var_NS_0d_int_Scalar; var_k_0d_int_Scalar++) {
            bool aux_k_read = true;
            // open section subsection

            {
                py::dict cpp_parent_dict = cpp_current_dict;
                if (! cpp_parent_dict.contains("subsection")) {
                  cpp_parent_dict["subsection"] = py::dict();
                }
                py::dict cpp_current_dict = cpp_parent_dict["subsection"];

                if (! cpp_current_dict.contains(py::cast(var_k_0d_int_Scalar))) {
                  cpp_current_dict[py::cast(var_k_0d_int_Scalar)] = py::dict();
                }
                cpp_current_dict = cpp_current_dict[py::cast(var_k_0d_int_Scalar)];
              // variable declarations
              double var_ZAP_0d_double_Scalar;
              bool aux_ZAP_read = false;
              vartype aux_last_type_read_for_ZAP = UNKNOWN;
              double var_ELFS_0d_double_Scalar;
              bool aux_ELFS_read = false;
              vartype aux_last_type_read_for_ELFS = UNKNOWN;
              int var_LMF_0d_int_Scalar;
              bool aux_LMF_read = false;
              vartype aux_last_type_read_for_LMF = UNKNOWN;
              int var_LFS_0d_int_Scalar;
              bool aux_LFS_read = false;
              vartype aux_last_type_read_for_LFS = UNKNOWN;
              cpp_line = cpp_read_line(cont);
              // read CONT record
              // assign expression to variable ZAP
              var_ZAP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
              aux_ZAP_read = true;
              if ((aux_last_type_read_for_ZAP != SCALAR_DOUBLE && aux_last_type_read_for_ZAP != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_ZAP = SCALAR_DOUBLE;
              // assign expression to variable ELFS
              var_ELFS_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
              aux_ELFS_read = true;
              if ((aux_last_type_read_for_ELFS != SCALAR_DOUBLE && aux_last_type_read_for_ELFS != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_ELFS = SCALAR_DOUBLE;
              // assign expression to variable LMF
              var_LMF_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
              aux_LMF_read = true;
              if ((aux_last_type_read_for_LMF != SCALAR_INT && aux_last_type_read_for_LMF != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_LMF = SCALAR_INT;
              // assign expression to variable LFS
              var_LFS_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
              aux_LFS_read = true;
              if ((aux_last_type_read_for_LFS != SCALAR_INT && aux_last_type_read_for_LFS != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_LFS = SCALAR_INT;
              // store data in Python dictionary
              if (((aux_last_type_read_for_ZAP == SCALAR_DOUBLE) && (aux_ZAP_read == true))) {
                cpp_current_dict["ZAP"] = var_ZAP_0d_double_Scalar;
              }
              if (((aux_last_type_read_for_ELFS == SCALAR_DOUBLE) && (aux_ELFS_read == true))) {
                cpp_current_dict["ELFS"] = var_ELFS_0d_double_Scalar;
              }
              if (((aux_last_type_read_for_LMF == SCALAR_INT) && (aux_LMF_read == true))) {
                cpp_current_dict["LMF"] = var_LMF_0d_int_Scalar;
              }
              if (((aux_last_type_read_for_LFS == SCALAR_INT) && (aux_LFS_read == true))) {
                cpp_current_dict["LFS"] = var_LFS_0d_int_Scalar;
              }
              cpp_current_dict = cpp_parent_dict;
            }
          }
        }
      }
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LIS == SCALAR_INT) && (aux_LIS_read == true))) {
    cpp_current_dict["LIS"] = var_LIS_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_LISO == SCALAR_INT) && (aux_LISO_read == true))) {
    cpp_current_dict["LISO"] = var_LISO_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NS == SCALAR_INT) && (aux_NS_read == true))) {
    cpp_current_dict["NS"] = var_NS_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NO == SCALAR_INT) && (aux_NO_read == true))) {
    cpp_current_dict["NO"] = var_NO_0d_int_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_mf8mt454_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int cpp_int_val;
  bool aux_cpp_int_val_read = false;
  vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
  int var_LE_0d_int_Scalar;
  bool aux_LE_read = false;
  vartype aux_last_type_read_for_LE = UNKNOWN;
  NestedVector<double> var_E_1d_double_NestedVector;
  vartype aux_last_type_read_for_E = UNKNOWN;
  NestedVector<int> var_NN_1d_int_NestedVector;
  vartype aux_last_type_read_for_NN = UNKNOWN;
  NestedVector<int> var_NFP_1d_int_NestedVector;
  vartype aux_last_type_read_for_NFP = UNKNOWN;
  NestedVector<NestedVector<double>> var_ZAFP_2d_double_NestedVector;
  NestedVector<double>* ptr_ZAFP_2d_idx0;
  vartype aux_last_type_read_for_ZAFP = UNKNOWN;
  NestedVector<NestedVector<double>> var_FPS_2d_double_NestedVector;
  NestedVector<double>* ptr_FPS_2d_idx0;
  vartype aux_last_type_read_for_FPS = UNKNOWN;
  NestedVector<NestedVector<double>> var_YI_2d_double_NestedVector;
  NestedVector<double>* ptr_YI_2d_idx0;
  vartype aux_last_type_read_for_YI = UNKNOWN;
  NestedVector<NestedVector<double>> var_DYI_2d_double_NestedVector;
  NestedVector<double>* ptr_DYI_2d_idx0;
  vartype aux_last_type_read_for_DYI = UNKNOWN;
  NestedVector<int> var_I_1d_int_NestedVector;
  vartype aux_last_type_read_for_I = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // assign expression to variable cpp_int_val
  cpp_int_val = cpp_read_int_field(cpp_line, 2);
  aux_cpp_int_val_read = true;
  if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_cpp_int_val = SCALAR_INT;
  // assign expression to variable LE
  var_LE_0d_int_Scalar = (cpp_int_val+(-1));
  aux_LE_read = true;
  if ((aux_last_type_read_for_LE != SCALAR_INT && aux_last_type_read_for_LE != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LE = SCALAR_INT;
  cpp_line = cpp_read_line(cont);
  // read LIST record
  // assign expression to variable E
  var_E_1d_double_NestedVector.set(0, cpp_read_float_field(cpp_line.c_str(), 0));
  if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
  if ((! (aux_LE_read == true))) {
    // assign expression to variable LE
    var_LE_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
    aux_LE_read = true;
    if ((aux_last_type_read_for_LE != SCALAR_INT && aux_last_type_read_for_LE != UNKNOWN)) {
      raise_vartype_mismatch();
    }
    aux_last_type_read_for_LE = SCALAR_INT;
  }
  // assign expression to variable NN
  var_NN_1d_int_NestedVector.set(0, cpp_read_int_field(cpp_line, 4));
  if ((aux_last_type_read_for_NN != NESTEDVECTOR_INT && aux_last_type_read_for_NN != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NN = NESTEDVECTOR_INT;
  // assign expression to variable NFP
  var_NFP_1d_int_NestedVector.set(0, cpp_read_int_field(cpp_line, 5));
  if ((aux_last_type_read_for_NFP != NESTEDVECTOR_INT && aux_last_type_read_for_NFP != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NFP = NESTEDVECTOR_INT;
  {
    int cpp_npl = cpp_read_int_field(cpp_line, 4);
    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
    int cpp_j = 0;
    // read LIST body
    ptr_ZAFP_2d_idx0 = var_ZAFP_2d_double_NestedVector.prepare(0);
    ptr_FPS_2d_idx0 = var_FPS_2d_double_NestedVector.prepare(0);
    ptr_YI_2d_idx0 = var_YI_2d_double_NestedVector.prepare(0);
    ptr_DYI_2d_idx0 = var_DYI_2d_double_NestedVector.prepare(0);

    for (int var_m_0d_int_Scalar = 1;
       var_m_0d_int_Scalar <= var_NFP_1d_int_NestedVector[0]; var_m_0d_int_Scalar++) {
      bool aux_m_read = true;
      // read LIST body
      // assign expression to variable ZAFP
      ptr_ZAFP_2d_idx0->set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
      if ((aux_last_type_read_for_ZAFP != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ZAFP != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_ZAFP = NESTEDVECTOR_DOUBLE;
      // assign expression to variable FPS
      ptr_FPS_2d_idx0->set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
      if ((aux_last_type_read_for_FPS != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_FPS != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_FPS = NESTEDVECTOR_DOUBLE;
      // assign expression to variable YI
      ptr_YI_2d_idx0->set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
      if ((aux_last_type_read_for_YI != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_YI != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_YI = NESTEDVECTOR_DOUBLE;
      // assign expression to variable DYI
      ptr_DYI_2d_idx0->set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
      if ((aux_last_type_read_for_DYI != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DYI != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_DYI = NESTEDVECTOR_DOUBLE;
    }
  }

  for (int var_k_0d_int_Scalar = 1;
     var_k_0d_int_Scalar <= var_LE_0d_int_Scalar; var_k_0d_int_Scalar++) {
    bool aux_k_read = true;
    cpp_line = cpp_read_line(cont);
    // read LIST record
    if ((! var_E_1d_double_NestedVector.contains(var_k_0d_int_Scalar))) {
      // assign expression to variable E
      var_E_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 0));
      if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
    }
    // assign expression to variable I
    var_I_1d_int_NestedVector.set(var_k_0d_int_Scalar, cpp_read_int_field(cpp_line, 2));
    if ((aux_last_type_read_for_I != NESTEDVECTOR_INT && aux_last_type_read_for_I != UNKNOWN)) {
      raise_vartype_mismatch();
    }
    aux_last_type_read_for_I = NESTEDVECTOR_INT;
    if ((! var_NN_1d_int_NestedVector.contains(var_k_0d_int_Scalar))) {
      // assign expression to variable NN
      var_NN_1d_int_NestedVector.set(var_k_0d_int_Scalar, cpp_read_int_field(cpp_line, 4));
      if ((aux_last_type_read_for_NN != NESTEDVECTOR_INT && aux_last_type_read_for_NN != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_NN = NESTEDVECTOR_INT;
    }
    if ((! var_NFP_1d_int_NestedVector.contains(var_k_0d_int_Scalar))) {
      // assign expression to variable NFP
      var_NFP_1d_int_NestedVector.set(var_k_0d_int_Scalar, cpp_read_int_field(cpp_line, 5));
      if ((aux_last_type_read_for_NFP != NESTEDVECTOR_INT && aux_last_type_read_for_NFP != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_NFP = NESTEDVECTOR_INT;
    }
    {
      int cpp_npl = cpp_read_int_field(cpp_line, 4);
      cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
      int cpp_j = 0;
      // read LIST body
      ptr_ZAFP_2d_idx0 = var_ZAFP_2d_double_NestedVector.prepare(var_k_0d_int_Scalar);
      ptr_FPS_2d_idx0 = var_FPS_2d_double_NestedVector.prepare(var_k_0d_int_Scalar);
      ptr_YI_2d_idx0 = var_YI_2d_double_NestedVector.prepare(var_k_0d_int_Scalar);
      ptr_DYI_2d_idx0 = var_DYI_2d_double_NestedVector.prepare(var_k_0d_int_Scalar);

      for (int var_m_0d_int_Scalar = 1;
         var_m_0d_int_Scalar <= var_NFP_1d_int_NestedVector[var_k_0d_int_Scalar]; var_m_0d_int_Scalar++) {
        bool aux_m_read = true;
        // read LIST body
        if ((! (var_ZAFP_2d_double_NestedVector.contains(var_k_0d_int_Scalar) && var_ZAFP_2d_double_NestedVector[var_k_0d_int_Scalar].contains(var_m_0d_int_Scalar)))) {
          // assign expression to variable ZAFP
          ptr_ZAFP_2d_idx0->set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
          if ((aux_last_type_read_for_ZAFP != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ZAFP != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_ZAFP = NESTEDVECTOR_DOUBLE;
        }
        if ((! (var_FPS_2d_double_NestedVector.contains(var_k_0d_int_Scalar) && var_FPS_2d_double_NestedVector[var_k_0d_int_Scalar].contains(var_m_0d_int_Scalar)))) {
          // assign expression to variable FPS
          ptr_FPS_2d_idx0->set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
          if ((aux_last_type_read_for_FPS != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_FPS != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_FPS = NESTEDVECTOR_DOUBLE;
        }
        if ((! (var_YI_2d_double_NestedVector.contains(var_k_0d_int_Scalar) && var_YI_2d_double_NestedVector[var_k_0d_int_Scalar].contains(var_m_0d_int_Scalar)))) {
          // assign expression to variable YI
          ptr_YI_2d_idx0->set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
          if ((aux_last_type_read_for_YI != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_YI != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_YI = NESTEDVECTOR_DOUBLE;
        }
        if ((! (var_DYI_2d_double_NestedVector.contains(var_k_0d_int_Scalar) && var_DYI_2d_double_NestedVector[var_k_0d_int_Scalar].contains(var_m_0d_int_Scalar)))) {
          // assign expression to variable DYI
          ptr_DYI_2d_idx0->set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
          if ((aux_last_type_read_for_DYI != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DYI != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_DYI = NESTEDVECTOR_DOUBLE;
        }
      }
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LE == SCALAR_INT) && (aux_LE_read == true))) {
    cpp_current_dict["LE"] = var_LE_0d_int_Scalar;
  }
  if ((var_E_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_E_1d_double_NestedVector;
    cpp_current_dict["E"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["E"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_NN_1d_int_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_NN_1d_int_NestedVector;
    cpp_current_dict["NN"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["NN"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_NFP_1d_int_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_NFP_1d_int_NestedVector;
    cpp_current_dict["NFP"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["NFP"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_ZAFP_2d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_ZAFP_2d_double_NestedVector;
    cpp_current_dict["ZAFP"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["ZAFP"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
      cpp_curdict0[py::cast(cpp_i1)] = py::dict();
      py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
      for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
        cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
      }
    }
  }
  if ((var_FPS_2d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_FPS_2d_double_NestedVector;
    cpp_current_dict["FPS"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["FPS"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
      cpp_curdict0[py::cast(cpp_i1)] = py::dict();
      py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
      for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
        cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
      }
    }
  }
  if ((var_YI_2d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_YI_2d_double_NestedVector;
    cpp_current_dict["YI"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["YI"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
      cpp_curdict0[py::cast(cpp_i1)] = py::dict();
      py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
      for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
        cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
      }
    }
  }
  if ((var_DYI_2d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_DYI_2d_double_NestedVector;
    cpp_current_dict["DYI"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["DYI"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
      cpp_curdict0[py::cast(cpp_i1)] = py::dict();
      py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
      for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
        cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
      }
    }
  }
  if ((var_I_1d_int_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_I_1d_int_NestedVector;
    cpp_current_dict["I"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["I"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  return cpp_current_dict;
}

py::dict parse_mf8mt457_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_LIS_0d_int_Scalar;
  bool aux_LIS_read = false;
  vartype aux_last_type_read_for_LIS = UNKNOWN;
  int var_LISO_0d_int_Scalar;
  bool aux_LISO_read = false;
  vartype aux_last_type_read_for_LISO = UNKNOWN;
  int var_NST_0d_int_Scalar;
  bool aux_NST_read = false;
  vartype aux_last_type_read_for_NST = UNKNOWN;
  int var_NSP_0d_int_Scalar;
  bool aux_NSP_read = false;
  vartype aux_last_type_read_for_NSP = UNKNOWN;
  double var_Thalf_0d_double_Scalar;
  bool aux_Thalf_read = false;
  vartype aux_last_type_read_for_Thalf = UNKNOWN;
  double var_dThalf_0d_double_Scalar;
  bool aux_dThalf_read = false;
  vartype aux_last_type_read_for_dThalf = UNKNOWN;
  int cpp_int_val;
  bool aux_cpp_int_val_read = false;
  vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
  int var_NC_0d_int_Scalar;
  bool aux_NC_read = false;
  vartype aux_last_type_read_for_NC = UNKNOWN;
  NestedVector<double> var_Ebar_x_1d_double_NestedVector;
  vartype aux_last_type_read_for_Ebar_x = UNKNOWN;
  NestedVector<double> var_dEbar_x_1d_double_NestedVector;
  vartype aux_last_type_read_for_dEbar_x = UNKNOWN;
  double var_SPI_0d_double_Scalar;
  bool aux_SPI_read = false;
  vartype aux_last_type_read_for_SPI = UNKNOWN;
  double var_PAR_0d_double_Scalar;
  bool aux_PAR_read = false;
  vartype aux_last_type_read_for_PAR = UNKNOWN;
  int var_NDK_0d_int_Scalar;
  bool aux_NDK_read = false;
  vartype aux_last_type_read_for_NDK = UNKNOWN;
  NestedVector<double> var_RTYP_1d_double_NestedVector;
  vartype aux_last_type_read_for_RTYP = UNKNOWN;
  NestedVector<double> var_RFS_1d_double_NestedVector;
  vartype aux_last_type_read_for_RFS = UNKNOWN;
  NestedVector<double> var_Q_1d_double_NestedVector;
  vartype aux_last_type_read_for_Q = UNKNOWN;
  NestedVector<double> var_dQ_1d_double_NestedVector;
  vartype aux_last_type_read_for_dQ = UNKNOWN;
  NestedVector<double> var_BR_1d_double_NestedVector;
  vartype aux_last_type_read_for_BR = UNKNOWN;
  NestedVector<double> var_dBR_1d_double_NestedVector;
  vartype aux_last_type_read_for_dBR = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  // evaluate if-elif-else clause
  {
    bool cpp_found_match = false;
    if (! cpp_found_match) {
      // if statement evaluation with lookahead
      {
        std::streampos cpp_old_streampos = cont.tellg();
        {
          // variable declarations
          int& glob_var_MAT_0d_int_Scalar = var_MAT_0d_int_Scalar;
          int var_MAT_0d_int_Scalar = glob_var_MAT_0d_int_Scalar;
          bool& glob_aux_MAT_read = aux_MAT_read;
          bool aux_MAT_read = glob_aux_MAT_read;
          vartype aux_last_type_read_for_MAT = UNKNOWN;
          int& glob_var_MF_0d_int_Scalar = var_MF_0d_int_Scalar;
          int var_MF_0d_int_Scalar = glob_var_MF_0d_int_Scalar;
          bool& glob_aux_MF_read = aux_MF_read;
          bool aux_MF_read = glob_aux_MF_read;
          vartype aux_last_type_read_for_MF = UNKNOWN;
          int& glob_var_MT_0d_int_Scalar = var_MT_0d_int_Scalar;
          int var_MT_0d_int_Scalar = glob_var_MT_0d_int_Scalar;
          bool& glob_aux_MT_read = aux_MT_read;
          bool aux_MT_read = glob_aux_MT_read;
          vartype aux_last_type_read_for_MT = UNKNOWN;
          double& glob_var_ZA_0d_double_Scalar = var_ZA_0d_double_Scalar;
          double var_ZA_0d_double_Scalar = glob_var_ZA_0d_double_Scalar;
          bool& glob_aux_ZA_read = aux_ZA_read;
          bool aux_ZA_read = glob_aux_ZA_read;
          vartype aux_last_type_read_for_ZA = UNKNOWN;
          double& glob_var_AWR_0d_double_Scalar = var_AWR_0d_double_Scalar;
          double var_AWR_0d_double_Scalar = glob_var_AWR_0d_double_Scalar;
          bool& glob_aux_AWR_read = aux_AWR_read;
          bool aux_AWR_read = glob_aux_AWR_read;
          vartype aux_last_type_read_for_AWR = UNKNOWN;
          int& glob_var_LIS_0d_int_Scalar = var_LIS_0d_int_Scalar;
          int var_LIS_0d_int_Scalar = glob_var_LIS_0d_int_Scalar;
          bool& glob_aux_LIS_read = aux_LIS_read;
          bool aux_LIS_read = glob_aux_LIS_read;
          vartype aux_last_type_read_for_LIS = UNKNOWN;
          int& glob_var_LISO_0d_int_Scalar = var_LISO_0d_int_Scalar;
          int var_LISO_0d_int_Scalar = glob_var_LISO_0d_int_Scalar;
          bool& glob_aux_LISO_read = aux_LISO_read;
          bool aux_LISO_read = glob_aux_LISO_read;
          vartype aux_last_type_read_for_LISO = UNKNOWN;
          int& glob_var_NST_0d_int_Scalar = var_NST_0d_int_Scalar;
          int var_NST_0d_int_Scalar = glob_var_NST_0d_int_Scalar;
          bool& glob_aux_NST_read = aux_NST_read;
          bool aux_NST_read = glob_aux_NST_read;
          vartype aux_last_type_read_for_NST = UNKNOWN;
          int& glob_var_NSP_0d_int_Scalar = var_NSP_0d_int_Scalar;
          int var_NSP_0d_int_Scalar = glob_var_NSP_0d_int_Scalar;
          bool& glob_aux_NSP_read = aux_NSP_read;
          bool aux_NSP_read = glob_aux_NSP_read;
          vartype aux_last_type_read_for_NSP = UNKNOWN;
          cpp_line = cpp_read_line(cont);
          // read CONT record
          // assign expression to variable ZA
          var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
          aux_ZA_read = true;
          if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_ZA = SCALAR_DOUBLE;
          // assign expression to variable AWR
          var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
          aux_AWR_read = true;
          if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_AWR = SCALAR_DOUBLE;
          // assign expression to variable LIS
          var_LIS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
          aux_LIS_read = true;
          if ((aux_last_type_read_for_LIS != SCALAR_INT && aux_last_type_read_for_LIS != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_LIS = SCALAR_INT;
          // assign expression to variable LISO
          var_LISO_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
          aux_LISO_read = true;
          if ((aux_last_type_read_for_LISO != SCALAR_INT && aux_last_type_read_for_LISO != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_LISO = SCALAR_INT;
          // assign expression to variable NST
          var_NST_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
          aux_NST_read = true;
          if ((aux_last_type_read_for_NST != SCALAR_INT && aux_last_type_read_for_NST != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NST = SCALAR_INT;
          // assign expression to variable NSP
          var_NSP_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
          aux_NSP_read = true;
          if ((aux_last_type_read_for_NSP != SCALAR_INT && aux_last_type_read_for_NSP != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NSP = SCALAR_INT;
          if ((((((((aux_NST_read == true)) && ((var_NST_0d_int_Scalar)==(0)))))))) {
            cpp_found_match = true;
          }
          cont.seekg(cpp_old_streampos);
        }
        if (cpp_found_match) {
          cpp_line = cpp_read_line(cont);
          // read CONT record
          // assign expression to variable ZA
          var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
          aux_ZA_read = true;
          if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_ZA = SCALAR_DOUBLE;
          // assign expression to variable AWR
          var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
          aux_AWR_read = true;
          if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_AWR = SCALAR_DOUBLE;
          // assign expression to variable LIS
          var_LIS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
          aux_LIS_read = true;
          if ((aux_last_type_read_for_LIS != SCALAR_INT && aux_last_type_read_for_LIS != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_LIS = SCALAR_INT;
          // assign expression to variable LISO
          var_LISO_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
          aux_LISO_read = true;
          if ((aux_last_type_read_for_LISO != SCALAR_INT && aux_last_type_read_for_LISO != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_LISO = SCALAR_INT;
          // assign expression to variable NST
          var_NST_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
          aux_NST_read = true;
          if ((aux_last_type_read_for_NST != SCALAR_INT && aux_last_type_read_for_NST != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NST = SCALAR_INT;
          // assign expression to variable NSP
          var_NSP_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
          aux_NSP_read = true;
          if ((aux_last_type_read_for_NSP != SCALAR_INT && aux_last_type_read_for_NSP != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NSP = SCALAR_INT;
          cpp_line = cpp_read_line(cont);
          // read LIST record
          // assign expression to variable Thalf
          var_Thalf_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
          aux_Thalf_read = true;
          if ((aux_last_type_read_for_Thalf != SCALAR_DOUBLE && aux_last_type_read_for_Thalf != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_Thalf = SCALAR_DOUBLE;
          // assign expression to variable dThalf
          var_dThalf_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
          aux_dThalf_read = true;
          if ((aux_last_type_read_for_dThalf != SCALAR_DOUBLE && aux_last_type_read_for_dThalf != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_dThalf = SCALAR_DOUBLE;
          // assign expression to variable cpp_int_val
          cpp_int_val = cpp_read_int_field(cpp_line, 4);
          aux_cpp_int_val_read = true;
          if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_cpp_int_val = SCALAR_INT;
          // assign expression to variable NC
          var_NC_0d_int_Scalar = (cpp_int_val/2);
          aux_NC_read = true;
          if ((aux_last_type_read_for_NC != SCALAR_INT && aux_last_type_read_for_NC != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NC = SCALAR_INT;
          {
            int cpp_npl = cpp_read_int_field(cpp_line, 4);
            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
            int cpp_j = 0;
            // read LIST body

            for (int var_k_0d_int_Scalar = 1;
               var_k_0d_int_Scalar <= var_NC_0d_int_Scalar; var_k_0d_int_Scalar++) {
              bool aux_k_read = true;
              // read LIST body
              // assign expression to variable Ebar_x
              var_Ebar_x_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
              if ((aux_last_type_read_for_Ebar_x != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_Ebar_x != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_Ebar_x = NESTEDVECTOR_DOUBLE;
              // assign expression to variable dEbar_x
              var_dEbar_x_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
              if ((aux_last_type_read_for_dEbar_x != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_dEbar_x != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_dEbar_x = NESTEDVECTOR_DOUBLE;
            }
          }
          cpp_line = cpp_read_line(cont);
          // read LIST record
          // assign expression to variable SPI
          var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
          aux_SPI_read = true;
          if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_SPI = SCALAR_DOUBLE;
          // assign expression to variable PAR
          var_PAR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
          aux_PAR_read = true;
          if ((aux_last_type_read_for_PAR != SCALAR_DOUBLE && aux_last_type_read_for_PAR != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_PAR = SCALAR_DOUBLE;
          // assign expression to variable cpp_int_val
          cpp_int_val = cpp_read_int_field(cpp_line, 4);
          aux_cpp_int_val_read = true;
          if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_cpp_int_val = SCALAR_INT;
          // assign expression to variable NDK
          var_NDK_0d_int_Scalar = (cpp_int_val/6);
          aux_NDK_read = true;
          if ((aux_last_type_read_for_NDK != SCALAR_INT && aux_last_type_read_for_NDK != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NDK = SCALAR_INT;
          if ((! (aux_NDK_read == true))) {
            // assign expression to variable NDK
            var_NDK_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
            aux_NDK_read = true;
            if ((aux_last_type_read_for_NDK != SCALAR_INT && aux_last_type_read_for_NDK != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NDK = SCALAR_INT;
          }
          {
            int cpp_npl = cpp_read_int_field(cpp_line, 4);
            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
            int cpp_j = 0;
            // read LIST body

            for (int var_k_0d_int_Scalar = 1;
               var_k_0d_int_Scalar <= var_NDK_0d_int_Scalar; var_k_0d_int_Scalar++) {
              bool aux_k_read = true;
              // read LIST body
              // assign expression to variable RTYP
              var_RTYP_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
              if ((aux_last_type_read_for_RTYP != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_RTYP != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_RTYP = NESTEDVECTOR_DOUBLE;
              // assign expression to variable RFS
              var_RFS_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
              if ((aux_last_type_read_for_RFS != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_RFS != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_RFS = NESTEDVECTOR_DOUBLE;
              // assign expression to variable Q
              var_Q_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
              if ((aux_last_type_read_for_Q != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_Q != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_Q = NESTEDVECTOR_DOUBLE;
              // assign expression to variable dQ
              var_dQ_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
              if ((aux_last_type_read_for_dQ != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_dQ != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_dQ = NESTEDVECTOR_DOUBLE;
              // assign expression to variable BR
              var_BR_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
              if ((aux_last_type_read_for_BR != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_BR != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_BR = NESTEDVECTOR_DOUBLE;
              // assign expression to variable dBR
              var_dBR_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
              if ((aux_last_type_read_for_dBR != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_dBR != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_dBR = NESTEDVECTOR_DOUBLE;
            }
          }

          for (int var_k_0d_int_Scalar = 1;
             var_k_0d_int_Scalar <= var_NSP_0d_int_Scalar; var_k_0d_int_Scalar++) {
            bool aux_k_read = true;
            // open section spectrum

            {
                py::dict cpp_parent_dict = cpp_current_dict;
                if (! cpp_parent_dict.contains("spectrum")) {
                  cpp_parent_dict["spectrum"] = py::dict();
                }
                py::dict cpp_current_dict = cpp_parent_dict["spectrum"];

                if (! cpp_current_dict.contains(py::cast(var_k_0d_int_Scalar))) {
                  cpp_current_dict[py::cast(var_k_0d_int_Scalar)] = py::dict();
                }
                cpp_current_dict = cpp_current_dict[py::cast(var_k_0d_int_Scalar)];
              // variable declarations
              double var_STYP_0d_double_Scalar;
              bool aux_STYP_read = false;
              vartype aux_last_type_read_for_STYP = UNKNOWN;
              int var_LCON_0d_int_Scalar;
              bool aux_LCON_read = false;
              vartype aux_last_type_read_for_LCON = UNKNOWN;
              int var_LCOV_0d_int_Scalar;
              bool aux_LCOV_read = false;
              vartype aux_last_type_read_for_LCOV = UNKNOWN;
              int var_NER_0d_int_Scalar;
              bool aux_NER_read = false;
              vartype aux_last_type_read_for_NER = UNKNOWN;
              double var_FD_0d_double_Scalar;
              bool aux_FD_read = false;
              vartype aux_last_type_read_for_FD = UNKNOWN;
              double var_dFD_0d_double_Scalar;
              bool aux_dFD_read = false;
              vartype aux_last_type_read_for_dFD = UNKNOWN;
              double var_ERAV_0d_double_Scalar;
              bool aux_ERAV_read = false;
              vartype aux_last_type_read_for_ERAV = UNKNOWN;
              double var_dERAV_0d_double_Scalar;
              bool aux_dERAV_read = false;
              vartype aux_last_type_read_for_dERAV = UNKNOWN;
              double var_FC_0d_double_Scalar;
              bool aux_FC_read = false;
              vartype aux_last_type_read_for_FC = UNKNOWN;
              double var_dFC_0d_double_Scalar;
              bool aux_dFC_read = false;
              vartype aux_last_type_read_for_dFC = UNKNOWN;
              cpp_line = cpp_read_line(cont);
              // read LIST record
              // assign expression to variable STYP
              var_STYP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
              aux_STYP_read = true;
              if ((aux_last_type_read_for_STYP != SCALAR_DOUBLE && aux_last_type_read_for_STYP != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_STYP = SCALAR_DOUBLE;
              // assign expression to variable LCON
              var_LCON_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
              aux_LCON_read = true;
              if ((aux_last_type_read_for_LCON != SCALAR_INT && aux_last_type_read_for_LCON != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_LCON = SCALAR_INT;
              // assign expression to variable LCOV
              var_LCOV_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
              aux_LCOV_read = true;
              if ((aux_last_type_read_for_LCOV != SCALAR_INT && aux_last_type_read_for_LCOV != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_LCOV = SCALAR_INT;
              // assign expression to variable NER
              var_NER_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
              aux_NER_read = true;
              if ((aux_last_type_read_for_NER != SCALAR_INT && aux_last_type_read_for_NER != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NER = SCALAR_INT;
              {
                int cpp_npl = cpp_read_int_field(cpp_line, 4);
                cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                int cpp_j = 0;
                // read LIST body
                // assign expression to variable FD
                var_FD_0d_double_Scalar = cpp_floatvec[cpp_j++];
                aux_FD_read = true;
                if ((aux_last_type_read_for_FD != SCALAR_DOUBLE && aux_last_type_read_for_FD != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_FD = SCALAR_DOUBLE;
                // assign expression to variable dFD
                var_dFD_0d_double_Scalar = cpp_floatvec[cpp_j++];
                aux_dFD_read = true;
                if ((aux_last_type_read_for_dFD != SCALAR_DOUBLE && aux_last_type_read_for_dFD != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_dFD = SCALAR_DOUBLE;
                // assign expression to variable ERAV
                var_ERAV_0d_double_Scalar = cpp_floatvec[cpp_j++];
                aux_ERAV_read = true;
                if ((aux_last_type_read_for_ERAV != SCALAR_DOUBLE && aux_last_type_read_for_ERAV != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_ERAV = SCALAR_DOUBLE;
                // assign expression to variable dERAV
                var_dERAV_0d_double_Scalar = cpp_floatvec[cpp_j++];
                aux_dERAV_read = true;
                if ((aux_last_type_read_for_dERAV != SCALAR_DOUBLE && aux_last_type_read_for_dERAV != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_dERAV = SCALAR_DOUBLE;
                // assign expression to variable FC
                var_FC_0d_double_Scalar = cpp_floatvec[cpp_j++];
                aux_FC_read = true;
                if ((aux_last_type_read_for_FC != SCALAR_DOUBLE && aux_last_type_read_for_FC != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_FC = SCALAR_DOUBLE;
                // assign expression to variable dFC
                var_dFC_0d_double_Scalar = cpp_floatvec[cpp_j++];
                aux_dFC_read = true;
                if ((aux_last_type_read_for_dFC != SCALAR_DOUBLE && aux_last_type_read_for_dFC != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_dFC = SCALAR_DOUBLE;
              }
              // evaluate if-elif-else clause
              {
                bool cpp_found_match = false;
                if (! cpp_found_match) {
                  if ((((((((aux_LCON_read == true)) && ((var_LCON_0d_int_Scalar)!=(1)))))))) {
                    // if statement evaluation
                    cpp_found_match = true;
                    // open section discrete

                    {
                        py::dict cpp_parent_dict = cpp_current_dict;
                        if (! cpp_parent_dict.contains("discrete")) {
                          cpp_parent_dict["discrete"] = py::dict();
                        }
                        py::dict cpp_current_dict = cpp_parent_dict["discrete"];
                      // variable declarations

                      for (int var_i_0d_int_Scalar = 1;
                         var_i_0d_int_Scalar <= var_NER_0d_int_Scalar; var_i_0d_int_Scalar++) {
                        bool aux_i_read = true;
                        // open section energysec

                        {
                            py::dict cpp_parent_dict = cpp_current_dict;
                            if (! cpp_parent_dict.contains("energysec")) {
                              cpp_parent_dict["energysec"] = py::dict();
                            }
                            py::dict cpp_current_dict = cpp_parent_dict["energysec"];

                            if (! cpp_current_dict.contains(py::cast(var_i_0d_int_Scalar))) {
                              cpp_current_dict[py::cast(var_i_0d_int_Scalar)] = py::dict();
                            }
                            cpp_current_dict = cpp_current_dict[py::cast(var_i_0d_int_Scalar)];
                          // variable declarations
                          double var_ER_0d_double_Scalar;
                          bool aux_ER_read = false;
                          vartype aux_last_type_read_for_ER = UNKNOWN;
                          double var_dER_0d_double_Scalar;
                          bool aux_dER_read = false;
                          vartype aux_last_type_read_for_dER = UNKNOWN;
                          int var_NT_0d_int_Scalar;
                          bool aux_NT_read = false;
                          vartype aux_last_type_read_for_NT = UNKNOWN;
                          double var_RTYP_0d_double_Scalar;
                          bool aux_RTYP_read = false;
                          vartype aux_last_type_read_for_RTYP = UNKNOWN;
                          double var_TYPE_0d_double_Scalar;
                          bool aux_TYPE_read = false;
                          vartype aux_last_type_read_for_TYPE = UNKNOWN;
                          double var_RI_0d_double_Scalar;
                          bool aux_RI_read = false;
                          vartype aux_last_type_read_for_RI = UNKNOWN;
                          double var_dRI_0d_double_Scalar;
                          bool aux_dRI_read = false;
                          vartype aux_last_type_read_for_dRI = UNKNOWN;
                          double var_RIS_0d_double_Scalar;
                          bool aux_RIS_read = false;
                          vartype aux_last_type_read_for_RIS = UNKNOWN;
                          double var_dRIS_0d_double_Scalar;
                          bool aux_dRIS_read = false;
                          vartype aux_last_type_read_for_dRIS = UNKNOWN;
                          double var_RICC_0d_double_Scalar;
                          bool aux_RICC_read = false;
                          vartype aux_last_type_read_for_RICC = UNKNOWN;
                          double var_dRICC_0d_double_Scalar;
                          bool aux_dRICC_read = false;
                          vartype aux_last_type_read_for_dRICC = UNKNOWN;
                          double var_RICK_0d_double_Scalar;
                          bool aux_RICK_read = false;
                          vartype aux_last_type_read_for_RICK = UNKNOWN;
                          double var_dRICK_0d_double_Scalar;
                          bool aux_dRICK_read = false;
                          vartype aux_last_type_read_for_dRICK = UNKNOWN;
                          double var_RICL_0d_double_Scalar;
                          bool aux_RICL_read = false;
                          vartype aux_last_type_read_for_RICL = UNKNOWN;
                          double var_dRICL_0d_double_Scalar;
                          bool aux_dRICL_read = false;
                          vartype aux_last_type_read_for_dRICL = UNKNOWN;
                          // evaluate if-elif-else clause
                          {
                            bool cpp_found_match = false;
                            if (! cpp_found_match) {
                              // if statement evaluation with lookahead
                              {
                                std::streampos cpp_old_streampos = cont.tellg();
                                {
                                  // variable declarations
                                  double& glob_var_ER_0d_double_Scalar = var_ER_0d_double_Scalar;
                                  double var_ER_0d_double_Scalar = glob_var_ER_0d_double_Scalar;
                                  bool& glob_aux_ER_read = aux_ER_read;
                                  bool aux_ER_read = glob_aux_ER_read;
                                  vartype aux_last_type_read_for_ER = UNKNOWN;
                                  double& glob_var_dER_0d_double_Scalar = var_dER_0d_double_Scalar;
                                  double var_dER_0d_double_Scalar = glob_var_dER_0d_double_Scalar;
                                  bool& glob_aux_dER_read = aux_dER_read;
                                  bool aux_dER_read = glob_aux_dER_read;
                                  vartype aux_last_type_read_for_dER = UNKNOWN;
                                  int& glob_var_NT_0d_int_Scalar = var_NT_0d_int_Scalar;
                                  int var_NT_0d_int_Scalar = glob_var_NT_0d_int_Scalar;
                                  bool& glob_aux_NT_read = aux_NT_read;
                                  bool aux_NT_read = glob_aux_NT_read;
                                  vartype aux_last_type_read_for_NT = UNKNOWN;
                                  cpp_line = cpp_read_line(cont);
                                  // read LIST record
                                  // assign expression to variable ER
                                  var_ER_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                                  aux_ER_read = true;
                                  if ((aux_last_type_read_for_ER != SCALAR_DOUBLE && aux_last_type_read_for_ER != UNKNOWN)) {
                                    raise_vartype_mismatch();
                                  }
                                  aux_last_type_read_for_ER = SCALAR_DOUBLE;
                                  // assign expression to variable dER
                                  var_dER_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                                  aux_dER_read = true;
                                  if ((aux_last_type_read_for_dER != SCALAR_DOUBLE && aux_last_type_read_for_dER != UNKNOWN)) {
                                    raise_vartype_mismatch();
                                  }
                                  aux_last_type_read_for_dER = SCALAR_DOUBLE;
                                  // assign expression to variable NT
                                  var_NT_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                                  aux_NT_read = true;
                                  if ((aux_last_type_read_for_NT != SCALAR_INT && aux_last_type_read_for_NT != UNKNOWN)) {
                                    raise_vartype_mismatch();
                                  }
                                  aux_last_type_read_for_NT = SCALAR_INT;
                                  if ((((((((aux_NT_read == true)) && ((var_NT_0d_int_Scalar)==(6)))))))) {
                                    cpp_found_match = true;
                                  }
                                  cont.seekg(cpp_old_streampos);
                                }
                                if (cpp_found_match) {
                                  cpp_line = cpp_read_line(cont);
                                  // read LIST record
                                  // assign expression to variable ER
                                  var_ER_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                                  aux_ER_read = true;
                                  if ((aux_last_type_read_for_ER != SCALAR_DOUBLE && aux_last_type_read_for_ER != UNKNOWN)) {
                                    raise_vartype_mismatch();
                                  }
                                  aux_last_type_read_for_ER = SCALAR_DOUBLE;
                                  // assign expression to variable dER
                                  var_dER_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                                  aux_dER_read = true;
                                  if ((aux_last_type_read_for_dER != SCALAR_DOUBLE && aux_last_type_read_for_dER != UNKNOWN)) {
                                    raise_vartype_mismatch();
                                  }
                                  aux_last_type_read_for_dER = SCALAR_DOUBLE;
                                  // assign expression to variable NT
                                  var_NT_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                                  aux_NT_read = true;
                                  if ((aux_last_type_read_for_NT != SCALAR_INT && aux_last_type_read_for_NT != UNKNOWN)) {
                                    raise_vartype_mismatch();
                                  }
                                  aux_last_type_read_for_NT = SCALAR_INT;
                                  {
                                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                    int cpp_j = 0;
                                    // read LIST body
                                    // assign expression to variable RTYP
                                    var_RTYP_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                    aux_RTYP_read = true;
                                    if ((aux_last_type_read_for_RTYP != SCALAR_DOUBLE && aux_last_type_read_for_RTYP != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_RTYP = SCALAR_DOUBLE;
                                    // assign expression to variable TYPE
                                    var_TYPE_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                    aux_TYPE_read = true;
                                    if ((aux_last_type_read_for_TYPE != SCALAR_DOUBLE && aux_last_type_read_for_TYPE != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_TYPE = SCALAR_DOUBLE;
                                    // assign expression to variable RI
                                    var_RI_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                    aux_RI_read = true;
                                    if ((aux_last_type_read_for_RI != SCALAR_DOUBLE && aux_last_type_read_for_RI != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_RI = SCALAR_DOUBLE;
                                    // assign expression to variable dRI
                                    var_dRI_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                    aux_dRI_read = true;
                                    if ((aux_last_type_read_for_dRI != SCALAR_DOUBLE && aux_last_type_read_for_dRI != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_dRI = SCALAR_DOUBLE;
                                    // assign expression to variable RIS
                                    var_RIS_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                    aux_RIS_read = true;
                                    if ((aux_last_type_read_for_RIS != SCALAR_DOUBLE && aux_last_type_read_for_RIS != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_RIS = SCALAR_DOUBLE;
                                    // assign expression to variable dRIS
                                    var_dRIS_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                    aux_dRIS_read = true;
                                    if ((aux_last_type_read_for_dRIS != SCALAR_DOUBLE && aux_last_type_read_for_dRIS != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_dRIS = SCALAR_DOUBLE;
                                  }
                                }
                              }
                            }
                            if (! cpp_found_match) {
                              if (! cpp_found_match) {
                                // if statement evaluation with lookahead
                                {
                                  std::streampos cpp_old_streampos = cont.tellg();
                                  {
                                    // variable declarations
                                    double& glob_var_ER_0d_double_Scalar = var_ER_0d_double_Scalar;
                                    double var_ER_0d_double_Scalar = glob_var_ER_0d_double_Scalar;
                                    bool& glob_aux_ER_read = aux_ER_read;
                                    bool aux_ER_read = glob_aux_ER_read;
                                    vartype aux_last_type_read_for_ER = UNKNOWN;
                                    double& glob_var_dER_0d_double_Scalar = var_dER_0d_double_Scalar;
                                    double var_dER_0d_double_Scalar = glob_var_dER_0d_double_Scalar;
                                    bool& glob_aux_dER_read = aux_dER_read;
                                    bool aux_dER_read = glob_aux_dER_read;
                                    vartype aux_last_type_read_for_dER = UNKNOWN;
                                    int& glob_var_NT_0d_int_Scalar = var_NT_0d_int_Scalar;
                                    int var_NT_0d_int_Scalar = glob_var_NT_0d_int_Scalar;
                                    bool& glob_aux_NT_read = aux_NT_read;
                                    bool aux_NT_read = glob_aux_NT_read;
                                    vartype aux_last_type_read_for_NT = UNKNOWN;
                                    cpp_line = cpp_read_line(cont);
                                    // read LIST record
                                    // assign expression to variable ER
                                    var_ER_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                                    aux_ER_read = true;
                                    if ((aux_last_type_read_for_ER != SCALAR_DOUBLE && aux_last_type_read_for_ER != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_ER = SCALAR_DOUBLE;
                                    // assign expression to variable dER
                                    var_dER_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                                    aux_dER_read = true;
                                    if ((aux_last_type_read_for_dER != SCALAR_DOUBLE && aux_last_type_read_for_dER != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_dER = SCALAR_DOUBLE;
                                    // assign expression to variable NT
                                    var_NT_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                                    aux_NT_read = true;
                                    if ((aux_last_type_read_for_NT != SCALAR_INT && aux_last_type_read_for_NT != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_NT = SCALAR_INT;
                                    if ((((((((aux_NT_read == true)) && ((var_NT_0d_int_Scalar)==(8)))))))) {
                                      cpp_found_match = true;
                                    }
                                    cont.seekg(cpp_old_streampos);
                                  }
                                  if (cpp_found_match) {
                                    cpp_line = cpp_read_line(cont);
                                    // read LIST record
                                    // assign expression to variable ER
                                    var_ER_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                                    aux_ER_read = true;
                                    if ((aux_last_type_read_for_ER != SCALAR_DOUBLE && aux_last_type_read_for_ER != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_ER = SCALAR_DOUBLE;
                                    // assign expression to variable dER
                                    var_dER_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                                    aux_dER_read = true;
                                    if ((aux_last_type_read_for_dER != SCALAR_DOUBLE && aux_last_type_read_for_dER != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_dER = SCALAR_DOUBLE;
                                    // assign expression to variable NT
                                    var_NT_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                                    aux_NT_read = true;
                                    if ((aux_last_type_read_for_NT != SCALAR_INT && aux_last_type_read_for_NT != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_NT = SCALAR_INT;
                                    {
                                      int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                      cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                      int cpp_j = 0;
                                      // read LIST body
                                      // assign expression to variable RTYP
                                      var_RTYP_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                      aux_RTYP_read = true;
                                      if ((aux_last_type_read_for_RTYP != SCALAR_DOUBLE && aux_last_type_read_for_RTYP != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_RTYP = SCALAR_DOUBLE;
                                      // assign expression to variable TYPE
                                      var_TYPE_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                      aux_TYPE_read = true;
                                      if ((aux_last_type_read_for_TYPE != SCALAR_DOUBLE && aux_last_type_read_for_TYPE != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_TYPE = SCALAR_DOUBLE;
                                      // assign expression to variable RI
                                      var_RI_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                      aux_RI_read = true;
                                      if ((aux_last_type_read_for_RI != SCALAR_DOUBLE && aux_last_type_read_for_RI != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_RI = SCALAR_DOUBLE;
                                      // assign expression to variable dRI
                                      var_dRI_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                      aux_dRI_read = true;
                                      if ((aux_last_type_read_for_dRI != SCALAR_DOUBLE && aux_last_type_read_for_dRI != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_dRI = SCALAR_DOUBLE;
                                      // assign expression to variable RIS
                                      var_RIS_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                      aux_RIS_read = true;
                                      if ((aux_last_type_read_for_RIS != SCALAR_DOUBLE && aux_last_type_read_for_RIS != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_RIS = SCALAR_DOUBLE;
                                      // assign expression to variable dRIS
                                      var_dRIS_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                      aux_dRIS_read = true;
                                      if ((aux_last_type_read_for_dRIS != SCALAR_DOUBLE && aux_last_type_read_for_dRIS != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_dRIS = SCALAR_DOUBLE;
                                      // assign expression to variable RICC
                                      var_RICC_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                      aux_RICC_read = true;
                                      if ((aux_last_type_read_for_RICC != SCALAR_DOUBLE && aux_last_type_read_for_RICC != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_RICC = SCALAR_DOUBLE;
                                      // assign expression to variable dRICC
                                      var_dRICC_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                      aux_dRICC_read = true;
                                      if ((aux_last_type_read_for_dRICC != SCALAR_DOUBLE && aux_last_type_read_for_dRICC != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_dRICC = SCALAR_DOUBLE;
                                    }
                                  }
                                }
                              }
                            }
                            if (! cpp_found_match) {
                              if (! cpp_found_match) {
                                // if statement evaluation with lookahead
                                {
                                  std::streampos cpp_old_streampos = cont.tellg();
                                  {
                                    // variable declarations
                                    double& glob_var_ER_0d_double_Scalar = var_ER_0d_double_Scalar;
                                    double var_ER_0d_double_Scalar = glob_var_ER_0d_double_Scalar;
                                    bool& glob_aux_ER_read = aux_ER_read;
                                    bool aux_ER_read = glob_aux_ER_read;
                                    vartype aux_last_type_read_for_ER = UNKNOWN;
                                    double& glob_var_dER_0d_double_Scalar = var_dER_0d_double_Scalar;
                                    double var_dER_0d_double_Scalar = glob_var_dER_0d_double_Scalar;
                                    bool& glob_aux_dER_read = aux_dER_read;
                                    bool aux_dER_read = glob_aux_dER_read;
                                    vartype aux_last_type_read_for_dER = UNKNOWN;
                                    int& glob_var_NT_0d_int_Scalar = var_NT_0d_int_Scalar;
                                    int var_NT_0d_int_Scalar = glob_var_NT_0d_int_Scalar;
                                    bool& glob_aux_NT_read = aux_NT_read;
                                    bool aux_NT_read = glob_aux_NT_read;
                                    vartype aux_last_type_read_for_NT = UNKNOWN;
                                    cpp_line = cpp_read_line(cont);
                                    // read LIST record
                                    // assign expression to variable ER
                                    var_ER_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                                    aux_ER_read = true;
                                    if ((aux_last_type_read_for_ER != SCALAR_DOUBLE && aux_last_type_read_for_ER != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_ER = SCALAR_DOUBLE;
                                    // assign expression to variable dER
                                    var_dER_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                                    aux_dER_read = true;
                                    if ((aux_last_type_read_for_dER != SCALAR_DOUBLE && aux_last_type_read_for_dER != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_dER = SCALAR_DOUBLE;
                                    // assign expression to variable NT
                                    var_NT_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                                    aux_NT_read = true;
                                    if ((aux_last_type_read_for_NT != SCALAR_INT && aux_last_type_read_for_NT != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_NT = SCALAR_INT;
                                    if ((((((((aux_NT_read == true)) && ((var_NT_0d_int_Scalar)==(12)))))))) {
                                      cpp_found_match = true;
                                    }
                                    cont.seekg(cpp_old_streampos);
                                  }
                                  if (cpp_found_match) {
                                    cpp_line = cpp_read_line(cont);
                                    // read LIST record
                                    // assign expression to variable ER
                                    var_ER_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                                    aux_ER_read = true;
                                    if ((aux_last_type_read_for_ER != SCALAR_DOUBLE && aux_last_type_read_for_ER != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_ER = SCALAR_DOUBLE;
                                    // assign expression to variable dER
                                    var_dER_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                                    aux_dER_read = true;
                                    if ((aux_last_type_read_for_dER != SCALAR_DOUBLE && aux_last_type_read_for_dER != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_dER = SCALAR_DOUBLE;
                                    // assign expression to variable NT
                                    var_NT_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                                    aux_NT_read = true;
                                    if ((aux_last_type_read_for_NT != SCALAR_INT && aux_last_type_read_for_NT != UNKNOWN)) {
                                      raise_vartype_mismatch();
                                    }
                                    aux_last_type_read_for_NT = SCALAR_INT;
                                    {
                                      int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                      cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                      int cpp_j = 0;
                                      // read LIST body
                                      // assign expression to variable RTYP
                                      var_RTYP_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                      aux_RTYP_read = true;
                                      if ((aux_last_type_read_for_RTYP != SCALAR_DOUBLE && aux_last_type_read_for_RTYP != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_RTYP = SCALAR_DOUBLE;
                                      // assign expression to variable TYPE
                                      var_TYPE_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                      aux_TYPE_read = true;
                                      if ((aux_last_type_read_for_TYPE != SCALAR_DOUBLE && aux_last_type_read_for_TYPE != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_TYPE = SCALAR_DOUBLE;
                                      // assign expression to variable RI
                                      var_RI_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                      aux_RI_read = true;
                                      if ((aux_last_type_read_for_RI != SCALAR_DOUBLE && aux_last_type_read_for_RI != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_RI = SCALAR_DOUBLE;
                                      // assign expression to variable dRI
                                      var_dRI_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                      aux_dRI_read = true;
                                      if ((aux_last_type_read_for_dRI != SCALAR_DOUBLE && aux_last_type_read_for_dRI != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_dRI = SCALAR_DOUBLE;
                                      // assign expression to variable RIS
                                      var_RIS_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                      aux_RIS_read = true;
                                      if ((aux_last_type_read_for_RIS != SCALAR_DOUBLE && aux_last_type_read_for_RIS != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_RIS = SCALAR_DOUBLE;
                                      // assign expression to variable dRIS
                                      var_dRIS_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                      aux_dRIS_read = true;
                                      if ((aux_last_type_read_for_dRIS != SCALAR_DOUBLE && aux_last_type_read_for_dRIS != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_dRIS = SCALAR_DOUBLE;
                                      // assign expression to variable RICC
                                      var_RICC_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                      aux_RICC_read = true;
                                      if ((aux_last_type_read_for_RICC != SCALAR_DOUBLE && aux_last_type_read_for_RICC != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_RICC = SCALAR_DOUBLE;
                                      // assign expression to variable dRICC
                                      var_dRICC_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                      aux_dRICC_read = true;
                                      if ((aux_last_type_read_for_dRICC != SCALAR_DOUBLE && aux_last_type_read_for_dRICC != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_dRICC = SCALAR_DOUBLE;
                                      // assign expression to variable RICK
                                      var_RICK_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                      aux_RICK_read = true;
                                      if ((aux_last_type_read_for_RICK != SCALAR_DOUBLE && aux_last_type_read_for_RICK != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_RICK = SCALAR_DOUBLE;
                                      // assign expression to variable dRICK
                                      var_dRICK_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                      aux_dRICK_read = true;
                                      if ((aux_last_type_read_for_dRICK != SCALAR_DOUBLE && aux_last_type_read_for_dRICK != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_dRICK = SCALAR_DOUBLE;
                                      // assign expression to variable RICL
                                      var_RICL_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                      aux_RICL_read = true;
                                      if ((aux_last_type_read_for_RICL != SCALAR_DOUBLE && aux_last_type_read_for_RICL != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_RICL = SCALAR_DOUBLE;
                                      // assign expression to variable dRICL
                                      var_dRICL_0d_double_Scalar = cpp_floatvec[cpp_j++];
                                      aux_dRICL_read = true;
                                      if ((aux_last_type_read_for_dRICL != SCALAR_DOUBLE && aux_last_type_read_for_dRICL != UNKNOWN)) {
                                        raise_vartype_mismatch();
                                      }
                                      aux_last_type_read_for_dRICL = SCALAR_DOUBLE;
                                    }
                                  }
                                }
                              }
                            }
                          }
                          // store data in Python dictionary
                          if (((aux_last_type_read_for_ER == SCALAR_DOUBLE) && (aux_ER_read == true))) {
                            cpp_current_dict["ER"] = var_ER_0d_double_Scalar;
                          }
                          if (((aux_last_type_read_for_dER == SCALAR_DOUBLE) && (aux_dER_read == true))) {
                            cpp_current_dict["dER"] = var_dER_0d_double_Scalar;
                          }
                          if (((aux_last_type_read_for_NT == SCALAR_INT) && (aux_NT_read == true))) {
                            cpp_current_dict["NT"] = var_NT_0d_int_Scalar;
                          }
                          if (((aux_last_type_read_for_RTYP == SCALAR_DOUBLE) && (aux_RTYP_read == true))) {
                            cpp_current_dict["RTYP"] = var_RTYP_0d_double_Scalar;
                          }
                          if (((aux_last_type_read_for_TYPE == SCALAR_DOUBLE) && (aux_TYPE_read == true))) {
                            cpp_current_dict["TYPE"] = var_TYPE_0d_double_Scalar;
                          }
                          if (((aux_last_type_read_for_RI == SCALAR_DOUBLE) && (aux_RI_read == true))) {
                            cpp_current_dict["RI"] = var_RI_0d_double_Scalar;
                          }
                          if (((aux_last_type_read_for_dRI == SCALAR_DOUBLE) && (aux_dRI_read == true))) {
                            cpp_current_dict["dRI"] = var_dRI_0d_double_Scalar;
                          }
                          if (((aux_last_type_read_for_RIS == SCALAR_DOUBLE) && (aux_RIS_read == true))) {
                            cpp_current_dict["RIS"] = var_RIS_0d_double_Scalar;
                          }
                          if (((aux_last_type_read_for_dRIS == SCALAR_DOUBLE) && (aux_dRIS_read == true))) {
                            cpp_current_dict["dRIS"] = var_dRIS_0d_double_Scalar;
                          }
                          if (((aux_last_type_read_for_RICC == SCALAR_DOUBLE) && (aux_RICC_read == true))) {
                            cpp_current_dict["RICC"] = var_RICC_0d_double_Scalar;
                          }
                          if (((aux_last_type_read_for_dRICC == SCALAR_DOUBLE) && (aux_dRICC_read == true))) {
                            cpp_current_dict["dRICC"] = var_dRICC_0d_double_Scalar;
                          }
                          if (((aux_last_type_read_for_RICK == SCALAR_DOUBLE) && (aux_RICK_read == true))) {
                            cpp_current_dict["RICK"] = var_RICK_0d_double_Scalar;
                          }
                          if (((aux_last_type_read_for_dRICK == SCALAR_DOUBLE) && (aux_dRICK_read == true))) {
                            cpp_current_dict["dRICK"] = var_dRICK_0d_double_Scalar;
                          }
                          if (((aux_last_type_read_for_RICL == SCALAR_DOUBLE) && (aux_RICL_read == true))) {
                            cpp_current_dict["RICL"] = var_RICL_0d_double_Scalar;
                          }
                          if (((aux_last_type_read_for_dRICL == SCALAR_DOUBLE) && (aux_dRICL_read == true))) {
                            cpp_current_dict["dRICL"] = var_dRICL_0d_double_Scalar;
                          }
                          cpp_current_dict = cpp_parent_dict;
                        }
                      }
                      // store data in Python dictionary
                      cpp_current_dict = cpp_parent_dict;
                    }
                  }
                }
              }
              // evaluate if-elif-else clause
              {
                bool cpp_found_match = false;
                if (! cpp_found_match) {
                  if ((((((((aux_LCON_read == true)) && ((var_LCON_0d_int_Scalar)!=(0)))))))) {
                    // if statement evaluation
                    cpp_found_match = true;
                    // open section continuous

                    {
                        py::dict cpp_parent_dict = cpp_current_dict;
                        if (! cpp_parent_dict.contains("continuous")) {
                          cpp_parent_dict["continuous"] = py::dict();
                        }
                        py::dict cpp_current_dict = cpp_parent_dict["continuous"];
                      // variable declarations
                      double var_RTYP_0d_double_Scalar;
                      bool aux_RTYP_read = false;
                      vartype aux_last_type_read_for_RTYP = UNKNOWN;
                      std::vector<double> var_Eint_0d_floatvec_Scalar;
                      bool aux_Eint_read = false;
                      vartype aux_last_type_read_for_Eint = UNKNOWN;
                      std::vector<double> var_RP_0d_floatvec_Scalar;
                      bool aux_RP_read = false;
                      vartype aux_last_type_read_for_RP = UNKNOWN;
                      std::vector<int> var_INT_0d_intvec_Scalar;
                      bool aux_INT_read = false;
                      vartype aux_last_type_read_for_INT = UNKNOWN;
                      std::vector<int> var_NBT_0d_intvec_Scalar;
                      bool aux_NBT_read = false;
                      vartype aux_last_type_read_for_NBT = UNKNOWN;
                      // read TAB1 record
                      cpp_line = cpp_read_line(cont);
                      // assign expression to variable RTYP
                      var_RTYP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                      aux_RTYP_read = true;
                      if ((aux_last_type_read_for_RTYP != SCALAR_DOUBLE && aux_last_type_read_for_RTYP != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_RTYP = SCALAR_DOUBLE;
                      {
                        Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                        // assign expression to variable Eint
                        var_Eint_0d_floatvec_Scalar = tab_body.X;
                        aux_Eint_read = true;
                        if ((aux_last_type_read_for_Eint != SCALAR_FLOATVEC && aux_last_type_read_for_Eint != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_Eint = SCALAR_FLOATVEC;
                        // assign expression to variable RP
                        var_RP_0d_floatvec_Scalar = tab_body.Y;
                        aux_RP_read = true;
                        if ((aux_last_type_read_for_RP != SCALAR_FLOATVEC && aux_last_type_read_for_RP != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_RP = SCALAR_FLOATVEC;
                        // assign expression to variable INT
                        var_INT_0d_intvec_Scalar = tab_body.INT;
                        aux_INT_read = true;
                        if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_INT = SCALAR_INTVEC;
                        // assign expression to variable NBT
                        var_NBT_0d_intvec_Scalar = tab_body.NBT;
                        aux_NBT_read = true;
                        if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NBT = SCALAR_INTVEC;
                      }
                      // store data in Python dictionary
                      if (((aux_last_type_read_for_RTYP == SCALAR_DOUBLE) && (aux_RTYP_read == true))) {
                        cpp_current_dict["RTYP"] = var_RTYP_0d_double_Scalar;
                      }
                      if (((aux_last_type_read_for_Eint == SCALAR_FLOATVEC) && (aux_Eint_read == true))) {
                        cpp_current_dict["Eint"] = var_Eint_0d_floatvec_Scalar;
                      }
                      if (((aux_last_type_read_for_RP == SCALAR_FLOATVEC) && (aux_RP_read == true))) {
                        cpp_current_dict["RP"] = var_RP_0d_floatvec_Scalar;
                      }
                      if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
                        cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
                      }
                      if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
                        cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
                      }
                      cpp_current_dict = cpp_parent_dict;
                    }
                  }
                }
              }
              // evaluate if-elif-else clause
              {
                bool cpp_found_match = false;
                if (! cpp_found_match) {
                  if ((((((((((aux_LCOV_read == true)) && ((var_LCOV_0d_int_Scalar)!=(0)))))&&((((aux_LCOV_read == true)) && ((var_LCOV_0d_int_Scalar)!=(2)))))&&((((aux_LCON_read == true)) && ((var_LCON_0d_int_Scalar)!=(0)))))))) {
                    // if statement evaluation
                    cpp_found_match = true;
                    // open section continuous

                    {
                        py::dict cpp_parent_dict = cpp_current_dict;
                        if (! cpp_parent_dict.contains("continuous")) {
                          cpp_parent_dict["continuous"] = py::dict();
                        }
                        py::dict cpp_current_dict = cpp_parent_dict["continuous"];
                      // variable declarations
                      int cpp_int_val;
                      bool aux_cpp_int_val_read = false;
                      vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                      int var_NPP_0d_int_Scalar;
                      bool aux_NPP_read = false;
                      vartype aux_last_type_read_for_NPP = UNKNOWN;
                      NestedVector<double> var_E_1d_double_NestedVector;
                      vartype aux_last_type_read_for_E = UNKNOWN;
                      NestedVector<double> var_F_1d_double_NestedVector;
                      vartype aux_last_type_read_for_F = UNKNOWN;
                      cpp_line = cpp_read_line(cont);
                      // read LIST record
                      // assign expression to variable cpp_int_val
                      cpp_int_val = cpp_read_int_field(cpp_line, 4);
                      aux_cpp_int_val_read = true;
                      if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                      // assign expression to variable NPP
                      var_NPP_0d_int_Scalar = (cpp_int_val/2);
                      aux_NPP_read = true;
                      if ((aux_last_type_read_for_NPP != SCALAR_INT && aux_last_type_read_for_NPP != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_NPP = SCALAR_INT;
                      if ((! (aux_NPP_read == true))) {
                        // assign expression to variable NPP
                        var_NPP_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                        aux_NPP_read = true;
                        if ((aux_last_type_read_for_NPP != SCALAR_INT && aux_last_type_read_for_NPP != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NPP = SCALAR_INT;
                      }
                      {
                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                        int cpp_j = 0;
                        // read LIST body

                        for (int var_m_0d_int_Scalar = 1;
                           var_m_0d_int_Scalar <= var_NPP_0d_int_Scalar; var_m_0d_int_Scalar++) {
                          bool aux_m_read = true;
                          // read LIST body
                          // assign expression to variable E
                          var_E_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable F
                          var_F_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_F != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_F != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_F = NESTEDVECTOR_DOUBLE;
                        }
                      }
                      // store data in Python dictionary
                      if (((aux_last_type_read_for_NPP == SCALAR_INT) && (aux_NPP_read == true))) {
                        cpp_current_dict["NPP"] = var_NPP_0d_int_Scalar;
                      }
                      if ((var_E_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_E_1d_double_NestedVector;
                        cpp_current_dict["E"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["E"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      if ((var_F_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_F_1d_double_NestedVector;
                        cpp_current_dict["F"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["F"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      cpp_current_dict = cpp_parent_dict;
                    }
                  }
                }
              }
              // evaluate if-elif-else clause
              {
                bool cpp_found_match = false;
                if (! cpp_found_match) {
                  if (((((((((aux_LCOV_read == true)) && ((var_LCOV_0d_int_Scalar)!=(0)))))&&((((aux_LCOV_read == true)) && ((var_LCOV_0d_int_Scalar)!=(1)))))))) {
                    // if statement evaluation
                    cpp_found_match = true;
                    // open section discrete

                    {
                        py::dict cpp_parent_dict = cpp_current_dict;
                        if (! cpp_parent_dict.contains("discrete")) {
                          cpp_parent_dict["discrete"] = py::dict();
                        }
                        py::dict cpp_current_dict = cpp_parent_dict["discrete"];
                      // variable declarations
                      // open section cov

                      {
                          py::dict cpp_parent_dict = cpp_current_dict;
                          if (! cpp_parent_dict.contains("cov")) {
                            cpp_parent_dict["cov"] = py::dict();
                          }
                          py::dict cpp_current_dict = cpp_parent_dict["cov"];
                        // variable declarations
                        int var_LS_0d_int_Scalar;
                        bool aux_LS_read = false;
                        vartype aux_last_type_read_for_LS = UNKNOWN;
                        int var_NE_0d_int_Scalar;
                        bool aux_NE_read = false;
                        vartype aux_last_type_read_for_NE = UNKNOWN;
                        int var_NERP_0d_int_Scalar;
                        bool aux_NERP_read = false;
                        vartype aux_last_type_read_for_NERP = UNKNOWN;
                        NestedVector<double> var_E_1d_double_NestedVector;
                        vartype aux_last_type_read_for_E = UNKNOWN;
                        Matrix2d<double> var_F_2d_double_Matrix2d;
                        vartype aux_last_type_read_for_F = UNKNOWN;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable LS
                        var_LS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                        aux_LS_read = true;
                        if ((aux_last_type_read_for_LS != SCALAR_INT && aux_last_type_read_for_LS != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LS = SCALAR_INT;
                        // assign expression to variable NE
                        var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                        aux_NE_read = true;
                        if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NE = SCALAR_INT;
                        // assign expression to variable NERP
                        var_NERP_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                        aux_NERP_read = true;
                        if ((aux_last_type_read_for_NERP != SCALAR_INT && aux_last_type_read_for_NERP != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NERP = SCALAR_INT;
                        {
                          int cpp_npl = cpp_read_int_field(cpp_line, 4);
                          cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                          int cpp_j = 0;
                          // read LIST body

                          for (int var_m_0d_int_Scalar = 1;
                             var_m_0d_int_Scalar <= var_NERP_0d_int_Scalar; var_m_0d_int_Scalar++) {
                            bool aux_m_read = true;
                            // read LIST body
                            // assign expression to variable E
                            var_E_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
                          }
                          var_F_2d_double_Matrix2d.init(1, (var_NERP_0d_int_Scalar-2), 1, (var_NERP_0d_int_Scalar-2), true, false);

                          for (int var_m_0d_int_Scalar = 1;
                             var_m_0d_int_Scalar <= (var_NERP_0d_int_Scalar-2); var_m_0d_int_Scalar++) {
                            bool aux_m_read = true;
                            // read LIST body

                            for (int var_n_0d_int_Scalar = var_m_0d_int_Scalar;
                               var_n_0d_int_Scalar <= (var_NERP_0d_int_Scalar-2); var_n_0d_int_Scalar++) {
                              bool aux_n_read = true;
                              // read LIST body
                              // assign expression to variable F
                              var_F_2d_double_Matrix2d(var_m_0d_int_Scalar, var_n_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                              if ((aux_last_type_read_for_F != MATRIX2D_DOUBLE && aux_last_type_read_for_F != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_F = MATRIX2D_DOUBLE;
                            }
                          }
                        }
                        // store data in Python dictionary
                        if (((aux_last_type_read_for_LS == SCALAR_INT) && (aux_LS_read == true))) {
                          cpp_current_dict["LS"] = var_LS_0d_int_Scalar;
                        }
                        if (((aux_last_type_read_for_NE == SCALAR_INT) && (aux_NE_read == true))) {
                          cpp_current_dict["NE"] = var_NE_0d_int_Scalar;
                        }
                        if (((aux_last_type_read_for_NERP == SCALAR_INT) && (aux_NERP_read == true))) {
                          cpp_current_dict["NERP"] = var_NERP_0d_int_Scalar;
                        }
                        if ((var_E_1d_double_NestedVector.get_last_index() != -1)) {
                          auto& cpp_curvar0 = var_E_1d_double_NestedVector;
                          cpp_current_dict["E"] = py::dict();
                          py::dict cpp_curdict0 = cpp_current_dict["E"];
                          for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                          }
                        }
                        if (var_F_2d_double_Matrix2d.did_read()) {
                            cpp_current_dict["F"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["F"];
                            for (int cpp_i1 = var_F_2d_double_Matrix2d.get_row_start_index(); cpp_i1 <= var_F_2d_double_Matrix2d.get_row_last_index(); cpp_i1++) {
                              cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                              py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                              for (int cpp_i2 = var_F_2d_double_Matrix2d.get_col_start_index(cpp_i1); cpp_i2 <= var_F_2d_double_Matrix2d.get_col_last_index(cpp_i1); cpp_i2++) {
                                cpp_curdict1[py::cast(cpp_i2)] = var_F_2d_double_Matrix2d(cpp_i1, cpp_i2);
                              }
                            }
                        }
                        cpp_current_dict = cpp_parent_dict;
                      }
                      // store data in Python dictionary
                      cpp_current_dict = cpp_parent_dict;
                    }
                  }
                }
              }
              // store data in Python dictionary
              if (((aux_last_type_read_for_STYP == SCALAR_DOUBLE) && (aux_STYP_read == true))) {
                cpp_current_dict["STYP"] = var_STYP_0d_double_Scalar;
              }
              if (((aux_last_type_read_for_LCON == SCALAR_INT) && (aux_LCON_read == true))) {
                cpp_current_dict["LCON"] = var_LCON_0d_int_Scalar;
              }
              if (((aux_last_type_read_for_LCOV == SCALAR_INT) && (aux_LCOV_read == true))) {
                cpp_current_dict["LCOV"] = var_LCOV_0d_int_Scalar;
              }
              if (((aux_last_type_read_for_NER == SCALAR_INT) && (aux_NER_read == true))) {
                cpp_current_dict["NER"] = var_NER_0d_int_Scalar;
              }
              if (((aux_last_type_read_for_FD == SCALAR_DOUBLE) && (aux_FD_read == true))) {
                cpp_current_dict["FD"] = var_FD_0d_double_Scalar;
              }
              if (((aux_last_type_read_for_dFD == SCALAR_DOUBLE) && (aux_dFD_read == true))) {
                cpp_current_dict["dFD"] = var_dFD_0d_double_Scalar;
              }
              if (((aux_last_type_read_for_ERAV == SCALAR_DOUBLE) && (aux_ERAV_read == true))) {
                cpp_current_dict["ERAV"] = var_ERAV_0d_double_Scalar;
              }
              if (((aux_last_type_read_for_dERAV == SCALAR_DOUBLE) && (aux_dERAV_read == true))) {
                cpp_current_dict["dERAV"] = var_dERAV_0d_double_Scalar;
              }
              if (((aux_last_type_read_for_FC == SCALAR_DOUBLE) && (aux_FC_read == true))) {
                cpp_current_dict["FC"] = var_FC_0d_double_Scalar;
              }
              if (((aux_last_type_read_for_dFC == SCALAR_DOUBLE) && (aux_dFC_read == true))) {
                cpp_current_dict["dFC"] = var_dFC_0d_double_Scalar;
              }
              cpp_current_dict = cpp_parent_dict;
            }
          }
        }
      }
    }
    if (! cpp_found_match) {
      if (! cpp_found_match) {
        // if statement evaluation with lookahead
        {
          std::streampos cpp_old_streampos = cont.tellg();
          {
            // variable declarations
            int& glob_var_MAT_0d_int_Scalar = var_MAT_0d_int_Scalar;
            int var_MAT_0d_int_Scalar = glob_var_MAT_0d_int_Scalar;
            bool& glob_aux_MAT_read = aux_MAT_read;
            bool aux_MAT_read = glob_aux_MAT_read;
            vartype aux_last_type_read_for_MAT = UNKNOWN;
            int& glob_var_MF_0d_int_Scalar = var_MF_0d_int_Scalar;
            int var_MF_0d_int_Scalar = glob_var_MF_0d_int_Scalar;
            bool& glob_aux_MF_read = aux_MF_read;
            bool aux_MF_read = glob_aux_MF_read;
            vartype aux_last_type_read_for_MF = UNKNOWN;
            int& glob_var_MT_0d_int_Scalar = var_MT_0d_int_Scalar;
            int var_MT_0d_int_Scalar = glob_var_MT_0d_int_Scalar;
            bool& glob_aux_MT_read = aux_MT_read;
            bool aux_MT_read = glob_aux_MT_read;
            vartype aux_last_type_read_for_MT = UNKNOWN;
            double& glob_var_ZA_0d_double_Scalar = var_ZA_0d_double_Scalar;
            double var_ZA_0d_double_Scalar = glob_var_ZA_0d_double_Scalar;
            bool& glob_aux_ZA_read = aux_ZA_read;
            bool aux_ZA_read = glob_aux_ZA_read;
            vartype aux_last_type_read_for_ZA = UNKNOWN;
            double& glob_var_AWR_0d_double_Scalar = var_AWR_0d_double_Scalar;
            double var_AWR_0d_double_Scalar = glob_var_AWR_0d_double_Scalar;
            bool& glob_aux_AWR_read = aux_AWR_read;
            bool aux_AWR_read = glob_aux_AWR_read;
            vartype aux_last_type_read_for_AWR = UNKNOWN;
            int& glob_var_LIS_0d_int_Scalar = var_LIS_0d_int_Scalar;
            int var_LIS_0d_int_Scalar = glob_var_LIS_0d_int_Scalar;
            bool& glob_aux_LIS_read = aux_LIS_read;
            bool aux_LIS_read = glob_aux_LIS_read;
            vartype aux_last_type_read_for_LIS = UNKNOWN;
            int& glob_var_LISO_0d_int_Scalar = var_LISO_0d_int_Scalar;
            int var_LISO_0d_int_Scalar = glob_var_LISO_0d_int_Scalar;
            bool& glob_aux_LISO_read = aux_LISO_read;
            bool aux_LISO_read = glob_aux_LISO_read;
            vartype aux_last_type_read_for_LISO = UNKNOWN;
            int& glob_var_NST_0d_int_Scalar = var_NST_0d_int_Scalar;
            int var_NST_0d_int_Scalar = glob_var_NST_0d_int_Scalar;
            bool& glob_aux_NST_read = aux_NST_read;
            bool aux_NST_read = glob_aux_NST_read;
            vartype aux_last_type_read_for_NST = UNKNOWN;
            cpp_line = cpp_read_line(cont);
            // read CONT record
            // assign expression to variable ZA
            var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_ZA_read = true;
            if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_ZA = SCALAR_DOUBLE;
            // assign expression to variable AWR
            var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_AWR_read = true;
            if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_AWR = SCALAR_DOUBLE;
            // assign expression to variable LIS
            var_LIS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
            aux_LIS_read = true;
            if ((aux_last_type_read_for_LIS != SCALAR_INT && aux_last_type_read_for_LIS != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LIS = SCALAR_INT;
            // assign expression to variable LISO
            var_LISO_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
            aux_LISO_read = true;
            if ((aux_last_type_read_for_LISO != SCALAR_INT && aux_last_type_read_for_LISO != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LISO = SCALAR_INT;
            // assign expression to variable NST
            var_NST_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
            aux_NST_read = true;
            if ((aux_last_type_read_for_NST != SCALAR_INT && aux_last_type_read_for_NST != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NST = SCALAR_INT;
            if ((((((((aux_NST_read == true)) && ((var_NST_0d_int_Scalar)==(1)))))))) {
              cpp_found_match = true;
            }
            cont.seekg(cpp_old_streampos);
          }
          if (cpp_found_match) {
            cpp_line = cpp_read_line(cont);
            // read CONT record
            // assign expression to variable ZA
            var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_ZA_read = true;
            if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_ZA = SCALAR_DOUBLE;
            // assign expression to variable AWR
            var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_AWR_read = true;
            if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_AWR = SCALAR_DOUBLE;
            // assign expression to variable LIS
            var_LIS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
            aux_LIS_read = true;
            if ((aux_last_type_read_for_LIS != SCALAR_INT && aux_last_type_read_for_LIS != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LIS = SCALAR_INT;
            // assign expression to variable LISO
            var_LISO_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
            aux_LISO_read = true;
            if ((aux_last_type_read_for_LISO != SCALAR_INT && aux_last_type_read_for_LISO != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LISO = SCALAR_INT;
            // assign expression to variable NST
            var_NST_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
            aux_NST_read = true;
            if ((aux_last_type_read_for_NST != SCALAR_INT && aux_last_type_read_for_NST != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NST = SCALAR_INT;
            cpp_line = cpp_read_line(cont);
            // read LIST record
            {
              int cpp_npl = cpp_read_int_field(cpp_line, 4);
              cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
              int cpp_j = 0;
              // read LIST body
              cpp_j++;
              cpp_j++;
              cpp_j++;
              cpp_j++;
              cpp_j++;
              cpp_j++;
            }
            cpp_line = cpp_read_line(cont);
            // read LIST record
            // assign expression to variable SPI
            var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_SPI_read = true;
            if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_SPI = SCALAR_DOUBLE;
            // assign expression to variable PAR
            var_PAR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_PAR_read = true;
            if ((aux_last_type_read_for_PAR != SCALAR_DOUBLE && aux_last_type_read_for_PAR != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_PAR = SCALAR_DOUBLE;
            {
              int cpp_npl = cpp_read_int_field(cpp_line, 4);
              cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
              int cpp_j = 0;
              // read LIST body
              cpp_j++;
              cpp_j++;
              cpp_j++;
              cpp_j++;
              cpp_j++;
              cpp_j++;
            }
          }
        }
      }
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LIS == SCALAR_INT) && (aux_LIS_read == true))) {
    cpp_current_dict["LIS"] = var_LIS_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_LISO == SCALAR_INT) && (aux_LISO_read == true))) {
    cpp_current_dict["LISO"] = var_LISO_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NST == SCALAR_INT) && (aux_NST_read == true))) {
    cpp_current_dict["NST"] = var_NST_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NSP == SCALAR_INT) && (aux_NSP_read == true))) {
    cpp_current_dict["NSP"] = var_NSP_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_Thalf == SCALAR_DOUBLE) && (aux_Thalf_read == true))) {
    cpp_current_dict["Thalf"] = var_Thalf_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_dThalf == SCALAR_DOUBLE) && (aux_dThalf_read == true))) {
    cpp_current_dict["dThalf"] = var_dThalf_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_NC == SCALAR_INT) && (aux_NC_read == true))) {
    cpp_current_dict["NC"] = var_NC_0d_int_Scalar;
  }
  if ((var_Ebar_x_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_Ebar_x_1d_double_NestedVector;
    cpp_current_dict["Ebar_x"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["Ebar_x"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_dEbar_x_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_dEbar_x_1d_double_NestedVector;
    cpp_current_dict["dEbar_x"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["dEbar_x"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if (((aux_last_type_read_for_SPI == SCALAR_DOUBLE) && (aux_SPI_read == true))) {
    cpp_current_dict["SPI"] = var_SPI_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_PAR == SCALAR_DOUBLE) && (aux_PAR_read == true))) {
    cpp_current_dict["PAR"] = var_PAR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_NDK == SCALAR_INT) && (aux_NDK_read == true))) {
    cpp_current_dict["NDK"] = var_NDK_0d_int_Scalar;
  }
  if ((var_RTYP_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_RTYP_1d_double_NestedVector;
    cpp_current_dict["RTYP"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["RTYP"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_RFS_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_RFS_1d_double_NestedVector;
    cpp_current_dict["RFS"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["RFS"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_Q_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_Q_1d_double_NestedVector;
    cpp_current_dict["Q"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["Q"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_dQ_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_dQ_1d_double_NestedVector;
    cpp_current_dict["dQ"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["dQ"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_BR_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_BR_1d_double_NestedVector;
    cpp_current_dict["BR"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["BR"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_dBR_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_dBR_1d_double_NestedVector;
    cpp_current_dict["dBR"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["dBR"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  return cpp_current_dict;
}

py::dict parse_mf8mt459_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int cpp_int_val;
  bool aux_cpp_int_val_read = false;
  vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
  int var_LE_0d_int_Scalar;
  bool aux_LE_read = false;
  vartype aux_last_type_read_for_LE = UNKNOWN;
  NestedVector<double> var_E_1d_double_NestedVector;
  vartype aux_last_type_read_for_E = UNKNOWN;
  NestedVector<int> var_NN_1d_int_NestedVector;
  vartype aux_last_type_read_for_NN = UNKNOWN;
  NestedVector<int> var_NFP_1d_int_NestedVector;
  vartype aux_last_type_read_for_NFP = UNKNOWN;
  NestedVector<NestedVector<double>> var_ZAFP_2d_double_NestedVector;
  NestedVector<double>* ptr_ZAFP_2d_idx0;
  vartype aux_last_type_read_for_ZAFP = UNKNOWN;
  NestedVector<NestedVector<double>> var_FPS_2d_double_NestedVector;
  NestedVector<double>* ptr_FPS_2d_idx0;
  vartype aux_last_type_read_for_FPS = UNKNOWN;
  NestedVector<NestedVector<double>> var_YC_2d_double_NestedVector;
  NestedVector<double>* ptr_YC_2d_idx0;
  vartype aux_last_type_read_for_YC = UNKNOWN;
  NestedVector<NestedVector<double>> var_DYC_2d_double_NestedVector;
  NestedVector<double>* ptr_DYC_2d_idx0;
  vartype aux_last_type_read_for_DYC = UNKNOWN;
  NestedVector<int> var_I_1d_int_NestedVector;
  vartype aux_last_type_read_for_I = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // assign expression to variable cpp_int_val
  cpp_int_val = cpp_read_int_field(cpp_line, 2);
  aux_cpp_int_val_read = true;
  if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_cpp_int_val = SCALAR_INT;
  // assign expression to variable LE
  var_LE_0d_int_Scalar = (cpp_int_val+(-1));
  aux_LE_read = true;
  if ((aux_last_type_read_for_LE != SCALAR_INT && aux_last_type_read_for_LE != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LE = SCALAR_INT;
  cpp_line = cpp_read_line(cont);
  // read LIST record
  // assign expression to variable E
  var_E_1d_double_NestedVector.set(0, cpp_read_float_field(cpp_line.c_str(), 0));
  if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
  if ((! (aux_LE_read == true))) {
    // assign expression to variable LE
    var_LE_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
    aux_LE_read = true;
    if ((aux_last_type_read_for_LE != SCALAR_INT && aux_last_type_read_for_LE != UNKNOWN)) {
      raise_vartype_mismatch();
    }
    aux_last_type_read_for_LE = SCALAR_INT;
  }
  // assign expression to variable NN
  var_NN_1d_int_NestedVector.set(0, cpp_read_int_field(cpp_line, 4));
  if ((aux_last_type_read_for_NN != NESTEDVECTOR_INT && aux_last_type_read_for_NN != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NN = NESTEDVECTOR_INT;
  // assign expression to variable NFP
  var_NFP_1d_int_NestedVector.set(0, cpp_read_int_field(cpp_line, 5));
  if ((aux_last_type_read_for_NFP != NESTEDVECTOR_INT && aux_last_type_read_for_NFP != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NFP = NESTEDVECTOR_INT;
  {
    int cpp_npl = cpp_read_int_field(cpp_line, 4);
    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
    int cpp_j = 0;
    // read LIST body
    ptr_ZAFP_2d_idx0 = var_ZAFP_2d_double_NestedVector.prepare(0);
    ptr_FPS_2d_idx0 = var_FPS_2d_double_NestedVector.prepare(0);
    ptr_YC_2d_idx0 = var_YC_2d_double_NestedVector.prepare(0);
    ptr_DYC_2d_idx0 = var_DYC_2d_double_NestedVector.prepare(0);

    for (int var_m_0d_int_Scalar = 1;
       var_m_0d_int_Scalar <= var_NFP_1d_int_NestedVector[0]; var_m_0d_int_Scalar++) {
      bool aux_m_read = true;
      // read LIST body
      // assign expression to variable ZAFP
      ptr_ZAFP_2d_idx0->set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
      if ((aux_last_type_read_for_ZAFP != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ZAFP != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_ZAFP = NESTEDVECTOR_DOUBLE;
      // assign expression to variable FPS
      ptr_FPS_2d_idx0->set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
      if ((aux_last_type_read_for_FPS != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_FPS != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_FPS = NESTEDVECTOR_DOUBLE;
      // assign expression to variable YC
      ptr_YC_2d_idx0->set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
      if ((aux_last_type_read_for_YC != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_YC != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_YC = NESTEDVECTOR_DOUBLE;
      // assign expression to variable DYC
      ptr_DYC_2d_idx0->set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
      if ((aux_last_type_read_for_DYC != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DYC != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_DYC = NESTEDVECTOR_DOUBLE;
    }
  }

  for (int var_k_0d_int_Scalar = 1;
     var_k_0d_int_Scalar <= var_LE_0d_int_Scalar; var_k_0d_int_Scalar++) {
    bool aux_k_read = true;
    cpp_line = cpp_read_line(cont);
    // read LIST record
    if ((! var_E_1d_double_NestedVector.contains(var_k_0d_int_Scalar))) {
      // assign expression to variable E
      var_E_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 0));
      if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
    }
    // assign expression to variable I
    var_I_1d_int_NestedVector.set(var_k_0d_int_Scalar, cpp_read_int_field(cpp_line, 2));
    if ((aux_last_type_read_for_I != NESTEDVECTOR_INT && aux_last_type_read_for_I != UNKNOWN)) {
      raise_vartype_mismatch();
    }
    aux_last_type_read_for_I = NESTEDVECTOR_INT;
    if ((! var_NN_1d_int_NestedVector.contains(var_k_0d_int_Scalar))) {
      // assign expression to variable NN
      var_NN_1d_int_NestedVector.set(var_k_0d_int_Scalar, cpp_read_int_field(cpp_line, 4));
      if ((aux_last_type_read_for_NN != NESTEDVECTOR_INT && aux_last_type_read_for_NN != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_NN = NESTEDVECTOR_INT;
    }
    if ((! var_NFP_1d_int_NestedVector.contains(var_k_0d_int_Scalar))) {
      // assign expression to variable NFP
      var_NFP_1d_int_NestedVector.set(var_k_0d_int_Scalar, cpp_read_int_field(cpp_line, 5));
      if ((aux_last_type_read_for_NFP != NESTEDVECTOR_INT && aux_last_type_read_for_NFP != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_NFP = NESTEDVECTOR_INT;
    }
    {
      int cpp_npl = cpp_read_int_field(cpp_line, 4);
      cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
      int cpp_j = 0;
      // read LIST body
      ptr_ZAFP_2d_idx0 = var_ZAFP_2d_double_NestedVector.prepare(var_k_0d_int_Scalar);
      ptr_FPS_2d_idx0 = var_FPS_2d_double_NestedVector.prepare(var_k_0d_int_Scalar);
      ptr_YC_2d_idx0 = var_YC_2d_double_NestedVector.prepare(var_k_0d_int_Scalar);
      ptr_DYC_2d_idx0 = var_DYC_2d_double_NestedVector.prepare(var_k_0d_int_Scalar);

      for (int var_m_0d_int_Scalar = 1;
         var_m_0d_int_Scalar <= var_NFP_1d_int_NestedVector[var_k_0d_int_Scalar]; var_m_0d_int_Scalar++) {
        bool aux_m_read = true;
        // read LIST body
        if ((! (var_ZAFP_2d_double_NestedVector.contains(var_k_0d_int_Scalar) && var_ZAFP_2d_double_NestedVector[var_k_0d_int_Scalar].contains(var_m_0d_int_Scalar)))) {
          // assign expression to variable ZAFP
          ptr_ZAFP_2d_idx0->set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
          if ((aux_last_type_read_for_ZAFP != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ZAFP != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_ZAFP = NESTEDVECTOR_DOUBLE;
        }
        if ((! (var_FPS_2d_double_NestedVector.contains(var_k_0d_int_Scalar) && var_FPS_2d_double_NestedVector[var_k_0d_int_Scalar].contains(var_m_0d_int_Scalar)))) {
          // assign expression to variable FPS
          ptr_FPS_2d_idx0->set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
          if ((aux_last_type_read_for_FPS != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_FPS != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_FPS = NESTEDVECTOR_DOUBLE;
        }
        if ((! (var_YC_2d_double_NestedVector.contains(var_k_0d_int_Scalar) && var_YC_2d_double_NestedVector[var_k_0d_int_Scalar].contains(var_m_0d_int_Scalar)))) {
          // assign expression to variable YC
          ptr_YC_2d_idx0->set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
          if ((aux_last_type_read_for_YC != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_YC != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_YC = NESTEDVECTOR_DOUBLE;
        }
        if ((! (var_DYC_2d_double_NestedVector.contains(var_k_0d_int_Scalar) && var_DYC_2d_double_NestedVector[var_k_0d_int_Scalar].contains(var_m_0d_int_Scalar)))) {
          // assign expression to variable DYC
          ptr_DYC_2d_idx0->set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
          if ((aux_last_type_read_for_DYC != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DYC != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_DYC = NESTEDVECTOR_DOUBLE;
        }
      }
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LE == SCALAR_INT) && (aux_LE_read == true))) {
    cpp_current_dict["LE"] = var_LE_0d_int_Scalar;
  }
  if ((var_E_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_E_1d_double_NestedVector;
    cpp_current_dict["E"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["E"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_NN_1d_int_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_NN_1d_int_NestedVector;
    cpp_current_dict["NN"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["NN"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_NFP_1d_int_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_NFP_1d_int_NestedVector;
    cpp_current_dict["NFP"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["NFP"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_ZAFP_2d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_ZAFP_2d_double_NestedVector;
    cpp_current_dict["ZAFP"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["ZAFP"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
      cpp_curdict0[py::cast(cpp_i1)] = py::dict();
      py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
      for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
        cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
      }
    }
  }
  if ((var_FPS_2d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_FPS_2d_double_NestedVector;
    cpp_current_dict["FPS"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["FPS"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
      cpp_curdict0[py::cast(cpp_i1)] = py::dict();
      py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
      for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
        cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
      }
    }
  }
  if ((var_YC_2d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_YC_2d_double_NestedVector;
    cpp_current_dict["YC"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["YC"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
      cpp_curdict0[py::cast(cpp_i1)] = py::dict();
      py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
      for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
        cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
      }
    }
  }
  if ((var_DYC_2d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_DYC_2d_double_NestedVector;
    cpp_current_dict["DYC"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["DYC"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
      cpp_curdict0[py::cast(cpp_i1)] = py::dict();
      py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
      for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
        cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
      }
    }
  }
  if ((var_I_1d_int_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_I_1d_int_NestedVector;
    cpp_current_dict["I"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["I"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  return cpp_current_dict;
}

py::dict parse_mf9_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_LIS_0d_int_Scalar;
  bool aux_LIS_read = false;
  vartype aux_last_type_read_for_LIS = UNKNOWN;
  int var_NS_0d_int_Scalar;
  bool aux_NS_read = false;
  vartype aux_last_type_read_for_NS = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // assign expression to variable LIS
  var_LIS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
  aux_LIS_read = true;
  if ((aux_last_type_read_for_LIS != SCALAR_INT && aux_last_type_read_for_LIS != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LIS = SCALAR_INT;
  // assign expression to variable NS
  var_NS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
  aux_NS_read = true;
  if ((aux_last_type_read_for_NS != SCALAR_INT && aux_last_type_read_for_NS != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NS = SCALAR_INT;

  for (int var_k_0d_int_Scalar = 1;
     var_k_0d_int_Scalar <= var_NS_0d_int_Scalar; var_k_0d_int_Scalar++) {
    bool aux_k_read = true;
    // open section subsection

    {
        py::dict cpp_parent_dict = cpp_current_dict;
        if (! cpp_parent_dict.contains("subsection")) {
          cpp_parent_dict["subsection"] = py::dict();
        }
        py::dict cpp_current_dict = cpp_parent_dict["subsection"];

        if (! cpp_current_dict.contains(py::cast(var_k_0d_int_Scalar))) {
          cpp_current_dict[py::cast(var_k_0d_int_Scalar)] = py::dict();
        }
        cpp_current_dict = cpp_current_dict[py::cast(var_k_0d_int_Scalar)];
      // variable declarations
      double var_QM_0d_double_Scalar;
      bool aux_QM_read = false;
      vartype aux_last_type_read_for_QM = UNKNOWN;
      double var_QI_0d_double_Scalar;
      bool aux_QI_read = false;
      vartype aux_last_type_read_for_QI = UNKNOWN;
      int var_IZAP_0d_int_Scalar;
      bool aux_IZAP_read = false;
      vartype aux_last_type_read_for_IZAP = UNKNOWN;
      int var_LFS_0d_int_Scalar;
      bool aux_LFS_read = false;
      vartype aux_last_type_read_for_LFS = UNKNOWN;
      std::vector<double> var_E_0d_floatvec_Scalar;
      bool aux_E_read = false;
      vartype aux_last_type_read_for_E = UNKNOWN;
      std::vector<double> var_Y_0d_floatvec_Scalar;
      bool aux_Y_read = false;
      vartype aux_last_type_read_for_Y = UNKNOWN;
      std::vector<int> var_INT_0d_intvec_Scalar;
      bool aux_INT_read = false;
      vartype aux_last_type_read_for_INT = UNKNOWN;
      std::vector<int> var_NBT_0d_intvec_Scalar;
      bool aux_NBT_read = false;
      vartype aux_last_type_read_for_NBT = UNKNOWN;
      // read TAB1 record
      cpp_line = cpp_read_line(cont);
      // assign expression to variable QM
      var_QM_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
      aux_QM_read = true;
      if ((aux_last_type_read_for_QM != SCALAR_DOUBLE && aux_last_type_read_for_QM != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_QM = SCALAR_DOUBLE;
      // assign expression to variable QI
      var_QI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
      aux_QI_read = true;
      if ((aux_last_type_read_for_QI != SCALAR_DOUBLE && aux_last_type_read_for_QI != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_QI = SCALAR_DOUBLE;
      // assign expression to variable IZAP
      var_IZAP_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
      aux_IZAP_read = true;
      if ((aux_last_type_read_for_IZAP != SCALAR_INT && aux_last_type_read_for_IZAP != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_IZAP = SCALAR_INT;
      // assign expression to variable LFS
      var_LFS_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
      aux_LFS_read = true;
      if ((aux_last_type_read_for_LFS != SCALAR_INT && aux_last_type_read_for_LFS != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_LFS = SCALAR_INT;
      {
        Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
        // assign expression to variable E
        var_E_0d_floatvec_Scalar = tab_body.X;
        aux_E_read = true;
        if ((aux_last_type_read_for_E != SCALAR_FLOATVEC && aux_last_type_read_for_E != UNKNOWN)) {
          raise_vartype_mismatch();
        }
        aux_last_type_read_for_E = SCALAR_FLOATVEC;
        // assign expression to variable Y
        var_Y_0d_floatvec_Scalar = tab_body.Y;
        aux_Y_read = true;
        if ((aux_last_type_read_for_Y != SCALAR_FLOATVEC && aux_last_type_read_for_Y != UNKNOWN)) {
          raise_vartype_mismatch();
        }
        aux_last_type_read_for_Y = SCALAR_FLOATVEC;
        // assign expression to variable INT
        var_INT_0d_intvec_Scalar = tab_body.INT;
        aux_INT_read = true;
        if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
          raise_vartype_mismatch();
        }
        aux_last_type_read_for_INT = SCALAR_INTVEC;
        // assign expression to variable NBT
        var_NBT_0d_intvec_Scalar = tab_body.NBT;
        aux_NBT_read = true;
        if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
          raise_vartype_mismatch();
        }
        aux_last_type_read_for_NBT = SCALAR_INTVEC;
      }
      // store data in Python dictionary
      if (((aux_last_type_read_for_QM == SCALAR_DOUBLE) && (aux_QM_read == true))) {
        cpp_current_dict["QM"] = var_QM_0d_double_Scalar;
      }
      if (((aux_last_type_read_for_QI == SCALAR_DOUBLE) && (aux_QI_read == true))) {
        cpp_current_dict["QI"] = var_QI_0d_double_Scalar;
      }
      if (((aux_last_type_read_for_IZAP == SCALAR_INT) && (aux_IZAP_read == true))) {
        cpp_current_dict["IZAP"] = var_IZAP_0d_int_Scalar;
      }
      if (((aux_last_type_read_for_LFS == SCALAR_INT) && (aux_LFS_read == true))) {
        cpp_current_dict["LFS"] = var_LFS_0d_int_Scalar;
      }
      if (((aux_last_type_read_for_E == SCALAR_FLOATVEC) && (aux_E_read == true))) {
        cpp_current_dict["E"] = var_E_0d_floatvec_Scalar;
      }
      if (((aux_last_type_read_for_Y == SCALAR_FLOATVEC) && (aux_Y_read == true))) {
        cpp_current_dict["Y"] = var_Y_0d_floatvec_Scalar;
      }
      if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
        cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
      }
      if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
        cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
      }
      cpp_current_dict = cpp_parent_dict;
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LIS == SCALAR_INT) && (aux_LIS_read == true))) {
    cpp_current_dict["LIS"] = var_LIS_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NS == SCALAR_INT) && (aux_NS_read == true))) {
    cpp_current_dict["NS"] = var_NS_0d_int_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_mf10_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_LIS_0d_int_Scalar;
  bool aux_LIS_read = false;
  vartype aux_last_type_read_for_LIS = UNKNOWN;
  int var_NS_0d_int_Scalar;
  bool aux_NS_read = false;
  vartype aux_last_type_read_for_NS = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // assign expression to variable LIS
  var_LIS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
  aux_LIS_read = true;
  if ((aux_last_type_read_for_LIS != SCALAR_INT && aux_last_type_read_for_LIS != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LIS = SCALAR_INT;
  // assign expression to variable NS
  var_NS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
  aux_NS_read = true;
  if ((aux_last_type_read_for_NS != SCALAR_INT && aux_last_type_read_for_NS != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NS = SCALAR_INT;

  for (int var_k_0d_int_Scalar = 1;
     var_k_0d_int_Scalar <= var_NS_0d_int_Scalar; var_k_0d_int_Scalar++) {
    bool aux_k_read = true;
    // open section subsection

    {
        py::dict cpp_parent_dict = cpp_current_dict;
        if (! cpp_parent_dict.contains("subsection")) {
          cpp_parent_dict["subsection"] = py::dict();
        }
        py::dict cpp_current_dict = cpp_parent_dict["subsection"];

        if (! cpp_current_dict.contains(py::cast(var_k_0d_int_Scalar))) {
          cpp_current_dict[py::cast(var_k_0d_int_Scalar)] = py::dict();
        }
        cpp_current_dict = cpp_current_dict[py::cast(var_k_0d_int_Scalar)];
      // variable declarations
      double var_QM_0d_double_Scalar;
      bool aux_QM_read = false;
      vartype aux_last_type_read_for_QM = UNKNOWN;
      double var_QI_0d_double_Scalar;
      bool aux_QI_read = false;
      vartype aux_last_type_read_for_QI = UNKNOWN;
      int var_IZAP_0d_int_Scalar;
      bool aux_IZAP_read = false;
      vartype aux_last_type_read_for_IZAP = UNKNOWN;
      int var_LFS_0d_int_Scalar;
      bool aux_LFS_read = false;
      vartype aux_last_type_read_for_LFS = UNKNOWN;
      std::vector<double> var_E_0d_floatvec_Scalar;
      bool aux_E_read = false;
      vartype aux_last_type_read_for_E = UNKNOWN;
      std::vector<double> var_sigma_0d_floatvec_Scalar;
      bool aux_sigma_read = false;
      vartype aux_last_type_read_for_sigma = UNKNOWN;
      std::vector<int> var_INT_0d_intvec_Scalar;
      bool aux_INT_read = false;
      vartype aux_last_type_read_for_INT = UNKNOWN;
      std::vector<int> var_NBT_0d_intvec_Scalar;
      bool aux_NBT_read = false;
      vartype aux_last_type_read_for_NBT = UNKNOWN;
      // read TAB1 record
      cpp_line = cpp_read_line(cont);
      // assign expression to variable QM
      var_QM_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
      aux_QM_read = true;
      if ((aux_last_type_read_for_QM != SCALAR_DOUBLE && aux_last_type_read_for_QM != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_QM = SCALAR_DOUBLE;
      // assign expression to variable QI
      var_QI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
      aux_QI_read = true;
      if ((aux_last_type_read_for_QI != SCALAR_DOUBLE && aux_last_type_read_for_QI != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_QI = SCALAR_DOUBLE;
      // assign expression to variable IZAP
      var_IZAP_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
      aux_IZAP_read = true;
      if ((aux_last_type_read_for_IZAP != SCALAR_INT && aux_last_type_read_for_IZAP != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_IZAP = SCALAR_INT;
      // assign expression to variable LFS
      var_LFS_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
      aux_LFS_read = true;
      if ((aux_last_type_read_for_LFS != SCALAR_INT && aux_last_type_read_for_LFS != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_LFS = SCALAR_INT;
      {
        Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
        // assign expression to variable E
        var_E_0d_floatvec_Scalar = tab_body.X;
        aux_E_read = true;
        if ((aux_last_type_read_for_E != SCALAR_FLOATVEC && aux_last_type_read_for_E != UNKNOWN)) {
          raise_vartype_mismatch();
        }
        aux_last_type_read_for_E = SCALAR_FLOATVEC;
        // assign expression to variable sigma
        var_sigma_0d_floatvec_Scalar = tab_body.Y;
        aux_sigma_read = true;
        if ((aux_last_type_read_for_sigma != SCALAR_FLOATVEC && aux_last_type_read_for_sigma != UNKNOWN)) {
          raise_vartype_mismatch();
        }
        aux_last_type_read_for_sigma = SCALAR_FLOATVEC;
        // assign expression to variable INT
        var_INT_0d_intvec_Scalar = tab_body.INT;
        aux_INT_read = true;
        if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
          raise_vartype_mismatch();
        }
        aux_last_type_read_for_INT = SCALAR_INTVEC;
        // assign expression to variable NBT
        var_NBT_0d_intvec_Scalar = tab_body.NBT;
        aux_NBT_read = true;
        if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
          raise_vartype_mismatch();
        }
        aux_last_type_read_for_NBT = SCALAR_INTVEC;
      }
      // store data in Python dictionary
      if (((aux_last_type_read_for_QM == SCALAR_DOUBLE) && (aux_QM_read == true))) {
        cpp_current_dict["QM"] = var_QM_0d_double_Scalar;
      }
      if (((aux_last_type_read_for_QI == SCALAR_DOUBLE) && (aux_QI_read == true))) {
        cpp_current_dict["QI"] = var_QI_0d_double_Scalar;
      }
      if (((aux_last_type_read_for_IZAP == SCALAR_INT) && (aux_IZAP_read == true))) {
        cpp_current_dict["IZAP"] = var_IZAP_0d_int_Scalar;
      }
      if (((aux_last_type_read_for_LFS == SCALAR_INT) && (aux_LFS_read == true))) {
        cpp_current_dict["LFS"] = var_LFS_0d_int_Scalar;
      }
      if (((aux_last_type_read_for_E == SCALAR_FLOATVEC) && (aux_E_read == true))) {
        cpp_current_dict["E"] = var_E_0d_floatvec_Scalar;
      }
      if (((aux_last_type_read_for_sigma == SCALAR_FLOATVEC) && (aux_sigma_read == true))) {
        cpp_current_dict["sigma"] = var_sigma_0d_floatvec_Scalar;
      }
      if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
        cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
      }
      if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
        cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
      }
      cpp_current_dict = cpp_parent_dict;
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LIS == SCALAR_INT) && (aux_LIS_read == true))) {
    cpp_current_dict["LIS"] = var_LIS_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NS == SCALAR_INT) && (aux_NS_read == true))) {
    cpp_current_dict["NS"] = var_NS_0d_int_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_mf12_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_LO_0d_int_Scalar;
  bool aux_LO_read = false;
  vartype aux_last_type_read_for_LO = UNKNOWN;
  int var_NK_0d_int_Scalar;
  bool aux_NK_read = false;
  vartype aux_last_type_read_for_NK = UNKNOWN;
  std::vector<double> var_Eint_0d_floatvec_Scalar;
  bool aux_Eint_read = false;
  vartype aux_last_type_read_for_Eint = UNKNOWN;
  std::vector<double> var_Y_0d_floatvec_Scalar;
  bool aux_Y_read = false;
  vartype aux_last_type_read_for_Y = UNKNOWN;
  std::vector<int> var_INT_0d_intvec_Scalar;
  bool aux_INT_read = false;
  vartype aux_last_type_read_for_INT = UNKNOWN;
  std::vector<int> var_NBT_0d_intvec_Scalar;
  bool aux_NBT_read = false;
  vartype aux_last_type_read_for_NBT = UNKNOWN;
  NestedVector<double> var_Eg_1d_double_NestedVector;
  vartype aux_last_type_read_for_Eg = UNKNOWN;
  NestedVector<double> var_ES_1d_double_NestedVector;
  vartype aux_last_type_read_for_ES = UNKNOWN;
  NestedVector<int> var_LP_1d_int_NestedVector;
  vartype aux_last_type_read_for_LP = UNKNOWN;
  NestedVector<int> var_LF_1d_int_NestedVector;
  vartype aux_last_type_read_for_LF = UNKNOWN;
  int var_LG_0d_int_Scalar;
  bool aux_LG_read = false;
  vartype aux_last_type_read_for_LG = UNKNOWN;
  int var_NS_0d_int_Scalar;
  bool aux_NS_read = false;
  vartype aux_last_type_read_for_NS = UNKNOWN;
  double var_ES_NS_0d_double_Scalar;
  bool aux_ES_NS_read = false;
  vartype aux_last_type_read_for_ES_NS = UNKNOWN;
  int var_LP_0d_int_Scalar;
  bool aux_LP_read = false;
  int cpp_int_val;
  bool aux_cpp_int_val_read = false;
  vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
  int var_NT_0d_int_Scalar;
  bool aux_NT_read = false;
  vartype aux_last_type_read_for_NT = UNKNOWN;
  NestedVector<double> var_TP_1d_double_NestedVector;
  vartype aux_last_type_read_for_TP = UNKNOWN;
  NestedVector<double> var_GP_1d_double_NestedVector;
  vartype aux_last_type_read_for_GP = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  // evaluate if-elif-else clause
  {
    bool cpp_found_match = false;
    if (! cpp_found_match) {
      // if statement evaluation with lookahead
      {
        std::streampos cpp_old_streampos = cont.tellg();
        {
          // variable declarations
          int& glob_var_MAT_0d_int_Scalar = var_MAT_0d_int_Scalar;
          int var_MAT_0d_int_Scalar = glob_var_MAT_0d_int_Scalar;
          bool& glob_aux_MAT_read = aux_MAT_read;
          bool aux_MAT_read = glob_aux_MAT_read;
          vartype aux_last_type_read_for_MAT = UNKNOWN;
          int& glob_var_MF_0d_int_Scalar = var_MF_0d_int_Scalar;
          int var_MF_0d_int_Scalar = glob_var_MF_0d_int_Scalar;
          bool& glob_aux_MF_read = aux_MF_read;
          bool aux_MF_read = glob_aux_MF_read;
          vartype aux_last_type_read_for_MF = UNKNOWN;
          int& glob_var_MT_0d_int_Scalar = var_MT_0d_int_Scalar;
          int var_MT_0d_int_Scalar = glob_var_MT_0d_int_Scalar;
          bool& glob_aux_MT_read = aux_MT_read;
          bool aux_MT_read = glob_aux_MT_read;
          vartype aux_last_type_read_for_MT = UNKNOWN;
          double& glob_var_ZA_0d_double_Scalar = var_ZA_0d_double_Scalar;
          double var_ZA_0d_double_Scalar = glob_var_ZA_0d_double_Scalar;
          bool& glob_aux_ZA_read = aux_ZA_read;
          bool aux_ZA_read = glob_aux_ZA_read;
          vartype aux_last_type_read_for_ZA = UNKNOWN;
          double& glob_var_AWR_0d_double_Scalar = var_AWR_0d_double_Scalar;
          double var_AWR_0d_double_Scalar = glob_var_AWR_0d_double_Scalar;
          bool& glob_aux_AWR_read = aux_AWR_read;
          bool aux_AWR_read = glob_aux_AWR_read;
          vartype aux_last_type_read_for_AWR = UNKNOWN;
          int& glob_var_LO_0d_int_Scalar = var_LO_0d_int_Scalar;
          int var_LO_0d_int_Scalar = glob_var_LO_0d_int_Scalar;
          bool& glob_aux_LO_read = aux_LO_read;
          bool aux_LO_read = glob_aux_LO_read;
          vartype aux_last_type_read_for_LO = UNKNOWN;
          int& glob_var_NK_0d_int_Scalar = var_NK_0d_int_Scalar;
          int var_NK_0d_int_Scalar = glob_var_NK_0d_int_Scalar;
          bool& glob_aux_NK_read = aux_NK_read;
          bool aux_NK_read = glob_aux_NK_read;
          vartype aux_last_type_read_for_NK = UNKNOWN;
          cpp_line = cpp_read_line(cont);
          // read CONT record
          // assign expression to variable ZA
          var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
          aux_ZA_read = true;
          if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_ZA = SCALAR_DOUBLE;
          // assign expression to variable AWR
          var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
          aux_AWR_read = true;
          if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_AWR = SCALAR_DOUBLE;
          // assign expression to variable LO
          var_LO_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
          aux_LO_read = true;
          if ((aux_last_type_read_for_LO != SCALAR_INT && aux_last_type_read_for_LO != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_LO = SCALAR_INT;
          // assign expression to variable NK
          var_NK_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
          aux_NK_read = true;
          if ((aux_last_type_read_for_NK != SCALAR_INT && aux_last_type_read_for_NK != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NK = SCALAR_INT;
          if ((((((((aux_LO_read == true)) && ((var_LO_0d_int_Scalar)==(1)))))))) {
            cpp_found_match = true;
          }
          cont.seekg(cpp_old_streampos);
        }
        if (cpp_found_match) {
          cpp_line = cpp_read_line(cont);
          // read CONT record
          // assign expression to variable ZA
          var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
          aux_ZA_read = true;
          if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_ZA = SCALAR_DOUBLE;
          // assign expression to variable AWR
          var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
          aux_AWR_read = true;
          if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_AWR = SCALAR_DOUBLE;
          // assign expression to variable LO
          var_LO_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
          aux_LO_read = true;
          if ((aux_last_type_read_for_LO != SCALAR_INT && aux_last_type_read_for_LO != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_LO = SCALAR_INT;
          // assign expression to variable NK
          var_NK_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
          aux_NK_read = true;
          if ((aux_last_type_read_for_NK != SCALAR_INT && aux_last_type_read_for_NK != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NK = SCALAR_INT;
          // evaluate if-elif-else clause
          {
            bool cpp_found_match = false;
            if (! cpp_found_match) {
              if ((((((((aux_NK_read == true)) && ((var_NK_0d_int_Scalar)>(1)))))))) {
                // if statement evaluation
                cpp_found_match = true;
                // read TAB1 record
                cpp_line = cpp_read_line(cont);
                {
                  Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                  // assign expression to variable Eint
                  var_Eint_0d_floatvec_Scalar = tab_body.X;
                  aux_Eint_read = true;
                  if ((aux_last_type_read_for_Eint != SCALAR_FLOATVEC && aux_last_type_read_for_Eint != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_Eint = SCALAR_FLOATVEC;
                  // assign expression to variable Y
                  var_Y_0d_floatvec_Scalar = tab_body.Y;
                  aux_Y_read = true;
                  if ((aux_last_type_read_for_Y != SCALAR_FLOATVEC && aux_last_type_read_for_Y != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_Y = SCALAR_FLOATVEC;
                  // assign expression to variable INT
                  var_INT_0d_intvec_Scalar = tab_body.INT;
                  aux_INT_read = true;
                  if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_INT = SCALAR_INTVEC;
                  // assign expression to variable NBT
                  var_NBT_0d_intvec_Scalar = tab_body.NBT;
                  aux_NBT_read = true;
                  if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_NBT = SCALAR_INTVEC;
                }
              }
            }
          }

          for (int var_k_0d_int_Scalar = 1;
             var_k_0d_int_Scalar <= var_NK_0d_int_Scalar; var_k_0d_int_Scalar++) {
            bool aux_k_read = true;
            // read TAB1 record
            cpp_line = cpp_read_line(cont);
            // assign expression to variable Eg
            var_Eg_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 0));
            if ((aux_last_type_read_for_Eg != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_Eg != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_Eg = NESTEDVECTOR_DOUBLE;
            // assign expression to variable ES
            var_ES_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 1));
            if ((aux_last_type_read_for_ES != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ES != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_ES = NESTEDVECTOR_DOUBLE;
            // assign expression to variable LP
            var_LP_1d_int_NestedVector.set(var_k_0d_int_Scalar, cpp_read_int_field(cpp_line, 2));
            if ((aux_last_type_read_for_LP != NESTEDVECTOR_INT && aux_last_type_read_for_LP != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LP = NESTEDVECTOR_INT;
            // assign expression to variable LF
            var_LF_1d_int_NestedVector.set(var_k_0d_int_Scalar, cpp_read_int_field(cpp_line, 3));
            if ((aux_last_type_read_for_LF != NESTEDVECTOR_INT && aux_last_type_read_for_LF != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LF = NESTEDVECTOR_INT;

            {
                py::dict cpp_parent_dict = cpp_current_dict;
                if (! cpp_parent_dict.contains("table")) {
                  cpp_parent_dict["table"] = py::dict();
                }
                py::dict cpp_current_dict = cpp_parent_dict["table"];

                if (! cpp_current_dict.contains(py::cast(var_k_0d_int_Scalar))) {
                  cpp_current_dict[py::cast(var_k_0d_int_Scalar)] = py::dict();
                }
                cpp_current_dict = cpp_current_dict[py::cast(var_k_0d_int_Scalar)];
              // variable declarations
              std::vector<double> var_Eint_0d_floatvec_Scalar;
              bool aux_Eint_read = false;
              vartype aux_last_type_read_for_Eint = UNKNOWN;
              std::vector<double> var_y_0d_floatvec_Scalar;
              bool aux_y_read = false;
              vartype aux_last_type_read_for_y = UNKNOWN;
              std::vector<int> var_INT_0d_intvec_Scalar;
              bool aux_INT_read = false;
              vartype aux_last_type_read_for_INT = UNKNOWN;
              std::vector<int> var_NBT_0d_intvec_Scalar;
              bool aux_NBT_read = false;
              vartype aux_last_type_read_for_NBT = UNKNOWN;
              {
                Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                if ((! (aux_Eint_read == true))) {
                  // assign expression to variable Eint
                  var_Eint_0d_floatvec_Scalar = tab_body.X;
                  aux_Eint_read = true;
                  if ((aux_last_type_read_for_Eint != SCALAR_FLOATVEC && aux_last_type_read_for_Eint != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_Eint = SCALAR_FLOATVEC;
                }
                // assign expression to variable y
                var_y_0d_floatvec_Scalar = tab_body.Y;
                aux_y_read = true;
                if ((aux_last_type_read_for_y != SCALAR_FLOATVEC && aux_last_type_read_for_y != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_y = SCALAR_FLOATVEC;
                if ((! (aux_INT_read == true))) {
                  // assign expression to variable INT
                  var_INT_0d_intvec_Scalar = tab_body.INT;
                  aux_INT_read = true;
                  if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_INT = SCALAR_INTVEC;
                }
                if ((! (aux_NBT_read == true))) {
                  // assign expression to variable NBT
                  var_NBT_0d_intvec_Scalar = tab_body.NBT;
                  aux_NBT_read = true;
                  if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_NBT = SCALAR_INTVEC;
                }
              }
              // store data in Python dictionary
              if (((aux_last_type_read_for_Eint == SCALAR_FLOATVEC) && (aux_Eint_read == true))) {
                cpp_current_dict["Eint"] = var_Eint_0d_floatvec_Scalar;
              }
              if (((aux_last_type_read_for_y == SCALAR_FLOATVEC) && (aux_y_read == true))) {
                cpp_current_dict["y"] = var_y_0d_floatvec_Scalar;
              }
              if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
                cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
              }
              if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
                cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
              }
              cpp_current_dict = cpp_parent_dict;
            }
          }
        }
      }
    }
    if (! cpp_found_match) {
      if (! cpp_found_match) {
        // if statement evaluation with lookahead
        {
          std::streampos cpp_old_streampos = cont.tellg();
          {
            // variable declarations
            int& glob_var_MAT_0d_int_Scalar = var_MAT_0d_int_Scalar;
            int var_MAT_0d_int_Scalar = glob_var_MAT_0d_int_Scalar;
            bool& glob_aux_MAT_read = aux_MAT_read;
            bool aux_MAT_read = glob_aux_MAT_read;
            vartype aux_last_type_read_for_MAT = UNKNOWN;
            int& glob_var_MF_0d_int_Scalar = var_MF_0d_int_Scalar;
            int var_MF_0d_int_Scalar = glob_var_MF_0d_int_Scalar;
            bool& glob_aux_MF_read = aux_MF_read;
            bool aux_MF_read = glob_aux_MF_read;
            vartype aux_last_type_read_for_MF = UNKNOWN;
            int& glob_var_MT_0d_int_Scalar = var_MT_0d_int_Scalar;
            int var_MT_0d_int_Scalar = glob_var_MT_0d_int_Scalar;
            bool& glob_aux_MT_read = aux_MT_read;
            bool aux_MT_read = glob_aux_MT_read;
            vartype aux_last_type_read_for_MT = UNKNOWN;
            double& glob_var_ZA_0d_double_Scalar = var_ZA_0d_double_Scalar;
            double var_ZA_0d_double_Scalar = glob_var_ZA_0d_double_Scalar;
            bool& glob_aux_ZA_read = aux_ZA_read;
            bool aux_ZA_read = glob_aux_ZA_read;
            vartype aux_last_type_read_for_ZA = UNKNOWN;
            double& glob_var_AWR_0d_double_Scalar = var_AWR_0d_double_Scalar;
            double var_AWR_0d_double_Scalar = glob_var_AWR_0d_double_Scalar;
            bool& glob_aux_AWR_read = aux_AWR_read;
            bool aux_AWR_read = glob_aux_AWR_read;
            vartype aux_last_type_read_for_AWR = UNKNOWN;
            int& glob_var_LO_0d_int_Scalar = var_LO_0d_int_Scalar;
            int var_LO_0d_int_Scalar = glob_var_LO_0d_int_Scalar;
            bool& glob_aux_LO_read = aux_LO_read;
            bool aux_LO_read = glob_aux_LO_read;
            vartype aux_last_type_read_for_LO = UNKNOWN;
            int& glob_var_LG_0d_int_Scalar = var_LG_0d_int_Scalar;
            int var_LG_0d_int_Scalar = glob_var_LG_0d_int_Scalar;
            bool& glob_aux_LG_read = aux_LG_read;
            bool aux_LG_read = glob_aux_LG_read;
            vartype aux_last_type_read_for_LG = UNKNOWN;
            int& glob_var_NS_0d_int_Scalar = var_NS_0d_int_Scalar;
            int var_NS_0d_int_Scalar = glob_var_NS_0d_int_Scalar;
            bool& glob_aux_NS_read = aux_NS_read;
            bool aux_NS_read = glob_aux_NS_read;
            vartype aux_last_type_read_for_NS = UNKNOWN;
            cpp_line = cpp_read_line(cont);
            // read CONT record
            // assign expression to variable ZA
            var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_ZA_read = true;
            if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_ZA = SCALAR_DOUBLE;
            // assign expression to variable AWR
            var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_AWR_read = true;
            if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_AWR = SCALAR_DOUBLE;
            // assign expression to variable LO
            var_LO_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
            aux_LO_read = true;
            if ((aux_last_type_read_for_LO != SCALAR_INT && aux_last_type_read_for_LO != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LO = SCALAR_INT;
            // assign expression to variable LG
            var_LG_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
            aux_LG_read = true;
            if ((aux_last_type_read_for_LG != SCALAR_INT && aux_last_type_read_for_LG != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LG = SCALAR_INT;
            // assign expression to variable NS
            var_NS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
            aux_NS_read = true;
            if ((aux_last_type_read_for_NS != SCALAR_INT && aux_last_type_read_for_NS != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NS = SCALAR_INT;
            if ((((((((aux_LO_read == true)) && ((var_LO_0d_int_Scalar)==(2)))))))) {
              cpp_found_match = true;
            }
            cont.seekg(cpp_old_streampos);
          }
          if (cpp_found_match) {
            cpp_line = cpp_read_line(cont);
            // read CONT record
            // assign expression to variable ZA
            var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_ZA_read = true;
            if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_ZA = SCALAR_DOUBLE;
            // assign expression to variable AWR
            var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_AWR_read = true;
            if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_AWR = SCALAR_DOUBLE;
            // assign expression to variable LO
            var_LO_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
            aux_LO_read = true;
            if ((aux_last_type_read_for_LO != SCALAR_INT && aux_last_type_read_for_LO != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LO = SCALAR_INT;
            // assign expression to variable LG
            var_LG_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
            aux_LG_read = true;
            if ((aux_last_type_read_for_LG != SCALAR_INT && aux_last_type_read_for_LG != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LG = SCALAR_INT;
            // assign expression to variable NS
            var_NS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
            aux_NS_read = true;
            if ((aux_last_type_read_for_NS != SCALAR_INT && aux_last_type_read_for_NS != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NS = SCALAR_INT;
            // evaluate if-elif-else clause
            {
              bool cpp_found_match = false;
              if (! cpp_found_match) {
                if ((((((((aux_LG_read == true)) && ((var_LG_0d_int_Scalar)==(1)))))))) {
                  // if statement evaluation
                  cpp_found_match = true;
                  cpp_line = cpp_read_line(cont);
                  // read LIST record
                  // assign expression to variable ES_NS
                  var_ES_NS_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                  aux_ES_NS_read = true;
                  if ((aux_last_type_read_for_ES_NS != SCALAR_DOUBLE && aux_last_type_read_for_ES_NS != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_ES_NS = SCALAR_DOUBLE;
                  // assign expression to variable LP
                  var_LP_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                  aux_LP_read = true;
                  if ((aux_last_type_read_for_LP != SCALAR_INT && aux_last_type_read_for_LP != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_LP = SCALAR_INT;
                  // assign expression to variable cpp_int_val
                  cpp_int_val = cpp_read_int_field(cpp_line, 4);
                  aux_cpp_int_val_read = true;
                  if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                  // assign expression to variable NT
                  var_NT_0d_int_Scalar = (cpp_int_val/2);
                  aux_NT_read = true;
                  if ((aux_last_type_read_for_NT != SCALAR_INT && aux_last_type_read_for_NT != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_NT = SCALAR_INT;
                  if ((! (aux_NT_read == true))) {
                    // assign expression to variable NT
                    var_NT_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                    aux_NT_read = true;
                    if ((aux_last_type_read_for_NT != SCALAR_INT && aux_last_type_read_for_NT != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NT = SCALAR_INT;
                  }
                  {
                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                    int cpp_j = 0;
                    // read LIST body

                    for (int var_i_0d_int_Scalar = 1;
                       var_i_0d_int_Scalar <= var_NT_0d_int_Scalar; var_i_0d_int_Scalar++) {
                      bool aux_i_read = true;
                      // read LIST body
                      // assign expression to variable ES
                      var_ES_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                      if ((aux_last_type_read_for_ES != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ES != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_ES = NESTEDVECTOR_DOUBLE;
                      // assign expression to variable TP
                      var_TP_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                      if ((aux_last_type_read_for_TP != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_TP != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_TP = NESTEDVECTOR_DOUBLE;
                    }
                  }
                }
              }
              if (! cpp_found_match) {
                if (! cpp_found_match) {
                  if ((((((((aux_LG_read == true)) && ((var_LG_0d_int_Scalar)==(2)))))))) {
                    // if statement evaluation
                    cpp_found_match = true;
                    cpp_line = cpp_read_line(cont);
                    // read LIST record
                    // assign expression to variable ES_NS
                    var_ES_NS_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_ES_NS_read = true;
                    if ((aux_last_type_read_for_ES_NS != SCALAR_DOUBLE && aux_last_type_read_for_ES_NS != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_ES_NS = SCALAR_DOUBLE;
                    // assign expression to variable LP
                    var_LP_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                    aux_LP_read = true;
                    if ((aux_last_type_read_for_LP != SCALAR_INT && aux_last_type_read_for_LP != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_LP = SCALAR_INT;
                    // assign expression to variable cpp_int_val
                    cpp_int_val = cpp_read_int_field(cpp_line, 4);
                    aux_cpp_int_val_read = true;
                    if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                    // assign expression to variable NT
                    var_NT_0d_int_Scalar = (cpp_int_val/(var_LG_0d_int_Scalar+1));
                    aux_NT_read = true;
                    if ((aux_last_type_read_for_NT != SCALAR_INT && aux_last_type_read_for_NT != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NT = SCALAR_INT;
                    if ((! (aux_NT_read == true))) {
                      // assign expression to variable NT
                      var_NT_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                      aux_NT_read = true;
                      if ((aux_last_type_read_for_NT != SCALAR_INT && aux_last_type_read_for_NT != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_NT = SCALAR_INT;
                    }
                    {
                      int cpp_npl = cpp_read_int_field(cpp_line, 4);
                      cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                      int cpp_j = 0;
                      // read LIST body

                      for (int var_i_0d_int_Scalar = 1;
                         var_i_0d_int_Scalar <= var_NT_0d_int_Scalar; var_i_0d_int_Scalar++) {
                        bool aux_i_read = true;
                        // read LIST body
                        // assign expression to variable ES
                        var_ES_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_ES != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ES != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_ES = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable TP
                        var_TP_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_TP != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_TP != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_TP = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable GP
                        var_GP_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_GP != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GP != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_GP = NESTEDVECTOR_DOUBLE;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LO == SCALAR_INT) && (aux_LO_read == true))) {
    cpp_current_dict["LO"] = var_LO_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NK == SCALAR_INT) && (aux_NK_read == true))) {
    cpp_current_dict["NK"] = var_NK_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_Eint == SCALAR_FLOATVEC) && (aux_Eint_read == true))) {
    cpp_current_dict["Eint"] = var_Eint_0d_floatvec_Scalar;
  }
  if (((aux_last_type_read_for_Y == SCALAR_FLOATVEC) && (aux_Y_read == true))) {
    cpp_current_dict["Y"] = var_Y_0d_floatvec_Scalar;
  }
  if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
    cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
  }
  if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
    cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
  }
  if ((var_Eg_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_Eg_1d_double_NestedVector;
    cpp_current_dict["Eg"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["Eg"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_ES_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_ES_1d_double_NestedVector;
    cpp_current_dict["ES"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["ES"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_LP_1d_int_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_LP_1d_int_NestedVector;
    cpp_current_dict["LP"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["LP"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_LF_1d_int_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_LF_1d_int_NestedVector;
    cpp_current_dict["LF"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["LF"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if (((aux_last_type_read_for_LG == SCALAR_INT) && (aux_LG_read == true))) {
    cpp_current_dict["LG"] = var_LG_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NS == SCALAR_INT) && (aux_NS_read == true))) {
    cpp_current_dict["NS"] = var_NS_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ES_NS == SCALAR_DOUBLE) && (aux_ES_NS_read == true))) {
    cpp_current_dict["ES_NS"] = var_ES_NS_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LP == SCALAR_INT) && (aux_LP_read == true))) {
    cpp_current_dict["LP"] = var_LP_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NT == SCALAR_INT) && (aux_NT_read == true))) {
    cpp_current_dict["NT"] = var_NT_0d_int_Scalar;
  }
  if ((var_TP_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_TP_1d_double_NestedVector;
    cpp_current_dict["TP"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["TP"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_GP_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_GP_1d_double_NestedVector;
    cpp_current_dict["GP"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["GP"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  return cpp_current_dict;
}

py::dict parse_mf13_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_NK_0d_int_Scalar;
  bool aux_NK_read = false;
  vartype aux_last_type_read_for_NK = UNKNOWN;
  std::vector<double> var_E_0d_floatvec_Scalar;
  bool aux_E_read = false;
  vartype aux_last_type_read_for_E = UNKNOWN;
  std::vector<double> var_sigma_tot_0d_floatvec_Scalar;
  bool aux_sigma_tot_read = false;
  vartype aux_last_type_read_for_sigma_tot = UNKNOWN;
  std::vector<int> var_INT_0d_intvec_Scalar;
  bool aux_INT_read = false;
  vartype aux_last_type_read_for_INT = UNKNOWN;
  std::vector<int> var_NBT_0d_intvec_Scalar;
  bool aux_NBT_read = false;
  vartype aux_last_type_read_for_NBT = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // assign expression to variable NK
  var_NK_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
  aux_NK_read = true;
  if ((aux_last_type_read_for_NK != SCALAR_INT && aux_last_type_read_for_NK != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NK = SCALAR_INT;
  // evaluate if-elif-else clause
  {
    bool cpp_found_match = false;
    if (! cpp_found_match) {
      if ((((((((aux_NK_read == true)) && ((var_NK_0d_int_Scalar)>(1)))))))) {
        // if statement evaluation
        cpp_found_match = true;
        // read TAB1 record
        cpp_line = cpp_read_line(cont);
        {
          Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
          // assign expression to variable E
          var_E_0d_floatvec_Scalar = tab_body.X;
          aux_E_read = true;
          if ((aux_last_type_read_for_E != SCALAR_FLOATVEC && aux_last_type_read_for_E != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_E = SCALAR_FLOATVEC;
          // assign expression to variable sigma_tot
          var_sigma_tot_0d_floatvec_Scalar = tab_body.Y;
          aux_sigma_tot_read = true;
          if ((aux_last_type_read_for_sigma_tot != SCALAR_FLOATVEC && aux_last_type_read_for_sigma_tot != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_sigma_tot = SCALAR_FLOATVEC;
          // assign expression to variable INT
          var_INT_0d_intvec_Scalar = tab_body.INT;
          aux_INT_read = true;
          if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_INT = SCALAR_INTVEC;
          // assign expression to variable NBT
          var_NBT_0d_intvec_Scalar = tab_body.NBT;
          aux_NBT_read = true;
          if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NBT = SCALAR_INTVEC;
        }
      }
    }
  }

  for (int var_k_0d_int_Scalar = 1;
     var_k_0d_int_Scalar <= var_NK_0d_int_Scalar; var_k_0d_int_Scalar++) {
    bool aux_k_read = true;
    // open section subsection

    {
        py::dict cpp_parent_dict = cpp_current_dict;
        if (! cpp_parent_dict.contains("subsection")) {
          cpp_parent_dict["subsection"] = py::dict();
        }
        py::dict cpp_current_dict = cpp_parent_dict["subsection"];

        if (! cpp_current_dict.contains(py::cast(var_k_0d_int_Scalar))) {
          cpp_current_dict[py::cast(var_k_0d_int_Scalar)] = py::dict();
        }
        cpp_current_dict = cpp_current_dict[py::cast(var_k_0d_int_Scalar)];
      // variable declarations
      double var_EG_0d_double_Scalar;
      bool aux_EG_read = false;
      vartype aux_last_type_read_for_EG = UNKNOWN;
      double var_ES_0d_double_Scalar;
      bool aux_ES_read = false;
      vartype aux_last_type_read_for_ES = UNKNOWN;
      int var_LP_0d_int_Scalar;
      bool aux_LP_read = false;
      vartype aux_last_type_read_for_LP = UNKNOWN;
      int var_LF_0d_int_Scalar;
      bool aux_LF_read = false;
      vartype aux_last_type_read_for_LF = UNKNOWN;
      std::vector<double> var_E_0d_floatvec_Scalar;
      bool aux_E_read = false;
      vartype aux_last_type_read_for_E = UNKNOWN;
      std::vector<double> var_sigma_0d_floatvec_Scalar;
      bool aux_sigma_read = false;
      vartype aux_last_type_read_for_sigma = UNKNOWN;
      std::vector<int> var_INT_0d_intvec_Scalar;
      bool aux_INT_read = false;
      vartype aux_last_type_read_for_INT = UNKNOWN;
      std::vector<int> var_NBT_0d_intvec_Scalar;
      bool aux_NBT_read = false;
      vartype aux_last_type_read_for_NBT = UNKNOWN;
      // read TAB1 record
      cpp_line = cpp_read_line(cont);
      // assign expression to variable EG
      var_EG_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
      aux_EG_read = true;
      if ((aux_last_type_read_for_EG != SCALAR_DOUBLE && aux_last_type_read_for_EG != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_EG = SCALAR_DOUBLE;
      // assign expression to variable ES
      var_ES_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
      aux_ES_read = true;
      if ((aux_last_type_read_for_ES != SCALAR_DOUBLE && aux_last_type_read_for_ES != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_ES = SCALAR_DOUBLE;
      // assign expression to variable LP
      var_LP_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
      aux_LP_read = true;
      if ((aux_last_type_read_for_LP != SCALAR_INT && aux_last_type_read_for_LP != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_LP = SCALAR_INT;
      // assign expression to variable LF
      var_LF_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
      aux_LF_read = true;
      if ((aux_last_type_read_for_LF != SCALAR_INT && aux_last_type_read_for_LF != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_LF = SCALAR_INT;
      {
        Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
        if ((! (aux_E_read == true))) {
          // assign expression to variable E
          var_E_0d_floatvec_Scalar = tab_body.X;
          aux_E_read = true;
          if ((aux_last_type_read_for_E != SCALAR_FLOATVEC && aux_last_type_read_for_E != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_E = SCALAR_FLOATVEC;
        }
        // assign expression to variable sigma
        var_sigma_0d_floatvec_Scalar = tab_body.Y;
        aux_sigma_read = true;
        if ((aux_last_type_read_for_sigma != SCALAR_FLOATVEC && aux_last_type_read_for_sigma != UNKNOWN)) {
          raise_vartype_mismatch();
        }
        aux_last_type_read_for_sigma = SCALAR_FLOATVEC;
        if ((! (aux_INT_read == true))) {
          // assign expression to variable INT
          var_INT_0d_intvec_Scalar = tab_body.INT;
          aux_INT_read = true;
          if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_INT = SCALAR_INTVEC;
        }
        if ((! (aux_NBT_read == true))) {
          // assign expression to variable NBT
          var_NBT_0d_intvec_Scalar = tab_body.NBT;
          aux_NBT_read = true;
          if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NBT = SCALAR_INTVEC;
        }
      }
      // store data in Python dictionary
      if (((aux_last_type_read_for_EG == SCALAR_DOUBLE) && (aux_EG_read == true))) {
        cpp_current_dict["EG"] = var_EG_0d_double_Scalar;
      }
      if (((aux_last_type_read_for_ES == SCALAR_DOUBLE) && (aux_ES_read == true))) {
        cpp_current_dict["ES"] = var_ES_0d_double_Scalar;
      }
      if (((aux_last_type_read_for_LP == SCALAR_INT) && (aux_LP_read == true))) {
        cpp_current_dict["LP"] = var_LP_0d_int_Scalar;
      }
      if (((aux_last_type_read_for_LF == SCALAR_INT) && (aux_LF_read == true))) {
        cpp_current_dict["LF"] = var_LF_0d_int_Scalar;
      }
      if (((aux_last_type_read_for_E == SCALAR_FLOATVEC) && (aux_E_read == true))) {
        cpp_current_dict["E"] = var_E_0d_floatvec_Scalar;
      }
      if (((aux_last_type_read_for_sigma == SCALAR_FLOATVEC) && (aux_sigma_read == true))) {
        cpp_current_dict["sigma"] = var_sigma_0d_floatvec_Scalar;
      }
      if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
        cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
      }
      if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
        cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
      }
      cpp_current_dict = cpp_parent_dict;
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_NK == SCALAR_INT) && (aux_NK_read == true))) {
    cpp_current_dict["NK"] = var_NK_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_E == SCALAR_FLOATVEC) && (aux_E_read == true))) {
    cpp_current_dict["E"] = var_E_0d_floatvec_Scalar;
  }
  if (((aux_last_type_read_for_sigma_tot == SCALAR_FLOATVEC) && (aux_sigma_tot_read == true))) {
    cpp_current_dict["sigma_tot"] = var_sigma_tot_0d_floatvec_Scalar;
  }
  if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
    cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
  }
  if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
    cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_mf14_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_LI_0d_int_Scalar;
  bool aux_LI_read = false;
  vartype aux_last_type_read_for_LI = UNKNOWN;
  int var_NK_0d_int_Scalar;
  bool aux_NK_read = false;
  vartype aux_last_type_read_for_NK = UNKNOWN;
  int var_LTT_0d_int_Scalar;
  bool aux_LTT_read = false;
  vartype aux_last_type_read_for_LTT = UNKNOWN;
  int var_NI_0d_int_Scalar;
  bool aux_NI_read = false;
  vartype aux_last_type_read_for_NI = UNKNOWN;
  NestedVector<double> var_EG_1d_double_NestedVector;
  vartype aux_last_type_read_for_EG = UNKNOWN;
  NestedVector<double> var_ES_1d_double_NestedVector;
  vartype aux_last_type_read_for_ES = UNKNOWN;
  NestedVector<int> var_NE_1d_int_NestedVector;
  vartype aux_last_type_read_for_NE = UNKNOWN;
  NestedVector<NestedVector<double>> var_E_2d_double_NestedVector;
  NestedVector<double>* ptr_E_2d_idx0;
  vartype aux_last_type_read_for_E = UNKNOWN;
  NestedVector<NestedVector<int>> var_NL_2d_int_NestedVector;
  NestedVector<int>* ptr_NL_2d_idx0;
  vartype aux_last_type_read_for_NL = UNKNOWN;
  NestedVector<NestedVector<NestedVector<double>>> var_a_3d_double_NestedVector;
  NestedVector<double>* ptr_a_3d_idx1;
  NestedVector<NestedVector<double>>* ptr_a_3d_idx0;
  vartype aux_last_type_read_for_a = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  // evaluate if-elif-else clause
  {
    bool cpp_found_match = false;
    if (! cpp_found_match) {
      // if statement evaluation with lookahead
      {
        std::streampos cpp_old_streampos = cont.tellg();
        {
          // variable declarations
          int& glob_var_MAT_0d_int_Scalar = var_MAT_0d_int_Scalar;
          int var_MAT_0d_int_Scalar = glob_var_MAT_0d_int_Scalar;
          bool& glob_aux_MAT_read = aux_MAT_read;
          bool aux_MAT_read = glob_aux_MAT_read;
          vartype aux_last_type_read_for_MAT = UNKNOWN;
          int& glob_var_MF_0d_int_Scalar = var_MF_0d_int_Scalar;
          int var_MF_0d_int_Scalar = glob_var_MF_0d_int_Scalar;
          bool& glob_aux_MF_read = aux_MF_read;
          bool aux_MF_read = glob_aux_MF_read;
          vartype aux_last_type_read_for_MF = UNKNOWN;
          int& glob_var_MT_0d_int_Scalar = var_MT_0d_int_Scalar;
          int var_MT_0d_int_Scalar = glob_var_MT_0d_int_Scalar;
          bool& glob_aux_MT_read = aux_MT_read;
          bool aux_MT_read = glob_aux_MT_read;
          vartype aux_last_type_read_for_MT = UNKNOWN;
          double& glob_var_ZA_0d_double_Scalar = var_ZA_0d_double_Scalar;
          double var_ZA_0d_double_Scalar = glob_var_ZA_0d_double_Scalar;
          bool& glob_aux_ZA_read = aux_ZA_read;
          bool aux_ZA_read = glob_aux_ZA_read;
          vartype aux_last_type_read_for_ZA = UNKNOWN;
          double& glob_var_AWR_0d_double_Scalar = var_AWR_0d_double_Scalar;
          double var_AWR_0d_double_Scalar = glob_var_AWR_0d_double_Scalar;
          bool& glob_aux_AWR_read = aux_AWR_read;
          bool aux_AWR_read = glob_aux_AWR_read;
          vartype aux_last_type_read_for_AWR = UNKNOWN;
          int& glob_var_LI_0d_int_Scalar = var_LI_0d_int_Scalar;
          int var_LI_0d_int_Scalar = glob_var_LI_0d_int_Scalar;
          bool& glob_aux_LI_read = aux_LI_read;
          bool aux_LI_read = glob_aux_LI_read;
          vartype aux_last_type_read_for_LI = UNKNOWN;
          int& glob_var_NK_0d_int_Scalar = var_NK_0d_int_Scalar;
          int var_NK_0d_int_Scalar = glob_var_NK_0d_int_Scalar;
          bool& glob_aux_NK_read = aux_NK_read;
          bool aux_NK_read = glob_aux_NK_read;
          vartype aux_last_type_read_for_NK = UNKNOWN;
          cpp_line = cpp_read_line(cont);
          // read CONT record
          // assign expression to variable ZA
          var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
          aux_ZA_read = true;
          if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_ZA = SCALAR_DOUBLE;
          // assign expression to variable AWR
          var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
          aux_AWR_read = true;
          if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_AWR = SCALAR_DOUBLE;
          // assign expression to variable LI
          var_LI_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
          aux_LI_read = true;
          if ((aux_last_type_read_for_LI != SCALAR_INT && aux_last_type_read_for_LI != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_LI = SCALAR_INT;
          // assign expression to variable NK
          var_NK_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
          aux_NK_read = true;
          if ((aux_last_type_read_for_NK != SCALAR_INT && aux_last_type_read_for_NK != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NK = SCALAR_INT;
          if ((((((((aux_LI_read == true)) && ((var_LI_0d_int_Scalar)==(1)))))))) {
            cpp_found_match = true;
          }
          cont.seekg(cpp_old_streampos);
        }
        if (cpp_found_match) {
          cpp_line = cpp_read_line(cont);
          // read CONT record
          // assign expression to variable ZA
          var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
          aux_ZA_read = true;
          if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_ZA = SCALAR_DOUBLE;
          // assign expression to variable AWR
          var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
          aux_AWR_read = true;
          if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_AWR = SCALAR_DOUBLE;
          // assign expression to variable LI
          var_LI_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
          aux_LI_read = true;
          if ((aux_last_type_read_for_LI != SCALAR_INT && aux_last_type_read_for_LI != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_LI = SCALAR_INT;
          // assign expression to variable NK
          var_NK_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
          aux_NK_read = true;
          if ((aux_last_type_read_for_NK != SCALAR_INT && aux_last_type_read_for_NK != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NK = SCALAR_INT;
        }
      }
    }
    if (! cpp_found_match) {
      if (! cpp_found_match) {
        // if statement evaluation with lookahead
        {
          std::streampos cpp_old_streampos = cont.tellg();
          {
            // variable declarations
            int& glob_var_MAT_0d_int_Scalar = var_MAT_0d_int_Scalar;
            int var_MAT_0d_int_Scalar = glob_var_MAT_0d_int_Scalar;
            bool& glob_aux_MAT_read = aux_MAT_read;
            bool aux_MAT_read = glob_aux_MAT_read;
            vartype aux_last_type_read_for_MAT = UNKNOWN;
            int& glob_var_MF_0d_int_Scalar = var_MF_0d_int_Scalar;
            int var_MF_0d_int_Scalar = glob_var_MF_0d_int_Scalar;
            bool& glob_aux_MF_read = aux_MF_read;
            bool aux_MF_read = glob_aux_MF_read;
            vartype aux_last_type_read_for_MF = UNKNOWN;
            int& glob_var_MT_0d_int_Scalar = var_MT_0d_int_Scalar;
            int var_MT_0d_int_Scalar = glob_var_MT_0d_int_Scalar;
            bool& glob_aux_MT_read = aux_MT_read;
            bool aux_MT_read = glob_aux_MT_read;
            vartype aux_last_type_read_for_MT = UNKNOWN;
            double& glob_var_ZA_0d_double_Scalar = var_ZA_0d_double_Scalar;
            double var_ZA_0d_double_Scalar = glob_var_ZA_0d_double_Scalar;
            bool& glob_aux_ZA_read = aux_ZA_read;
            bool aux_ZA_read = glob_aux_ZA_read;
            vartype aux_last_type_read_for_ZA = UNKNOWN;
            double& glob_var_AWR_0d_double_Scalar = var_AWR_0d_double_Scalar;
            double var_AWR_0d_double_Scalar = glob_var_AWR_0d_double_Scalar;
            bool& glob_aux_AWR_read = aux_AWR_read;
            bool aux_AWR_read = glob_aux_AWR_read;
            vartype aux_last_type_read_for_AWR = UNKNOWN;
            int& glob_var_LI_0d_int_Scalar = var_LI_0d_int_Scalar;
            int var_LI_0d_int_Scalar = glob_var_LI_0d_int_Scalar;
            bool& glob_aux_LI_read = aux_LI_read;
            bool aux_LI_read = glob_aux_LI_read;
            vartype aux_last_type_read_for_LI = UNKNOWN;
            int& glob_var_LTT_0d_int_Scalar = var_LTT_0d_int_Scalar;
            int var_LTT_0d_int_Scalar = glob_var_LTT_0d_int_Scalar;
            bool& glob_aux_LTT_read = aux_LTT_read;
            bool aux_LTT_read = glob_aux_LTT_read;
            vartype aux_last_type_read_for_LTT = UNKNOWN;
            int& glob_var_NK_0d_int_Scalar = var_NK_0d_int_Scalar;
            int var_NK_0d_int_Scalar = glob_var_NK_0d_int_Scalar;
            bool& glob_aux_NK_read = aux_NK_read;
            bool aux_NK_read = glob_aux_NK_read;
            vartype aux_last_type_read_for_NK = UNKNOWN;
            int& glob_var_NI_0d_int_Scalar = var_NI_0d_int_Scalar;
            int var_NI_0d_int_Scalar = glob_var_NI_0d_int_Scalar;
            bool& glob_aux_NI_read = aux_NI_read;
            bool aux_NI_read = glob_aux_NI_read;
            vartype aux_last_type_read_for_NI = UNKNOWN;
            cpp_line = cpp_read_line(cont);
            // read CONT record
            // assign expression to variable ZA
            var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_ZA_read = true;
            if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_ZA = SCALAR_DOUBLE;
            // assign expression to variable AWR
            var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_AWR_read = true;
            if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_AWR = SCALAR_DOUBLE;
            // assign expression to variable LI
            var_LI_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
            aux_LI_read = true;
            if ((aux_last_type_read_for_LI != SCALAR_INT && aux_last_type_read_for_LI != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LI = SCALAR_INT;
            // assign expression to variable LTT
            var_LTT_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
            aux_LTT_read = true;
            if ((aux_last_type_read_for_LTT != SCALAR_INT && aux_last_type_read_for_LTT != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LTT = SCALAR_INT;
            // assign expression to variable NK
            var_NK_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
            aux_NK_read = true;
            if ((aux_last_type_read_for_NK != SCALAR_INT && aux_last_type_read_for_NK != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NK = SCALAR_INT;
            // assign expression to variable NI
            var_NI_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
            aux_NI_read = true;
            if ((aux_last_type_read_for_NI != SCALAR_INT && aux_last_type_read_for_NI != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NI = SCALAR_INT;
            if (((((((((aux_LI_read == true)) && ((var_LI_0d_int_Scalar)==(0)))))&&((((aux_LTT_read == true)) && ((var_LTT_0d_int_Scalar)==(1)))))))) {
              cpp_found_match = true;
            }
            cont.seekg(cpp_old_streampos);
          }
          if (cpp_found_match) {
            cpp_line = cpp_read_line(cont);
            // read CONT record
            // assign expression to variable ZA
            var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_ZA_read = true;
            if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_ZA = SCALAR_DOUBLE;
            // assign expression to variable AWR
            var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_AWR_read = true;
            if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_AWR = SCALAR_DOUBLE;
            // assign expression to variable LI
            var_LI_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
            aux_LI_read = true;
            if ((aux_last_type_read_for_LI != SCALAR_INT && aux_last_type_read_for_LI != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LI = SCALAR_INT;
            // assign expression to variable LTT
            var_LTT_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
            aux_LTT_read = true;
            if ((aux_last_type_read_for_LTT != SCALAR_INT && aux_last_type_read_for_LTT != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LTT = SCALAR_INT;
            // assign expression to variable NK
            var_NK_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
            aux_NK_read = true;
            if ((aux_last_type_read_for_NK != SCALAR_INT && aux_last_type_read_for_NK != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NK = SCALAR_INT;
            // assign expression to variable NI
            var_NI_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
            aux_NI_read = true;
            if ((aux_last_type_read_for_NI != SCALAR_INT && aux_last_type_read_for_NI != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NI = SCALAR_INT;

            for (int var_k_0d_int_Scalar = 1;
               var_k_0d_int_Scalar <= var_NI_0d_int_Scalar; var_k_0d_int_Scalar++) {
              bool aux_k_read = true;
              cpp_line = cpp_read_line(cont);
              // read CONT record
              // assign expression to variable EG
              var_EG_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 0));
              if ((aux_last_type_read_for_EG != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_EG != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_EG = NESTEDVECTOR_DOUBLE;
              // assign expression to variable ES
              var_ES_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 1));
              if ((aux_last_type_read_for_ES != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ES != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_ES = NESTEDVECTOR_DOUBLE;
            }

            for (int var_k_0d_int_Scalar = (var_NI_0d_int_Scalar+1);
               var_k_0d_int_Scalar <= (var_NI_0d_int_Scalar+(var_NK_0d_int_Scalar-var_NI_0d_int_Scalar)); var_k_0d_int_Scalar++) {
              bool aux_k_read = true;
              // read TAB2 record
              cpp_line = cpp_read_line(cont);
              if ((! var_EG_1d_double_NestedVector.contains(var_k_0d_int_Scalar))) {
                // assign expression to variable EG
                var_EG_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 0));
                if ((aux_last_type_read_for_EG != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_EG != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_EG = NESTEDVECTOR_DOUBLE;
              }
              if ((! var_ES_1d_double_NestedVector.contains(var_k_0d_int_Scalar))) {
                // assign expression to variable ES
                var_ES_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 1));
                if ((aux_last_type_read_for_ES != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ES != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_ES = NESTEDVECTOR_DOUBLE;
              }
              // assign expression to variable NE
              var_NE_1d_int_NestedVector.set(var_k_0d_int_Scalar, cpp_read_int_field(cpp_line, 5));
              if ((aux_last_type_read_for_NE != NESTEDVECTOR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NE = NESTEDVECTOR_INT;

              {
                  py::dict cpp_parent_dict = cpp_current_dict;
                  if (! cpp_parent_dict.contains("E_interpol")) {
                    cpp_parent_dict["E_interpol"] = py::dict();
                  }
                  py::dict cpp_current_dict = cpp_parent_dict["E_interpol"];

                  if (! cpp_current_dict.contains(py::cast(var_k_0d_int_Scalar))) {
                    cpp_current_dict[py::cast(var_k_0d_int_Scalar)] = py::dict();
                  }
                  cpp_current_dict = cpp_current_dict[py::cast(var_k_0d_int_Scalar)];
                // variable declarations
                std::vector<int> var_INT_0d_intvec_Scalar;
                bool aux_INT_read = false;
                vartype aux_last_type_read_for_INT = UNKNOWN;
                std::vector<int> var_NBT_0d_intvec_Scalar;
                bool aux_NBT_read = false;
                vartype aux_last_type_read_for_NBT = UNKNOWN;
                {
                  Tab2Body tab_body = read_tab2_body(cont, cpp_read_int_field(cpp_line, 4));
                  // assign expression to variable INT
                  var_INT_0d_intvec_Scalar = tab_body.INT;
                  aux_INT_read = true;
                  if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_INT = SCALAR_INTVEC;
                  // assign expression to variable NBT
                  var_NBT_0d_intvec_Scalar = tab_body.NBT;
                  aux_NBT_read = true;
                  if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_NBT = SCALAR_INTVEC;
                }
                // store data in Python dictionary
                if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
                  cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
                }
                if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
                  cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
                }
                cpp_current_dict = cpp_parent_dict;
              }
              ptr_E_2d_idx0 = var_E_2d_double_NestedVector.prepare(var_k_0d_int_Scalar);
              ptr_a_3d_idx0 = var_a_3d_double_NestedVector.prepare(var_k_0d_int_Scalar);

              for (int var_l_0d_int_Scalar = 1;
                 var_l_0d_int_Scalar <= var_NE_1d_int_NestedVector[var_k_0d_int_Scalar]; var_l_0d_int_Scalar++) {
                bool aux_l_read = true;
                cpp_line = cpp_read_line(cont);
                // read LIST record
                // assign expression to variable E
                ptr_E_2d_idx0->set(var_l_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 1));
                if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
                // assign expression to variable NL
                ptr_NL_2d_idx0 = var_NL_2d_int_NestedVector.prepare(var_k_0d_int_Scalar);
                ptr_NL_2d_idx0->set(var_l_0d_int_Scalar, cpp_read_int_field(cpp_line, 4));
                if ((aux_last_type_read_for_NL != NESTEDVECTOR_INT && aux_last_type_read_for_NL != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_NL = NESTEDVECTOR_INT;
                {
                  int cpp_npl = cpp_read_int_field(cpp_line, 4);
                  cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                  int cpp_j = 0;
                  // read LIST body
                  ptr_a_3d_idx1 = ptr_a_3d_idx0->prepare(var_l_0d_int_Scalar);

                  for (int var_m_0d_int_Scalar = 1;
                     var_m_0d_int_Scalar <= var_NL_2d_int_NestedVector[var_k_0d_int_Scalar][var_l_0d_int_Scalar]; var_m_0d_int_Scalar++) {
                    bool aux_m_read = true;
                    // read LIST body
                    // assign expression to variable a
                    ptr_a_3d_idx1->set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                    if ((aux_last_type_read_for_a != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_a != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_a = NESTEDVECTOR_DOUBLE;
                  }
                }
              }
            }
          }
        }
      }
    }
    if (! cpp_found_match) {
      if (! cpp_found_match) {
        // if statement evaluation with lookahead
        {
          std::streampos cpp_old_streampos = cont.tellg();
          {
            // variable declarations
            int& glob_var_MAT_0d_int_Scalar = var_MAT_0d_int_Scalar;
            int var_MAT_0d_int_Scalar = glob_var_MAT_0d_int_Scalar;
            bool& glob_aux_MAT_read = aux_MAT_read;
            bool aux_MAT_read = glob_aux_MAT_read;
            vartype aux_last_type_read_for_MAT = UNKNOWN;
            int& glob_var_MF_0d_int_Scalar = var_MF_0d_int_Scalar;
            int var_MF_0d_int_Scalar = glob_var_MF_0d_int_Scalar;
            bool& glob_aux_MF_read = aux_MF_read;
            bool aux_MF_read = glob_aux_MF_read;
            vartype aux_last_type_read_for_MF = UNKNOWN;
            int& glob_var_MT_0d_int_Scalar = var_MT_0d_int_Scalar;
            int var_MT_0d_int_Scalar = glob_var_MT_0d_int_Scalar;
            bool& glob_aux_MT_read = aux_MT_read;
            bool aux_MT_read = glob_aux_MT_read;
            vartype aux_last_type_read_for_MT = UNKNOWN;
            double& glob_var_ZA_0d_double_Scalar = var_ZA_0d_double_Scalar;
            double var_ZA_0d_double_Scalar = glob_var_ZA_0d_double_Scalar;
            bool& glob_aux_ZA_read = aux_ZA_read;
            bool aux_ZA_read = glob_aux_ZA_read;
            vartype aux_last_type_read_for_ZA = UNKNOWN;
            double& glob_var_AWR_0d_double_Scalar = var_AWR_0d_double_Scalar;
            double var_AWR_0d_double_Scalar = glob_var_AWR_0d_double_Scalar;
            bool& glob_aux_AWR_read = aux_AWR_read;
            bool aux_AWR_read = glob_aux_AWR_read;
            vartype aux_last_type_read_for_AWR = UNKNOWN;
            int& glob_var_LI_0d_int_Scalar = var_LI_0d_int_Scalar;
            int var_LI_0d_int_Scalar = glob_var_LI_0d_int_Scalar;
            bool& glob_aux_LI_read = aux_LI_read;
            bool aux_LI_read = glob_aux_LI_read;
            vartype aux_last_type_read_for_LI = UNKNOWN;
            int& glob_var_LTT_0d_int_Scalar = var_LTT_0d_int_Scalar;
            int var_LTT_0d_int_Scalar = glob_var_LTT_0d_int_Scalar;
            bool& glob_aux_LTT_read = aux_LTT_read;
            bool aux_LTT_read = glob_aux_LTT_read;
            vartype aux_last_type_read_for_LTT = UNKNOWN;
            int& glob_var_NK_0d_int_Scalar = var_NK_0d_int_Scalar;
            int var_NK_0d_int_Scalar = glob_var_NK_0d_int_Scalar;
            bool& glob_aux_NK_read = aux_NK_read;
            bool aux_NK_read = glob_aux_NK_read;
            vartype aux_last_type_read_for_NK = UNKNOWN;
            int& glob_var_NI_0d_int_Scalar = var_NI_0d_int_Scalar;
            int var_NI_0d_int_Scalar = glob_var_NI_0d_int_Scalar;
            bool& glob_aux_NI_read = aux_NI_read;
            bool aux_NI_read = glob_aux_NI_read;
            vartype aux_last_type_read_for_NI = UNKNOWN;
            cpp_line = cpp_read_line(cont);
            // read CONT record
            // assign expression to variable ZA
            var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_ZA_read = true;
            if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_ZA = SCALAR_DOUBLE;
            // assign expression to variable AWR
            var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_AWR_read = true;
            if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_AWR = SCALAR_DOUBLE;
            // assign expression to variable LI
            var_LI_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
            aux_LI_read = true;
            if ((aux_last_type_read_for_LI != SCALAR_INT && aux_last_type_read_for_LI != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LI = SCALAR_INT;
            // assign expression to variable LTT
            var_LTT_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
            aux_LTT_read = true;
            if ((aux_last_type_read_for_LTT != SCALAR_INT && aux_last_type_read_for_LTT != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LTT = SCALAR_INT;
            // assign expression to variable NK
            var_NK_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
            aux_NK_read = true;
            if ((aux_last_type_read_for_NK != SCALAR_INT && aux_last_type_read_for_NK != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NK = SCALAR_INT;
            // assign expression to variable NI
            var_NI_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
            aux_NI_read = true;
            if ((aux_last_type_read_for_NI != SCALAR_INT && aux_last_type_read_for_NI != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NI = SCALAR_INT;
            if (((((((((aux_LI_read == true)) && ((var_LI_0d_int_Scalar)==(0)))))&&((((aux_LTT_read == true)) && ((var_LTT_0d_int_Scalar)==(2)))))))) {
              cpp_found_match = true;
            }
            cont.seekg(cpp_old_streampos);
          }
          if (cpp_found_match) {
            cpp_line = cpp_read_line(cont);
            // read CONT record
            // assign expression to variable ZA
            var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_ZA_read = true;
            if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_ZA = SCALAR_DOUBLE;
            // assign expression to variable AWR
            var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_AWR_read = true;
            if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_AWR = SCALAR_DOUBLE;
            // assign expression to variable LI
            var_LI_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
            aux_LI_read = true;
            if ((aux_last_type_read_for_LI != SCALAR_INT && aux_last_type_read_for_LI != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LI = SCALAR_INT;
            // assign expression to variable LTT
            var_LTT_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
            aux_LTT_read = true;
            if ((aux_last_type_read_for_LTT != SCALAR_INT && aux_last_type_read_for_LTT != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_LTT = SCALAR_INT;
            // assign expression to variable NK
            var_NK_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
            aux_NK_read = true;
            if ((aux_last_type_read_for_NK != SCALAR_INT && aux_last_type_read_for_NK != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NK = SCALAR_INT;
            // assign expression to variable NI
            var_NI_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
            aux_NI_read = true;
            if ((aux_last_type_read_for_NI != SCALAR_INT && aux_last_type_read_for_NI != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NI = SCALAR_INT;
          }
        }
      }
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LI == SCALAR_INT) && (aux_LI_read == true))) {
    cpp_current_dict["LI"] = var_LI_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NK == SCALAR_INT) && (aux_NK_read == true))) {
    cpp_current_dict["NK"] = var_NK_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_LTT == SCALAR_INT) && (aux_LTT_read == true))) {
    cpp_current_dict["LTT"] = var_LTT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NI == SCALAR_INT) && (aux_NI_read == true))) {
    cpp_current_dict["NI"] = var_NI_0d_int_Scalar;
  }
  if ((var_EG_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_EG_1d_double_NestedVector;
    cpp_current_dict["EG"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["EG"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_ES_1d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_ES_1d_double_NestedVector;
    cpp_current_dict["ES"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["ES"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_NE_1d_int_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_NE_1d_int_NestedVector;
    cpp_current_dict["NE"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["NE"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
    }
  }
  if ((var_E_2d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_E_2d_double_NestedVector;
    cpp_current_dict["E"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["E"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
      cpp_curdict0[py::cast(cpp_i1)] = py::dict();
      py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
      for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
        cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
      }
    }
  }
  if ((var_NL_2d_int_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_NL_2d_int_NestedVector;
    cpp_current_dict["NL"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["NL"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
      cpp_curdict0[py::cast(cpp_i1)] = py::dict();
      py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
      for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
        cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
      }
    }
  }
  if ((var_a_3d_double_NestedVector.get_last_index() != -1)) {
    auto& cpp_curvar0 = var_a_3d_double_NestedVector;
    cpp_current_dict["a"] = py::dict();
    py::dict cpp_curdict0 = cpp_current_dict["a"];
    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
      auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
      cpp_curdict0[py::cast(cpp_i1)] = py::dict();
      py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
      for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
        auto& cpp_curvar2 = cpp_curvar1[cpp_i2];
        cpp_curdict1[py::cast(cpp_i2)] = py::dict();
        py::dict cpp_curdict2 = cpp_curdict1[py::cast(cpp_i2)];
        for (int cpp_i3 = cpp_curvar2.get_start_index(); cpp_i3 <= cpp_curvar2.get_last_index(); cpp_i3++) {
          cpp_curdict2[py::cast(cpp_i3)] = cpp_curvar2[cpp_i3];
        }
      }
    }
  }
  return cpp_current_dict;
}

py::dict parse_mf15_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_NC_0d_int_Scalar;
  bool aux_NC_read = false;
  vartype aux_last_type_read_for_NC = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // assign expression to variable NC
  var_NC_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
  aux_NC_read = true;
  if ((aux_last_type_read_for_NC != SCALAR_INT && aux_last_type_read_for_NC != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NC = SCALAR_INT;

  for (int var_j_0d_int_Scalar = 1;
     var_j_0d_int_Scalar <= var_NC_0d_int_Scalar; var_j_0d_int_Scalar++) {
    bool aux_j_read = true;
    // open section subsection

    {
        py::dict cpp_parent_dict = cpp_current_dict;
        if (! cpp_parent_dict.contains("subsection")) {
          cpp_parent_dict["subsection"] = py::dict();
        }
        py::dict cpp_current_dict = cpp_parent_dict["subsection"];

        if (! cpp_current_dict.contains(py::cast(var_j_0d_int_Scalar))) {
          cpp_current_dict[py::cast(var_j_0d_int_Scalar)] = py::dict();
        }
        cpp_current_dict = cpp_current_dict[py::cast(var_j_0d_int_Scalar)];
      // variable declarations
      int var_LF_0d_int_Scalar;
      bool aux_LF_read = false;
      vartype aux_last_type_read_for_LF = UNKNOWN;
      int var_NE_0d_int_Scalar;
      bool aux_NE_read = false;
      vartype aux_last_type_read_for_NE = UNKNOWN;
      std::vector<int> var_INT_0d_intvec_Scalar;
      bool aux_INT_read = false;
      vartype aux_last_type_read_for_INT = UNKNOWN;
      std::vector<int> var_NBT_0d_intvec_Scalar;
      bool aux_NBT_read = false;
      vartype aux_last_type_read_for_NBT = UNKNOWN;
      NestedVector<double> var_E_1d_double_NestedVector;
      vartype aux_last_type_read_for_E = UNKNOWN;
      // evaluate if-elif-else clause
      {
        bool cpp_found_match = false;
        if (! cpp_found_match) {
          // if statement evaluation with lookahead
          {
            std::streampos cpp_old_streampos = cont.tellg();
            {
              // variable declarations
              int& glob_var_LF_0d_int_Scalar = var_LF_0d_int_Scalar;
              int var_LF_0d_int_Scalar = glob_var_LF_0d_int_Scalar;
              bool& glob_aux_LF_read = aux_LF_read;
              bool aux_LF_read = glob_aux_LF_read;
              vartype aux_last_type_read_for_LF = UNKNOWN;
              // read TAB1 record
              cpp_line = cpp_read_line(cont);
              // assign expression to variable LF
              var_LF_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
              aux_LF_read = true;
              if ((aux_last_type_read_for_LF != SCALAR_INT && aux_last_type_read_for_LF != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_LF = SCALAR_INT;
              if ((((((((aux_LF_read == true)) && ((var_LF_0d_int_Scalar)==(1)))))))) {
                cpp_found_match = true;
              }
              cont.seekg(cpp_old_streampos);
            }
            if (cpp_found_match) {
              // read TAB1 record
              cpp_line = cpp_read_line(cont);
              // assign expression to variable LF
              var_LF_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
              aux_LF_read = true;
              if ((aux_last_type_read_for_LF != SCALAR_INT && aux_last_type_read_for_LF != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_LF = SCALAR_INT;

              {
                  py::dict cpp_parent_dict = cpp_current_dict;
                  if (! cpp_parent_dict.contains("rtfm_tab1")) {
                    cpp_parent_dict["rtfm_tab1"] = py::dict();
                  }
                  py::dict cpp_current_dict = cpp_parent_dict["rtfm_tab1"];
                // variable declarations
                std::vector<double> var_Eint_0d_floatvec_Scalar;
                bool aux_Eint_read = false;
                vartype aux_last_type_read_for_Eint = UNKNOWN;
                std::vector<double> var_p_0d_floatvec_Scalar;
                bool aux_p_read = false;
                vartype aux_last_type_read_for_p = UNKNOWN;
                std::vector<int> var_INT_0d_intvec_Scalar;
                bool aux_INT_read = false;
                vartype aux_last_type_read_for_INT = UNKNOWN;
                std::vector<int> var_NBT_0d_intvec_Scalar;
                bool aux_NBT_read = false;
                vartype aux_last_type_read_for_NBT = UNKNOWN;
                {
                  Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                  // assign expression to variable Eint
                  var_Eint_0d_floatvec_Scalar = tab_body.X;
                  aux_Eint_read = true;
                  if ((aux_last_type_read_for_Eint != SCALAR_FLOATVEC && aux_last_type_read_for_Eint != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_Eint = SCALAR_FLOATVEC;
                  // assign expression to variable p
                  var_p_0d_floatvec_Scalar = tab_body.Y;
                  aux_p_read = true;
                  if ((aux_last_type_read_for_p != SCALAR_FLOATVEC && aux_last_type_read_for_p != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_p = SCALAR_FLOATVEC;
                  // assign expression to variable INT
                  var_INT_0d_intvec_Scalar = tab_body.INT;
                  aux_INT_read = true;
                  if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_INT = SCALAR_INTVEC;
                  // assign expression to variable NBT
                  var_NBT_0d_intvec_Scalar = tab_body.NBT;
                  aux_NBT_read = true;
                  if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_NBT = SCALAR_INTVEC;
                }
                // store data in Python dictionary
                if (((aux_last_type_read_for_Eint == SCALAR_FLOATVEC) && (aux_Eint_read == true))) {
                  cpp_current_dict["Eint"] = var_Eint_0d_floatvec_Scalar;
                }
                if (((aux_last_type_read_for_p == SCALAR_FLOATVEC) && (aux_p_read == true))) {
                  cpp_current_dict["p"] = var_p_0d_floatvec_Scalar;
                }
                if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
                  cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
                }
                if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
                  cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
                }
                cpp_current_dict = cpp_parent_dict;
              }
              // read TAB2 record
              cpp_line = cpp_read_line(cont);
              // assign expression to variable NE
              var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
              aux_NE_read = true;
              if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NE = SCALAR_INT;
              {
                Tab2Body tab_body = read_tab2_body(cont, cpp_read_int_field(cpp_line, 4));
                // assign expression to variable INT
                var_INT_0d_intvec_Scalar = tab_body.INT;
                aux_INT_read = true;
                if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_INT = SCALAR_INTVEC;
                // assign expression to variable NBT
                var_NBT_0d_intvec_Scalar = tab_body.NBT;
                aux_NBT_read = true;
                if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_NBT = SCALAR_INTVEC;
              }

              for (int var_k_0d_int_Scalar = 1;
                 var_k_0d_int_Scalar <= var_NE_0d_int_Scalar; var_k_0d_int_Scalar++) {
                bool aux_k_read = true;
                // read TAB1 record
                cpp_line = cpp_read_line(cont);
                // assign expression to variable E
                var_E_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_read_float_field(cpp_line.c_str(), 1));
                if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;

                {
                    py::dict cpp_parent_dict = cpp_current_dict;
                    if (! cpp_parent_dict.contains("rtfm1_tab")) {
                      cpp_parent_dict["rtfm1_tab"] = py::dict();
                    }
                    py::dict cpp_current_dict = cpp_parent_dict["rtfm1_tab"];

                    if (! cpp_current_dict.contains(py::cast(var_k_0d_int_Scalar))) {
                      cpp_current_dict[py::cast(var_k_0d_int_Scalar)] = py::dict();
                    }
                    cpp_current_dict = cpp_current_dict[py::cast(var_k_0d_int_Scalar)];
                  // variable declarations
                  std::vector<double> var_Egamma_0d_floatvec_Scalar;
                  bool aux_Egamma_read = false;
                  vartype aux_last_type_read_for_Egamma = UNKNOWN;
                  std::vector<double> var_g_0d_floatvec_Scalar;
                  bool aux_g_read = false;
                  vartype aux_last_type_read_for_g = UNKNOWN;
                  std::vector<int> var_INT_0d_intvec_Scalar;
                  bool aux_INT_read = false;
                  vartype aux_last_type_read_for_INT = UNKNOWN;
                  std::vector<int> var_NBT_0d_intvec_Scalar;
                  bool aux_NBT_read = false;
                  vartype aux_last_type_read_for_NBT = UNKNOWN;
                  {
                    Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
                    // assign expression to variable Egamma
                    var_Egamma_0d_floatvec_Scalar = tab_body.X;
                    aux_Egamma_read = true;
                    if ((aux_last_type_read_for_Egamma != SCALAR_FLOATVEC && aux_last_type_read_for_Egamma != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_Egamma = SCALAR_FLOATVEC;
                    // assign expression to variable g
                    var_g_0d_floatvec_Scalar = tab_body.Y;
                    aux_g_read = true;
                    if ((aux_last_type_read_for_g != SCALAR_FLOATVEC && aux_last_type_read_for_g != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_g = SCALAR_FLOATVEC;
                    if ((! (aux_INT_read == true))) {
                      // assign expression to variable INT
                      var_INT_0d_intvec_Scalar = tab_body.INT;
                      aux_INT_read = true;
                      if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_INT = SCALAR_INTVEC;
                    }
                    if ((! (aux_NBT_read == true))) {
                      // assign expression to variable NBT
                      var_NBT_0d_intvec_Scalar = tab_body.NBT;
                      aux_NBT_read = true;
                      if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_NBT = SCALAR_INTVEC;
                    }
                  }
                  // store data in Python dictionary
                  if (((aux_last_type_read_for_Egamma == SCALAR_FLOATVEC) && (aux_Egamma_read == true))) {
                    cpp_current_dict["Egamma"] = var_Egamma_0d_floatvec_Scalar;
                  }
                  if (((aux_last_type_read_for_g == SCALAR_FLOATVEC) && (aux_g_read == true))) {
                    cpp_current_dict["g"] = var_g_0d_floatvec_Scalar;
                  }
                  if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
                    cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
                  }
                  if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
                    cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
                  }
                  cpp_current_dict = cpp_parent_dict;
                }
              }
            }
          }
        }
      }
      // store data in Python dictionary
      if (((aux_last_type_read_for_LF == SCALAR_INT) && (aux_LF_read == true))) {
        cpp_current_dict["LF"] = var_LF_0d_int_Scalar;
      }
      if (((aux_last_type_read_for_NE == SCALAR_INT) && (aux_NE_read == true))) {
        cpp_current_dict["NE"] = var_NE_0d_int_Scalar;
      }
      if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
        cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
      }
      if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
        cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
      }
      if ((var_E_1d_double_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_E_1d_double_NestedVector;
        cpp_current_dict["E"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["E"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
        }
      }
      cpp_current_dict = cpp_parent_dict;
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_NC == SCALAR_INT) && (aux_NC_read == true))) {
    cpp_current_dict["NC"] = var_NC_0d_int_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_mf23_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  double var_EPE_0d_double_Scalar;
  bool aux_EPE_read = false;
  vartype aux_last_type_read_for_EPE = UNKNOWN;
  double var_EFL_0d_double_Scalar;
  bool aux_EFL_read = false;
  vartype aux_last_type_read_for_EFL = UNKNOWN;
  std::vector<double> var_Eint_0d_floatvec_Scalar;
  bool aux_Eint_read = false;
  vartype aux_last_type_read_for_Eint = UNKNOWN;
  std::vector<double> var_sigma_0d_floatvec_Scalar;
  bool aux_sigma_read = false;
  vartype aux_last_type_read_for_sigma = UNKNOWN;
  std::vector<int> var_INT_0d_intvec_Scalar;
  bool aux_INT_read = false;
  vartype aux_last_type_read_for_INT = UNKNOWN;
  std::vector<int> var_NBT_0d_intvec_Scalar;
  bool aux_NBT_read = false;
  vartype aux_last_type_read_for_NBT = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // read TAB1 record
  cpp_line = cpp_read_line(cont);
  // assign expression to variable EPE
  var_EPE_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_EPE_read = true;
  if ((aux_last_type_read_for_EPE != SCALAR_DOUBLE && aux_last_type_read_for_EPE != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_EPE = SCALAR_DOUBLE;
  // assign expression to variable EFL
  var_EFL_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_EFL_read = true;
  if ((aux_last_type_read_for_EFL != SCALAR_DOUBLE && aux_last_type_read_for_EFL != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_EFL = SCALAR_DOUBLE;
  {
    Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
    // assign expression to variable Eint
    var_Eint_0d_floatvec_Scalar = tab_body.X;
    aux_Eint_read = true;
    if ((aux_last_type_read_for_Eint != SCALAR_FLOATVEC && aux_last_type_read_for_Eint != UNKNOWN)) {
      raise_vartype_mismatch();
    }
    aux_last_type_read_for_Eint = SCALAR_FLOATVEC;
    // assign expression to variable sigma
    var_sigma_0d_floatvec_Scalar = tab_body.Y;
    aux_sigma_read = true;
    if ((aux_last_type_read_for_sigma != SCALAR_FLOATVEC && aux_last_type_read_for_sigma != UNKNOWN)) {
      raise_vartype_mismatch();
    }
    aux_last_type_read_for_sigma = SCALAR_FLOATVEC;
    // assign expression to variable INT
    var_INT_0d_intvec_Scalar = tab_body.INT;
    aux_INT_read = true;
    if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
      raise_vartype_mismatch();
    }
    aux_last_type_read_for_INT = SCALAR_INTVEC;
    // assign expression to variable NBT
    var_NBT_0d_intvec_Scalar = tab_body.NBT;
    aux_NBT_read = true;
    if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
      raise_vartype_mismatch();
    }
    aux_last_type_read_for_NBT = SCALAR_INTVEC;
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_EPE == SCALAR_DOUBLE) && (aux_EPE_read == true))) {
    cpp_current_dict["EPE"] = var_EPE_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_EFL == SCALAR_DOUBLE) && (aux_EFL_read == true))) {
    cpp_current_dict["EFL"] = var_EFL_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_Eint == SCALAR_FLOATVEC) && (aux_Eint_read == true))) {
    cpp_current_dict["Eint"] = var_Eint_0d_floatvec_Scalar;
  }
  if (((aux_last_type_read_for_sigma == SCALAR_FLOATVEC) && (aux_sigma_read == true))) {
    cpp_current_dict["sigma"] = var_sigma_0d_floatvec_Scalar;
  }
  if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
    cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
  }
  if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
    cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_mf26_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_mf27_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  double var_Z_0d_double_Scalar;
  bool aux_Z_read = false;
  vartype aux_last_type_read_for_Z = UNKNOWN;
  std::vector<double> var_xint_0d_floatvec_Scalar;
  bool aux_xint_read = false;
  vartype aux_last_type_read_for_xint = UNKNOWN;
  std::vector<double> var_H_0d_floatvec_Scalar;
  bool aux_H_read = false;
  vartype aux_last_type_read_for_H = UNKNOWN;
  std::vector<int> var_INT_0d_intvec_Scalar;
  bool aux_INT_read = false;
  vartype aux_last_type_read_for_INT = UNKNOWN;
  std::vector<int> var_NBT_0d_intvec_Scalar;
  bool aux_NBT_read = false;
  vartype aux_last_type_read_for_NBT = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // read TAB1 record
  cpp_line = cpp_read_line(cont);
  // assign expression to variable Z
  var_Z_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_Z_read = true;
  if ((aux_last_type_read_for_Z != SCALAR_DOUBLE && aux_last_type_read_for_Z != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_Z = SCALAR_DOUBLE;
  {
    Tab1Body tab_body = read_tab1_body(cont, cpp_read_int_field(cpp_line, 4), cpp_read_int_field(cpp_line, 5));
    // assign expression to variable xint
    var_xint_0d_floatvec_Scalar = tab_body.X;
    aux_xint_read = true;
    if ((aux_last_type_read_for_xint != SCALAR_FLOATVEC && aux_last_type_read_for_xint != UNKNOWN)) {
      raise_vartype_mismatch();
    }
    aux_last_type_read_for_xint = SCALAR_FLOATVEC;
    // assign expression to variable H
    var_H_0d_floatvec_Scalar = tab_body.Y;
    aux_H_read = true;
    if ((aux_last_type_read_for_H != SCALAR_FLOATVEC && aux_last_type_read_for_H != UNKNOWN)) {
      raise_vartype_mismatch();
    }
    aux_last_type_read_for_H = SCALAR_FLOATVEC;
    // assign expression to variable INT
    var_INT_0d_intvec_Scalar = tab_body.INT;
    aux_INT_read = true;
    if ((aux_last_type_read_for_INT != SCALAR_INTVEC && aux_last_type_read_for_INT != UNKNOWN)) {
      raise_vartype_mismatch();
    }
    aux_last_type_read_for_INT = SCALAR_INTVEC;
    // assign expression to variable NBT
    var_NBT_0d_intvec_Scalar = tab_body.NBT;
    aux_NBT_read = true;
    if ((aux_last_type_read_for_NBT != SCALAR_INTVEC && aux_last_type_read_for_NBT != UNKNOWN)) {
      raise_vartype_mismatch();
    }
    aux_last_type_read_for_NBT = SCALAR_INTVEC;
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_Z == SCALAR_DOUBLE) && (aux_Z_read == true))) {
    cpp_current_dict["Z"] = var_Z_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_xint == SCALAR_FLOATVEC) && (aux_xint_read == true))) {
    cpp_current_dict["xint"] = var_xint_0d_floatvec_Scalar;
  }
  if (((aux_last_type_read_for_H == SCALAR_FLOATVEC) && (aux_H_read == true))) {
    cpp_current_dict["H"] = var_H_0d_floatvec_Scalar;
  }
  if (((aux_last_type_read_for_INT == SCALAR_INTVEC) && (aux_INT_read == true))) {
    cpp_current_dict["INT"] = var_INT_0d_intvec_Scalar;
  }
  if (((aux_last_type_read_for_NBT == SCALAR_INTVEC) && (aux_NBT_read == true))) {
    cpp_current_dict["NBT"] = var_NBT_0d_intvec_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_mf28_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_mf31_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_MTL_0d_int_Scalar;
  bool aux_MTL_read = false;
  vartype aux_last_type_read_for_MTL = UNKNOWN;
  int var_NL_0d_int_Scalar;
  bool aux_NL_read = false;
  vartype aux_last_type_read_for_NL = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // assign expression to variable MTL
  var_MTL_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
  aux_MTL_read = true;
  if ((aux_last_type_read_for_MTL != SCALAR_INT && aux_last_type_read_for_MTL != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MTL = SCALAR_INT;
  // assign expression to variable NL
  var_NL_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
  aux_NL_read = true;
  if ((aux_last_type_read_for_NL != SCALAR_INT && aux_last_type_read_for_NL != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NL = SCALAR_INT;
  // evaluate if-elif-else clause
  {
    bool cpp_found_match = false;
    if (! cpp_found_match) {
      if ((((((((aux_MTL_read == true)) && ((var_MTL_0d_int_Scalar)==(0)))))))) {
        // if statement evaluation
        cpp_found_match = true;

        for (int var_n_0d_int_Scalar = 1;
           var_n_0d_int_Scalar <= var_NL_0d_int_Scalar; var_n_0d_int_Scalar++) {
          bool aux_n_read = true;
          // open section subsection

          {
              py::dict cpp_parent_dict = cpp_current_dict;
              if (! cpp_parent_dict.contains("subsection")) {
                cpp_parent_dict["subsection"] = py::dict();
              }
              py::dict cpp_current_dict = cpp_parent_dict["subsection"];

              if (! cpp_current_dict.contains(py::cast(var_n_0d_int_Scalar))) {
                cpp_current_dict[py::cast(var_n_0d_int_Scalar)] = py::dict();
              }
              cpp_current_dict = cpp_current_dict[py::cast(var_n_0d_int_Scalar)];
            // variable declarations
            double var_XMF1_0d_double_Scalar;
            bool aux_XMF1_read = false;
            vartype aux_last_type_read_for_XMF1 = UNKNOWN;
            double var_XLFS1_0d_double_Scalar;
            bool aux_XLFS1_read = false;
            vartype aux_last_type_read_for_XLFS1 = UNKNOWN;
            int var_MAT1_0d_int_Scalar;
            bool aux_MAT1_read = false;
            vartype aux_last_type_read_for_MAT1 = UNKNOWN;
            int var_MT1_0d_int_Scalar;
            bool aux_MT1_read = false;
            vartype aux_last_type_read_for_MT1 = UNKNOWN;
            int var_NC_0d_int_Scalar;
            bool aux_NC_read = false;
            vartype aux_last_type_read_for_NC = UNKNOWN;
            int var_NI_0d_int_Scalar;
            bool aux_NI_read = false;
            vartype aux_last_type_read_for_NI = UNKNOWN;
            cpp_line = cpp_read_line(cont);
            // read CONT record
            // assign expression to variable XMF1
            var_XMF1_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_XMF1_read = true;
            if ((aux_last_type_read_for_XMF1 != SCALAR_DOUBLE && aux_last_type_read_for_XMF1 != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_XMF1 = SCALAR_DOUBLE;
            // assign expression to variable XLFS1
            var_XLFS1_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_XLFS1_read = true;
            if ((aux_last_type_read_for_XLFS1 != SCALAR_DOUBLE && aux_last_type_read_for_XLFS1 != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_XLFS1 = SCALAR_DOUBLE;
            // assign expression to variable MAT1
            var_MAT1_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
            aux_MAT1_read = true;
            if ((aux_last_type_read_for_MAT1 != SCALAR_INT && aux_last_type_read_for_MAT1 != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_MAT1 = SCALAR_INT;
            // assign expression to variable MT1
            var_MT1_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
            aux_MT1_read = true;
            if ((aux_last_type_read_for_MT1 != SCALAR_INT && aux_last_type_read_for_MT1 != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_MT1 = SCALAR_INT;
            // assign expression to variable NC
            var_NC_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
            aux_NC_read = true;
            if ((aux_last_type_read_for_NC != SCALAR_INT && aux_last_type_read_for_NC != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NC = SCALAR_INT;
            // assign expression to variable NI
            var_NI_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
            aux_NI_read = true;
            if ((aux_last_type_read_for_NI != SCALAR_INT && aux_last_type_read_for_NI != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NI = SCALAR_INT;

            for (int var_m_0d_int_Scalar = 1;
               var_m_0d_int_Scalar <= var_NC_0d_int_Scalar; var_m_0d_int_Scalar++) {
              bool aux_m_read = true;
              // open section nc_subsection

              {
                  py::dict cpp_parent_dict = cpp_current_dict;
                  if (! cpp_parent_dict.contains("nc_subsection")) {
                    cpp_parent_dict["nc_subsection"] = py::dict();
                  }
                  py::dict cpp_current_dict = cpp_parent_dict["nc_subsection"];

                  if (! cpp_current_dict.contains(py::cast(var_m_0d_int_Scalar))) {
                    cpp_current_dict[py::cast(var_m_0d_int_Scalar)] = py::dict();
                  }
                  cpp_current_dict = cpp_current_dict[py::cast(var_m_0d_int_Scalar)];
                // variable declarations
                int var_LTY_0d_int_Scalar;
                bool aux_LTY_read = false;
                vartype aux_last_type_read_for_LTY = UNKNOWN;
                double var_E1_0d_double_Scalar;
                bool aux_E1_read = false;
                vartype aux_last_type_read_for_E1 = UNKNOWN;
                double var_E2_0d_double_Scalar;
                bool aux_E2_read = false;
                vartype aux_last_type_read_for_E2 = UNKNOWN;
                int cpp_int_val;
                bool aux_cpp_int_val_read = false;
                vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                int var_NCI_0d_int_Scalar;
                bool aux_NCI_read = false;
                vartype aux_last_type_read_for_NCI = UNKNOWN;
                NestedVector<double> var_C_1d_double_NestedVector;
                vartype aux_last_type_read_for_C = UNKNOWN;
                NestedVector<double> var_XMT_1d_double_NestedVector;
                vartype aux_last_type_read_for_XMT = UNKNOWN;
                int var_MATS_0d_int_Scalar;
                bool aux_MATS_read = false;
                vartype aux_last_type_read_for_MATS = UNKNOWN;
                int var_MTS_0d_int_Scalar;
                bool aux_MTS_read = false;
                vartype aux_last_type_read_for_MTS = UNKNOWN;
                int var_NEI_0d_int_Scalar;
                bool aux_NEI_read = false;
                vartype aux_last_type_read_for_NEI = UNKNOWN;
                double var_XMFS_0d_double_Scalar;
                bool aux_XMFS_read = false;
                vartype aux_last_type_read_for_XMFS = UNKNOWN;
                double var_XLFSS_0d_double_Scalar;
                bool aux_XLFSS_read = false;
                vartype aux_last_type_read_for_XLFSS = UNKNOWN;
                NestedVector<double> var_E_1d_double_NestedVector;
                vartype aux_last_type_read_for_E = UNKNOWN;
                NestedVector<double> var_WE_1d_double_NestedVector;
                vartype aux_last_type_read_for_WE = UNKNOWN;
                cpp_line = cpp_read_line(cont);
                // read CONT record
                // assign expression to variable LTY
                var_LTY_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                aux_LTY_read = true;
                if ((aux_last_type_read_for_LTY != SCALAR_INT && aux_last_type_read_for_LTY != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_LTY = SCALAR_INT;
                // evaluate if-elif-else clause
                {
                  bool cpp_found_match = false;
                  if (! cpp_found_match) {
                    if ((((((((aux_LTY_read == true)) && ((var_LTY_0d_int_Scalar)==(0)))))))) {
                      // if statement evaluation
                      cpp_found_match = true;
                      cpp_line = cpp_read_line(cont);
                      // read LIST record
                      // assign expression to variable E1
                      var_E1_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                      aux_E1_read = true;
                      if ((aux_last_type_read_for_E1 != SCALAR_DOUBLE && aux_last_type_read_for_E1 != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_E1 = SCALAR_DOUBLE;
                      // assign expression to variable E2
                      var_E2_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                      aux_E2_read = true;
                      if ((aux_last_type_read_for_E2 != SCALAR_DOUBLE && aux_last_type_read_for_E2 != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_E2 = SCALAR_DOUBLE;
                      // assign expression to variable cpp_int_val
                      cpp_int_val = cpp_read_int_field(cpp_line, 4);
                      aux_cpp_int_val_read = true;
                      if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                      // assign expression to variable NCI
                      var_NCI_0d_int_Scalar = (cpp_int_val/2);
                      aux_NCI_read = true;
                      if ((aux_last_type_read_for_NCI != SCALAR_INT && aux_last_type_read_for_NCI != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_NCI = SCALAR_INT;
                      if ((! (aux_NCI_read == true))) {
                        // assign expression to variable NCI
                        var_NCI_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                        aux_NCI_read = true;
                        if ((aux_last_type_read_for_NCI != SCALAR_INT && aux_last_type_read_for_NCI != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NCI = SCALAR_INT;
                      }
                      {
                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                        int cpp_j = 0;
                        // read LIST body

                        for (int var_i_0d_int_Scalar = 1;
                           var_i_0d_int_Scalar <= var_NCI_0d_int_Scalar; var_i_0d_int_Scalar++) {
                          bool aux_i_read = true;
                          // read LIST body
                          // assign expression to variable C
                          var_C_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_C != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_C != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_C = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable XMT
                          var_XMT_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_XMT != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_XMT != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_XMT = NESTEDVECTOR_DOUBLE;
                        }
                      }
                    }
                  }
                  if (! cpp_found_match) {
                    if (! cpp_found_match) {
                      if (((((((((aux_LTY_read == true)) && ((var_LTY_0d_int_Scalar)>=(1)))))&&((((aux_LTY_read == true)) && ((var_LTY_0d_int_Scalar)<=(3)))))))) {
                        // if statement evaluation
                        cpp_found_match = true;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable E1
                        var_E1_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                        aux_E1_read = true;
                        if ((aux_last_type_read_for_E1 != SCALAR_DOUBLE && aux_last_type_read_for_E1 != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_E1 = SCALAR_DOUBLE;
                        // assign expression to variable E2
                        var_E2_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_E2_read = true;
                        if ((aux_last_type_read_for_E2 != SCALAR_DOUBLE && aux_last_type_read_for_E2 != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_E2 = SCALAR_DOUBLE;
                        // assign expression to variable MATS
                        var_MATS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                        aux_MATS_read = true;
                        if ((aux_last_type_read_for_MATS != SCALAR_INT && aux_last_type_read_for_MATS != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_MATS = SCALAR_INT;
                        // assign expression to variable MTS
                        var_MTS_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                        aux_MTS_read = true;
                        if ((aux_last_type_read_for_MTS != SCALAR_INT && aux_last_type_read_for_MTS != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_MTS = SCALAR_INT;
                        // assign expression to variable cpp_int_val
                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                        aux_cpp_int_val_read = true;
                        if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                        // assign expression to variable NEI
                        var_NEI_0d_int_Scalar = ((cpp_int_val+(-2))/2);
                        aux_NEI_read = true;
                        if ((aux_last_type_read_for_NEI != SCALAR_INT && aux_last_type_read_for_NEI != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NEI = SCALAR_INT;
                        if ((! (aux_NEI_read == true))) {
                          // assign expression to variable NEI
                          var_NEI_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                          aux_NEI_read = true;
                          if ((aux_last_type_read_for_NEI != SCALAR_INT && aux_last_type_read_for_NEI != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NEI = SCALAR_INT;
                        }
                        {
                          int cpp_npl = cpp_read_int_field(cpp_line, 4);
                          cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                          int cpp_j = 0;
                          // read LIST body
                          // assign expression to variable XMFS
                          var_XMFS_0d_double_Scalar = cpp_floatvec[cpp_j++];
                          aux_XMFS_read = true;
                          if ((aux_last_type_read_for_XMFS != SCALAR_DOUBLE && aux_last_type_read_for_XMFS != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_XMFS = SCALAR_DOUBLE;
                          // assign expression to variable XLFSS
                          var_XLFSS_0d_double_Scalar = cpp_floatvec[cpp_j++];
                          aux_XLFSS_read = true;
                          if ((aux_last_type_read_for_XLFSS != SCALAR_DOUBLE && aux_last_type_read_for_XLFSS != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_XLFSS = SCALAR_DOUBLE;

                          for (int var_i_0d_int_Scalar = 1;
                             var_i_0d_int_Scalar <= var_NEI_0d_int_Scalar; var_i_0d_int_Scalar++) {
                            bool aux_i_read = true;
                            // read LIST body
                            // assign expression to variable E
                            var_E_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable WE
                            var_WE_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_WE != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_WE != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_WE = NESTEDVECTOR_DOUBLE;
                          }
                        }
                      }
                    }
                  }
                }
                // store data in Python dictionary
                if (((aux_last_type_read_for_LTY == SCALAR_INT) && (aux_LTY_read == true))) {
                  cpp_current_dict["LTY"] = var_LTY_0d_int_Scalar;
                }
                if (((aux_last_type_read_for_E1 == SCALAR_DOUBLE) && (aux_E1_read == true))) {
                  cpp_current_dict["E1"] = var_E1_0d_double_Scalar;
                }
                if (((aux_last_type_read_for_E2 == SCALAR_DOUBLE) && (aux_E2_read == true))) {
                  cpp_current_dict["E2"] = var_E2_0d_double_Scalar;
                }
                if (((aux_last_type_read_for_NCI == SCALAR_INT) && (aux_NCI_read == true))) {
                  cpp_current_dict["NCI"] = var_NCI_0d_int_Scalar;
                }
                if ((var_C_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_C_1d_double_NestedVector;
                  cpp_current_dict["C"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["C"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                if ((var_XMT_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_XMT_1d_double_NestedVector;
                  cpp_current_dict["XMT"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["XMT"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                if (((aux_last_type_read_for_MATS == SCALAR_INT) && (aux_MATS_read == true))) {
                  cpp_current_dict["MATS"] = var_MATS_0d_int_Scalar;
                }
                if (((aux_last_type_read_for_MTS == SCALAR_INT) && (aux_MTS_read == true))) {
                  cpp_current_dict["MTS"] = var_MTS_0d_int_Scalar;
                }
                if (((aux_last_type_read_for_NEI == SCALAR_INT) && (aux_NEI_read == true))) {
                  cpp_current_dict["NEI"] = var_NEI_0d_int_Scalar;
                }
                if (((aux_last_type_read_for_XMFS == SCALAR_DOUBLE) && (aux_XMFS_read == true))) {
                  cpp_current_dict["XMFS"] = var_XMFS_0d_double_Scalar;
                }
                if (((aux_last_type_read_for_XLFSS == SCALAR_DOUBLE) && (aux_XLFSS_read == true))) {
                  cpp_current_dict["XLFSS"] = var_XLFSS_0d_double_Scalar;
                }
                if ((var_E_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_E_1d_double_NestedVector;
                  cpp_current_dict["E"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["E"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                if ((var_WE_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_WE_1d_double_NestedVector;
                  cpp_current_dict["WE"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["WE"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                cpp_current_dict = cpp_parent_dict;
              }
            }

            for (int var_m_0d_int_Scalar = 1;
               var_m_0d_int_Scalar <= var_NI_0d_int_Scalar; var_m_0d_int_Scalar++) {
              bool aux_m_read = true;
              // open section ni_subsection

              {
                  py::dict cpp_parent_dict = cpp_current_dict;
                  if (! cpp_parent_dict.contains("ni_subsection")) {
                    cpp_parent_dict["ni_subsection"] = py::dict();
                  }
                  py::dict cpp_current_dict = cpp_parent_dict["ni_subsection"];

                  if (! cpp_current_dict.contains(py::cast(var_m_0d_int_Scalar))) {
                    cpp_current_dict[py::cast(var_m_0d_int_Scalar)] = py::dict();
                  }
                  cpp_current_dict = cpp_current_dict[py::cast(var_m_0d_int_Scalar)];
                // variable declarations
                int var_LT_0d_int_Scalar;
                bool aux_LT_read = false;
                vartype aux_last_type_read_for_LT = UNKNOWN;
                int var_LB_0d_int_Scalar;
                bool aux_LB_read = false;
                vartype aux_last_type_read_for_LB = UNKNOWN;
                int cpp_int_val;
                bool aux_cpp_int_val_read = false;
                vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                int var_NP_0d_int_Scalar;
                bool aux_NP_read = false;
                vartype aux_last_type_read_for_NP = UNKNOWN;
                NestedVector<double> var_Ek_1d_double_NestedVector;
                vartype aux_last_type_read_for_Ek = UNKNOWN;
                NestedVector<double> var_Fk_1d_double_NestedVector;
                vartype aux_last_type_read_for_Fk = UNKNOWN;
                NestedVector<double> var_El_1d_double_NestedVector;
                vartype aux_last_type_read_for_El = UNKNOWN;
                NestedVector<double> var_Fl_1d_double_NestedVector;
                vartype aux_last_type_read_for_Fl = UNKNOWN;
                int var_LS_0d_int_Scalar;
                bool aux_LS_read = false;
                vartype aux_last_type_read_for_LS = UNKNOWN;
                int var_NE_0d_int_Scalar;
                bool aux_NE_read = false;
                vartype aux_last_type_read_for_NE = UNKNOWN;
                NestedVector<double> var_E_1d_double_NestedVector;
                vartype aux_last_type_read_for_E = UNKNOWN;
                Matrix2d<double> var_F_2d_double_Matrix2d;
                vartype aux_last_type_read_for_F = UNKNOWN;
                int var_NER_0d_int_Scalar;
                bool aux_NER_read = false;
                vartype aux_last_type_read_for_NER = UNKNOWN;
                int var_NEC_0d_int_Scalar;
                bool aux_NEC_read = false;
                vartype aux_last_type_read_for_NEC = UNKNOWN;
                NestedVector<double> var_ER_1d_double_NestedVector;
                vartype aux_last_type_read_for_ER = UNKNOWN;
                NestedVector<double> var_EC_1d_double_NestedVector;
                vartype aux_last_type_read_for_EC = UNKNOWN;
                NestedVector<double> var_F_1d_double_NestedVector;
                // evaluate if-elif-else clause
                {
                  bool cpp_found_match = false;
                  if (! cpp_found_match) {
                    // if statement evaluation with lookahead
                    {
                      std::streampos cpp_old_streampos = cont.tellg();
                      {
                        // variable declarations
                        int& glob_var_LT_0d_int_Scalar = var_LT_0d_int_Scalar;
                        int var_LT_0d_int_Scalar = glob_var_LT_0d_int_Scalar;
                        bool& glob_aux_LT_read = aux_LT_read;
                        bool aux_LT_read = glob_aux_LT_read;
                        vartype aux_last_type_read_for_LT = UNKNOWN;
                        int& glob_var_LB_0d_int_Scalar = var_LB_0d_int_Scalar;
                        int var_LB_0d_int_Scalar = glob_var_LB_0d_int_Scalar;
                        bool& glob_aux_LB_read = aux_LB_read;
                        bool aux_LB_read = glob_aux_LB_read;
                        vartype aux_last_type_read_for_LB = UNKNOWN;
                        int& glob_cpp_int_val = cpp_int_val;
                        int cpp_int_val = glob_cpp_int_val;
                        bool& glob_aux_cpp_int_val_read = aux_cpp_int_val_read;
                        bool aux_cpp_int_val_read = glob_aux_cpp_int_val_read;
                        vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                        int& glob_var_NP_0d_int_Scalar = var_NP_0d_int_Scalar;
                        int var_NP_0d_int_Scalar = glob_var_NP_0d_int_Scalar;
                        bool& glob_aux_NP_read = aux_NP_read;
                        bool aux_NP_read = glob_aux_NP_read;
                        vartype aux_last_type_read_for_NP = UNKNOWN;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable LT
                        var_LT_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                        aux_LT_read = true;
                        if ((aux_last_type_read_for_LT != SCALAR_INT && aux_last_type_read_for_LT != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LT = SCALAR_INT;
                        // assign expression to variable LB
                        var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                        aux_LB_read = true;
                        if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LB = SCALAR_INT;
                        // assign expression to variable cpp_int_val
                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                        aux_cpp_int_val_read = true;
                        if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                        // assign expression to variable NP
                        var_NP_0d_int_Scalar = (cpp_int_val/2);
                        aux_NP_read = true;
                        if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NP = SCALAR_INT;
                        if ((! (aux_NP_read == true))) {
                          // assign expression to variable NP
                          var_NP_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                          aux_NP_read = true;
                          if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NP = SCALAR_INT;
                        }
                        if (((((((((aux_LB_read == true)) && ((var_LB_0d_int_Scalar)>=(0)))))&&((((aux_LB_read == true)) && ((var_LB_0d_int_Scalar)<=(4)))))))) {
                          cpp_found_match = true;
                        }
                        cont.seekg(cpp_old_streampos);
                      }
                      if (cpp_found_match) {
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable LT
                        var_LT_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                        aux_LT_read = true;
                        if ((aux_last_type_read_for_LT != SCALAR_INT && aux_last_type_read_for_LT != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LT = SCALAR_INT;
                        // assign expression to variable LB
                        var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                        aux_LB_read = true;
                        if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LB = SCALAR_INT;
                        // assign expression to variable cpp_int_val
                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                        aux_cpp_int_val_read = true;
                        if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                        // assign expression to variable NP
                        var_NP_0d_int_Scalar = (cpp_int_val/2);
                        aux_NP_read = true;
                        if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NP = SCALAR_INT;
                        if ((! (aux_NP_read == true))) {
                          // assign expression to variable NP
                          var_NP_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                          aux_NP_read = true;
                          if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NP = SCALAR_INT;
                        }
                        {
                          int cpp_npl = cpp_read_int_field(cpp_line, 4);
                          cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                          int cpp_j = 0;
                          // read LIST body

                          for (int var_k_0d_int_Scalar = 1;
                             var_k_0d_int_Scalar <= (var_NP_0d_int_Scalar-var_LT_0d_int_Scalar); var_k_0d_int_Scalar++) {
                            bool aux_k_read = true;
                            // read LIST body
                            // assign expression to variable Ek
                            var_Ek_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_Ek != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_Ek != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_Ek = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable Fk
                            var_Fk_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_Fk != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_Fk != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_Fk = NESTEDVECTOR_DOUBLE;
                          }

                          for (int var_k_0d_int_Scalar = 1;
                             var_k_0d_int_Scalar <= var_LT_0d_int_Scalar; var_k_0d_int_Scalar++) {
                            bool aux_k_read = true;
                            // read LIST body
                            // assign expression to variable El
                            var_El_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_El != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_El != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_El = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable Fl
                            var_Fl_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_Fl != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_Fl != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_Fl = NESTEDVECTOR_DOUBLE;
                          }
                        }
                      }
                    }
                  }
                  if (! cpp_found_match) {
                    if (! cpp_found_match) {
                      // if statement evaluation with lookahead
                      {
                        std::streampos cpp_old_streampos = cont.tellg();
                        {
                          // variable declarations
                          int& glob_var_LS_0d_int_Scalar = var_LS_0d_int_Scalar;
                          int var_LS_0d_int_Scalar = glob_var_LS_0d_int_Scalar;
                          bool& glob_aux_LS_read = aux_LS_read;
                          bool aux_LS_read = glob_aux_LS_read;
                          vartype aux_last_type_read_for_LS = UNKNOWN;
                          int& glob_var_LB_0d_int_Scalar = var_LB_0d_int_Scalar;
                          int var_LB_0d_int_Scalar = glob_var_LB_0d_int_Scalar;
                          bool& glob_aux_LB_read = aux_LB_read;
                          bool aux_LB_read = glob_aux_LB_read;
                          vartype aux_last_type_read_for_LB = UNKNOWN;
                          int& glob_var_NE_0d_int_Scalar = var_NE_0d_int_Scalar;
                          int var_NE_0d_int_Scalar = glob_var_NE_0d_int_Scalar;
                          bool& glob_aux_NE_read = aux_NE_read;
                          bool aux_NE_read = glob_aux_NE_read;
                          vartype aux_last_type_read_for_NE = UNKNOWN;
                          cpp_line = cpp_read_line(cont);
                          // read LIST record
                          // assign expression to variable LS
                          var_LS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                          aux_LS_read = true;
                          if ((aux_last_type_read_for_LS != SCALAR_INT && aux_last_type_read_for_LS != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LS = SCALAR_INT;
                          // assign expression to variable LB
                          var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                          aux_LB_read = true;
                          if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LB = SCALAR_INT;
                          // assign expression to variable NE
                          var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                          aux_NE_read = true;
                          if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NE = SCALAR_INT;
                          if ((! (aux_NE_read == true))) {
                            throw std::runtime_error("The equation ((NE*(NE-1))+1)==value cannot be solved for NE because this variable could not be isolated.");
                          }
                          if (((((((((aux_LB_read == true)) && ((var_LB_0d_int_Scalar)==(5)))))&&((((aux_LS_read == true)) && ((var_LS_0d_int_Scalar)==(0)))))))) {
                            cpp_found_match = true;
                          }
                          cont.seekg(cpp_old_streampos);
                        }
                        if (cpp_found_match) {
                          cpp_line = cpp_read_line(cont);
                          // read LIST record
                          // assign expression to variable LS
                          var_LS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                          aux_LS_read = true;
                          if ((aux_last_type_read_for_LS != SCALAR_INT && aux_last_type_read_for_LS != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LS = SCALAR_INT;
                          // assign expression to variable LB
                          var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                          aux_LB_read = true;
                          if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LB = SCALAR_INT;
                          // assign expression to variable NE
                          var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                          aux_NE_read = true;
                          if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NE = SCALAR_INT;
                          if ((! (aux_NE_read == true))) {
                            throw std::runtime_error("The equation ((NE*(NE-1))+1)==value cannot be solved for NE because this variable could not be isolated.");
                          }
                          {
                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                            int cpp_j = 0;
                            // read LIST body

                            for (int var_k_0d_int_Scalar = 1;
                               var_k_0d_int_Scalar <= var_NE_0d_int_Scalar; var_k_0d_int_Scalar++) {
                              bool aux_k_read = true;
                              // read LIST body
                              // assign expression to variable E
                              var_E_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                              if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
                            }
                            var_F_2d_double_Matrix2d.init(1, (var_NE_0d_int_Scalar-1), 1, (var_NE_0d_int_Scalar-1), false, false);

                            for (int var_k_0d_int_Scalar = 1;
                               var_k_0d_int_Scalar <= (var_NE_0d_int_Scalar-1); var_k_0d_int_Scalar++) {
                              bool aux_k_read = true;
                              // read LIST body

                              for (int var_kp_0d_int_Scalar = 1;
                                 var_kp_0d_int_Scalar <= (var_NE_0d_int_Scalar-1); var_kp_0d_int_Scalar++) {
                                bool aux_kp_read = true;
                                // read LIST body
                                // assign expression to variable F
                                var_F_2d_double_Matrix2d(var_k_0d_int_Scalar, var_kp_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                                if ((aux_last_type_read_for_F != MATRIX2D_DOUBLE && aux_last_type_read_for_F != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_F = MATRIX2D_DOUBLE;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  if (! cpp_found_match) {
                    if (! cpp_found_match) {
                      // if statement evaluation with lookahead
                      {
                        std::streampos cpp_old_streampos = cont.tellg();
                        {
                          // variable declarations
                          int& glob_var_LS_0d_int_Scalar = var_LS_0d_int_Scalar;
                          int var_LS_0d_int_Scalar = glob_var_LS_0d_int_Scalar;
                          bool& glob_aux_LS_read = aux_LS_read;
                          bool aux_LS_read = glob_aux_LS_read;
                          vartype aux_last_type_read_for_LS = UNKNOWN;
                          int& glob_var_LB_0d_int_Scalar = var_LB_0d_int_Scalar;
                          int var_LB_0d_int_Scalar = glob_var_LB_0d_int_Scalar;
                          bool& glob_aux_LB_read = aux_LB_read;
                          bool aux_LB_read = glob_aux_LB_read;
                          vartype aux_last_type_read_for_LB = UNKNOWN;
                          int& glob_var_NE_0d_int_Scalar = var_NE_0d_int_Scalar;
                          int var_NE_0d_int_Scalar = glob_var_NE_0d_int_Scalar;
                          bool& glob_aux_NE_read = aux_NE_read;
                          bool aux_NE_read = glob_aux_NE_read;
                          vartype aux_last_type_read_for_NE = UNKNOWN;
                          cpp_line = cpp_read_line(cont);
                          // read LIST record
                          // assign expression to variable LS
                          var_LS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                          aux_LS_read = true;
                          if ((aux_last_type_read_for_LS != SCALAR_INT && aux_last_type_read_for_LS != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LS = SCALAR_INT;
                          // assign expression to variable LB
                          var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                          aux_LB_read = true;
                          if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LB = SCALAR_INT;
                          // assign expression to variable NE
                          var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                          aux_NE_read = true;
                          if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NE = SCALAR_INT;
                          if ((! (aux_NE_read == true))) {
                            throw std::runtime_error("The equation ((NE*(NE+1))/2)==value cannot be solved for NE because this variable could not be isolated.");
                          }
                          if (((((((((aux_LB_read == true)) && ((var_LB_0d_int_Scalar)==(5)))))&&((((aux_LS_read == true)) && ((var_LS_0d_int_Scalar)==(1)))))))) {
                            cpp_found_match = true;
                          }
                          cont.seekg(cpp_old_streampos);
                        }
                        if (cpp_found_match) {
                          cpp_line = cpp_read_line(cont);
                          // read LIST record
                          // assign expression to variable LS
                          var_LS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                          aux_LS_read = true;
                          if ((aux_last_type_read_for_LS != SCALAR_INT && aux_last_type_read_for_LS != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LS = SCALAR_INT;
                          // assign expression to variable LB
                          var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                          aux_LB_read = true;
                          if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LB = SCALAR_INT;
                          // assign expression to variable NE
                          var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                          aux_NE_read = true;
                          if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NE = SCALAR_INT;
                          if ((! (aux_NE_read == true))) {
                            throw std::runtime_error("The equation ((NE*(NE+1))/2)==value cannot be solved for NE because this variable could not be isolated.");
                          }
                          {
                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                            int cpp_j = 0;
                            // read LIST body

                            for (int var_k_0d_int_Scalar = 1;
                               var_k_0d_int_Scalar <= var_NE_0d_int_Scalar; var_k_0d_int_Scalar++) {
                              bool aux_k_read = true;
                              // read LIST body
                              // assign expression to variable E
                              var_E_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                              if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
                            }
                            var_F_2d_double_Matrix2d.init(1, (var_NE_0d_int_Scalar-1), 1, (var_NE_0d_int_Scalar-1), true, false);

                            for (int var_k_0d_int_Scalar = 1;
                               var_k_0d_int_Scalar <= (var_NE_0d_int_Scalar-1); var_k_0d_int_Scalar++) {
                              bool aux_k_read = true;
                              // read LIST body

                              for (int var_kp_0d_int_Scalar = var_k_0d_int_Scalar;
                                 var_kp_0d_int_Scalar <= (var_NE_0d_int_Scalar-1); var_kp_0d_int_Scalar++) {
                                bool aux_kp_read = true;
                                // read LIST body
                                // assign expression to variable F
                                var_F_2d_double_Matrix2d(var_k_0d_int_Scalar, var_kp_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                                if ((aux_last_type_read_for_F != MATRIX2D_DOUBLE && aux_last_type_read_for_F != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_F = MATRIX2D_DOUBLE;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  if (! cpp_found_match) {
                    if (! cpp_found_match) {
                      // if statement evaluation with lookahead
                      {
                        std::streampos cpp_old_streampos = cont.tellg();
                        {
                          // variable declarations
                          int& glob_var_LB_0d_int_Scalar = var_LB_0d_int_Scalar;
                          int var_LB_0d_int_Scalar = glob_var_LB_0d_int_Scalar;
                          bool& glob_aux_LB_read = aux_LB_read;
                          bool aux_LB_read = glob_aux_LB_read;
                          vartype aux_last_type_read_for_LB = UNKNOWN;
                          int& glob_var_NER_0d_int_Scalar = var_NER_0d_int_Scalar;
                          int var_NER_0d_int_Scalar = glob_var_NER_0d_int_Scalar;
                          bool& glob_aux_NER_read = aux_NER_read;
                          bool aux_NER_read = glob_aux_NER_read;
                          vartype aux_last_type_read_for_NER = UNKNOWN;
                          int& glob_cpp_int_val = cpp_int_val;
                          int cpp_int_val = glob_cpp_int_val;
                          bool& glob_aux_cpp_int_val_read = aux_cpp_int_val_read;
                          bool aux_cpp_int_val_read = glob_aux_cpp_int_val_read;
                          vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                          int& glob_var_NEC_0d_int_Scalar = var_NEC_0d_int_Scalar;
                          int var_NEC_0d_int_Scalar = glob_var_NEC_0d_int_Scalar;
                          bool& glob_aux_NEC_read = aux_NEC_read;
                          bool aux_NEC_read = glob_aux_NEC_read;
                          vartype aux_last_type_read_for_NEC = UNKNOWN;
                          cpp_line = cpp_read_line(cont);
                          // read LIST record
                          // assign expression to variable LB
                          var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                          aux_LB_read = true;
                          if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LB = SCALAR_INT;
                          // assign expression to variable NER
                          var_NER_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                          aux_NER_read = true;
                          if ((aux_last_type_read_for_NER != SCALAR_INT && aux_last_type_read_for_NER != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NER = SCALAR_INT;
                          // assign expression to variable cpp_int_val
                          cpp_int_val = cpp_read_int_field(cpp_line, 4);
                          aux_cpp_int_val_read = true;
                          if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                          // assign expression to variable NEC
                          var_NEC_0d_int_Scalar = ((cpp_int_val+(-1))/var_NER_0d_int_Scalar);
                          aux_NEC_read = true;
                          if ((aux_last_type_read_for_NEC != SCALAR_INT && aux_last_type_read_for_NEC != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NEC = SCALAR_INT;
                          if ((! (aux_NER_read == true))) {
                            // assign expression to variable cpp_int_val
                            cpp_int_val = cpp_read_int_field(cpp_line, 4);
                            aux_cpp_int_val_read = true;
                            if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                            // assign expression to variable NER
                            var_NER_0d_int_Scalar = ((cpp_int_val+(-1))/var_NEC_0d_int_Scalar);
                            aux_NER_read = true;
                            if ((aux_last_type_read_for_NER != SCALAR_INT && aux_last_type_read_for_NER != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_NER = SCALAR_INT;
                          }
                          if ((((((((aux_LB_read == true)) && ((var_LB_0d_int_Scalar)==(6)))))))) {
                            cpp_found_match = true;
                          }
                          cont.seekg(cpp_old_streampos);
                        }
                        if (cpp_found_match) {
                          cpp_line = cpp_read_line(cont);
                          // read LIST record
                          // assign expression to variable LB
                          var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                          aux_LB_read = true;
                          if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LB = SCALAR_INT;
                          // assign expression to variable NER
                          var_NER_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                          aux_NER_read = true;
                          if ((aux_last_type_read_for_NER != SCALAR_INT && aux_last_type_read_for_NER != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NER = SCALAR_INT;
                          // assign expression to variable cpp_int_val
                          cpp_int_val = cpp_read_int_field(cpp_line, 4);
                          aux_cpp_int_val_read = true;
                          if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                          // assign expression to variable NEC
                          var_NEC_0d_int_Scalar = ((cpp_int_val+(-1))/var_NER_0d_int_Scalar);
                          aux_NEC_read = true;
                          if ((aux_last_type_read_for_NEC != SCALAR_INT && aux_last_type_read_for_NEC != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NEC = SCALAR_INT;
                          if ((! (aux_NER_read == true))) {
                            // assign expression to variable cpp_int_val
                            cpp_int_val = cpp_read_int_field(cpp_line, 4);
                            aux_cpp_int_val_read = true;
                            if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                            // assign expression to variable NER
                            var_NER_0d_int_Scalar = ((cpp_int_val+(-1))/var_NEC_0d_int_Scalar);
                            aux_NER_read = true;
                            if ((aux_last_type_read_for_NER != SCALAR_INT && aux_last_type_read_for_NER != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_NER = SCALAR_INT;
                          }
                          {
                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                            int cpp_j = 0;
                            // read LIST body

                            for (int var_k_0d_int_Scalar = 1;
                               var_k_0d_int_Scalar <= var_NER_0d_int_Scalar; var_k_0d_int_Scalar++) {
                              bool aux_k_read = true;
                              // read LIST body
                              // assign expression to variable ER
                              var_ER_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                              if ((aux_last_type_read_for_ER != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ER != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_ER = NESTEDVECTOR_DOUBLE;
                            }

                            for (int var_k_0d_int_Scalar = 1;
                               var_k_0d_int_Scalar <= var_NEC_0d_int_Scalar; var_k_0d_int_Scalar++) {
                              bool aux_k_read = true;
                              // read LIST body
                              // assign expression to variable EC
                              var_EC_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                              if ((aux_last_type_read_for_EC != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_EC != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_EC = NESTEDVECTOR_DOUBLE;
                            }
                            var_F_2d_double_Matrix2d.init(1, (var_NER_0d_int_Scalar-1), 1, (var_NEC_0d_int_Scalar-1), false, false);

                            for (int var_k_0d_int_Scalar = 1;
                               var_k_0d_int_Scalar <= (var_NER_0d_int_Scalar-1); var_k_0d_int_Scalar++) {
                              bool aux_k_read = true;
                              // read LIST body

                              for (int var_l_0d_int_Scalar = 1;
                                 var_l_0d_int_Scalar <= (var_NEC_0d_int_Scalar-1); var_l_0d_int_Scalar++) {
                                bool aux_l_read = true;
                                // read LIST body
                                // assign expression to variable F
                                var_F_2d_double_Matrix2d(var_k_0d_int_Scalar, var_l_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                                if ((aux_last_type_read_for_F != MATRIX2D_DOUBLE && aux_last_type_read_for_F != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_F = MATRIX2D_DOUBLE;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  if (! cpp_found_match) {
                    if (! cpp_found_match) {
                      // if statement evaluation with lookahead
                      {
                        std::streampos cpp_old_streampos = cont.tellg();
                        {
                          // variable declarations
                          int& glob_var_LT_0d_int_Scalar = var_LT_0d_int_Scalar;
                          int var_LT_0d_int_Scalar = glob_var_LT_0d_int_Scalar;
                          bool& glob_aux_LT_read = aux_LT_read;
                          bool aux_LT_read = glob_aux_LT_read;
                          vartype aux_last_type_read_for_LT = UNKNOWN;
                          int& glob_var_LB_0d_int_Scalar = var_LB_0d_int_Scalar;
                          int var_LB_0d_int_Scalar = glob_var_LB_0d_int_Scalar;
                          bool& glob_aux_LB_read = aux_LB_read;
                          bool aux_LB_read = glob_aux_LB_read;
                          vartype aux_last_type_read_for_LB = UNKNOWN;
                          int& glob_cpp_int_val = cpp_int_val;
                          int cpp_int_val = glob_cpp_int_val;
                          bool& glob_aux_cpp_int_val_read = aux_cpp_int_val_read;
                          bool aux_cpp_int_val_read = glob_aux_cpp_int_val_read;
                          vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                          int& glob_var_NP_0d_int_Scalar = var_NP_0d_int_Scalar;
                          int var_NP_0d_int_Scalar = glob_var_NP_0d_int_Scalar;
                          bool& glob_aux_NP_read = aux_NP_read;
                          bool aux_NP_read = glob_aux_NP_read;
                          vartype aux_last_type_read_for_NP = UNKNOWN;
                          cpp_line = cpp_read_line(cont);
                          // read LIST record
                          // assign expression to variable LT
                          var_LT_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                          aux_LT_read = true;
                          if ((aux_last_type_read_for_LT != SCALAR_INT && aux_last_type_read_for_LT != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LT = SCALAR_INT;
                          // assign expression to variable LB
                          var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                          aux_LB_read = true;
                          if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LB = SCALAR_INT;
                          // assign expression to variable cpp_int_val
                          cpp_int_val = cpp_read_int_field(cpp_line, 4);
                          aux_cpp_int_val_read = true;
                          if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                          // assign expression to variable NP
                          var_NP_0d_int_Scalar = (cpp_int_val/2);
                          aux_NP_read = true;
                          if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NP = SCALAR_INT;
                          if ((! (aux_NP_read == true))) {
                            // assign expression to variable NP
                            var_NP_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                            aux_NP_read = true;
                            if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_NP = SCALAR_INT;
                          }
                          if ((((((((((((((aux_LB_read == true)) && ((var_LB_0d_int_Scalar)==(8))))))||(((((aux_LB_read == true)) && ((var_LB_0d_int_Scalar)==(9)))))))))&&((((aux_LT_read == true)) && ((var_LT_0d_int_Scalar)==(0)))))))) {
                            cpp_found_match = true;
                          }
                          cont.seekg(cpp_old_streampos);
                        }
                        if (cpp_found_match) {
                          cpp_line = cpp_read_line(cont);
                          // read LIST record
                          // assign expression to variable LT
                          var_LT_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                          aux_LT_read = true;
                          if ((aux_last_type_read_for_LT != SCALAR_INT && aux_last_type_read_for_LT != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LT = SCALAR_INT;
                          // assign expression to variable LB
                          var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                          aux_LB_read = true;
                          if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LB = SCALAR_INT;
                          // assign expression to variable cpp_int_val
                          cpp_int_val = cpp_read_int_field(cpp_line, 4);
                          aux_cpp_int_val_read = true;
                          if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                          // assign expression to variable NP
                          var_NP_0d_int_Scalar = (cpp_int_val/2);
                          aux_NP_read = true;
                          if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NP = SCALAR_INT;
                          if ((! (aux_NP_read == true))) {
                            // assign expression to variable NP
                            var_NP_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                            aux_NP_read = true;
                            if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_NP = SCALAR_INT;
                          }
                          {
                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                            int cpp_j = 0;
                            // read LIST body

                            for (int var_k_0d_int_Scalar = 1;
                               var_k_0d_int_Scalar <= var_NP_0d_int_Scalar; var_k_0d_int_Scalar++) {
                              bool aux_k_read = true;
                              // read LIST body
                              // assign expression to variable E
                              var_E_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                              if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
                              // assign expression to variable F
                              var_F_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                              if ((aux_last_type_read_for_F != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_F != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_F = NESTEDVECTOR_DOUBLE;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                // store data in Python dictionary
                if (((aux_last_type_read_for_LT == SCALAR_INT) && (aux_LT_read == true))) {
                  cpp_current_dict["LT"] = var_LT_0d_int_Scalar;
                }
                if (((aux_last_type_read_for_LB == SCALAR_INT) && (aux_LB_read == true))) {
                  cpp_current_dict["LB"] = var_LB_0d_int_Scalar;
                }
                if (((aux_last_type_read_for_NP == SCALAR_INT) && (aux_NP_read == true))) {
                  cpp_current_dict["NP"] = var_NP_0d_int_Scalar;
                }
                if ((var_Ek_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_Ek_1d_double_NestedVector;
                  cpp_current_dict["Ek"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["Ek"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                if ((var_Fk_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_Fk_1d_double_NestedVector;
                  cpp_current_dict["Fk"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["Fk"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                if ((var_El_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_El_1d_double_NestedVector;
                  cpp_current_dict["El"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["El"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                if ((var_Fl_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_Fl_1d_double_NestedVector;
                  cpp_current_dict["Fl"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["Fl"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                if (((aux_last_type_read_for_LS == SCALAR_INT) && (aux_LS_read == true))) {
                  cpp_current_dict["LS"] = var_LS_0d_int_Scalar;
                }
                if (((aux_last_type_read_for_NE == SCALAR_INT) && (aux_NE_read == true))) {
                  cpp_current_dict["NE"] = var_NE_0d_int_Scalar;
                }
                if ((var_E_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_E_1d_double_NestedVector;
                  cpp_current_dict["E"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["E"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                if (var_F_2d_double_Matrix2d.did_read()) {
                    cpp_current_dict["F"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["F"];
                    for (int cpp_i1 = var_F_2d_double_Matrix2d.get_row_start_index(); cpp_i1 <= var_F_2d_double_Matrix2d.get_row_last_index(); cpp_i1++) {
                      cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                      py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                      for (int cpp_i2 = var_F_2d_double_Matrix2d.get_col_start_index(cpp_i1); cpp_i2 <= var_F_2d_double_Matrix2d.get_col_last_index(cpp_i1); cpp_i2++) {
                        cpp_curdict1[py::cast(cpp_i2)] = var_F_2d_double_Matrix2d(cpp_i1, cpp_i2);
                      }
                    }
                }
                if (((aux_last_type_read_for_NER == SCALAR_INT) && (aux_NER_read == true))) {
                  cpp_current_dict["NER"] = var_NER_0d_int_Scalar;
                }
                if (((aux_last_type_read_for_NEC == SCALAR_INT) && (aux_NEC_read == true))) {
                  cpp_current_dict["NEC"] = var_NEC_0d_int_Scalar;
                }
                if ((var_ER_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_ER_1d_double_NestedVector;
                  cpp_current_dict["ER"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["ER"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                if ((var_EC_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_EC_1d_double_NestedVector;
                  cpp_current_dict["EC"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["EC"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                if ((var_F_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_F_1d_double_NestedVector;
                  cpp_current_dict["F"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["F"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                cpp_current_dict = cpp_parent_dict;
              }
            }
            // store data in Python dictionary
            if (((aux_last_type_read_for_XMF1 == SCALAR_DOUBLE) && (aux_XMF1_read == true))) {
              cpp_current_dict["XMF1"] = var_XMF1_0d_double_Scalar;
            }
            if (((aux_last_type_read_for_XLFS1 == SCALAR_DOUBLE) && (aux_XLFS1_read == true))) {
              cpp_current_dict["XLFS1"] = var_XLFS1_0d_double_Scalar;
            }
            if (((aux_last_type_read_for_MAT1 == SCALAR_INT) && (aux_MAT1_read == true))) {
              cpp_current_dict["MAT1"] = var_MAT1_0d_int_Scalar;
            }
            if (((aux_last_type_read_for_MT1 == SCALAR_INT) && (aux_MT1_read == true))) {
              cpp_current_dict["MT1"] = var_MT1_0d_int_Scalar;
            }
            if (((aux_last_type_read_for_NC == SCALAR_INT) && (aux_NC_read == true))) {
              cpp_current_dict["NC"] = var_NC_0d_int_Scalar;
            }
            if (((aux_last_type_read_for_NI == SCALAR_INT) && (aux_NI_read == true))) {
              cpp_current_dict["NI"] = var_NI_0d_int_Scalar;
            }
            cpp_current_dict = cpp_parent_dict;
          }
        }
      }
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_MTL == SCALAR_INT) && (aux_MTL_read == true))) {
    cpp_current_dict["MTL"] = var_MTL_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NL == SCALAR_INT) && (aux_NL_read == true))) {
    cpp_current_dict["NL"] = var_NL_0d_int_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_mf32_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_NIS_0d_int_Scalar;
  bool aux_NIS_read = false;
  vartype aux_last_type_read_for_NIS = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // assign expression to variable NIS
  var_NIS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
  aux_NIS_read = true;
  if ((aux_last_type_read_for_NIS != SCALAR_INT && aux_last_type_read_for_NIS != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NIS = SCALAR_INT;

  for (int var_i_0d_int_Scalar = 1;
     var_i_0d_int_Scalar <= var_NIS_0d_int_Scalar; var_i_0d_int_Scalar++) {
    bool aux_i_read = true;
    // open section isotope

    {
        py::dict cpp_parent_dict = cpp_current_dict;
        if (! cpp_parent_dict.contains("isotope")) {
          cpp_parent_dict["isotope"] = py::dict();
        }
        py::dict cpp_current_dict = cpp_parent_dict["isotope"];

        if (! cpp_current_dict.contains(py::cast(var_i_0d_int_Scalar))) {
          cpp_current_dict[py::cast(var_i_0d_int_Scalar)] = py::dict();
        }
        cpp_current_dict = cpp_current_dict[py::cast(var_i_0d_int_Scalar)];
      // variable declarations
      double var_ZAI_0d_double_Scalar;
      bool aux_ZAI_read = false;
      vartype aux_last_type_read_for_ZAI = UNKNOWN;
      double var_ABN_0d_double_Scalar;
      bool aux_ABN_read = false;
      vartype aux_last_type_read_for_ABN = UNKNOWN;
      int var_LFW_0d_int_Scalar;
      bool aux_LFW_read = false;
      vartype aux_last_type_read_for_LFW = UNKNOWN;
      int var_NER_0d_int_Scalar;
      bool aux_NER_read = false;
      vartype aux_last_type_read_for_NER = UNKNOWN;
      cpp_line = cpp_read_line(cont);
      // read CONT record
      // assign expression to variable ZAI
      var_ZAI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
      aux_ZAI_read = true;
      if ((aux_last_type_read_for_ZAI != SCALAR_DOUBLE && aux_last_type_read_for_ZAI != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_ZAI = SCALAR_DOUBLE;
      // assign expression to variable ABN
      var_ABN_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
      aux_ABN_read = true;
      if ((aux_last_type_read_for_ABN != SCALAR_DOUBLE && aux_last_type_read_for_ABN != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_ABN = SCALAR_DOUBLE;
      // assign expression to variable LFW
      var_LFW_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
      aux_LFW_read = true;
      if ((aux_last_type_read_for_LFW != SCALAR_INT && aux_last_type_read_for_LFW != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_LFW = SCALAR_INT;
      // assign expression to variable NER
      var_NER_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
      aux_NER_read = true;
      if ((aux_last_type_read_for_NER != SCALAR_INT && aux_last_type_read_for_NER != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_NER = SCALAR_INT;

      for (int var_j_0d_int_Scalar = 1;
         var_j_0d_int_Scalar <= var_NER_0d_int_Scalar; var_j_0d_int_Scalar++) {
        bool aux_j_read = true;
        // open section range

        {
            py::dict cpp_parent_dict = cpp_current_dict;
            if (! cpp_parent_dict.contains("range")) {
              cpp_parent_dict["range"] = py::dict();
            }
            py::dict cpp_current_dict = cpp_parent_dict["range"];

            if (! cpp_current_dict.contains(py::cast(var_j_0d_int_Scalar))) {
              cpp_current_dict[py::cast(var_j_0d_int_Scalar)] = py::dict();
            }
            cpp_current_dict = cpp_current_dict[py::cast(var_j_0d_int_Scalar)];
          // variable declarations
          double var_EL_0d_double_Scalar;
          bool aux_EL_read = false;
          vartype aux_last_type_read_for_EL = UNKNOWN;
          double var_EH_0d_double_Scalar;
          bool aux_EH_read = false;
          vartype aux_last_type_read_for_EH = UNKNOWN;
          int var_LRU_0d_int_Scalar;
          bool aux_LRU_read = false;
          vartype aux_last_type_read_for_LRU = UNKNOWN;
          int var_LRF_0d_int_Scalar;
          bool aux_LRF_read = false;
          vartype aux_last_type_read_for_LRF = UNKNOWN;
          int var_NRO_0d_int_Scalar;
          bool aux_NRO_read = false;
          vartype aux_last_type_read_for_NRO = UNKNOWN;
          int var_NAPS_0d_int_Scalar;
          bool aux_NAPS_read = false;
          vartype aux_last_type_read_for_NAPS = UNKNOWN;
          int var_NI_0d_int_Scalar;
          bool aux_NI_read = false;
          vartype aux_last_type_read_for_NI = UNKNOWN;
          double var_SPI_0d_double_Scalar;
          bool aux_SPI_read = false;
          vartype aux_last_type_read_for_SPI = UNKNOWN;
          double var_AP_0d_double_Scalar;
          bool aux_AP_read = false;
          vartype aux_last_type_read_for_AP = UNKNOWN;
          int var_LCOMP_0d_int_Scalar;
          bool aux_LCOMP_read = false;
          vartype aux_last_type_read_for_LCOMP = UNKNOWN;
          int var_NLS_0d_int_Scalar;
          bool aux_NLS_read = false;
          vartype aux_last_type_read_for_NLS = UNKNOWN;
          int var_ISR_0d_int_Scalar;
          bool aux_ISR_read = false;
          vartype aux_last_type_read_for_ISR = UNKNOWN;
          double var_DAP_0d_double_Scalar;
          bool aux_DAP_read = false;
          vartype aux_last_type_read_for_DAP = UNKNOWN;
          double var_AWRI_0d_double_Scalar;
          bool aux_AWRI_read = false;
          vartype aux_last_type_read_for_AWRI = UNKNOWN;
          int var_NSRS_0d_int_Scalar;
          bool aux_NSRS_read = false;
          vartype aux_last_type_read_for_NSRS = UNKNOWN;
          int var_NLRS_0d_int_Scalar;
          bool aux_NLRS_read = false;
          vartype aux_last_type_read_for_NLRS = UNKNOWN;
          int var_MLS_0d_int_Scalar;
          bool aux_MLS_read = false;
          vartype aux_last_type_read_for_MLS = UNKNOWN;
          NestedVector<double> var_DAP_1d_double_NestedVector;
          int var_JCH_0d_int_Scalar;
          bool aux_JCH_read = false;
          vartype aux_last_type_read_for_JCH = UNKNOWN;
          int cpp_int_val;
          bool aux_cpp_int_val_read = false;
          vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
          int var_NCH_0d_int_Scalar;
          bool aux_NCH_read = false;
          vartype aux_last_type_read_for_NCH = UNKNOWN;
          Matrix2d<double> var_DAP_2d_double_Matrix2d;
          double var_QX_0d_double_Scalar;
          bool aux_QX_read = false;
          vartype aux_last_type_read_for_QX = UNKNOWN;
          int var_LRX_0d_int_Scalar;
          bool aux_LRX_read = false;
          vartype aux_last_type_read_for_LRX = UNKNOWN;
          int var_NRSA_0d_int_Scalar;
          bool aux_NRSA_read = false;
          vartype aux_last_type_read_for_NRSA = UNKNOWN;
          NestedVector<double> var_ER_1d_double_NestedVector;
          vartype aux_last_type_read_for_ER = UNKNOWN;
          NestedVector<double> var_AJ_1d_double_NestedVector;
          vartype aux_last_type_read_for_AJ = UNKNOWN;
          NestedVector<double> var_GT_1d_double_NestedVector;
          vartype aux_last_type_read_for_GT = UNKNOWN;
          NestedVector<double> var_GN_1d_double_NestedVector;
          vartype aux_last_type_read_for_GN = UNKNOWN;
          NestedVector<double> var_GG_1d_double_NestedVector;
          vartype aux_last_type_read_for_GG = UNKNOWN;
          NestedVector<double> var_GF_1d_double_NestedVector;
          vartype aux_last_type_read_for_GF = UNKNOWN;
          NestedVector<double> var_DER_1d_double_NestedVector;
          vartype aux_last_type_read_for_DER = UNKNOWN;
          NestedVector<double> var_DGN_1d_double_NestedVector;
          vartype aux_last_type_read_for_DGN = UNKNOWN;
          NestedVector<double> var_DGG_1d_double_NestedVector;
          vartype aux_last_type_read_for_DGG = UNKNOWN;
          NestedVector<double> var_DGF_1d_double_NestedVector;
          vartype aux_last_type_read_for_DGF = UNKNOWN;
          int var_NDIGIT_0d_int_Scalar;
          bool aux_NDIGIT_read = false;
          vartype aux_last_type_read_for_NDIGIT = UNKNOWN;
          int var_NNN_0d_int_Scalar;
          bool aux_NNN_read = false;
          vartype aux_last_type_read_for_NNN = UNKNOWN;
          int var_NM_0d_int_Scalar;
          bool aux_NM_read = false;
          vartype aux_last_type_read_for_NM = UNKNOWN;
          NestedVector<int> var_II_1d_int_NestedVector;
          vartype aux_last_type_read_for_II = UNKNOWN;
          NestedVector<int> var_JJ_1d_int_NestedVector;
          vartype aux_last_type_read_for_JJ = UNKNOWN;
          NestedVector<std::vector<int>> var_KIJ_1d_intvec_NestedVector;
          vartype aux_last_type_read_for_KIJ = UNKNOWN;
          int var_LAD_0d_int_Scalar;
          bool aux_LAD_read = false;
          vartype aux_last_type_read_for_LAD = UNKNOWN;
          double var_APL_0d_double_Scalar;
          bool aux_APL_read = false;
          vartype aux_last_type_read_for_APL = UNKNOWN;
          NestedVector<double> var_GFA_1d_double_NestedVector;
          vartype aux_last_type_read_for_GFA = UNKNOWN;
          NestedVector<double> var_GFB_1d_double_NestedVector;
          vartype aux_last_type_read_for_GFB = UNKNOWN;
          NestedVector<double> var_DGFA_1d_double_NestedVector;
          vartype aux_last_type_read_for_DGFA = UNKNOWN;
          NestedVector<double> var_DGFB_1d_double_NestedVector;
          vartype aux_last_type_read_for_DGFB = UNKNOWN;
          int var_IFG_0d_int_Scalar;
          bool aux_IFG_read = false;
          vartype aux_last_type_read_for_IFG = UNKNOWN;
          int var_NJS_0d_int_Scalar;
          bool aux_NJS_read = false;
          vartype aux_last_type_read_for_NJS = UNKNOWN;
          int var_NJCH_0d_int_Scalar;
          bool aux_NJCH_read = false;
          vartype aux_last_type_read_for_NJCH = UNKNOWN;
          int var_NPP_0d_int_Scalar;
          bool aux_NPP_read = false;
          vartype aux_last_type_read_for_NPP = UNKNOWN;
          int var_NJSX_0d_int_Scalar;
          bool aux_NJSX_read = false;
          vartype aux_last_type_read_for_NJSX = UNKNOWN;
          NestedVector<double> var_MA_1d_double_NestedVector;
          vartype aux_last_type_read_for_MA = UNKNOWN;
          NestedVector<double> var_MB_1d_double_NestedVector;
          vartype aux_last_type_read_for_MB = UNKNOWN;
          NestedVector<double> var_ZA_1d_double_NestedVector;
          vartype aux_last_type_read_for_ZA = UNKNOWN;
          NestedVector<double> var_ZB_1d_double_NestedVector;
          vartype aux_last_type_read_for_ZB = UNKNOWN;
          NestedVector<double> var_IA_1d_double_NestedVector;
          vartype aux_last_type_read_for_IA = UNKNOWN;
          NestedVector<double> var_IB_1d_double_NestedVector;
          vartype aux_last_type_read_for_IB = UNKNOWN;
          NestedVector<double> var_Q_1d_double_NestedVector;
          vartype aux_last_type_read_for_Q = UNKNOWN;
          NestedVector<double> var_PNT_1d_double_NestedVector;
          vartype aux_last_type_read_for_PNT = UNKNOWN;
          NestedVector<double> var_SHF_1d_double_NestedVector;
          vartype aux_last_type_read_for_SHF = UNKNOWN;
          NestedVector<double> var_MT_1d_double_NestedVector;
          vartype aux_last_type_read_for_MT = UNKNOWN;
          NestedVector<double> var_PA_1d_double_NestedVector;
          vartype aux_last_type_read_for_PA = UNKNOWN;
          NestedVector<double> var_PB_1d_double_NestedVector;
          vartype aux_last_type_read_for_PB = UNKNOWN;
          int var_MPAR_0d_int_Scalar;
          bool aux_MPAR_read = false;
          vartype aux_last_type_read_for_MPAR = UNKNOWN;
          int var_NPAR_0d_int_Scalar;
          bool aux_NPAR_read = false;
          vartype aux_last_type_read_for_NPAR = UNKNOWN;
          Matrix2d<double> var_RV_2d_double_Matrix2d;
          vartype aux_last_type_read_for_RV = UNKNOWN;
          cpp_line = cpp_read_line(cont);
          // read CONT record
          // assign expression to variable EL
          var_EL_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
          aux_EL_read = true;
          if ((aux_last_type_read_for_EL != SCALAR_DOUBLE && aux_last_type_read_for_EL != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_EL = SCALAR_DOUBLE;
          // assign expression to variable EH
          var_EH_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
          aux_EH_read = true;
          if ((aux_last_type_read_for_EH != SCALAR_DOUBLE && aux_last_type_read_for_EH != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_EH = SCALAR_DOUBLE;
          // assign expression to variable LRU
          var_LRU_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
          aux_LRU_read = true;
          if ((aux_last_type_read_for_LRU != SCALAR_INT && aux_last_type_read_for_LRU != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_LRU = SCALAR_INT;
          // assign expression to variable LRF
          var_LRF_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
          aux_LRF_read = true;
          if ((aux_last_type_read_for_LRF != SCALAR_INT && aux_last_type_read_for_LRF != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_LRF = SCALAR_INT;
          // assign expression to variable NRO
          var_NRO_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
          aux_NRO_read = true;
          if ((aux_last_type_read_for_NRO != SCALAR_INT && aux_last_type_read_for_NRO != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NRO = SCALAR_INT;
          // assign expression to variable NAPS
          var_NAPS_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
          aux_NAPS_read = true;
          if ((aux_last_type_read_for_NAPS != SCALAR_INT && aux_last_type_read_for_NAPS != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NAPS = SCALAR_INT;
          // evaluate if-elif-else clause
          {
            bool cpp_found_match = false;
            if (! cpp_found_match) {
              if ((((((((aux_NRO_read == true)) && ((var_NRO_0d_int_Scalar)!=(0)))))))) {
                // if statement evaluation
                cpp_found_match = true;
                cpp_line = cpp_read_line(cont);
                // read CONT record
                // assign expression to variable NI
                var_NI_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                aux_NI_read = true;
                if ((aux_last_type_read_for_NI != SCALAR_INT && aux_last_type_read_for_NI != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_NI = SCALAR_INT;
              }
            }
          }
          // evaluate if-elif-else clause
          {
            bool cpp_found_match = false;
            if (! cpp_found_match) {
              // if statement evaluation with lookahead
              {
                std::streampos cpp_old_streampos = cont.tellg();
                {
                  // variable declarations
                  double& glob_var_EL_0d_double_Scalar = var_EL_0d_double_Scalar;
                  double var_EL_0d_double_Scalar = glob_var_EL_0d_double_Scalar;
                  bool& glob_aux_EL_read = aux_EL_read;
                  bool aux_EL_read = glob_aux_EL_read;
                  vartype aux_last_type_read_for_EL = UNKNOWN;
                  double& glob_var_EH_0d_double_Scalar = var_EH_0d_double_Scalar;
                  double var_EH_0d_double_Scalar = glob_var_EH_0d_double_Scalar;
                  bool& glob_aux_EH_read = aux_EH_read;
                  bool aux_EH_read = glob_aux_EH_read;
                  vartype aux_last_type_read_for_EH = UNKNOWN;
                  int& glob_var_LRU_0d_int_Scalar = var_LRU_0d_int_Scalar;
                  int var_LRU_0d_int_Scalar = glob_var_LRU_0d_int_Scalar;
                  bool& glob_aux_LRU_read = aux_LRU_read;
                  bool aux_LRU_read = glob_aux_LRU_read;
                  vartype aux_last_type_read_for_LRU = UNKNOWN;
                  int& glob_var_LRF_0d_int_Scalar = var_LRF_0d_int_Scalar;
                  int var_LRF_0d_int_Scalar = glob_var_LRF_0d_int_Scalar;
                  bool& glob_aux_LRF_read = aux_LRF_read;
                  bool aux_LRF_read = glob_aux_LRF_read;
                  vartype aux_last_type_read_for_LRF = UNKNOWN;
                  int& glob_var_NRO_0d_int_Scalar = var_NRO_0d_int_Scalar;
                  int var_NRO_0d_int_Scalar = glob_var_NRO_0d_int_Scalar;
                  bool& glob_aux_NRO_read = aux_NRO_read;
                  bool aux_NRO_read = glob_aux_NRO_read;
                  vartype aux_last_type_read_for_NRO = UNKNOWN;
                  int& glob_var_NAPS_0d_int_Scalar = var_NAPS_0d_int_Scalar;
                  int var_NAPS_0d_int_Scalar = glob_var_NAPS_0d_int_Scalar;
                  bool& glob_aux_NAPS_read = aux_NAPS_read;
                  bool aux_NAPS_read = glob_aux_NAPS_read;
                  vartype aux_last_type_read_for_NAPS = UNKNOWN;
                  int& glob_var_NI_0d_int_Scalar = var_NI_0d_int_Scalar;
                  int var_NI_0d_int_Scalar = glob_var_NI_0d_int_Scalar;
                  bool& glob_aux_NI_read = aux_NI_read;
                  bool aux_NI_read = glob_aux_NI_read;
                  vartype aux_last_type_read_for_NI = UNKNOWN;
                  double& glob_var_SPI_0d_double_Scalar = var_SPI_0d_double_Scalar;
                  double var_SPI_0d_double_Scalar = glob_var_SPI_0d_double_Scalar;
                  bool& glob_aux_SPI_read = aux_SPI_read;
                  bool aux_SPI_read = glob_aux_SPI_read;
                  vartype aux_last_type_read_for_SPI = UNKNOWN;
                  double& glob_var_AP_0d_double_Scalar = var_AP_0d_double_Scalar;
                  double var_AP_0d_double_Scalar = glob_var_AP_0d_double_Scalar;
                  bool& glob_aux_AP_read = aux_AP_read;
                  bool aux_AP_read = glob_aux_AP_read;
                  vartype aux_last_type_read_for_AP = UNKNOWN;
                  int& glob_var_LCOMP_0d_int_Scalar = var_LCOMP_0d_int_Scalar;
                  int var_LCOMP_0d_int_Scalar = glob_var_LCOMP_0d_int_Scalar;
                  bool& glob_aux_LCOMP_read = aux_LCOMP_read;
                  bool aux_LCOMP_read = glob_aux_LCOMP_read;
                  vartype aux_last_type_read_for_LCOMP = UNKNOWN;
                  int& glob_var_NLS_0d_int_Scalar = var_NLS_0d_int_Scalar;
                  int var_NLS_0d_int_Scalar = glob_var_NLS_0d_int_Scalar;
                  bool& glob_aux_NLS_read = aux_NLS_read;
                  bool aux_NLS_read = glob_aux_NLS_read;
                  vartype aux_last_type_read_for_NLS = UNKNOWN;
                  int& glob_var_ISR_0d_int_Scalar = var_ISR_0d_int_Scalar;
                  int var_ISR_0d_int_Scalar = glob_var_ISR_0d_int_Scalar;
                  bool& glob_aux_ISR_read = aux_ISR_read;
                  bool aux_ISR_read = glob_aux_ISR_read;
                  vartype aux_last_type_read_for_ISR = UNKNOWN;
                  cpp_line = cpp_read_line(cont);
                  // read CONT record
                  // assign expression to variable SPI
                  var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                  aux_SPI_read = true;
                  if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_SPI = SCALAR_DOUBLE;
                  // assign expression to variable AP
                  var_AP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                  aux_AP_read = true;
                  if ((aux_last_type_read_for_AP != SCALAR_DOUBLE && aux_last_type_read_for_AP != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_AP = SCALAR_DOUBLE;
                  // assign expression to variable LCOMP
                  var_LCOMP_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                  aux_LCOMP_read = true;
                  if ((aux_last_type_read_for_LCOMP != SCALAR_INT && aux_last_type_read_for_LCOMP != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_LCOMP = SCALAR_INT;
                  // assign expression to variable NLS
                  var_NLS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                  aux_NLS_read = true;
                  if ((aux_last_type_read_for_NLS != SCALAR_INT && aux_last_type_read_for_NLS != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_NLS = SCALAR_INT;
                  // assign expression to variable ISR
                  var_ISR_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                  aux_ISR_read = true;
                  if ((aux_last_type_read_for_ISR != SCALAR_INT && aux_last_type_read_for_ISR != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_ISR = SCALAR_INT;
                  if ((((((((((aux_LCOMP_read == true)) && ((var_LCOMP_0d_int_Scalar)==(0)))))&&((((aux_LRU_read == true)) && ((var_LRU_0d_int_Scalar)==(1)))))&&(((((((((aux_LRF_read == true)) && ((var_LRF_0d_int_Scalar)==(1))))))||(((((aux_LRF_read == true)) && ((var_LRF_0d_int_Scalar)==(2)))))))))))) {
                    cpp_found_match = true;
                  }
                  cont.seekg(cpp_old_streampos);
                }
                if (cpp_found_match) {
                  cpp_line = cpp_read_line(cont);
                  // read CONT record
                  // assign expression to variable SPI
                  var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                  aux_SPI_read = true;
                  if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_SPI = SCALAR_DOUBLE;
                  // assign expression to variable AP
                  var_AP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                  aux_AP_read = true;
                  if ((aux_last_type_read_for_AP != SCALAR_DOUBLE && aux_last_type_read_for_AP != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_AP = SCALAR_DOUBLE;
                  // assign expression to variable LCOMP
                  var_LCOMP_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                  aux_LCOMP_read = true;
                  if ((aux_last_type_read_for_LCOMP != SCALAR_INT && aux_last_type_read_for_LCOMP != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_LCOMP = SCALAR_INT;
                  // assign expression to variable NLS
                  var_NLS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                  aux_NLS_read = true;
                  if ((aux_last_type_read_for_NLS != SCALAR_INT && aux_last_type_read_for_NLS != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_NLS = SCALAR_INT;
                  // assign expression to variable ISR
                  var_ISR_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                  aux_ISR_read = true;
                  if ((aux_last_type_read_for_ISR != SCALAR_INT && aux_last_type_read_for_ISR != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_ISR = SCALAR_INT;
                  // evaluate if-elif-else clause
                  {
                    bool cpp_found_match = false;
                    if (! cpp_found_match) {
                      if ((((((((aux_ISR_read == true)) && ((var_ISR_0d_int_Scalar)!=(0)))))))) {
                        // if statement evaluation
                        cpp_found_match = true;
                        cpp_line = cpp_read_line(cont);
                        // read CONT record
                        // assign expression to variable DAP
                        var_DAP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_DAP_read = true;
                        if ((aux_last_type_read_for_DAP != SCALAR_DOUBLE && aux_last_type_read_for_DAP != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_DAP = SCALAR_DOUBLE;
                      }
                    }
                  }

                  for (int var_k_0d_int_Scalar = 1;
                     var_k_0d_int_Scalar <= var_NLS_0d_int_Scalar; var_k_0d_int_Scalar++) {
                    bool aux_k_read = true;
                    // open section somesec

                    {
                        py::dict cpp_parent_dict = cpp_current_dict;
                        if (! cpp_parent_dict.contains("somesec")) {
                          cpp_parent_dict["somesec"] = py::dict();
                        }
                        py::dict cpp_current_dict = cpp_parent_dict["somesec"];

                        if (! cpp_current_dict.contains(py::cast(var_k_0d_int_Scalar))) {
                          cpp_current_dict[py::cast(var_k_0d_int_Scalar)] = py::dict();
                        }
                        cpp_current_dict = cpp_current_dict[py::cast(var_k_0d_int_Scalar)];
                      // variable declarations
                      double var_AWRI_0d_double_Scalar;
                      bool aux_AWRI_read = false;
                      vartype aux_last_type_read_for_AWRI = UNKNOWN;
                      int var_L_0d_int_Scalar;
                      bool aux_L_read = false;
                      vartype aux_last_type_read_for_L = UNKNOWN;
                      int cpp_int_val;
                      bool aux_cpp_int_val_read = false;
                      vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                      int var_NRS_0d_int_Scalar;
                      bool aux_NRS_read = false;
                      vartype aux_last_type_read_for_NRS = UNKNOWN;
                      NestedVector<double> var_ER_1d_double_NestedVector;
                      vartype aux_last_type_read_for_ER = UNKNOWN;
                      NestedVector<double> var_AJ_1d_double_NestedVector;
                      vartype aux_last_type_read_for_AJ = UNKNOWN;
                      NestedVector<double> var_GT_1d_double_NestedVector;
                      vartype aux_last_type_read_for_GT = UNKNOWN;
                      NestedVector<double> var_GN_1d_double_NestedVector;
                      vartype aux_last_type_read_for_GN = UNKNOWN;
                      NestedVector<double> var_GG_1d_double_NestedVector;
                      vartype aux_last_type_read_for_GG = UNKNOWN;
                      NestedVector<double> var_GF_1d_double_NestedVector;
                      vartype aux_last_type_read_for_GF = UNKNOWN;
                      NestedVector<double> var_DE2_1d_double_NestedVector;
                      vartype aux_last_type_read_for_DE2 = UNKNOWN;
                      NestedVector<double> var_DN2_1d_double_NestedVector;
                      vartype aux_last_type_read_for_DN2 = UNKNOWN;
                      NestedVector<double> var_DNDG_1d_double_NestedVector;
                      vartype aux_last_type_read_for_DNDG = UNKNOWN;
                      NestedVector<double> var_DG2_1d_double_NestedVector;
                      vartype aux_last_type_read_for_DG2 = UNKNOWN;
                      NestedVector<double> var_DNDF_1d_double_NestedVector;
                      vartype aux_last_type_read_for_DNDF = UNKNOWN;
                      NestedVector<double> var_DGDF_1d_double_NestedVector;
                      vartype aux_last_type_read_for_DGDF = UNKNOWN;
                      NestedVector<double> var_DF2_1d_double_NestedVector;
                      vartype aux_last_type_read_for_DF2 = UNKNOWN;
                      NestedVector<double> var_DJDN_1d_double_NestedVector;
                      vartype aux_last_type_read_for_DJDN = UNKNOWN;
                      NestedVector<double> var_DJDG_1d_double_NestedVector;
                      vartype aux_last_type_read_for_DJDG = UNKNOWN;
                      NestedVector<double> var_DJDF_1d_double_NestedVector;
                      vartype aux_last_type_read_for_DJDF = UNKNOWN;
                      NestedVector<double> var_DJ2_1d_double_NestedVector;
                      vartype aux_last_type_read_for_DJ2 = UNKNOWN;
                      cpp_line = cpp_read_line(cont);
                      // read LIST record
                      // assign expression to variable AWRI
                      var_AWRI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                      aux_AWRI_read = true;
                      if ((aux_last_type_read_for_AWRI != SCALAR_DOUBLE && aux_last_type_read_for_AWRI != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_AWRI = SCALAR_DOUBLE;
                      // assign expression to variable L
                      var_L_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                      aux_L_read = true;
                      if ((aux_last_type_read_for_L != SCALAR_INT && aux_last_type_read_for_L != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_L = SCALAR_INT;
                      // assign expression to variable cpp_int_val
                      cpp_int_val = cpp_read_int_field(cpp_line, 4);
                      aux_cpp_int_val_read = true;
                      if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                      // assign expression to variable NRS
                      var_NRS_0d_int_Scalar = (cpp_int_val/18);
                      aux_NRS_read = true;
                      if ((aux_last_type_read_for_NRS != SCALAR_INT && aux_last_type_read_for_NRS != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_NRS = SCALAR_INT;
                      if ((! (aux_NRS_read == true))) {
                        // assign expression to variable NRS
                        var_NRS_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                        aux_NRS_read = true;
                        if ((aux_last_type_read_for_NRS != SCALAR_INT && aux_last_type_read_for_NRS != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NRS = SCALAR_INT;
                      }
                      {
                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                        int cpp_j = 0;
                        // read LIST body

                        for (int var_m_0d_int_Scalar = 1;
                           var_m_0d_int_Scalar <= var_NRS_0d_int_Scalar; var_m_0d_int_Scalar++) {
                          bool aux_m_read = true;
                          // read LIST body
                          // assign expression to variable ER
                          var_ER_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_ER != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ER != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_ER = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable AJ
                          var_AJ_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_AJ != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_AJ != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_AJ = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable GT
                          var_GT_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_GT != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GT != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_GT = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable GN
                          var_GN_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_GN != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GN != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_GN = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable GG
                          var_GG_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_GG != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GG != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_GG = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable GF
                          var_GF_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_GF != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GF != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_GF = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable DE2
                          var_DE2_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_DE2 != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DE2 != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_DE2 = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable DN2
                          var_DN2_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_DN2 != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DN2 != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_DN2 = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable DNDG
                          var_DNDG_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_DNDG != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DNDG != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_DNDG = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable DG2
                          var_DG2_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_DG2 != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DG2 != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_DG2 = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable DNDF
                          var_DNDF_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_DNDF != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DNDF != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_DNDF = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable DGDF
                          var_DGDF_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_DGDF != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DGDF != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_DGDF = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable DF2
                          var_DF2_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_DF2 != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DF2 != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_DF2 = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable DJDN
                          var_DJDN_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_DJDN != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DJDN != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_DJDN = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable DJDG
                          var_DJDG_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_DJDG != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DJDG != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_DJDG = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable DJDF
                          var_DJDF_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_DJDF != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DJDF != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_DJDF = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable DJ2
                          var_DJ2_1d_double_NestedVector.set(var_m_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_DJ2 != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DJ2 != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_DJ2 = NESTEDVECTOR_DOUBLE;
                          cpp_j++;
                        }
                      }
                      // store data in Python dictionary
                      if (((aux_last_type_read_for_AWRI == SCALAR_DOUBLE) && (aux_AWRI_read == true))) {
                        cpp_current_dict["AWRI"] = var_AWRI_0d_double_Scalar;
                      }
                      if (((aux_last_type_read_for_L == SCALAR_INT) && (aux_L_read == true))) {
                        cpp_current_dict["L"] = var_L_0d_int_Scalar;
                      }
                      if (((aux_last_type_read_for_NRS == SCALAR_INT) && (aux_NRS_read == true))) {
                        cpp_current_dict["NRS"] = var_NRS_0d_int_Scalar;
                      }
                      if ((var_ER_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_ER_1d_double_NestedVector;
                        cpp_current_dict["ER"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["ER"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      if ((var_AJ_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_AJ_1d_double_NestedVector;
                        cpp_current_dict["AJ"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["AJ"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      if ((var_GT_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_GT_1d_double_NestedVector;
                        cpp_current_dict["GT"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["GT"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      if ((var_GN_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_GN_1d_double_NestedVector;
                        cpp_current_dict["GN"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["GN"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      if ((var_GG_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_GG_1d_double_NestedVector;
                        cpp_current_dict["GG"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["GG"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      if ((var_GF_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_GF_1d_double_NestedVector;
                        cpp_current_dict["GF"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["GF"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      if ((var_DE2_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_DE2_1d_double_NestedVector;
                        cpp_current_dict["DE2"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["DE2"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      if ((var_DN2_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_DN2_1d_double_NestedVector;
                        cpp_current_dict["DN2"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["DN2"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      if ((var_DNDG_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_DNDG_1d_double_NestedVector;
                        cpp_current_dict["DNDG"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["DNDG"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      if ((var_DG2_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_DG2_1d_double_NestedVector;
                        cpp_current_dict["DG2"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["DG2"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      if ((var_DNDF_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_DNDF_1d_double_NestedVector;
                        cpp_current_dict["DNDF"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["DNDF"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      if ((var_DGDF_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_DGDF_1d_double_NestedVector;
                        cpp_current_dict["DGDF"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["DGDF"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      if ((var_DF2_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_DF2_1d_double_NestedVector;
                        cpp_current_dict["DF2"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["DF2"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      if ((var_DJDN_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_DJDN_1d_double_NestedVector;
                        cpp_current_dict["DJDN"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["DJDN"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      if ((var_DJDG_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_DJDG_1d_double_NestedVector;
                        cpp_current_dict["DJDG"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["DJDG"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      if ((var_DJDF_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_DJDF_1d_double_NestedVector;
                        cpp_current_dict["DJDF"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["DJDF"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      if ((var_DJ2_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_DJ2_1d_double_NestedVector;
                        cpp_current_dict["DJ2"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["DJ2"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      cpp_current_dict = cpp_parent_dict;
                    }
                  }
                }
              }
            }
            if (! cpp_found_match) {
              if (! cpp_found_match) {
                // if statement evaluation with lookahead
                {
                  std::streampos cpp_old_streampos = cont.tellg();
                  {
                    // variable declarations
                    double& glob_var_EL_0d_double_Scalar = var_EL_0d_double_Scalar;
                    double var_EL_0d_double_Scalar = glob_var_EL_0d_double_Scalar;
                    bool& glob_aux_EL_read = aux_EL_read;
                    bool aux_EL_read = glob_aux_EL_read;
                    vartype aux_last_type_read_for_EL = UNKNOWN;
                    double& glob_var_EH_0d_double_Scalar = var_EH_0d_double_Scalar;
                    double var_EH_0d_double_Scalar = glob_var_EH_0d_double_Scalar;
                    bool& glob_aux_EH_read = aux_EH_read;
                    bool aux_EH_read = glob_aux_EH_read;
                    vartype aux_last_type_read_for_EH = UNKNOWN;
                    int& glob_var_LRU_0d_int_Scalar = var_LRU_0d_int_Scalar;
                    int var_LRU_0d_int_Scalar = glob_var_LRU_0d_int_Scalar;
                    bool& glob_aux_LRU_read = aux_LRU_read;
                    bool aux_LRU_read = glob_aux_LRU_read;
                    vartype aux_last_type_read_for_LRU = UNKNOWN;
                    int& glob_var_LRF_0d_int_Scalar = var_LRF_0d_int_Scalar;
                    int var_LRF_0d_int_Scalar = glob_var_LRF_0d_int_Scalar;
                    bool& glob_aux_LRF_read = aux_LRF_read;
                    bool aux_LRF_read = glob_aux_LRF_read;
                    vartype aux_last_type_read_for_LRF = UNKNOWN;
                    int& glob_var_NRO_0d_int_Scalar = var_NRO_0d_int_Scalar;
                    int var_NRO_0d_int_Scalar = glob_var_NRO_0d_int_Scalar;
                    bool& glob_aux_NRO_read = aux_NRO_read;
                    bool aux_NRO_read = glob_aux_NRO_read;
                    vartype aux_last_type_read_for_NRO = UNKNOWN;
                    int& glob_var_NAPS_0d_int_Scalar = var_NAPS_0d_int_Scalar;
                    int var_NAPS_0d_int_Scalar = glob_var_NAPS_0d_int_Scalar;
                    bool& glob_aux_NAPS_read = aux_NAPS_read;
                    bool aux_NAPS_read = glob_aux_NAPS_read;
                    vartype aux_last_type_read_for_NAPS = UNKNOWN;
                    int& glob_var_NI_0d_int_Scalar = var_NI_0d_int_Scalar;
                    int var_NI_0d_int_Scalar = glob_var_NI_0d_int_Scalar;
                    bool& glob_aux_NI_read = aux_NI_read;
                    bool aux_NI_read = glob_aux_NI_read;
                    vartype aux_last_type_read_for_NI = UNKNOWN;
                    double& glob_var_SPI_0d_double_Scalar = var_SPI_0d_double_Scalar;
                    double var_SPI_0d_double_Scalar = glob_var_SPI_0d_double_Scalar;
                    bool& glob_aux_SPI_read = aux_SPI_read;
                    bool aux_SPI_read = glob_aux_SPI_read;
                    vartype aux_last_type_read_for_SPI = UNKNOWN;
                    double& glob_var_AP_0d_double_Scalar = var_AP_0d_double_Scalar;
                    double var_AP_0d_double_Scalar = glob_var_AP_0d_double_Scalar;
                    bool& glob_aux_AP_read = aux_AP_read;
                    bool aux_AP_read = glob_aux_AP_read;
                    vartype aux_last_type_read_for_AP = UNKNOWN;
                    int& glob_var_LCOMP_0d_int_Scalar = var_LCOMP_0d_int_Scalar;
                    int var_LCOMP_0d_int_Scalar = glob_var_LCOMP_0d_int_Scalar;
                    bool& glob_aux_LCOMP_read = aux_LCOMP_read;
                    bool aux_LCOMP_read = glob_aux_LCOMP_read;
                    vartype aux_last_type_read_for_LCOMP = UNKNOWN;
                    int& glob_var_NLS_0d_int_Scalar = var_NLS_0d_int_Scalar;
                    int var_NLS_0d_int_Scalar = glob_var_NLS_0d_int_Scalar;
                    bool& glob_aux_NLS_read = aux_NLS_read;
                    bool aux_NLS_read = glob_aux_NLS_read;
                    vartype aux_last_type_read_for_NLS = UNKNOWN;
                    int& glob_var_ISR_0d_int_Scalar = var_ISR_0d_int_Scalar;
                    int var_ISR_0d_int_Scalar = glob_var_ISR_0d_int_Scalar;
                    bool& glob_aux_ISR_read = aux_ISR_read;
                    bool aux_ISR_read = glob_aux_ISR_read;
                    vartype aux_last_type_read_for_ISR = UNKNOWN;
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable SPI
                    var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_SPI_read = true;
                    if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_SPI = SCALAR_DOUBLE;
                    // assign expression to variable AP
                    var_AP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_AP_read = true;
                    if ((aux_last_type_read_for_AP != SCALAR_DOUBLE && aux_last_type_read_for_AP != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_AP = SCALAR_DOUBLE;
                    // assign expression to variable LCOMP
                    var_LCOMP_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                    aux_LCOMP_read = true;
                    if ((aux_last_type_read_for_LCOMP != SCALAR_INT && aux_last_type_read_for_LCOMP != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_LCOMP = SCALAR_INT;
                    // assign expression to variable NLS
                    var_NLS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                    aux_NLS_read = true;
                    if ((aux_last_type_read_for_NLS != SCALAR_INT && aux_last_type_read_for_NLS != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NLS = SCALAR_INT;
                    // assign expression to variable ISR
                    var_ISR_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                    aux_ISR_read = true;
                    if ((aux_last_type_read_for_ISR != SCALAR_INT && aux_last_type_read_for_ISR != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_ISR = SCALAR_INT;
                    if ((((((((((aux_LCOMP_read == true)) && ((var_LCOMP_0d_int_Scalar)==(1)))))&&((((aux_LRU_read == true)) && ((var_LRU_0d_int_Scalar)==(1)))))&&(((((((((aux_LRF_read == true)) && ((var_LRF_0d_int_Scalar)==(1))))))||(((((aux_LRF_read == true)) && ((var_LRF_0d_int_Scalar)==(2)))))))))))) {
                      cpp_found_match = true;
                    }
                    cont.seekg(cpp_old_streampos);
                  }
                  if (cpp_found_match) {
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable SPI
                    var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_SPI_read = true;
                    if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_SPI = SCALAR_DOUBLE;
                    // assign expression to variable AP
                    var_AP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_AP_read = true;
                    if ((aux_last_type_read_for_AP != SCALAR_DOUBLE && aux_last_type_read_for_AP != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_AP = SCALAR_DOUBLE;
                    // assign expression to variable LCOMP
                    var_LCOMP_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                    aux_LCOMP_read = true;
                    if ((aux_last_type_read_for_LCOMP != SCALAR_INT && aux_last_type_read_for_LCOMP != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_LCOMP = SCALAR_INT;
                    // assign expression to variable NLS
                    var_NLS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                    aux_NLS_read = true;
                    if ((aux_last_type_read_for_NLS != SCALAR_INT && aux_last_type_read_for_NLS != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NLS = SCALAR_INT;
                    // assign expression to variable ISR
                    var_ISR_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                    aux_ISR_read = true;
                    if ((aux_last_type_read_for_ISR != SCALAR_INT && aux_last_type_read_for_ISR != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_ISR = SCALAR_INT;
                    // evaluate if-elif-else clause
                    {
                      bool cpp_found_match = false;
                      if (! cpp_found_match) {
                        if ((((((((aux_ISR_read == true)) && ((var_ISR_0d_int_Scalar)>(0)))))))) {
                          // if statement evaluation
                          cpp_found_match = true;
                          cpp_line = cpp_read_line(cont);
                          // read CONT record
                          // assign expression to variable DAP
                          var_DAP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                          aux_DAP_read = true;
                          if ((aux_last_type_read_for_DAP != SCALAR_DOUBLE && aux_last_type_read_for_DAP != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_DAP = SCALAR_DOUBLE;
                        }
                      }
                    }
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable AWRI
                    var_AWRI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_AWRI_read = true;
                    if ((aux_last_type_read_for_AWRI != SCALAR_DOUBLE && aux_last_type_read_for_AWRI != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_AWRI = SCALAR_DOUBLE;
                    // assign expression to variable NSRS
                    var_NSRS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                    aux_NSRS_read = true;
                    if ((aux_last_type_read_for_NSRS != SCALAR_INT && aux_last_type_read_for_NSRS != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NSRS = SCALAR_INT;
                    // assign expression to variable NLRS
                    var_NLRS_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                    aux_NLRS_read = true;
                    if ((aux_last_type_read_for_NLRS != SCALAR_INT && aux_last_type_read_for_NLRS != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NLRS = SCALAR_INT;

                    for (int var_p_0d_int_Scalar = 1;
                       var_p_0d_int_Scalar <= var_NSRS_0d_int_Scalar; var_p_0d_int_Scalar++) {
                      bool aux_p_read = true;
                      // open section nsrs_subsec

                      {
                          py::dict cpp_parent_dict = cpp_current_dict;
                          if (! cpp_parent_dict.contains("nsrs_subsec")) {
                            cpp_parent_dict["nsrs_subsec"] = py::dict();
                          }
                          py::dict cpp_current_dict = cpp_parent_dict["nsrs_subsec"];

                          if (! cpp_current_dict.contains(py::cast(var_p_0d_int_Scalar))) {
                            cpp_current_dict[py::cast(var_p_0d_int_Scalar)] = py::dict();
                          }
                          cpp_current_dict = cpp_current_dict[py::cast(var_p_0d_int_Scalar)];
                        // variable declarations
                        int var_MPAR_0d_int_Scalar;
                        bool aux_MPAR_read = false;
                        vartype aux_last_type_read_for_MPAR = UNKNOWN;
                        int var_NRB_0d_int_Scalar;
                        bool aux_NRB_read = false;
                        vartype aux_last_type_read_for_NRB = UNKNOWN;
                        NestedVector<double> var_ER_1d_double_NestedVector;
                        vartype aux_last_type_read_for_ER = UNKNOWN;
                        NestedVector<double> var_AJ_1d_double_NestedVector;
                        vartype aux_last_type_read_for_AJ = UNKNOWN;
                        NestedVector<double> var_GT_1d_double_NestedVector;
                        vartype aux_last_type_read_for_GT = UNKNOWN;
                        NestedVector<double> var_GN_1d_double_NestedVector;
                        vartype aux_last_type_read_for_GN = UNKNOWN;
                        NestedVector<double> var_GG_1d_double_NestedVector;
                        vartype aux_last_type_read_for_GG = UNKNOWN;
                        NestedVector<double> var_GF_1d_double_NestedVector;
                        vartype aux_last_type_read_for_GF = UNKNOWN;
                        Matrix2d<double> var_V_2d_double_Matrix2d;
                        vartype aux_last_type_read_for_V = UNKNOWN;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable MPAR
                        var_MPAR_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                        aux_MPAR_read = true;
                        if ((aux_last_type_read_for_MPAR != SCALAR_INT && aux_last_type_read_for_MPAR != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_MPAR = SCALAR_INT;
                        // assign expression to variable NRB
                        var_NRB_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                        aux_NRB_read = true;
                        if ((aux_last_type_read_for_NRB != SCALAR_INT && aux_last_type_read_for_NRB != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NRB = SCALAR_INT;
                        if ((! (aux_MPAR_read == true))) {
                          throw std::runtime_error("The equation ((6*NRB)+(((MPAR*NRB)*((MPAR*NRB)+1))/2))==value cannot be solved for MPAR because this variable could not be isolated.");
                        }
                        if ((! (aux_NRB_read == true))) {
                          throw std::runtime_error("The equation ((6*NRB)+(((MPAR*NRB)*((MPAR*NRB)+1))/2))==value cannot be solved for NRB because this variable could not be isolated.");
                        }
                        {
                          int cpp_npl = cpp_read_int_field(cpp_line, 4);
                          cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                          int cpp_j = 0;
                          // read LIST body

                          for (int var_k_0d_int_Scalar = 1;
                             var_k_0d_int_Scalar <= var_NRB_0d_int_Scalar; var_k_0d_int_Scalar++) {
                            bool aux_k_read = true;
                            // read LIST body
                            // assign expression to variable ER
                            var_ER_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_ER != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ER != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_ER = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable AJ
                            var_AJ_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_AJ != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_AJ != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_AJ = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable GT
                            var_GT_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_GT != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GT != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_GT = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable GN
                            var_GN_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_GN != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GN != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_GN = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable GG
                            var_GG_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_GG != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GG != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_GG = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable GF
                            var_GF_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_GF != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GF != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_GF = NESTEDVECTOR_DOUBLE;
                          }
                          var_V_2d_double_Matrix2d.init(1, (var_MPAR_0d_int_Scalar*var_NRB_0d_int_Scalar), 1, (var_MPAR_0d_int_Scalar*var_NRB_0d_int_Scalar), true, false);

                          for (int var_m_0d_int_Scalar = 1;
                             var_m_0d_int_Scalar <= (var_MPAR_0d_int_Scalar*var_NRB_0d_int_Scalar); var_m_0d_int_Scalar++) {
                            bool aux_m_read = true;
                            // read LIST body

                            for (int var_n_0d_int_Scalar = var_m_0d_int_Scalar;
                               var_n_0d_int_Scalar <= (var_MPAR_0d_int_Scalar*var_NRB_0d_int_Scalar); var_n_0d_int_Scalar++) {
                              bool aux_n_read = true;
                              // read LIST body
                              // assign expression to variable V
                              var_V_2d_double_Matrix2d(var_m_0d_int_Scalar, var_n_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                              if ((aux_last_type_read_for_V != MATRIX2D_DOUBLE && aux_last_type_read_for_V != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_V = MATRIX2D_DOUBLE;
                            }
                          }
                        }
                        // store data in Python dictionary
                        if (((aux_last_type_read_for_MPAR == SCALAR_INT) && (aux_MPAR_read == true))) {
                          cpp_current_dict["MPAR"] = var_MPAR_0d_int_Scalar;
                        }
                        if (((aux_last_type_read_for_NRB == SCALAR_INT) && (aux_NRB_read == true))) {
                          cpp_current_dict["NRB"] = var_NRB_0d_int_Scalar;
                        }
                        if ((var_ER_1d_double_NestedVector.get_last_index() != -1)) {
                          auto& cpp_curvar0 = var_ER_1d_double_NestedVector;
                          cpp_current_dict["ER"] = py::dict();
                          py::dict cpp_curdict0 = cpp_current_dict["ER"];
                          for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                          }
                        }
                        if ((var_AJ_1d_double_NestedVector.get_last_index() != -1)) {
                          auto& cpp_curvar0 = var_AJ_1d_double_NestedVector;
                          cpp_current_dict["AJ"] = py::dict();
                          py::dict cpp_curdict0 = cpp_current_dict["AJ"];
                          for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                          }
                        }
                        if ((var_GT_1d_double_NestedVector.get_last_index() != -1)) {
                          auto& cpp_curvar0 = var_GT_1d_double_NestedVector;
                          cpp_current_dict["GT"] = py::dict();
                          py::dict cpp_curdict0 = cpp_current_dict["GT"];
                          for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                          }
                        }
                        if ((var_GN_1d_double_NestedVector.get_last_index() != -1)) {
                          auto& cpp_curvar0 = var_GN_1d_double_NestedVector;
                          cpp_current_dict["GN"] = py::dict();
                          py::dict cpp_curdict0 = cpp_current_dict["GN"];
                          for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                          }
                        }
                        if ((var_GG_1d_double_NestedVector.get_last_index() != -1)) {
                          auto& cpp_curvar0 = var_GG_1d_double_NestedVector;
                          cpp_current_dict["GG"] = py::dict();
                          py::dict cpp_curdict0 = cpp_current_dict["GG"];
                          for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                          }
                        }
                        if ((var_GF_1d_double_NestedVector.get_last_index() != -1)) {
                          auto& cpp_curvar0 = var_GF_1d_double_NestedVector;
                          cpp_current_dict["GF"] = py::dict();
                          py::dict cpp_curdict0 = cpp_current_dict["GF"];
                          for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                          }
                        }
                        if (var_V_2d_double_Matrix2d.did_read()) {
                            cpp_current_dict["V"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["V"];
                            for (int cpp_i1 = var_V_2d_double_Matrix2d.get_row_start_index(); cpp_i1 <= var_V_2d_double_Matrix2d.get_row_last_index(); cpp_i1++) {
                              cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                              py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                              for (int cpp_i2 = var_V_2d_double_Matrix2d.get_col_start_index(cpp_i1); cpp_i2 <= var_V_2d_double_Matrix2d.get_col_last_index(cpp_i1); cpp_i2++) {
                                cpp_curdict1[py::cast(cpp_i2)] = var_V_2d_double_Matrix2d(cpp_i1, cpp_i2);
                              }
                            }
                        }
                        cpp_current_dict = cpp_parent_dict;
                      }
                    }
                  }
                }
              }
            }
            if (! cpp_found_match) {
              if (! cpp_found_match) {
                // if statement evaluation with lookahead
                {
                  std::streampos cpp_old_streampos = cont.tellg();
                  {
                    // variable declarations
                    double& glob_var_EL_0d_double_Scalar = var_EL_0d_double_Scalar;
                    double var_EL_0d_double_Scalar = glob_var_EL_0d_double_Scalar;
                    bool& glob_aux_EL_read = aux_EL_read;
                    bool aux_EL_read = glob_aux_EL_read;
                    vartype aux_last_type_read_for_EL = UNKNOWN;
                    double& glob_var_EH_0d_double_Scalar = var_EH_0d_double_Scalar;
                    double var_EH_0d_double_Scalar = glob_var_EH_0d_double_Scalar;
                    bool& glob_aux_EH_read = aux_EH_read;
                    bool aux_EH_read = glob_aux_EH_read;
                    vartype aux_last_type_read_for_EH = UNKNOWN;
                    int& glob_var_LRU_0d_int_Scalar = var_LRU_0d_int_Scalar;
                    int var_LRU_0d_int_Scalar = glob_var_LRU_0d_int_Scalar;
                    bool& glob_aux_LRU_read = aux_LRU_read;
                    bool aux_LRU_read = glob_aux_LRU_read;
                    vartype aux_last_type_read_for_LRU = UNKNOWN;
                    int& glob_var_LRF_0d_int_Scalar = var_LRF_0d_int_Scalar;
                    int var_LRF_0d_int_Scalar = glob_var_LRF_0d_int_Scalar;
                    bool& glob_aux_LRF_read = aux_LRF_read;
                    bool aux_LRF_read = glob_aux_LRF_read;
                    vartype aux_last_type_read_for_LRF = UNKNOWN;
                    int& glob_var_NRO_0d_int_Scalar = var_NRO_0d_int_Scalar;
                    int var_NRO_0d_int_Scalar = glob_var_NRO_0d_int_Scalar;
                    bool& glob_aux_NRO_read = aux_NRO_read;
                    bool aux_NRO_read = glob_aux_NRO_read;
                    vartype aux_last_type_read_for_NRO = UNKNOWN;
                    int& glob_var_NAPS_0d_int_Scalar = var_NAPS_0d_int_Scalar;
                    int var_NAPS_0d_int_Scalar = glob_var_NAPS_0d_int_Scalar;
                    bool& glob_aux_NAPS_read = aux_NAPS_read;
                    bool aux_NAPS_read = glob_aux_NAPS_read;
                    vartype aux_last_type_read_for_NAPS = UNKNOWN;
                    int& glob_var_NI_0d_int_Scalar = var_NI_0d_int_Scalar;
                    int var_NI_0d_int_Scalar = glob_var_NI_0d_int_Scalar;
                    bool& glob_aux_NI_read = aux_NI_read;
                    bool aux_NI_read = glob_aux_NI_read;
                    vartype aux_last_type_read_for_NI = UNKNOWN;
                    double& glob_var_SPI_0d_double_Scalar = var_SPI_0d_double_Scalar;
                    double var_SPI_0d_double_Scalar = glob_var_SPI_0d_double_Scalar;
                    bool& glob_aux_SPI_read = aux_SPI_read;
                    bool aux_SPI_read = glob_aux_SPI_read;
                    vartype aux_last_type_read_for_SPI = UNKNOWN;
                    double& glob_var_AP_0d_double_Scalar = var_AP_0d_double_Scalar;
                    double var_AP_0d_double_Scalar = glob_var_AP_0d_double_Scalar;
                    bool& glob_aux_AP_read = aux_AP_read;
                    bool aux_AP_read = glob_aux_AP_read;
                    vartype aux_last_type_read_for_AP = UNKNOWN;
                    int& glob_var_LCOMP_0d_int_Scalar = var_LCOMP_0d_int_Scalar;
                    int var_LCOMP_0d_int_Scalar = glob_var_LCOMP_0d_int_Scalar;
                    bool& glob_aux_LCOMP_read = aux_LCOMP_read;
                    bool aux_LCOMP_read = glob_aux_LCOMP_read;
                    vartype aux_last_type_read_for_LCOMP = UNKNOWN;
                    int& glob_var_NLS_0d_int_Scalar = var_NLS_0d_int_Scalar;
                    int var_NLS_0d_int_Scalar = glob_var_NLS_0d_int_Scalar;
                    bool& glob_aux_NLS_read = aux_NLS_read;
                    bool aux_NLS_read = glob_aux_NLS_read;
                    vartype aux_last_type_read_for_NLS = UNKNOWN;
                    int& glob_var_ISR_0d_int_Scalar = var_ISR_0d_int_Scalar;
                    int var_ISR_0d_int_Scalar = glob_var_ISR_0d_int_Scalar;
                    bool& glob_aux_ISR_read = aux_ISR_read;
                    bool aux_ISR_read = glob_aux_ISR_read;
                    vartype aux_last_type_read_for_ISR = UNKNOWN;
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable SPI
                    var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_SPI_read = true;
                    if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_SPI = SCALAR_DOUBLE;
                    // assign expression to variable AP
                    var_AP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_AP_read = true;
                    if ((aux_last_type_read_for_AP != SCALAR_DOUBLE && aux_last_type_read_for_AP != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_AP = SCALAR_DOUBLE;
                    // assign expression to variable LCOMP
                    var_LCOMP_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                    aux_LCOMP_read = true;
                    if ((aux_last_type_read_for_LCOMP != SCALAR_INT && aux_last_type_read_for_LCOMP != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_LCOMP = SCALAR_INT;
                    // assign expression to variable NLS
                    var_NLS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                    aux_NLS_read = true;
                    if ((aux_last_type_read_for_NLS != SCALAR_INT && aux_last_type_read_for_NLS != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NLS = SCALAR_INT;
                    // assign expression to variable ISR
                    var_ISR_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                    aux_ISR_read = true;
                    if ((aux_last_type_read_for_ISR != SCALAR_INT && aux_last_type_read_for_ISR != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_ISR = SCALAR_INT;
                    if ((((((((((aux_LCOMP_read == true)) && ((var_LCOMP_0d_int_Scalar)==(1)))))&&((((aux_LRU_read == true)) && ((var_LRU_0d_int_Scalar)==(1)))))&&((((aux_LRF_read == true)) && ((var_LRF_0d_int_Scalar)==(3)))))))) {
                      cpp_found_match = true;
                    }
                    cont.seekg(cpp_old_streampos);
                  }
                  if (cpp_found_match) {
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable SPI
                    var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_SPI_read = true;
                    if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_SPI = SCALAR_DOUBLE;
                    // assign expression to variable AP
                    var_AP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_AP_read = true;
                    if ((aux_last_type_read_for_AP != SCALAR_DOUBLE && aux_last_type_read_for_AP != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_AP = SCALAR_DOUBLE;
                    // assign expression to variable LCOMP
                    var_LCOMP_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                    aux_LCOMP_read = true;
                    if ((aux_last_type_read_for_LCOMP != SCALAR_INT && aux_last_type_read_for_LCOMP != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_LCOMP = SCALAR_INT;
                    // assign expression to variable NLS
                    var_NLS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                    aux_NLS_read = true;
                    if ((aux_last_type_read_for_NLS != SCALAR_INT && aux_last_type_read_for_NLS != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NLS = SCALAR_INT;
                    // assign expression to variable ISR
                    var_ISR_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                    aux_ISR_read = true;
                    if ((aux_last_type_read_for_ISR != SCALAR_INT && aux_last_type_read_for_ISR != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_ISR = SCALAR_INT;
                    // evaluate if-elif-else clause
                    {
                      bool cpp_found_match = false;
                      if (! cpp_found_match) {
                        if ((((((((aux_ISR_read == true)) && ((var_ISR_0d_int_Scalar)>(0)))))))) {
                          // if statement evaluation
                          cpp_found_match = true;
                          cpp_line = cpp_read_line(cont);
                          // read LIST record
                          // assign expression to variable MLS
                          var_MLS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                          aux_MLS_read = true;
                          if ((aux_last_type_read_for_MLS != SCALAR_INT && aux_last_type_read_for_MLS != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_MLS = SCALAR_INT;
                          {
                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                            int cpp_j = 0;
                            // read LIST body

                            for (int var_k_0d_int_Scalar = 1;
                               var_k_0d_int_Scalar <= var_MLS_0d_int_Scalar; var_k_0d_int_Scalar++) {
                              bool aux_k_read = true;
                              // read LIST body
                              // assign expression to variable DAP
                              var_DAP_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                              if ((aux_last_type_read_for_DAP != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DAP != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_DAP = NESTEDVECTOR_DOUBLE;
                            }
                          }
                        }
                      }
                    }
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable AWRI
                    var_AWRI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_AWRI_read = true;
                    if ((aux_last_type_read_for_AWRI != SCALAR_DOUBLE && aux_last_type_read_for_AWRI != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_AWRI = SCALAR_DOUBLE;
                    // assign expression to variable NSRS
                    var_NSRS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                    aux_NSRS_read = true;
                    if ((aux_last_type_read_for_NSRS != SCALAR_INT && aux_last_type_read_for_NSRS != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NSRS = SCALAR_INT;
                    // assign expression to variable NLRS
                    var_NLRS_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                    aux_NLRS_read = true;
                    if ((aux_last_type_read_for_NLRS != SCALAR_INT && aux_last_type_read_for_NLRS != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NLRS = SCALAR_INT;

                    for (int var_p_0d_int_Scalar = 1;
                       var_p_0d_int_Scalar <= var_NSRS_0d_int_Scalar; var_p_0d_int_Scalar++) {
                      bool aux_p_read = true;
                      // open section nsrs_subsec

                      {
                          py::dict cpp_parent_dict = cpp_current_dict;
                          if (! cpp_parent_dict.contains("nsrs_subsec")) {
                            cpp_parent_dict["nsrs_subsec"] = py::dict();
                          }
                          py::dict cpp_current_dict = cpp_parent_dict["nsrs_subsec"];

                          if (! cpp_current_dict.contains(py::cast(var_p_0d_int_Scalar))) {
                            cpp_current_dict[py::cast(var_p_0d_int_Scalar)] = py::dict();
                          }
                          cpp_current_dict = cpp_current_dict[py::cast(var_p_0d_int_Scalar)];
                        // variable declarations
                        int var_MPAR_0d_int_Scalar;
                        bool aux_MPAR_read = false;
                        vartype aux_last_type_read_for_MPAR = UNKNOWN;
                        int var_NRB_0d_int_Scalar;
                        bool aux_NRB_read = false;
                        vartype aux_last_type_read_for_NRB = UNKNOWN;
                        NestedVector<double> var_ER_1d_double_NestedVector;
                        vartype aux_last_type_read_for_ER = UNKNOWN;
                        NestedVector<double> var_AJ_1d_double_NestedVector;
                        vartype aux_last_type_read_for_AJ = UNKNOWN;
                        NestedVector<double> var_GN_1d_double_NestedVector;
                        vartype aux_last_type_read_for_GN = UNKNOWN;
                        NestedVector<double> var_GG_1d_double_NestedVector;
                        vartype aux_last_type_read_for_GG = UNKNOWN;
                        NestedVector<double> var_GFA_1d_double_NestedVector;
                        vartype aux_last_type_read_for_GFA = UNKNOWN;
                        NestedVector<double> var_GFB_1d_double_NestedVector;
                        vartype aux_last_type_read_for_GFB = UNKNOWN;
                        Matrix2d<double> var_V_2d_double_Matrix2d;
                        vartype aux_last_type_read_for_V = UNKNOWN;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable MPAR
                        var_MPAR_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                        aux_MPAR_read = true;
                        if ((aux_last_type_read_for_MPAR != SCALAR_INT && aux_last_type_read_for_MPAR != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_MPAR = SCALAR_INT;
                        // assign expression to variable NRB
                        var_NRB_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                        aux_NRB_read = true;
                        if ((aux_last_type_read_for_NRB != SCALAR_INT && aux_last_type_read_for_NRB != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NRB = SCALAR_INT;
                        if ((! (aux_MPAR_read == true))) {
                          throw std::runtime_error("The equation ((6*NRB)+(((MPAR*NRB)*((MPAR*NRB)+1))/2))==value cannot be solved for MPAR because this variable could not be isolated.");
                        }
                        if ((! (aux_NRB_read == true))) {
                          throw std::runtime_error("The equation ((6*NRB)+(((MPAR*NRB)*((MPAR*NRB)+1))/2))==value cannot be solved for NRB because this variable could not be isolated.");
                        }
                        {
                          int cpp_npl = cpp_read_int_field(cpp_line, 4);
                          cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                          int cpp_j = 0;
                          // read LIST body

                          for (int var_k_0d_int_Scalar = 1;
                             var_k_0d_int_Scalar <= var_NRB_0d_int_Scalar; var_k_0d_int_Scalar++) {
                            bool aux_k_read = true;
                            // read LIST body
                            // assign expression to variable ER
                            var_ER_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_ER != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ER != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_ER = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable AJ
                            var_AJ_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_AJ != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_AJ != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_AJ = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable GN
                            var_GN_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_GN != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GN != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_GN = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable GG
                            var_GG_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_GG != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GG != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_GG = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable GFA
                            var_GFA_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_GFA != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GFA != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_GFA = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable GFB
                            var_GFB_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_GFB != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GFB != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_GFB = NESTEDVECTOR_DOUBLE;
                          }
                          var_V_2d_double_Matrix2d.init(1, (var_MPAR_0d_int_Scalar*var_NRB_0d_int_Scalar), 1, (var_MPAR_0d_int_Scalar*var_NRB_0d_int_Scalar), true, false);

                          for (int var_m_0d_int_Scalar = 1;
                             var_m_0d_int_Scalar <= (var_MPAR_0d_int_Scalar*var_NRB_0d_int_Scalar); var_m_0d_int_Scalar++) {
                            bool aux_m_read = true;
                            // read LIST body

                            for (int var_n_0d_int_Scalar = var_m_0d_int_Scalar;
                               var_n_0d_int_Scalar <= (var_MPAR_0d_int_Scalar*var_NRB_0d_int_Scalar); var_n_0d_int_Scalar++) {
                              bool aux_n_read = true;
                              // read LIST body
                              // assign expression to variable V
                              var_V_2d_double_Matrix2d(var_m_0d_int_Scalar, var_n_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                              if ((aux_last_type_read_for_V != MATRIX2D_DOUBLE && aux_last_type_read_for_V != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_V = MATRIX2D_DOUBLE;
                            }
                          }
                        }
                        // store data in Python dictionary
                        if (((aux_last_type_read_for_MPAR == SCALAR_INT) && (aux_MPAR_read == true))) {
                          cpp_current_dict["MPAR"] = var_MPAR_0d_int_Scalar;
                        }
                        if (((aux_last_type_read_for_NRB == SCALAR_INT) && (aux_NRB_read == true))) {
                          cpp_current_dict["NRB"] = var_NRB_0d_int_Scalar;
                        }
                        if ((var_ER_1d_double_NestedVector.get_last_index() != -1)) {
                          auto& cpp_curvar0 = var_ER_1d_double_NestedVector;
                          cpp_current_dict["ER"] = py::dict();
                          py::dict cpp_curdict0 = cpp_current_dict["ER"];
                          for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                          }
                        }
                        if ((var_AJ_1d_double_NestedVector.get_last_index() != -1)) {
                          auto& cpp_curvar0 = var_AJ_1d_double_NestedVector;
                          cpp_current_dict["AJ"] = py::dict();
                          py::dict cpp_curdict0 = cpp_current_dict["AJ"];
                          for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                          }
                        }
                        if ((var_GN_1d_double_NestedVector.get_last_index() != -1)) {
                          auto& cpp_curvar0 = var_GN_1d_double_NestedVector;
                          cpp_current_dict["GN"] = py::dict();
                          py::dict cpp_curdict0 = cpp_current_dict["GN"];
                          for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                          }
                        }
                        if ((var_GG_1d_double_NestedVector.get_last_index() != -1)) {
                          auto& cpp_curvar0 = var_GG_1d_double_NestedVector;
                          cpp_current_dict["GG"] = py::dict();
                          py::dict cpp_curdict0 = cpp_current_dict["GG"];
                          for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                          }
                        }
                        if ((var_GFA_1d_double_NestedVector.get_last_index() != -1)) {
                          auto& cpp_curvar0 = var_GFA_1d_double_NestedVector;
                          cpp_current_dict["GFA"] = py::dict();
                          py::dict cpp_curdict0 = cpp_current_dict["GFA"];
                          for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                          }
                        }
                        if ((var_GFB_1d_double_NestedVector.get_last_index() != -1)) {
                          auto& cpp_curvar0 = var_GFB_1d_double_NestedVector;
                          cpp_current_dict["GFB"] = py::dict();
                          py::dict cpp_curdict0 = cpp_current_dict["GFB"];
                          for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                          }
                        }
                        if (var_V_2d_double_Matrix2d.did_read()) {
                            cpp_current_dict["V"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["V"];
                            for (int cpp_i1 = var_V_2d_double_Matrix2d.get_row_start_index(); cpp_i1 <= var_V_2d_double_Matrix2d.get_row_last_index(); cpp_i1++) {
                              cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                              py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                              for (int cpp_i2 = var_V_2d_double_Matrix2d.get_col_start_index(cpp_i1); cpp_i2 <= var_V_2d_double_Matrix2d.get_col_last_index(cpp_i1); cpp_i2++) {
                                cpp_curdict1[py::cast(cpp_i2)] = var_V_2d_double_Matrix2d(cpp_i1, cpp_i2);
                              }
                            }
                        }
                        cpp_current_dict = cpp_parent_dict;
                      }
                    }
                  }
                }
              }
            }
            if (! cpp_found_match) {
              if (! cpp_found_match) {
                // if statement evaluation with lookahead
                {
                  std::streampos cpp_old_streampos = cont.tellg();
                  {
                    // variable declarations
                    double& glob_var_EL_0d_double_Scalar = var_EL_0d_double_Scalar;
                    double var_EL_0d_double_Scalar = glob_var_EL_0d_double_Scalar;
                    bool& glob_aux_EL_read = aux_EL_read;
                    bool aux_EL_read = glob_aux_EL_read;
                    vartype aux_last_type_read_for_EL = UNKNOWN;
                    double& glob_var_EH_0d_double_Scalar = var_EH_0d_double_Scalar;
                    double var_EH_0d_double_Scalar = glob_var_EH_0d_double_Scalar;
                    bool& glob_aux_EH_read = aux_EH_read;
                    bool aux_EH_read = glob_aux_EH_read;
                    vartype aux_last_type_read_for_EH = UNKNOWN;
                    int& glob_var_LRU_0d_int_Scalar = var_LRU_0d_int_Scalar;
                    int var_LRU_0d_int_Scalar = glob_var_LRU_0d_int_Scalar;
                    bool& glob_aux_LRU_read = aux_LRU_read;
                    bool aux_LRU_read = glob_aux_LRU_read;
                    vartype aux_last_type_read_for_LRU = UNKNOWN;
                    int& glob_var_LRF_0d_int_Scalar = var_LRF_0d_int_Scalar;
                    int var_LRF_0d_int_Scalar = glob_var_LRF_0d_int_Scalar;
                    bool& glob_aux_LRF_read = aux_LRF_read;
                    bool aux_LRF_read = glob_aux_LRF_read;
                    vartype aux_last_type_read_for_LRF = UNKNOWN;
                    int& glob_var_NRO_0d_int_Scalar = var_NRO_0d_int_Scalar;
                    int var_NRO_0d_int_Scalar = glob_var_NRO_0d_int_Scalar;
                    bool& glob_aux_NRO_read = aux_NRO_read;
                    bool aux_NRO_read = glob_aux_NRO_read;
                    vartype aux_last_type_read_for_NRO = UNKNOWN;
                    int& glob_var_NAPS_0d_int_Scalar = var_NAPS_0d_int_Scalar;
                    int var_NAPS_0d_int_Scalar = glob_var_NAPS_0d_int_Scalar;
                    bool& glob_aux_NAPS_read = aux_NAPS_read;
                    bool aux_NAPS_read = glob_aux_NAPS_read;
                    vartype aux_last_type_read_for_NAPS = UNKNOWN;
                    int& glob_var_NI_0d_int_Scalar = var_NI_0d_int_Scalar;
                    int var_NI_0d_int_Scalar = glob_var_NI_0d_int_Scalar;
                    bool& glob_aux_NI_read = aux_NI_read;
                    bool aux_NI_read = glob_aux_NI_read;
                    vartype aux_last_type_read_for_NI = UNKNOWN;
                    int& glob_var_LCOMP_0d_int_Scalar = var_LCOMP_0d_int_Scalar;
                    int var_LCOMP_0d_int_Scalar = glob_var_LCOMP_0d_int_Scalar;
                    bool& glob_aux_LCOMP_read = aux_LCOMP_read;
                    bool aux_LCOMP_read = glob_aux_LCOMP_read;
                    vartype aux_last_type_read_for_LCOMP = UNKNOWN;
                    int& glob_var_ISR_0d_int_Scalar = var_ISR_0d_int_Scalar;
                    int var_ISR_0d_int_Scalar = glob_var_ISR_0d_int_Scalar;
                    bool& glob_aux_ISR_read = aux_ISR_read;
                    bool aux_ISR_read = glob_aux_ISR_read;
                    vartype aux_last_type_read_for_ISR = UNKNOWN;
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable LCOMP
                    var_LCOMP_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                    aux_LCOMP_read = true;
                    if ((aux_last_type_read_for_LCOMP != SCALAR_INT && aux_last_type_read_for_LCOMP != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_LCOMP = SCALAR_INT;
                    // assign expression to variable ISR
                    var_ISR_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                    aux_ISR_read = true;
                    if ((aux_last_type_read_for_ISR != SCALAR_INT && aux_last_type_read_for_ISR != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_ISR = SCALAR_INT;
                    if ((((((((((aux_LCOMP_read == true)) && ((var_LCOMP_0d_int_Scalar)==(1)))))&&((((aux_LRU_read == true)) && ((var_LRU_0d_int_Scalar)==(1)))))&&((((aux_LRF_read == true)) && ((var_LRF_0d_int_Scalar)==(7)))))))) {
                      cpp_found_match = true;
                    }
                    cont.seekg(cpp_old_streampos);
                  }
                  if (cpp_found_match) {
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable LCOMP
                    var_LCOMP_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                    aux_LCOMP_read = true;
                    if ((aux_last_type_read_for_LCOMP != SCALAR_INT && aux_last_type_read_for_LCOMP != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_LCOMP = SCALAR_INT;
                    // assign expression to variable ISR
                    var_ISR_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                    aux_ISR_read = true;
                    if ((aux_last_type_read_for_ISR != SCALAR_INT && aux_last_type_read_for_ISR != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_ISR = SCALAR_INT;
                    // evaluate if-elif-else clause
                    {
                      bool cpp_found_match = false;
                      if (! cpp_found_match) {
                        if ((((((((aux_ISR_read == true)) && ((var_ISR_0d_int_Scalar)>(0)))))))) {
                          // if statement evaluation
                          cpp_found_match = true;
                          cpp_line = cpp_read_line(cont);
                          // read LIST record
                          // assign expression to variable JCH
                          var_JCH_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                          aux_JCH_read = true;
                          if ((aux_last_type_read_for_JCH != SCALAR_INT && aux_last_type_read_for_JCH != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_JCH = SCALAR_INT;
                          // assign expression to variable cpp_int_val
                          cpp_int_val = cpp_read_int_field(cpp_line, 5);
                          aux_cpp_int_val_read = true;
                          if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                          // assign expression to variable NCH
                          var_NCH_0d_int_Scalar = ((((((1/6)*(-1))+1)*(-1))+cpp_int_val)/(1/6));
                          aux_NCH_read = true;
                          if ((aux_last_type_read_for_NCH != SCALAR_INT && aux_last_type_read_for_NCH != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NCH = SCALAR_INT;
                          {
                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                            int cpp_j = 0;
                            // read LIST body
                            var_DAP_2d_double_Matrix2d.init(1, (var_JCH_0d_int_Scalar/var_NCH_0d_int_Scalar), 1, var_NCH_0d_int_Scalar, false, false);

                            for (int var_m_0d_int_Scalar = 1;
                               var_m_0d_int_Scalar <= (var_JCH_0d_int_Scalar/var_NCH_0d_int_Scalar); var_m_0d_int_Scalar++) {
                              bool aux_m_read = true;
                              // read LIST body

                              for (int var_n_0d_int_Scalar = 1;
                                 var_n_0d_int_Scalar <= var_NCH_0d_int_Scalar; var_n_0d_int_Scalar++) {
                                bool aux_n_read = true;
                                // read LIST body
                                // assign expression to variable DAP
                                var_DAP_2d_double_Matrix2d(var_m_0d_int_Scalar, var_n_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                                if ((aux_last_type_read_for_DAP != MATRIX2D_DOUBLE && aux_last_type_read_for_DAP != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_DAP = MATRIX2D_DOUBLE;
                              }
                            }
                          }
                        }
                      }
                    }
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable AWRI
                    var_AWRI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_AWRI_read = true;
                    if ((aux_last_type_read_for_AWRI != SCALAR_DOUBLE && aux_last_type_read_for_AWRI != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_AWRI = SCALAR_DOUBLE;
                    // assign expression to variable NSRS
                    var_NSRS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                    aux_NSRS_read = true;
                    if ((aux_last_type_read_for_NSRS != SCALAR_INT && aux_last_type_read_for_NSRS != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NSRS = SCALAR_INT;

                    for (int var_k_0d_int_Scalar = 1;
                       var_k_0d_int_Scalar <= var_NSRS_0d_int_Scalar; var_k_0d_int_Scalar++) {
                      bool aux_k_read = true;
                      // open section nsrs_subsec

                      {
                          py::dict cpp_parent_dict = cpp_current_dict;
                          if (! cpp_parent_dict.contains("nsrs_subsec")) {
                            cpp_parent_dict["nsrs_subsec"] = py::dict();
                          }
                          py::dict cpp_current_dict = cpp_parent_dict["nsrs_subsec"];

                          if (! cpp_current_dict.contains(py::cast(var_k_0d_int_Scalar))) {
                            cpp_current_dict[py::cast(var_k_0d_int_Scalar)] = py::dict();
                          }
                          cpp_current_dict = cpp_current_dict[py::cast(var_k_0d_int_Scalar)];
                        // variable declarations
                        int var_NJSX_0d_int_Scalar;
                        bool aux_NJSX_read = false;
                        vartype aux_last_type_read_for_NJSX = UNKNOWN;
                        int var_N_0d_int_Scalar;
                        bool aux_N_read = false;
                        vartype aux_last_type_read_for_N = UNKNOWN;
                        int var_NPARB_0d_int_Scalar;
                        bool aux_NPARB_read = false;
                        vartype aux_last_type_read_for_NPARB = UNKNOWN;
                        Matrix2d<double> var_V_2d_double_Matrix2d;
                        vartype aux_last_type_read_for_V = UNKNOWN;
                        cpp_line = cpp_read_line(cont);
                        // read CONT record
                        // assign expression to variable NJSX
                        var_NJSX_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                        aux_NJSX_read = true;
                        if ((aux_last_type_read_for_NJSX != SCALAR_INT && aux_last_type_read_for_NJSX != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NJSX = SCALAR_INT;

                        for (int var_m_0d_int_Scalar = 1;
                           var_m_0d_int_Scalar <= var_NJSX_0d_int_Scalar; var_m_0d_int_Scalar++) {
                          bool aux_m_read = true;
                          // open section J_pi_group

                          {
                              py::dict cpp_parent_dict = cpp_current_dict;
                              if (! cpp_parent_dict.contains("J_pi_group")) {
                                cpp_parent_dict["J_pi_group"] = py::dict();
                              }
                              py::dict cpp_current_dict = cpp_parent_dict["J_pi_group"];

                              if (! cpp_current_dict.contains(py::cast(var_m_0d_int_Scalar))) {
                                cpp_current_dict[py::cast(var_m_0d_int_Scalar)] = py::dict();
                              }
                              cpp_current_dict = cpp_current_dict[py::cast(var_m_0d_int_Scalar)];
                            // variable declarations
                            int var_NCH_0d_int_Scalar;
                            bool aux_NCH_read = false;
                            vartype aux_last_type_read_for_NCH = UNKNOWN;
                            int var_NRB_0d_int_Scalar;
                            bool aux_NRB_read = false;
                            vartype aux_last_type_read_for_NRB = UNKNOWN;
                            NestedVector<double> var_ER_1d_double_NestedVector;
                            vartype aux_last_type_read_for_ER = UNKNOWN;
                            Matrix2d<double> var_GAM_2d_double_Matrix2d;
                            vartype aux_last_type_read_for_GAM = UNKNOWN;
                            cpp_line = cpp_read_line(cont);
                            // read LIST record
                            if ((! (aux_NCH_read == true))) {
                              // assign expression to variable NCH
                              var_NCH_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                              aux_NCH_read = true;
                              if ((aux_last_type_read_for_NCH != SCALAR_INT && aux_last_type_read_for_NCH != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_NCH = SCALAR_INT;
                            }
                            // assign expression to variable NRB
                            var_NRB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                            aux_NRB_read = true;
                            if ((aux_last_type_read_for_NRB != SCALAR_INT && aux_last_type_read_for_NRB != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_NRB = SCALAR_INT;
                            if ((! (aux_NCH_read == true))) {
                              throw std::runtime_error("The equation (6*((((1+NCH)+((5-NCH)%6))*NRB)/6))==value cannot be solved for NCH because the modulo operator is not supported.");
                            }
                            if ((! (aux_NRB_read == true))) {
                              throw std::runtime_error("The equation (6*((((1+NCH)+((5-NCH)%6))*NRB)/6))==value cannot be solved for NRB because the modulo operator is not supported.");
                            }
                            if ((! (aux_NCH_read == true))) {
                              throw std::runtime_error("The equation ((((1+NCH)+((5-NCH)%6))*NRB)/6)==value cannot be solved for NCH because the modulo operator is not supported.");
                            }
                            if ((! (aux_NRB_read == true))) {
                              throw std::runtime_error("The equation ((((1+NCH)+((5-NCH)%6))*NRB)/6)==value cannot be solved for NRB because the modulo operator is not supported.");
                            }
                            {
                              int cpp_npl = cpp_read_int_field(cpp_line, 4);
                              cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                              int cpp_j = 0;
                              // read LIST body
                              var_GAM_2d_double_Matrix2d.init(1, var_NCH_0d_int_Scalar, 1, var_NRB_0d_int_Scalar, false, false);

                              for (int var_p_0d_int_Scalar = 1;
                                 var_p_0d_int_Scalar <= var_NRB_0d_int_Scalar; var_p_0d_int_Scalar++) {
                                bool aux_p_read = true;
                                // read LIST body
                                // assign expression to variable ER
                                var_ER_1d_double_NestedVector.set(var_p_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                                if ((aux_last_type_read_for_ER != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ER != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_ER = NESTEDVECTOR_DOUBLE;

                                for (int var_q_0d_int_Scalar = 1;
                                   var_q_0d_int_Scalar <= var_NCH_0d_int_Scalar; var_q_0d_int_Scalar++) {
                                  bool aux_q_read = true;
                                  // read LIST body
                                  // assign expression to variable GAM
                                  var_GAM_2d_double_Matrix2d(var_q_0d_int_Scalar, var_p_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                                  if ((aux_last_type_read_for_GAM != MATRIX2D_DOUBLE && aux_last_type_read_for_GAM != UNKNOWN)) {
                                    raise_vartype_mismatch();
                                  }
                                  aux_last_type_read_for_GAM = MATRIX2D_DOUBLE;
                                }

                                for (int var_r_0d_int_Scalar = 1;
                                   var_r_0d_int_Scalar <= ((5-var_NCH_0d_int_Scalar)%6); var_r_0d_int_Scalar++) {
                                  bool aux_r_read = true;
                                  // read LIST body
                                  cpp_j++;
                                }
                              }
                            }
                            // store data in Python dictionary
                            if (((aux_last_type_read_for_NCH == SCALAR_INT) && (aux_NCH_read == true))) {
                              cpp_current_dict["NCH"] = var_NCH_0d_int_Scalar;
                            }
                            if (((aux_last_type_read_for_NRB == SCALAR_INT) && (aux_NRB_read == true))) {
                              cpp_current_dict["NRB"] = var_NRB_0d_int_Scalar;
                            }
                            if ((var_ER_1d_double_NestedVector.get_last_index() != -1)) {
                              auto& cpp_curvar0 = var_ER_1d_double_NestedVector;
                              cpp_current_dict["ER"] = py::dict();
                              py::dict cpp_curdict0 = cpp_current_dict["ER"];
                              for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                              }
                            }
                            if (var_GAM_2d_double_Matrix2d.did_read()) {
                                cpp_current_dict["GAM"] = py::dict();
                                py::dict cpp_curdict0 = cpp_current_dict["GAM"];
                                for (int cpp_i1 = var_GAM_2d_double_Matrix2d.get_row_start_index(); cpp_i1 <= var_GAM_2d_double_Matrix2d.get_row_last_index(); cpp_i1++) {
                                  cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                                  py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                                  for (int cpp_i2 = var_GAM_2d_double_Matrix2d.get_col_start_index(cpp_i1); cpp_i2 <= var_GAM_2d_double_Matrix2d.get_col_last_index(cpp_i1); cpp_i2++) {
                                    cpp_curdict1[py::cast(cpp_i2)] = var_GAM_2d_double_Matrix2d(cpp_i1, cpp_i2);
                                  }
                                }
                            }
                            cpp_current_dict = cpp_parent_dict;
                          }
                        }
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable N
                        var_N_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                        aux_N_read = true;
                        if ((aux_last_type_read_for_N != SCALAR_INT && aux_last_type_read_for_N != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_N = SCALAR_INT;
                        // assign expression to variable NPARB
                        var_NPARB_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                        aux_NPARB_read = true;
                        if ((aux_last_type_read_for_NPARB != SCALAR_INT && aux_last_type_read_for_NPARB != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NPARB = SCALAR_INT;
                        {
                          int cpp_npl = cpp_read_int_field(cpp_line, 4);
                          cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                          int cpp_j = 0;
                          // read LIST body
                          var_V_2d_double_Matrix2d.init(1, var_NPARB_0d_int_Scalar, 1, var_NPARB_0d_int_Scalar, true, false);

                          for (int var_p_0d_int_Scalar = 1;
                             var_p_0d_int_Scalar <= var_NPARB_0d_int_Scalar; var_p_0d_int_Scalar++) {
                            bool aux_p_read = true;
                            // read LIST body

                            for (int var_q_0d_int_Scalar = var_p_0d_int_Scalar;
                               var_q_0d_int_Scalar <= var_NPARB_0d_int_Scalar; var_q_0d_int_Scalar++) {
                              bool aux_q_read = true;
                              // read LIST body
                              // assign expression to variable V
                              var_V_2d_double_Matrix2d(var_p_0d_int_Scalar, var_q_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                              if ((aux_last_type_read_for_V != MATRIX2D_DOUBLE && aux_last_type_read_for_V != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_V = MATRIX2D_DOUBLE;
                            }
                          }
                        }
                        // store data in Python dictionary
                        if (((aux_last_type_read_for_NJSX == SCALAR_INT) && (aux_NJSX_read == true))) {
                          cpp_current_dict["NJSX"] = var_NJSX_0d_int_Scalar;
                        }
                        if (((aux_last_type_read_for_N == SCALAR_INT) && (aux_N_read == true))) {
                          cpp_current_dict["N"] = var_N_0d_int_Scalar;
                        }
                        if (((aux_last_type_read_for_NPARB == SCALAR_INT) && (aux_NPARB_read == true))) {
                          cpp_current_dict["NPARB"] = var_NPARB_0d_int_Scalar;
                        }
                        if (var_V_2d_double_Matrix2d.did_read()) {
                            cpp_current_dict["V"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["V"];
                            for (int cpp_i1 = var_V_2d_double_Matrix2d.get_row_start_index(); cpp_i1 <= var_V_2d_double_Matrix2d.get_row_last_index(); cpp_i1++) {
                              cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                              py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                              for (int cpp_i2 = var_V_2d_double_Matrix2d.get_col_start_index(cpp_i1); cpp_i2 <= var_V_2d_double_Matrix2d.get_col_last_index(cpp_i1); cpp_i2++) {
                                cpp_curdict1[py::cast(cpp_i2)] = var_V_2d_double_Matrix2d(cpp_i1, cpp_i2);
                              }
                            }
                        }
                        cpp_current_dict = cpp_parent_dict;
                      }
                    }
                  }
                }
              }
            }
            if (! cpp_found_match) {
              if (! cpp_found_match) {
                // if statement evaluation with lookahead
                {
                  std::streampos cpp_old_streampos = cont.tellg();
                  {
                    // variable declarations
                    double& glob_var_EL_0d_double_Scalar = var_EL_0d_double_Scalar;
                    double var_EL_0d_double_Scalar = glob_var_EL_0d_double_Scalar;
                    bool& glob_aux_EL_read = aux_EL_read;
                    bool aux_EL_read = glob_aux_EL_read;
                    vartype aux_last_type_read_for_EL = UNKNOWN;
                    double& glob_var_EH_0d_double_Scalar = var_EH_0d_double_Scalar;
                    double var_EH_0d_double_Scalar = glob_var_EH_0d_double_Scalar;
                    bool& glob_aux_EH_read = aux_EH_read;
                    bool aux_EH_read = glob_aux_EH_read;
                    vartype aux_last_type_read_for_EH = UNKNOWN;
                    int& glob_var_LRU_0d_int_Scalar = var_LRU_0d_int_Scalar;
                    int var_LRU_0d_int_Scalar = glob_var_LRU_0d_int_Scalar;
                    bool& glob_aux_LRU_read = aux_LRU_read;
                    bool aux_LRU_read = glob_aux_LRU_read;
                    vartype aux_last_type_read_for_LRU = UNKNOWN;
                    int& glob_var_LRF_0d_int_Scalar = var_LRF_0d_int_Scalar;
                    int var_LRF_0d_int_Scalar = glob_var_LRF_0d_int_Scalar;
                    bool& glob_aux_LRF_read = aux_LRF_read;
                    bool aux_LRF_read = glob_aux_LRF_read;
                    vartype aux_last_type_read_for_LRF = UNKNOWN;
                    int& glob_var_NRO_0d_int_Scalar = var_NRO_0d_int_Scalar;
                    int var_NRO_0d_int_Scalar = glob_var_NRO_0d_int_Scalar;
                    bool& glob_aux_NRO_read = aux_NRO_read;
                    bool aux_NRO_read = glob_aux_NRO_read;
                    vartype aux_last_type_read_for_NRO = UNKNOWN;
                    int& glob_var_NAPS_0d_int_Scalar = var_NAPS_0d_int_Scalar;
                    int var_NAPS_0d_int_Scalar = glob_var_NAPS_0d_int_Scalar;
                    bool& glob_aux_NAPS_read = aux_NAPS_read;
                    bool aux_NAPS_read = glob_aux_NAPS_read;
                    vartype aux_last_type_read_for_NAPS = UNKNOWN;
                    int& glob_var_NI_0d_int_Scalar = var_NI_0d_int_Scalar;
                    int var_NI_0d_int_Scalar = glob_var_NI_0d_int_Scalar;
                    bool& glob_aux_NI_read = aux_NI_read;
                    bool aux_NI_read = glob_aux_NI_read;
                    vartype aux_last_type_read_for_NI = UNKNOWN;
                    double& glob_var_SPI_0d_double_Scalar = var_SPI_0d_double_Scalar;
                    double var_SPI_0d_double_Scalar = glob_var_SPI_0d_double_Scalar;
                    bool& glob_aux_SPI_read = aux_SPI_read;
                    bool aux_SPI_read = glob_aux_SPI_read;
                    vartype aux_last_type_read_for_SPI = UNKNOWN;
                    double& glob_var_AP_0d_double_Scalar = var_AP_0d_double_Scalar;
                    double var_AP_0d_double_Scalar = glob_var_AP_0d_double_Scalar;
                    bool& glob_aux_AP_read = aux_AP_read;
                    bool aux_AP_read = glob_aux_AP_read;
                    vartype aux_last_type_read_for_AP = UNKNOWN;
                    int& glob_var_LCOMP_0d_int_Scalar = var_LCOMP_0d_int_Scalar;
                    int var_LCOMP_0d_int_Scalar = glob_var_LCOMP_0d_int_Scalar;
                    bool& glob_aux_LCOMP_read = aux_LCOMP_read;
                    bool aux_LCOMP_read = glob_aux_LCOMP_read;
                    vartype aux_last_type_read_for_LCOMP = UNKNOWN;
                    int& glob_var_ISR_0d_int_Scalar = var_ISR_0d_int_Scalar;
                    int var_ISR_0d_int_Scalar = glob_var_ISR_0d_int_Scalar;
                    bool& glob_aux_ISR_read = aux_ISR_read;
                    bool aux_ISR_read = glob_aux_ISR_read;
                    vartype aux_last_type_read_for_ISR = UNKNOWN;
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable SPI
                    var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_SPI_read = true;
                    if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_SPI = SCALAR_DOUBLE;
                    // assign expression to variable AP
                    var_AP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_AP_read = true;
                    if ((aux_last_type_read_for_AP != SCALAR_DOUBLE && aux_last_type_read_for_AP != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_AP = SCALAR_DOUBLE;
                    // assign expression to variable LCOMP
                    var_LCOMP_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                    aux_LCOMP_read = true;
                    if ((aux_last_type_read_for_LCOMP != SCALAR_INT && aux_last_type_read_for_LCOMP != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_LCOMP = SCALAR_INT;
                    // assign expression to variable ISR
                    var_ISR_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                    aux_ISR_read = true;
                    if ((aux_last_type_read_for_ISR != SCALAR_INT && aux_last_type_read_for_ISR != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_ISR = SCALAR_INT;
                    if ((((((((((aux_LCOMP_read == true)) && ((var_LCOMP_0d_int_Scalar)==(2)))))&&((((aux_LRU_read == true)) && ((var_LRU_0d_int_Scalar)==(1)))))&&(((((((((aux_LRF_read == true)) && ((var_LRF_0d_int_Scalar)==(1))))))||(((((aux_LRF_read == true)) && ((var_LRF_0d_int_Scalar)==(2)))))))))))) {
                      cpp_found_match = true;
                    }
                    cont.seekg(cpp_old_streampos);
                  }
                  if (cpp_found_match) {
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable SPI
                    var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_SPI_read = true;
                    if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_SPI = SCALAR_DOUBLE;
                    // assign expression to variable AP
                    var_AP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_AP_read = true;
                    if ((aux_last_type_read_for_AP != SCALAR_DOUBLE && aux_last_type_read_for_AP != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_AP = SCALAR_DOUBLE;
                    // assign expression to variable LCOMP
                    var_LCOMP_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                    aux_LCOMP_read = true;
                    if ((aux_last_type_read_for_LCOMP != SCALAR_INT && aux_last_type_read_for_LCOMP != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_LCOMP = SCALAR_INT;
                    // assign expression to variable ISR
                    var_ISR_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                    aux_ISR_read = true;
                    if ((aux_last_type_read_for_ISR != SCALAR_INT && aux_last_type_read_for_ISR != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_ISR = SCALAR_INT;
                    // evaluate if-elif-else clause
                    {
                      bool cpp_found_match = false;
                      if (! cpp_found_match) {
                        if ((((((((aux_ISR_read == true)) && ((var_ISR_0d_int_Scalar)>(0)))))))) {
                          // if statement evaluation
                          cpp_found_match = true;
                          cpp_line = cpp_read_line(cont);
                          // read CONT record
                          // assign expression to variable DAP
                          var_DAP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                          aux_DAP_read = true;
                          if ((aux_last_type_read_for_DAP != SCALAR_DOUBLE && aux_last_type_read_for_DAP != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_DAP = SCALAR_DOUBLE;
                        }
                      }
                    }
                    cpp_line = cpp_read_line(cont);
                    // read LIST record
                    // assign expression to variable AWRI
                    var_AWRI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_AWRI_read = true;
                    if ((aux_last_type_read_for_AWRI != SCALAR_DOUBLE && aux_last_type_read_for_AWRI != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_AWRI = SCALAR_DOUBLE;
                    // assign expression to variable QX
                    var_QX_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_QX_read = true;
                    if ((aux_last_type_read_for_QX != SCALAR_DOUBLE && aux_last_type_read_for_QX != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_QX = SCALAR_DOUBLE;
                    // assign expression to variable LRX
                    var_LRX_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                    aux_LRX_read = true;
                    if ((aux_last_type_read_for_LRX != SCALAR_INT && aux_last_type_read_for_LRX != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_LRX = SCALAR_INT;
                    // assign expression to variable cpp_int_val
                    cpp_int_val = cpp_read_int_field(cpp_line, 4);
                    aux_cpp_int_val_read = true;
                    if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                    // assign expression to variable NRSA
                    var_NRSA_0d_int_Scalar = (cpp_int_val/12);
                    aux_NRSA_read = true;
                    if ((aux_last_type_read_for_NRSA != SCALAR_INT && aux_last_type_read_for_NRSA != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NRSA = SCALAR_INT;
                    if ((! (aux_NRSA_read == true))) {
                      // assign expression to variable NRSA
                      var_NRSA_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                      aux_NRSA_read = true;
                      if ((aux_last_type_read_for_NRSA != SCALAR_INT && aux_last_type_read_for_NRSA != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_NRSA = SCALAR_INT;
                    }
                    {
                      int cpp_npl = cpp_read_int_field(cpp_line, 4);
                      cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                      int cpp_j = 0;
                      // read LIST body

                      for (int var_k_0d_int_Scalar = 1;
                         var_k_0d_int_Scalar <= var_NRSA_0d_int_Scalar; var_k_0d_int_Scalar++) {
                        bool aux_k_read = true;
                        // read LIST body
                        // assign expression to variable ER
                        var_ER_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_ER != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ER != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_ER = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable AJ
                        var_AJ_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_AJ != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_AJ != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_AJ = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable GT
                        var_GT_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_GT != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GT != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_GT = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable GN
                        var_GN_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_GN != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GN != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_GN = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable GG
                        var_GG_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_GG != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GG != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_GG = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable GF
                        var_GF_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_GF != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GF != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_GF = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable DER
                        var_DER_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_DER != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DER != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_DER = NESTEDVECTOR_DOUBLE;
                        cpp_j++;
                        cpp_j++;
                        // assign expression to variable DGN
                        var_DGN_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_DGN != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DGN != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_DGN = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable DGG
                        var_DGG_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_DGG != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DGG != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_DGG = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable DGF
                        var_DGF_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_DGF != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DGF != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_DGF = NESTEDVECTOR_DOUBLE;
                      }
                    }
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable NDIGIT
                    var_NDIGIT_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                    aux_NDIGIT_read = true;
                    if ((aux_last_type_read_for_NDIGIT != SCALAR_INT && aux_last_type_read_for_NDIGIT != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NDIGIT = SCALAR_INT;
                    // assign expression to variable NNN
                    var_NNN_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                    aux_NNN_read = true;
                    if ((aux_last_type_read_for_NNN != SCALAR_INT && aux_last_type_read_for_NNN != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NNN = SCALAR_INT;
                    // assign expression to variable NM
                    var_NM_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                    aux_NM_read = true;
                    if ((aux_last_type_read_for_NM != SCALAR_INT && aux_last_type_read_for_NM != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NM = SCALAR_INT;

                    for (int var_k_0d_int_Scalar = 1;
                       var_k_0d_int_Scalar <= var_NM_0d_int_Scalar; var_k_0d_int_Scalar++) {
                      bool aux_k_read = true;
                      {
                        cpp_line = cpp_read_line(cont);
                        int cpp_ndigit = var_NDIGIT_0d_int_Scalar;
                        if ((cpp_ndigit < 2 || cpp_ndigit > 6)) {
                          throw std::runtime_error("invalid NDIGIT (must be between 2 and 6)");
                        }
                        // assign expression to variable II
                        var_II_1d_int_NestedVector.set(var_k_0d_int_Scalar, cpp_read_custom_int_field(cpp_line, 0, 5));
                        if ((aux_last_type_read_for_II != NESTEDVECTOR_INT && aux_last_type_read_for_II != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_II = NESTEDVECTOR_INT;
                        // assign expression to variable JJ
                        var_JJ_1d_int_NestedVector.set(var_k_0d_int_Scalar, cpp_read_custom_int_field(cpp_line, 5, 5));
                        if ((aux_last_type_read_for_JJ != NESTEDVECTOR_INT && aux_last_type_read_for_JJ != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_JJ = NESTEDVECTOR_INT;
                        int cpp_step = cpp_ndigit + 1;
                        int cpp_end = 65;
                        int cpp_start;
                        if (cpp_ndigit <= 5) {
                          cpp_start = 11;

                        } else {
                          cpp_start = 10;
                        }
                        std::vector<int> cpp_intvec;
                        for (int cpp_i = cpp_start; cpp_i < cpp_end; cpp_i += cpp_step) {
                          cpp_intvec.push_back(cpp_read_custom_int_field(cpp_line, cpp_i, cpp_step));
                        }
                        // assign expression to variable KIJ
                        var_KIJ_1d_intvec_NestedVector.set(var_k_0d_int_Scalar, cpp_intvec);
                        if ((aux_last_type_read_for_KIJ != NESTEDVECTOR_INTVEC && aux_last_type_read_for_KIJ != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_KIJ = NESTEDVECTOR_INTVEC;
                      }
                    }
                  }
                }
              }
            }
            if (! cpp_found_match) {
              if (! cpp_found_match) {
                // if statement evaluation with lookahead
                {
                  std::streampos cpp_old_streampos = cont.tellg();
                  {
                    // variable declarations
                    double& glob_var_EL_0d_double_Scalar = var_EL_0d_double_Scalar;
                    double var_EL_0d_double_Scalar = glob_var_EL_0d_double_Scalar;
                    bool& glob_aux_EL_read = aux_EL_read;
                    bool aux_EL_read = glob_aux_EL_read;
                    vartype aux_last_type_read_for_EL = UNKNOWN;
                    double& glob_var_EH_0d_double_Scalar = var_EH_0d_double_Scalar;
                    double var_EH_0d_double_Scalar = glob_var_EH_0d_double_Scalar;
                    bool& glob_aux_EH_read = aux_EH_read;
                    bool aux_EH_read = glob_aux_EH_read;
                    vartype aux_last_type_read_for_EH = UNKNOWN;
                    int& glob_var_LRU_0d_int_Scalar = var_LRU_0d_int_Scalar;
                    int var_LRU_0d_int_Scalar = glob_var_LRU_0d_int_Scalar;
                    bool& glob_aux_LRU_read = aux_LRU_read;
                    bool aux_LRU_read = glob_aux_LRU_read;
                    vartype aux_last_type_read_for_LRU = UNKNOWN;
                    int& glob_var_LRF_0d_int_Scalar = var_LRF_0d_int_Scalar;
                    int var_LRF_0d_int_Scalar = glob_var_LRF_0d_int_Scalar;
                    bool& glob_aux_LRF_read = aux_LRF_read;
                    bool aux_LRF_read = glob_aux_LRF_read;
                    vartype aux_last_type_read_for_LRF = UNKNOWN;
                    int& glob_var_NRO_0d_int_Scalar = var_NRO_0d_int_Scalar;
                    int var_NRO_0d_int_Scalar = glob_var_NRO_0d_int_Scalar;
                    bool& glob_aux_NRO_read = aux_NRO_read;
                    bool aux_NRO_read = glob_aux_NRO_read;
                    vartype aux_last_type_read_for_NRO = UNKNOWN;
                    int& glob_var_NAPS_0d_int_Scalar = var_NAPS_0d_int_Scalar;
                    int var_NAPS_0d_int_Scalar = glob_var_NAPS_0d_int_Scalar;
                    bool& glob_aux_NAPS_read = aux_NAPS_read;
                    bool aux_NAPS_read = glob_aux_NAPS_read;
                    vartype aux_last_type_read_for_NAPS = UNKNOWN;
                    int& glob_var_NI_0d_int_Scalar = var_NI_0d_int_Scalar;
                    int var_NI_0d_int_Scalar = glob_var_NI_0d_int_Scalar;
                    bool& glob_aux_NI_read = aux_NI_read;
                    bool aux_NI_read = glob_aux_NI_read;
                    vartype aux_last_type_read_for_NI = UNKNOWN;
                    double& glob_var_SPI_0d_double_Scalar = var_SPI_0d_double_Scalar;
                    double var_SPI_0d_double_Scalar = glob_var_SPI_0d_double_Scalar;
                    bool& glob_aux_SPI_read = aux_SPI_read;
                    bool aux_SPI_read = glob_aux_SPI_read;
                    vartype aux_last_type_read_for_SPI = UNKNOWN;
                    double& glob_var_AP_0d_double_Scalar = var_AP_0d_double_Scalar;
                    double var_AP_0d_double_Scalar = glob_var_AP_0d_double_Scalar;
                    bool& glob_aux_AP_read = aux_AP_read;
                    bool aux_AP_read = glob_aux_AP_read;
                    vartype aux_last_type_read_for_AP = UNKNOWN;
                    int& glob_var_LAD_0d_int_Scalar = var_LAD_0d_int_Scalar;
                    int var_LAD_0d_int_Scalar = glob_var_LAD_0d_int_Scalar;
                    bool& glob_aux_LAD_read = aux_LAD_read;
                    bool aux_LAD_read = glob_aux_LAD_read;
                    vartype aux_last_type_read_for_LAD = UNKNOWN;
                    int& glob_var_LCOMP_0d_int_Scalar = var_LCOMP_0d_int_Scalar;
                    int var_LCOMP_0d_int_Scalar = glob_var_LCOMP_0d_int_Scalar;
                    bool& glob_aux_LCOMP_read = aux_LCOMP_read;
                    bool aux_LCOMP_read = glob_aux_LCOMP_read;
                    vartype aux_last_type_read_for_LCOMP = UNKNOWN;
                    int& glob_var_ISR_0d_int_Scalar = var_ISR_0d_int_Scalar;
                    int var_ISR_0d_int_Scalar = glob_var_ISR_0d_int_Scalar;
                    bool& glob_aux_ISR_read = aux_ISR_read;
                    bool aux_ISR_read = glob_aux_ISR_read;
                    vartype aux_last_type_read_for_ISR = UNKNOWN;
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable SPI
                    var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_SPI_read = true;
                    if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_SPI = SCALAR_DOUBLE;
                    // assign expression to variable AP
                    var_AP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_AP_read = true;
                    if ((aux_last_type_read_for_AP != SCALAR_DOUBLE && aux_last_type_read_for_AP != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_AP = SCALAR_DOUBLE;
                    // assign expression to variable LAD
                    var_LAD_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                    aux_LAD_read = true;
                    if ((aux_last_type_read_for_LAD != SCALAR_INT && aux_last_type_read_for_LAD != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_LAD = SCALAR_INT;
                    // assign expression to variable LCOMP
                    var_LCOMP_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                    aux_LCOMP_read = true;
                    if ((aux_last_type_read_for_LCOMP != SCALAR_INT && aux_last_type_read_for_LCOMP != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_LCOMP = SCALAR_INT;
                    // assign expression to variable ISR
                    var_ISR_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                    aux_ISR_read = true;
                    if ((aux_last_type_read_for_ISR != SCALAR_INT && aux_last_type_read_for_ISR != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_ISR = SCALAR_INT;
                    if ((((((((((aux_LCOMP_read == true)) && ((var_LCOMP_0d_int_Scalar)==(2)))))&&((((aux_LRU_read == true)) && ((var_LRU_0d_int_Scalar)==(1)))))&&((((aux_LRF_read == true)) && ((var_LRF_0d_int_Scalar)==(3)))))))) {
                      cpp_found_match = true;
                    }
                    cont.seekg(cpp_old_streampos);
                  }
                  if (cpp_found_match) {
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable SPI
                    var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_SPI_read = true;
                    if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_SPI = SCALAR_DOUBLE;
                    // assign expression to variable AP
                    var_AP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_AP_read = true;
                    if ((aux_last_type_read_for_AP != SCALAR_DOUBLE && aux_last_type_read_for_AP != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_AP = SCALAR_DOUBLE;
                    // assign expression to variable LAD
                    var_LAD_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                    aux_LAD_read = true;
                    if ((aux_last_type_read_for_LAD != SCALAR_INT && aux_last_type_read_for_LAD != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_LAD = SCALAR_INT;
                    // assign expression to variable LCOMP
                    var_LCOMP_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                    aux_LCOMP_read = true;
                    if ((aux_last_type_read_for_LCOMP != SCALAR_INT && aux_last_type_read_for_LCOMP != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_LCOMP = SCALAR_INT;
                    // assign expression to variable ISR
                    var_ISR_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                    aux_ISR_read = true;
                    if ((aux_last_type_read_for_ISR != SCALAR_INT && aux_last_type_read_for_ISR != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_ISR = SCALAR_INT;
                    // evaluate if-elif-else clause
                    {
                      bool cpp_found_match = false;
                      if (! cpp_found_match) {
                        if ((((((((aux_ISR_read == true)) && ((var_ISR_0d_int_Scalar)>(0)))))))) {
                          // if statement evaluation
                          cpp_found_match = true;
                          cpp_line = cpp_read_line(cont);
                          // read LIST record
                          // assign expression to variable MLS
                          var_MLS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                          aux_MLS_read = true;
                          if ((aux_last_type_read_for_MLS != SCALAR_INT && aux_last_type_read_for_MLS != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_MLS = SCALAR_INT;
                          {
                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                            int cpp_j = 0;
                            // read LIST body

                            for (int var_k_0d_int_Scalar = 1;
                               var_k_0d_int_Scalar <= var_MLS_0d_int_Scalar; var_k_0d_int_Scalar++) {
                              bool aux_k_read = true;
                              // read LIST body
                              // assign expression to variable DAP
                              var_DAP_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                              if ((aux_last_type_read_for_DAP != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DAP != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_DAP = NESTEDVECTOR_DOUBLE;
                            }
                          }
                        }
                      }
                    }
                    cpp_line = cpp_read_line(cont);
                    // read LIST record
                    // assign expression to variable AWRI
                    var_AWRI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_AWRI_read = true;
                    if ((aux_last_type_read_for_AWRI != SCALAR_DOUBLE && aux_last_type_read_for_AWRI != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_AWRI = SCALAR_DOUBLE;
                    // assign expression to variable APL
                    var_APL_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_APL_read = true;
                    if ((aux_last_type_read_for_APL != SCALAR_DOUBLE && aux_last_type_read_for_APL != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_APL = SCALAR_DOUBLE;
                    // assign expression to variable cpp_int_val
                    cpp_int_val = cpp_read_int_field(cpp_line, 4);
                    aux_cpp_int_val_read = true;
                    if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                    // assign expression to variable NRSA
                    var_NRSA_0d_int_Scalar = (cpp_int_val/12);
                    aux_NRSA_read = true;
                    if ((aux_last_type_read_for_NRSA != SCALAR_INT && aux_last_type_read_for_NRSA != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NRSA = SCALAR_INT;
                    if ((! (aux_NRSA_read == true))) {
                      // assign expression to variable NRSA
                      var_NRSA_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                      aux_NRSA_read = true;
                      if ((aux_last_type_read_for_NRSA != SCALAR_INT && aux_last_type_read_for_NRSA != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_NRSA = SCALAR_INT;
                    }
                    {
                      int cpp_npl = cpp_read_int_field(cpp_line, 4);
                      cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                      int cpp_j = 0;
                      // read LIST body

                      for (int var_k_0d_int_Scalar = 1;
                         var_k_0d_int_Scalar <= var_NRSA_0d_int_Scalar; var_k_0d_int_Scalar++) {
                        bool aux_k_read = true;
                        // read LIST body
                        // assign expression to variable ER
                        var_ER_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_ER != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ER != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_ER = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable AJ
                        var_AJ_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_AJ != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_AJ != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_AJ = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable GN
                        var_GN_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_GN != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GN != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_GN = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable GG
                        var_GG_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_GG != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GG != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_GG = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable GFA
                        var_GFA_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_GFA != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GFA != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_GFA = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable GFB
                        var_GFB_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_GFB != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GFB != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_GFB = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable DER
                        var_DER_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_DER != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DER != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_DER = NESTEDVECTOR_DOUBLE;
                        cpp_j++;
                        // assign expression to variable DGN
                        var_DGN_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_DGN != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DGN != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_DGN = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable DGG
                        var_DGG_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_DGG != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DGG != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_DGG = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable DGFA
                        var_DGFA_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_DGFA != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DGFA != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_DGFA = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable DGFB
                        var_DGFB_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_DGFB != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DGFB != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_DGFB = NESTEDVECTOR_DOUBLE;
                      }
                    }
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable NDIGIT
                    var_NDIGIT_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                    aux_NDIGIT_read = true;
                    if ((aux_last_type_read_for_NDIGIT != SCALAR_INT && aux_last_type_read_for_NDIGIT != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NDIGIT = SCALAR_INT;
                    // assign expression to variable NNN
                    var_NNN_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                    aux_NNN_read = true;
                    if ((aux_last_type_read_for_NNN != SCALAR_INT && aux_last_type_read_for_NNN != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NNN = SCALAR_INT;
                    // assign expression to variable NM
                    var_NM_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                    aux_NM_read = true;
                    if ((aux_last_type_read_for_NM != SCALAR_INT && aux_last_type_read_for_NM != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NM = SCALAR_INT;

                    for (int var_k_0d_int_Scalar = 1;
                       var_k_0d_int_Scalar <= var_NM_0d_int_Scalar; var_k_0d_int_Scalar++) {
                      bool aux_k_read = true;
                      {
                        cpp_line = cpp_read_line(cont);
                        int cpp_ndigit = var_NDIGIT_0d_int_Scalar;
                        if ((cpp_ndigit < 2 || cpp_ndigit > 6)) {
                          throw std::runtime_error("invalid NDIGIT (must be between 2 and 6)");
                        }
                        // assign expression to variable II
                        var_II_1d_int_NestedVector.set(var_k_0d_int_Scalar, cpp_read_custom_int_field(cpp_line, 0, 5));
                        if ((aux_last_type_read_for_II != NESTEDVECTOR_INT && aux_last_type_read_for_II != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_II = NESTEDVECTOR_INT;
                        // assign expression to variable JJ
                        var_JJ_1d_int_NestedVector.set(var_k_0d_int_Scalar, cpp_read_custom_int_field(cpp_line, 5, 5));
                        if ((aux_last_type_read_for_JJ != NESTEDVECTOR_INT && aux_last_type_read_for_JJ != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_JJ = NESTEDVECTOR_INT;
                        int cpp_step = cpp_ndigit + 1;
                        int cpp_end = 65;
                        int cpp_start;
                        if (cpp_ndigit <= 5) {
                          cpp_start = 11;

                        } else {
                          cpp_start = 10;
                        }
                        std::vector<int> cpp_intvec;
                        for (int cpp_i = cpp_start; cpp_i < cpp_end; cpp_i += cpp_step) {
                          cpp_intvec.push_back(cpp_read_custom_int_field(cpp_line, cpp_i, cpp_step));
                        }
                        // assign expression to variable KIJ
                        var_KIJ_1d_intvec_NestedVector.set(var_k_0d_int_Scalar, cpp_intvec);
                        if ((aux_last_type_read_for_KIJ != NESTEDVECTOR_INTVEC && aux_last_type_read_for_KIJ != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_KIJ = NESTEDVECTOR_INTVEC;
                      }
                    }
                  }
                }
              }
            }
            if (! cpp_found_match) {
              if (! cpp_found_match) {
                // if statement evaluation with lookahead
                {
                  std::streampos cpp_old_streampos = cont.tellg();
                  {
                    // variable declarations
                    double& glob_var_EL_0d_double_Scalar = var_EL_0d_double_Scalar;
                    double var_EL_0d_double_Scalar = glob_var_EL_0d_double_Scalar;
                    bool& glob_aux_EL_read = aux_EL_read;
                    bool aux_EL_read = glob_aux_EL_read;
                    vartype aux_last_type_read_for_EL = UNKNOWN;
                    double& glob_var_EH_0d_double_Scalar = var_EH_0d_double_Scalar;
                    double var_EH_0d_double_Scalar = glob_var_EH_0d_double_Scalar;
                    bool& glob_aux_EH_read = aux_EH_read;
                    bool aux_EH_read = glob_aux_EH_read;
                    vartype aux_last_type_read_for_EH = UNKNOWN;
                    int& glob_var_LRU_0d_int_Scalar = var_LRU_0d_int_Scalar;
                    int var_LRU_0d_int_Scalar = glob_var_LRU_0d_int_Scalar;
                    bool& glob_aux_LRU_read = aux_LRU_read;
                    bool aux_LRU_read = glob_aux_LRU_read;
                    vartype aux_last_type_read_for_LRU = UNKNOWN;
                    int& glob_var_LRF_0d_int_Scalar = var_LRF_0d_int_Scalar;
                    int var_LRF_0d_int_Scalar = glob_var_LRF_0d_int_Scalar;
                    bool& glob_aux_LRF_read = aux_LRF_read;
                    bool aux_LRF_read = glob_aux_LRF_read;
                    vartype aux_last_type_read_for_LRF = UNKNOWN;
                    int& glob_var_NRO_0d_int_Scalar = var_NRO_0d_int_Scalar;
                    int var_NRO_0d_int_Scalar = glob_var_NRO_0d_int_Scalar;
                    bool& glob_aux_NRO_read = aux_NRO_read;
                    bool aux_NRO_read = glob_aux_NRO_read;
                    vartype aux_last_type_read_for_NRO = UNKNOWN;
                    int& glob_var_NAPS_0d_int_Scalar = var_NAPS_0d_int_Scalar;
                    int var_NAPS_0d_int_Scalar = glob_var_NAPS_0d_int_Scalar;
                    bool& glob_aux_NAPS_read = aux_NAPS_read;
                    bool aux_NAPS_read = glob_aux_NAPS_read;
                    vartype aux_last_type_read_for_NAPS = UNKNOWN;
                    int& glob_var_NI_0d_int_Scalar = var_NI_0d_int_Scalar;
                    int var_NI_0d_int_Scalar = glob_var_NI_0d_int_Scalar;
                    bool& glob_aux_NI_read = aux_NI_read;
                    bool aux_NI_read = glob_aux_NI_read;
                    vartype aux_last_type_read_for_NI = UNKNOWN;
                    int& glob_var_IFG_0d_int_Scalar = var_IFG_0d_int_Scalar;
                    int var_IFG_0d_int_Scalar = glob_var_IFG_0d_int_Scalar;
                    bool& glob_aux_IFG_read = aux_IFG_read;
                    bool aux_IFG_read = glob_aux_IFG_read;
                    vartype aux_last_type_read_for_IFG = UNKNOWN;
                    int& glob_var_LCOMP_0d_int_Scalar = var_LCOMP_0d_int_Scalar;
                    int var_LCOMP_0d_int_Scalar = glob_var_LCOMP_0d_int_Scalar;
                    bool& glob_aux_LCOMP_read = aux_LCOMP_read;
                    bool aux_LCOMP_read = glob_aux_LCOMP_read;
                    vartype aux_last_type_read_for_LCOMP = UNKNOWN;
                    int& glob_var_NJS_0d_int_Scalar = var_NJS_0d_int_Scalar;
                    int var_NJS_0d_int_Scalar = glob_var_NJS_0d_int_Scalar;
                    bool& glob_aux_NJS_read = aux_NJS_read;
                    bool aux_NJS_read = glob_aux_NJS_read;
                    vartype aux_last_type_read_for_NJS = UNKNOWN;
                    int& glob_var_ISR_0d_int_Scalar = var_ISR_0d_int_Scalar;
                    int var_ISR_0d_int_Scalar = glob_var_ISR_0d_int_Scalar;
                    bool& glob_aux_ISR_read = aux_ISR_read;
                    bool aux_ISR_read = glob_aux_ISR_read;
                    vartype aux_last_type_read_for_ISR = UNKNOWN;
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable IFG
                    var_IFG_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                    aux_IFG_read = true;
                    if ((aux_last_type_read_for_IFG != SCALAR_INT && aux_last_type_read_for_IFG != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_IFG = SCALAR_INT;
                    // assign expression to variable LCOMP
                    var_LCOMP_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                    aux_LCOMP_read = true;
                    if ((aux_last_type_read_for_LCOMP != SCALAR_INT && aux_last_type_read_for_LCOMP != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_LCOMP = SCALAR_INT;
                    // assign expression to variable NJS
                    var_NJS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                    aux_NJS_read = true;
                    if ((aux_last_type_read_for_NJS != SCALAR_INT && aux_last_type_read_for_NJS != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NJS = SCALAR_INT;
                    // assign expression to variable ISR
                    var_ISR_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                    aux_ISR_read = true;
                    if ((aux_last_type_read_for_ISR != SCALAR_INT && aux_last_type_read_for_ISR != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_ISR = SCALAR_INT;
                    if ((((((((((aux_LCOMP_read == true)) && ((var_LCOMP_0d_int_Scalar)==(2)))))&&((((aux_LRU_read == true)) && ((var_LRU_0d_int_Scalar)==(1)))))&&((((aux_LRF_read == true)) && ((var_LRF_0d_int_Scalar)==(7)))))))) {
                      cpp_found_match = true;
                    }
                    cont.seekg(cpp_old_streampos);
                  }
                  if (cpp_found_match) {
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable IFG
                    var_IFG_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                    aux_IFG_read = true;
                    if ((aux_last_type_read_for_IFG != SCALAR_INT && aux_last_type_read_for_IFG != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_IFG = SCALAR_INT;
                    // assign expression to variable LCOMP
                    var_LCOMP_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                    aux_LCOMP_read = true;
                    if ((aux_last_type_read_for_LCOMP != SCALAR_INT && aux_last_type_read_for_LCOMP != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_LCOMP = SCALAR_INT;
                    // assign expression to variable NJS
                    var_NJS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                    aux_NJS_read = true;
                    if ((aux_last_type_read_for_NJS != SCALAR_INT && aux_last_type_read_for_NJS != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NJS = SCALAR_INT;
                    // assign expression to variable ISR
                    var_ISR_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                    aux_ISR_read = true;
                    if ((aux_last_type_read_for_ISR != SCALAR_INT && aux_last_type_read_for_ISR != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_ISR = SCALAR_INT;
                    // evaluate if-elif-else clause
                    {
                      bool cpp_found_match = false;
                      if (! cpp_found_match) {
                        if ((((((((aux_ISR_read == true)) && ((var_ISR_0d_int_Scalar)>(0)))))))) {
                          // if statement evaluation
                          cpp_found_match = true;
                          cpp_line = cpp_read_line(cont);
                          // read LIST record
                          // assign expression to variable NJCH
                          var_NJCH_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                          aux_NJCH_read = true;
                          if ((aux_last_type_read_for_NJCH != SCALAR_INT && aux_last_type_read_for_NJCH != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NJCH = SCALAR_INT;
                          if ((! (aux_NJCH_read == true))) {
                            // assign expression to variable cpp_int_val
                            cpp_int_val = cpp_read_int_field(cpp_line, 5);
                            aux_cpp_int_val_read = true;
                            if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                            // assign expression to variable NJCH
                            var_NJCH_0d_int_Scalar = ((((((1/6)*(-1))+1)*(-1))+cpp_int_val)/(1/6));
                            aux_NJCH_read = true;
                            if ((aux_last_type_read_for_NJCH != SCALAR_INT && aux_last_type_read_for_NJCH != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_NJCH = SCALAR_INT;
                          }
                          {
                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                            int cpp_j = 0;
                            // read LIST body
                            var_DAP_2d_double_Matrix2d.init(1, (var_NJCH_0d_int_Scalar/var_NJS_0d_int_Scalar), 1, (var_NJCH_0d_int_Scalar/var_NJS_0d_int_Scalar), false, false);

                            for (int var_m_0d_int_Scalar = 1;
                               var_m_0d_int_Scalar <= (var_NJCH_0d_int_Scalar/var_NJS_0d_int_Scalar); var_m_0d_int_Scalar++) {
                              bool aux_m_read = true;
                              // read LIST body

                              for (int var_n_0d_int_Scalar = 1;
                                 var_n_0d_int_Scalar <= (var_NJCH_0d_int_Scalar/var_NJS_0d_int_Scalar); var_n_0d_int_Scalar++) {
                                bool aux_n_read = true;
                                // read LIST body
                                // assign expression to variable DAP
                                var_DAP_2d_double_Matrix2d(var_m_0d_int_Scalar, var_n_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                                if ((aux_last_type_read_for_DAP != MATRIX2D_DOUBLE && aux_last_type_read_for_DAP != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_DAP = MATRIX2D_DOUBLE;
                              }
                            }
                          }
                        }
                      }
                    }
                    cpp_line = cpp_read_line(cont);
                    // read LIST record
                    // assign expression to variable NPP
                    var_NPP_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                    aux_NPP_read = true;
                    if ((aux_last_type_read_for_NPP != SCALAR_INT && aux_last_type_read_for_NPP != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NPP = SCALAR_INT;
                    // assign expression to variable NJSX
                    var_NJSX_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                    aux_NJSX_read = true;
                    if ((aux_last_type_read_for_NJSX != SCALAR_INT && aux_last_type_read_for_NJSX != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NJSX = SCALAR_INT;
                    if ((! (aux_NPP_read == true))) {
                      // assign expression to variable cpp_int_val
                      cpp_int_val = cpp_read_int_field(cpp_line, 4);
                      aux_cpp_int_val_read = true;
                      if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                      // assign expression to variable NPP
                      var_NPP_0d_int_Scalar = (cpp_int_val/12);
                      aux_NPP_read = true;
                      if ((aux_last_type_read_for_NPP != SCALAR_INT && aux_last_type_read_for_NPP != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_NPP = SCALAR_INT;
                    }
                    if ((! (aux_NPP_read == true))) {
                      // assign expression to variable cpp_int_val
                      cpp_int_val = cpp_read_int_field(cpp_line, 5);
                      aux_cpp_int_val_read = true;
                      if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                      // assign expression to variable NPP
                      var_NPP_0d_int_Scalar = (cpp_int_val/2);
                      aux_NPP_read = true;
                      if ((aux_last_type_read_for_NPP != SCALAR_INT && aux_last_type_read_for_NPP != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_NPP = SCALAR_INT;
                    }
                    {
                      int cpp_npl = cpp_read_int_field(cpp_line, 4);
                      cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                      int cpp_j = 0;
                      // read LIST body

                      for (int var_k_0d_int_Scalar = 1;
                         var_k_0d_int_Scalar <= var_NPP_0d_int_Scalar; var_k_0d_int_Scalar++) {
                        bool aux_k_read = true;
                        // read LIST body
                        // assign expression to variable MA
                        var_MA_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_MA != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_MA != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_MA = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable MB
                        var_MB_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_MB != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_MB != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_MB = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable ZA
                        var_ZA_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_ZA != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_ZA = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable ZB
                        var_ZB_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_ZB != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ZB != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_ZB = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable IA
                        var_IA_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_IA != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_IA != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_IA = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable IB
                        var_IB_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_IB != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_IB != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_IB = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable Q
                        var_Q_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_Q != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_Q != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_Q = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable PNT
                        var_PNT_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_PNT != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_PNT != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_PNT = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable SHF
                        var_SHF_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_SHF != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_SHF != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_SHF = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable MT
                        var_MT_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_MT != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_MT != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_MT = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable PA
                        var_PA_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_PA != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_PA != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_PA = NESTEDVECTOR_DOUBLE;
                        // assign expression to variable PB
                        var_PB_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                        if ((aux_last_type_read_for_PB != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_PB != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_PB = NESTEDVECTOR_DOUBLE;
                      }
                    }

                    for (int var_q_0d_int_Scalar = 1;
                       var_q_0d_int_Scalar <= var_NJS_0d_int_Scalar; var_q_0d_int_Scalar++) {
                      bool aux_q_read = true;
                      // open section somesec

                      {
                          py::dict cpp_parent_dict = cpp_current_dict;
                          if (! cpp_parent_dict.contains("somesec")) {
                            cpp_parent_dict["somesec"] = py::dict();
                          }
                          py::dict cpp_current_dict = cpp_parent_dict["somesec"];

                          if (! cpp_current_dict.contains(py::cast(var_q_0d_int_Scalar))) {
                            cpp_current_dict[py::cast(var_q_0d_int_Scalar)] = py::dict();
                          }
                          cpp_current_dict = cpp_current_dict[py::cast(var_q_0d_int_Scalar)];
                        // variable declarations
                        double var_AJ_0d_double_Scalar;
                        bool aux_AJ_read = false;
                        vartype aux_last_type_read_for_AJ = UNKNOWN;
                        double var_PJ_0d_double_Scalar;
                        bool aux_PJ_read = false;
                        vartype aux_last_type_read_for_PJ = UNKNOWN;
                        int cpp_int_val;
                        bool aux_cpp_int_val_read = false;
                        vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                        int var_NCH_0d_int_Scalar;
                        bool aux_NCH_read = false;
                        vartype aux_last_type_read_for_NCH = UNKNOWN;
                        NestedVector<double> var_PPI_1d_double_NestedVector;
                        vartype aux_last_type_read_for_PPI = UNKNOWN;
                        NestedVector<double> var_L_1d_double_NestedVector;
                        vartype aux_last_type_read_for_L = UNKNOWN;
                        NestedVector<double> var_SCH_1d_double_NestedVector;
                        vartype aux_last_type_read_for_SCH = UNKNOWN;
                        NestedVector<double> var_BND_1d_double_NestedVector;
                        vartype aux_last_type_read_for_BND = UNKNOWN;
                        NestedVector<double> var_APE_1d_double_NestedVector;
                        vartype aux_last_type_read_for_APE = UNKNOWN;
                        NestedVector<double> var_APT_1d_double_NestedVector;
                        vartype aux_last_type_read_for_APT = UNKNOWN;
                        int var_NRSA_0d_int_Scalar;
                        bool aux_NRSA_read = false;
                        vartype aux_last_type_read_for_NRSA = UNKNOWN;
                        NestedVector<double> var_ER_1d_double_NestedVector;
                        vartype aux_last_type_read_for_ER = UNKNOWN;
                        Matrix2d<double> var_GAM_2d_double_Matrix2d;
                        vartype aux_last_type_read_for_GAM = UNKNOWN;
                        NestedVector<double> var_DER_1d_double_NestedVector;
                        vartype aux_last_type_read_for_DER = UNKNOWN;
                        Matrix2d<double> var_DGAM_2d_double_Matrix2d;
                        vartype aux_last_type_read_for_DGAM = UNKNOWN;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable AJ
                        var_AJ_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                        aux_AJ_read = true;
                        if ((aux_last_type_read_for_AJ != SCALAR_DOUBLE && aux_last_type_read_for_AJ != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_AJ = SCALAR_DOUBLE;
                        // assign expression to variable PJ
                        var_PJ_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_PJ_read = true;
                        if ((aux_last_type_read_for_PJ != SCALAR_DOUBLE && aux_last_type_read_for_PJ != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_PJ = SCALAR_DOUBLE;
                        // assign expression to variable cpp_int_val
                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                        aux_cpp_int_val_read = true;
                        if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                        // assign expression to variable NCH
                        var_NCH_0d_int_Scalar = (cpp_int_val/6);
                        aux_NCH_read = true;
                        if ((aux_last_type_read_for_NCH != SCALAR_INT && aux_last_type_read_for_NCH != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NCH = SCALAR_INT;
                        if ((! (aux_NCH_read == true))) {
                          // assign expression to variable NCH
                          var_NCH_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                          aux_NCH_read = true;
                          if ((aux_last_type_read_for_NCH != SCALAR_INT && aux_last_type_read_for_NCH != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NCH = SCALAR_INT;
                        }
                        {
                          int cpp_npl = cpp_read_int_field(cpp_line, 4);
                          cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                          int cpp_j = 0;
                          // read LIST body

                          for (int var_k_0d_int_Scalar = 1;
                             var_k_0d_int_Scalar <= var_NCH_0d_int_Scalar; var_k_0d_int_Scalar++) {
                            bool aux_k_read = true;
                            // read LIST body
                            // assign expression to variable PPI
                            var_PPI_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_PPI != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_PPI != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_PPI = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable L
                            var_L_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_L != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_L != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_L = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable SCH
                            var_SCH_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_SCH != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_SCH != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_SCH = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable BND
                            var_BND_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_BND != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_BND != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_BND = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable APE
                            var_APE_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_APE != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_APE != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_APE = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable APT
                            var_APT_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_APT != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_APT != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_APT = NESTEDVECTOR_DOUBLE;
                          }
                        }
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable NRSA
                        var_NRSA_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                        aux_NRSA_read = true;
                        if ((aux_last_type_read_for_NRSA != SCALAR_INT && aux_last_type_read_for_NRSA != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NRSA = SCALAR_INT;
                        if ((! (aux_NCH_read == true))) {
                          throw std::runtime_error("The equation (12*((((2*(NCH+1))+(2*((5-NCH)%6)))*NRSA)/12))==value cannot be solved for NCH because the modulo operator is not supported.");
                        }
                        if ((! (aux_NRSA_read == true))) {
                          throw std::runtime_error("The equation (12*((((2*(NCH+1))+(2*((5-NCH)%6)))*NRSA)/12))==value cannot be solved for NRSA because the modulo operator is not supported.");
                        }
                        if ((! (aux_NCH_read == true))) {
                          throw std::runtime_error("The equation ((((2*(NCH+1))+(2*((5-NCH)%6)))*NRSA)/12)==value cannot be solved for NCH because the modulo operator is not supported.");
                        }
                        if ((! (aux_NRSA_read == true))) {
                          throw std::runtime_error("The equation ((((2*(NCH+1))+(2*((5-NCH)%6)))*NRSA)/12)==value cannot be solved for NRSA because the modulo operator is not supported.");
                        }
                        {
                          int cpp_npl = cpp_read_int_field(cpp_line, 4);
                          cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                          int cpp_j = 0;
                          // read LIST body
                          var_GAM_2d_double_Matrix2d.init(1, var_NCH_0d_int_Scalar, 1, var_NRSA_0d_int_Scalar, false, false);
                          var_DGAM_2d_double_Matrix2d.init(1, var_NCH_0d_int_Scalar, 1, var_NRSA_0d_int_Scalar, false, false);

                          for (int var_k_0d_int_Scalar = 1;
                             var_k_0d_int_Scalar <= var_NRSA_0d_int_Scalar; var_k_0d_int_Scalar++) {
                            bool aux_k_read = true;
                            // read LIST body
                            // assign expression to variable ER
                            var_ER_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_ER != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ER != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_ER = NESTEDVECTOR_DOUBLE;

                            for (int var_p_0d_int_Scalar = 1;
                               var_p_0d_int_Scalar <= var_NCH_0d_int_Scalar; var_p_0d_int_Scalar++) {
                              bool aux_p_read = true;
                              // read LIST body
                              // assign expression to variable GAM
                              var_GAM_2d_double_Matrix2d(var_p_0d_int_Scalar, var_k_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                              if ((aux_last_type_read_for_GAM != MATRIX2D_DOUBLE && aux_last_type_read_for_GAM != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_GAM = MATRIX2D_DOUBLE;
                            }

                            for (int var_r_0d_int_Scalar = 1;
                               var_r_0d_int_Scalar <= ((5-var_NCH_0d_int_Scalar)%6); var_r_0d_int_Scalar++) {
                              bool aux_r_read = true;
                              // read LIST body
                              cpp_j++;
                            }
                            // assign expression to variable DER
                            var_DER_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_DER != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_DER != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_DER = NESTEDVECTOR_DOUBLE;

                            for (int var_p_0d_int_Scalar = 1;
                               var_p_0d_int_Scalar <= var_NCH_0d_int_Scalar; var_p_0d_int_Scalar++) {
                              bool aux_p_read = true;
                              // read LIST body
                              // assign expression to variable DGAM
                              var_DGAM_2d_double_Matrix2d(var_p_0d_int_Scalar, var_k_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                              if ((aux_last_type_read_for_DGAM != MATRIX2D_DOUBLE && aux_last_type_read_for_DGAM != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_DGAM = MATRIX2D_DOUBLE;
                            }

                            for (int var_r_0d_int_Scalar = 1;
                               var_r_0d_int_Scalar <= ((5-var_NCH_0d_int_Scalar)%6); var_r_0d_int_Scalar++) {
                              bool aux_r_read = true;
                              // read LIST body
                              cpp_j++;
                            }
                          }
                        }
                        // store data in Python dictionary
                        if (((aux_last_type_read_for_AJ == SCALAR_DOUBLE) && (aux_AJ_read == true))) {
                          cpp_current_dict["AJ"] = var_AJ_0d_double_Scalar;
                        }
                        if (((aux_last_type_read_for_PJ == SCALAR_DOUBLE) && (aux_PJ_read == true))) {
                          cpp_current_dict["PJ"] = var_PJ_0d_double_Scalar;
                        }
                        if (((aux_last_type_read_for_NCH == SCALAR_INT) && (aux_NCH_read == true))) {
                          cpp_current_dict["NCH"] = var_NCH_0d_int_Scalar;
                        }
                        if ((var_PPI_1d_double_NestedVector.get_last_index() != -1)) {
                          auto& cpp_curvar0 = var_PPI_1d_double_NestedVector;
                          cpp_current_dict["PPI"] = py::dict();
                          py::dict cpp_curdict0 = cpp_current_dict["PPI"];
                          for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                          }
                        }
                        if ((var_L_1d_double_NestedVector.get_last_index() != -1)) {
                          auto& cpp_curvar0 = var_L_1d_double_NestedVector;
                          cpp_current_dict["L"] = py::dict();
                          py::dict cpp_curdict0 = cpp_current_dict["L"];
                          for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                          }
                        }
                        if ((var_SCH_1d_double_NestedVector.get_last_index() != -1)) {
                          auto& cpp_curvar0 = var_SCH_1d_double_NestedVector;
                          cpp_current_dict["SCH"] = py::dict();
                          py::dict cpp_curdict0 = cpp_current_dict["SCH"];
                          for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                          }
                        }
                        if ((var_BND_1d_double_NestedVector.get_last_index() != -1)) {
                          auto& cpp_curvar0 = var_BND_1d_double_NestedVector;
                          cpp_current_dict["BND"] = py::dict();
                          py::dict cpp_curdict0 = cpp_current_dict["BND"];
                          for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                          }
                        }
                        if ((var_APE_1d_double_NestedVector.get_last_index() != -1)) {
                          auto& cpp_curvar0 = var_APE_1d_double_NestedVector;
                          cpp_current_dict["APE"] = py::dict();
                          py::dict cpp_curdict0 = cpp_current_dict["APE"];
                          for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                          }
                        }
                        if ((var_APT_1d_double_NestedVector.get_last_index() != -1)) {
                          auto& cpp_curvar0 = var_APT_1d_double_NestedVector;
                          cpp_current_dict["APT"] = py::dict();
                          py::dict cpp_curdict0 = cpp_current_dict["APT"];
                          for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                          }
                        }
                        if (((aux_last_type_read_for_NRSA == SCALAR_INT) && (aux_NRSA_read == true))) {
                          cpp_current_dict["NRSA"] = var_NRSA_0d_int_Scalar;
                        }
                        if ((var_ER_1d_double_NestedVector.get_last_index() != -1)) {
                          auto& cpp_curvar0 = var_ER_1d_double_NestedVector;
                          cpp_current_dict["ER"] = py::dict();
                          py::dict cpp_curdict0 = cpp_current_dict["ER"];
                          for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                          }
                        }
                        if (var_GAM_2d_double_Matrix2d.did_read()) {
                            cpp_current_dict["GAM"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["GAM"];
                            for (int cpp_i1 = var_GAM_2d_double_Matrix2d.get_row_start_index(); cpp_i1 <= var_GAM_2d_double_Matrix2d.get_row_last_index(); cpp_i1++) {
                              cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                              py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                              for (int cpp_i2 = var_GAM_2d_double_Matrix2d.get_col_start_index(cpp_i1); cpp_i2 <= var_GAM_2d_double_Matrix2d.get_col_last_index(cpp_i1); cpp_i2++) {
                                cpp_curdict1[py::cast(cpp_i2)] = var_GAM_2d_double_Matrix2d(cpp_i1, cpp_i2);
                              }
                            }
                        }
                        if ((var_DER_1d_double_NestedVector.get_last_index() != -1)) {
                          auto& cpp_curvar0 = var_DER_1d_double_NestedVector;
                          cpp_current_dict["DER"] = py::dict();
                          py::dict cpp_curdict0 = cpp_current_dict["DER"];
                          for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                          }
                        }
                        if (var_DGAM_2d_double_Matrix2d.did_read()) {
                            cpp_current_dict["DGAM"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["DGAM"];
                            for (int cpp_i1 = var_DGAM_2d_double_Matrix2d.get_row_start_index(); cpp_i1 <= var_DGAM_2d_double_Matrix2d.get_row_last_index(); cpp_i1++) {
                              cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                              py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                              for (int cpp_i2 = var_DGAM_2d_double_Matrix2d.get_col_start_index(cpp_i1); cpp_i2 <= var_DGAM_2d_double_Matrix2d.get_col_last_index(cpp_i1); cpp_i2++) {
                                cpp_curdict1[py::cast(cpp_i2)] = var_DGAM_2d_double_Matrix2d(cpp_i1, cpp_i2);
                              }
                            }
                        }
                        cpp_current_dict = cpp_parent_dict;
                      }
                    }
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable NDIGIT
                    var_NDIGIT_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                    aux_NDIGIT_read = true;
                    if ((aux_last_type_read_for_NDIGIT != SCALAR_INT && aux_last_type_read_for_NDIGIT != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NDIGIT = SCALAR_INT;
                    // assign expression to variable NNN
                    var_NNN_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                    aux_NNN_read = true;
                    if ((aux_last_type_read_for_NNN != SCALAR_INT && aux_last_type_read_for_NNN != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NNN = SCALAR_INT;
                    // assign expression to variable NM
                    var_NM_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                    aux_NM_read = true;
                    if ((aux_last_type_read_for_NM != SCALAR_INT && aux_last_type_read_for_NM != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NM = SCALAR_INT;

                    for (int var_q_0d_int_Scalar = 1;
                       var_q_0d_int_Scalar <= var_NM_0d_int_Scalar; var_q_0d_int_Scalar++) {
                      bool aux_q_read = true;
                      {
                        cpp_line = cpp_read_line(cont);
                        int cpp_ndigit = var_NDIGIT_0d_int_Scalar;
                        if ((cpp_ndigit < 2 || cpp_ndigit > 6)) {
                          throw std::runtime_error("invalid NDIGIT (must be between 2 and 6)");
                        }
                        // assign expression to variable II
                        var_II_1d_int_NestedVector.set(var_q_0d_int_Scalar, cpp_read_custom_int_field(cpp_line, 0, 5));
                        if ((aux_last_type_read_for_II != NESTEDVECTOR_INT && aux_last_type_read_for_II != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_II = NESTEDVECTOR_INT;
                        // assign expression to variable JJ
                        var_JJ_1d_int_NestedVector.set(var_q_0d_int_Scalar, cpp_read_custom_int_field(cpp_line, 5, 5));
                        if ((aux_last_type_read_for_JJ != NESTEDVECTOR_INT && aux_last_type_read_for_JJ != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_JJ = NESTEDVECTOR_INT;
                        int cpp_step = cpp_ndigit + 1;
                        int cpp_end = 65;
                        int cpp_start;
                        if (cpp_ndigit <= 5) {
                          cpp_start = 11;

                        } else {
                          cpp_start = 10;
                        }
                        std::vector<int> cpp_intvec;
                        for (int cpp_i = cpp_start; cpp_i < cpp_end; cpp_i += cpp_step) {
                          cpp_intvec.push_back(cpp_read_custom_int_field(cpp_line, cpp_i, cpp_step));
                        }
                        // assign expression to variable KIJ
                        var_KIJ_1d_intvec_NestedVector.set(var_q_0d_int_Scalar, cpp_intvec);
                        if ((aux_last_type_read_for_KIJ != NESTEDVECTOR_INTVEC && aux_last_type_read_for_KIJ != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_KIJ = NESTEDVECTOR_INTVEC;
                      }
                    }
                  }
                }
              }
            }
            if (! cpp_found_match) {
              if (! cpp_found_match) {
                if ((((((((aux_LRU_read == true)) && ((var_LRU_0d_int_Scalar)==(2)))))))) {
                  // if statement evaluation
                  cpp_found_match = true;
                  cpp_line = cpp_read_line(cont);
                  // read CONT record
                  // assign expression to variable SPI
                  var_SPI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                  aux_SPI_read = true;
                  if ((aux_last_type_read_for_SPI != SCALAR_DOUBLE && aux_last_type_read_for_SPI != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_SPI = SCALAR_DOUBLE;
                  // assign expression to variable AP
                  var_AP_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                  aux_AP_read = true;
                  if ((aux_last_type_read_for_AP != SCALAR_DOUBLE && aux_last_type_read_for_AP != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_AP = SCALAR_DOUBLE;
                  // assign expression to variable NLS
                  var_NLS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                  aux_NLS_read = true;
                  if ((aux_last_type_read_for_NLS != SCALAR_INT && aux_last_type_read_for_NLS != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_NLS = SCALAR_INT;

                  for (int var_q_0d_int_Scalar = 1;
                     var_q_0d_int_Scalar <= var_NLS_0d_int_Scalar; var_q_0d_int_Scalar++) {
                    bool aux_q_read = true;
                    // open section l_group

                    {
                        py::dict cpp_parent_dict = cpp_current_dict;
                        if (! cpp_parent_dict.contains("l_group")) {
                          cpp_parent_dict["l_group"] = py::dict();
                        }
                        py::dict cpp_current_dict = cpp_parent_dict["l_group"];

                        if (! cpp_current_dict.contains(py::cast(var_q_0d_int_Scalar))) {
                          cpp_current_dict[py::cast(var_q_0d_int_Scalar)] = py::dict();
                        }
                        cpp_current_dict = cpp_current_dict[py::cast(var_q_0d_int_Scalar)];
                      // variable declarations
                      double var_AWRI_0d_double_Scalar;
                      bool aux_AWRI_read = false;
                      vartype aux_last_type_read_for_AWRI = UNKNOWN;
                      int var_L_0d_int_Scalar;
                      bool aux_L_read = false;
                      vartype aux_last_type_read_for_L = UNKNOWN;
                      int cpp_int_val;
                      bool aux_cpp_int_val_read = false;
                      vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                      int var_NJS_0d_int_Scalar;
                      bool aux_NJS_read = false;
                      vartype aux_last_type_read_for_NJS = UNKNOWN;
                      NestedVector<double> var_D_1d_double_NestedVector;
                      vartype aux_last_type_read_for_D = UNKNOWN;
                      NestedVector<double> var_AJ_1d_double_NestedVector;
                      vartype aux_last_type_read_for_AJ = UNKNOWN;
                      NestedVector<double> var_GNO_1d_double_NestedVector;
                      vartype aux_last_type_read_for_GNO = UNKNOWN;
                      NestedVector<double> var_GG_1d_double_NestedVector;
                      vartype aux_last_type_read_for_GG = UNKNOWN;
                      NestedVector<double> var_GF_1d_double_NestedVector;
                      vartype aux_last_type_read_for_GF = UNKNOWN;
                      NestedVector<double> var_GX_1d_double_NestedVector;
                      vartype aux_last_type_read_for_GX = UNKNOWN;
                      cpp_line = cpp_read_line(cont);
                      // read LIST record
                      // assign expression to variable AWRI
                      var_AWRI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                      aux_AWRI_read = true;
                      if ((aux_last_type_read_for_AWRI != SCALAR_DOUBLE && aux_last_type_read_for_AWRI != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_AWRI = SCALAR_DOUBLE;
                      // assign expression to variable L
                      var_L_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                      aux_L_read = true;
                      if ((aux_last_type_read_for_L != SCALAR_INT && aux_last_type_read_for_L != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_L = SCALAR_INT;
                      // assign expression to variable cpp_int_val
                      cpp_int_val = cpp_read_int_field(cpp_line, 4);
                      aux_cpp_int_val_read = true;
                      if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                      // assign expression to variable NJS
                      var_NJS_0d_int_Scalar = (cpp_int_val/6);
                      aux_NJS_read = true;
                      if ((aux_last_type_read_for_NJS != SCALAR_INT && aux_last_type_read_for_NJS != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_NJS = SCALAR_INT;
                      if ((! (aux_NJS_read == true))) {
                        // assign expression to variable NJS
                        var_NJS_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                        aux_NJS_read = true;
                        if ((aux_last_type_read_for_NJS != SCALAR_INT && aux_last_type_read_for_NJS != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NJS = SCALAR_INT;
                      }
                      {
                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                        int cpp_j = 0;
                        // read LIST body

                        for (int var_k_0d_int_Scalar = 1;
                           var_k_0d_int_Scalar <= var_NJS_0d_int_Scalar; var_k_0d_int_Scalar++) {
                          bool aux_k_read = true;
                          // read LIST body
                          // assign expression to variable D
                          var_D_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_D != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_D != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_D = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable AJ
                          var_AJ_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_AJ != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_AJ != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_AJ = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable GNO
                          var_GNO_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_GNO != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GNO != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_GNO = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable GG
                          var_GG_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_GG != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GG != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_GG = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable GF
                          var_GF_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_GF != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GF != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_GF = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable GX
                          var_GX_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_GX != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_GX != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_GX = NESTEDVECTOR_DOUBLE;
                        }
                      }
                      // store data in Python dictionary
                      if (((aux_last_type_read_for_AWRI == SCALAR_DOUBLE) && (aux_AWRI_read == true))) {
                        cpp_current_dict["AWRI"] = var_AWRI_0d_double_Scalar;
                      }
                      if (((aux_last_type_read_for_L == SCALAR_INT) && (aux_L_read == true))) {
                        cpp_current_dict["L"] = var_L_0d_int_Scalar;
                      }
                      if (((aux_last_type_read_for_NJS == SCALAR_INT) && (aux_NJS_read == true))) {
                        cpp_current_dict["NJS"] = var_NJS_0d_int_Scalar;
                      }
                      if ((var_D_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_D_1d_double_NestedVector;
                        cpp_current_dict["D"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["D"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      if ((var_AJ_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_AJ_1d_double_NestedVector;
                        cpp_current_dict["AJ"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["AJ"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      if ((var_GNO_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_GNO_1d_double_NestedVector;
                        cpp_current_dict["GNO"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["GNO"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      if ((var_GG_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_GG_1d_double_NestedVector;
                        cpp_current_dict["GG"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["GG"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      if ((var_GF_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_GF_1d_double_NestedVector;
                        cpp_current_dict["GF"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["GF"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      if ((var_GX_1d_double_NestedVector.get_last_index() != -1)) {
                        auto& cpp_curvar0 = var_GX_1d_double_NestedVector;
                        cpp_current_dict["GX"] = py::dict();
                        py::dict cpp_curdict0 = cpp_current_dict["GX"];
                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                        }
                      }
                      cpp_current_dict = cpp_parent_dict;
                    }
                  }
                  cpp_line = cpp_read_line(cont);
                  // read LIST record
                  // assign expression to variable MPAR
                  var_MPAR_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                  aux_MPAR_read = true;
                  if ((aux_last_type_read_for_MPAR != SCALAR_INT && aux_last_type_read_for_MPAR != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_MPAR = SCALAR_INT;
                  // assign expression to variable NPAR
                  var_NPAR_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                  aux_NPAR_read = true;
                  if ((aux_last_type_read_for_NPAR != SCALAR_INT && aux_last_type_read_for_NPAR != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_NPAR = SCALAR_INT;
                  if ((! (aux_NPAR_read == true))) {
                    throw std::runtime_error("The equation ((NPAR*(NPAR+1))/2)==value cannot be solved for NPAR because this variable could not be isolated.");
                  }
                  {
                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                    int cpp_j = 0;
                    // read LIST body
                    var_RV_2d_double_Matrix2d.init(1, var_NPAR_0d_int_Scalar, 1, var_NPAR_0d_int_Scalar, true, false);

                    for (int var_p_0d_int_Scalar = 1;
                       var_p_0d_int_Scalar <= var_NPAR_0d_int_Scalar; var_p_0d_int_Scalar++) {
                      bool aux_p_read = true;
                      // read LIST body

                      for (int var_q_0d_int_Scalar = var_p_0d_int_Scalar;
                         var_q_0d_int_Scalar <= var_NPAR_0d_int_Scalar; var_q_0d_int_Scalar++) {
                        bool aux_q_read = true;
                        // read LIST body
                        // assign expression to variable RV
                        var_RV_2d_double_Matrix2d(var_p_0d_int_Scalar, var_q_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                        if ((aux_last_type_read_for_RV != MATRIX2D_DOUBLE && aux_last_type_read_for_RV != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_RV = MATRIX2D_DOUBLE;
                      }
                    }
                  }
                }
              }
            }
          }
          // store data in Python dictionary
          if (((aux_last_type_read_for_EL == SCALAR_DOUBLE) && (aux_EL_read == true))) {
            cpp_current_dict["EL"] = var_EL_0d_double_Scalar;
          }
          if (((aux_last_type_read_for_EH == SCALAR_DOUBLE) && (aux_EH_read == true))) {
            cpp_current_dict["EH"] = var_EH_0d_double_Scalar;
          }
          if (((aux_last_type_read_for_LRU == SCALAR_INT) && (aux_LRU_read == true))) {
            cpp_current_dict["LRU"] = var_LRU_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_LRF == SCALAR_INT) && (aux_LRF_read == true))) {
            cpp_current_dict["LRF"] = var_LRF_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_NRO == SCALAR_INT) && (aux_NRO_read == true))) {
            cpp_current_dict["NRO"] = var_NRO_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_NAPS == SCALAR_INT) && (aux_NAPS_read == true))) {
            cpp_current_dict["NAPS"] = var_NAPS_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_NI == SCALAR_INT) && (aux_NI_read == true))) {
            cpp_current_dict["NI"] = var_NI_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_SPI == SCALAR_DOUBLE) && (aux_SPI_read == true))) {
            cpp_current_dict["SPI"] = var_SPI_0d_double_Scalar;
          }
          if (((aux_last_type_read_for_AP == SCALAR_DOUBLE) && (aux_AP_read == true))) {
            cpp_current_dict["AP"] = var_AP_0d_double_Scalar;
          }
          if (((aux_last_type_read_for_LCOMP == SCALAR_INT) && (aux_LCOMP_read == true))) {
            cpp_current_dict["LCOMP"] = var_LCOMP_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_NLS == SCALAR_INT) && (aux_NLS_read == true))) {
            cpp_current_dict["NLS"] = var_NLS_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_ISR == SCALAR_INT) && (aux_ISR_read == true))) {
            cpp_current_dict["ISR"] = var_ISR_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_DAP == SCALAR_DOUBLE) && (aux_DAP_read == true))) {
            cpp_current_dict["DAP"] = var_DAP_0d_double_Scalar;
          }
          if (((aux_last_type_read_for_AWRI == SCALAR_DOUBLE) && (aux_AWRI_read == true))) {
            cpp_current_dict["AWRI"] = var_AWRI_0d_double_Scalar;
          }
          if (((aux_last_type_read_for_NSRS == SCALAR_INT) && (aux_NSRS_read == true))) {
            cpp_current_dict["NSRS"] = var_NSRS_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_NLRS == SCALAR_INT) && (aux_NLRS_read == true))) {
            cpp_current_dict["NLRS"] = var_NLRS_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_MLS == SCALAR_INT) && (aux_MLS_read == true))) {
            cpp_current_dict["MLS"] = var_MLS_0d_int_Scalar;
          }
          if ((var_DAP_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_DAP_1d_double_NestedVector;
            cpp_current_dict["DAP"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["DAP"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if (((aux_last_type_read_for_JCH == SCALAR_INT) && (aux_JCH_read == true))) {
            cpp_current_dict["JCH"] = var_JCH_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_NCH == SCALAR_INT) && (aux_NCH_read == true))) {
            cpp_current_dict["NCH"] = var_NCH_0d_int_Scalar;
          }
          if (var_DAP_2d_double_Matrix2d.did_read()) {
              cpp_current_dict["DAP"] = py::dict();
              py::dict cpp_curdict0 = cpp_current_dict["DAP"];
              for (int cpp_i1 = var_DAP_2d_double_Matrix2d.get_row_start_index(); cpp_i1 <= var_DAP_2d_double_Matrix2d.get_row_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                for (int cpp_i2 = var_DAP_2d_double_Matrix2d.get_col_start_index(cpp_i1); cpp_i2 <= var_DAP_2d_double_Matrix2d.get_col_last_index(cpp_i1); cpp_i2++) {
                  cpp_curdict1[py::cast(cpp_i2)] = var_DAP_2d_double_Matrix2d(cpp_i1, cpp_i2);
                }
              }
          }
          if (((aux_last_type_read_for_QX == SCALAR_DOUBLE) && (aux_QX_read == true))) {
            cpp_current_dict["QX"] = var_QX_0d_double_Scalar;
          }
          if (((aux_last_type_read_for_LRX == SCALAR_INT) && (aux_LRX_read == true))) {
            cpp_current_dict["LRX"] = var_LRX_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_NRSA == SCALAR_INT) && (aux_NRSA_read == true))) {
            cpp_current_dict["NRSA"] = var_NRSA_0d_int_Scalar;
          }
          if ((var_ER_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_ER_1d_double_NestedVector;
            cpp_current_dict["ER"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["ER"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_AJ_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_AJ_1d_double_NestedVector;
            cpp_current_dict["AJ"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["AJ"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_GT_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_GT_1d_double_NestedVector;
            cpp_current_dict["GT"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["GT"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_GN_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_GN_1d_double_NestedVector;
            cpp_current_dict["GN"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["GN"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_GG_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_GG_1d_double_NestedVector;
            cpp_current_dict["GG"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["GG"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_GF_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_GF_1d_double_NestedVector;
            cpp_current_dict["GF"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["GF"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_DER_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_DER_1d_double_NestedVector;
            cpp_current_dict["DER"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["DER"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_DGN_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_DGN_1d_double_NestedVector;
            cpp_current_dict["DGN"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["DGN"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_DGG_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_DGG_1d_double_NestedVector;
            cpp_current_dict["DGG"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["DGG"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_DGF_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_DGF_1d_double_NestedVector;
            cpp_current_dict["DGF"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["DGF"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if (((aux_last_type_read_for_NDIGIT == SCALAR_INT) && (aux_NDIGIT_read == true))) {
            cpp_current_dict["NDIGIT"] = var_NDIGIT_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_NNN == SCALAR_INT) && (aux_NNN_read == true))) {
            cpp_current_dict["NNN"] = var_NNN_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_NM == SCALAR_INT) && (aux_NM_read == true))) {
            cpp_current_dict["NM"] = var_NM_0d_int_Scalar;
          }
          if ((var_II_1d_int_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_II_1d_int_NestedVector;
            cpp_current_dict["II"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["II"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_JJ_1d_int_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_JJ_1d_int_NestedVector;
            cpp_current_dict["JJ"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["JJ"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_KIJ_1d_intvec_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_KIJ_1d_intvec_NestedVector;
            cpp_current_dict["KIJ"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["KIJ"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if (((aux_last_type_read_for_LAD == SCALAR_INT) && (aux_LAD_read == true))) {
            cpp_current_dict["LAD"] = var_LAD_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_APL == SCALAR_DOUBLE) && (aux_APL_read == true))) {
            cpp_current_dict["APL"] = var_APL_0d_double_Scalar;
          }
          if ((var_GFA_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_GFA_1d_double_NestedVector;
            cpp_current_dict["GFA"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["GFA"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_GFB_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_GFB_1d_double_NestedVector;
            cpp_current_dict["GFB"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["GFB"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_DGFA_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_DGFA_1d_double_NestedVector;
            cpp_current_dict["DGFA"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["DGFA"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_DGFB_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_DGFB_1d_double_NestedVector;
            cpp_current_dict["DGFB"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["DGFB"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if (((aux_last_type_read_for_IFG == SCALAR_INT) && (aux_IFG_read == true))) {
            cpp_current_dict["IFG"] = var_IFG_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_NJS == SCALAR_INT) && (aux_NJS_read == true))) {
            cpp_current_dict["NJS"] = var_NJS_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_NJCH == SCALAR_INT) && (aux_NJCH_read == true))) {
            cpp_current_dict["NJCH"] = var_NJCH_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_NPP == SCALAR_INT) && (aux_NPP_read == true))) {
            cpp_current_dict["NPP"] = var_NPP_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_NJSX == SCALAR_INT) && (aux_NJSX_read == true))) {
            cpp_current_dict["NJSX"] = var_NJSX_0d_int_Scalar;
          }
          if ((var_MA_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_MA_1d_double_NestedVector;
            cpp_current_dict["MA"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["MA"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_MB_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_MB_1d_double_NestedVector;
            cpp_current_dict["MB"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["MB"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_ZA_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_ZA_1d_double_NestedVector;
            cpp_current_dict["ZA"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["ZA"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_ZB_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_ZB_1d_double_NestedVector;
            cpp_current_dict["ZB"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["ZB"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_IA_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_IA_1d_double_NestedVector;
            cpp_current_dict["IA"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["IA"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_IB_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_IB_1d_double_NestedVector;
            cpp_current_dict["IB"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["IB"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_Q_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_Q_1d_double_NestedVector;
            cpp_current_dict["Q"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["Q"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_PNT_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_PNT_1d_double_NestedVector;
            cpp_current_dict["PNT"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["PNT"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_SHF_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_SHF_1d_double_NestedVector;
            cpp_current_dict["SHF"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["SHF"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_MT_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_MT_1d_double_NestedVector;
            cpp_current_dict["MT"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["MT"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_PA_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_PA_1d_double_NestedVector;
            cpp_current_dict["PA"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["PA"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if ((var_PB_1d_double_NestedVector.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_PB_1d_double_NestedVector;
            cpp_current_dict["PB"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["PB"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
              cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
          }
          if (((aux_last_type_read_for_MPAR == SCALAR_INT) && (aux_MPAR_read == true))) {
            cpp_current_dict["MPAR"] = var_MPAR_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_NPAR == SCALAR_INT) && (aux_NPAR_read == true))) {
            cpp_current_dict["NPAR"] = var_NPAR_0d_int_Scalar;
          }
          if (var_RV_2d_double_Matrix2d.did_read()) {
              cpp_current_dict["RV"] = py::dict();
              py::dict cpp_curdict0 = cpp_current_dict["RV"];
              for (int cpp_i1 = var_RV_2d_double_Matrix2d.get_row_start_index(); cpp_i1 <= var_RV_2d_double_Matrix2d.get_row_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                for (int cpp_i2 = var_RV_2d_double_Matrix2d.get_col_start_index(cpp_i1); cpp_i2 <= var_RV_2d_double_Matrix2d.get_col_last_index(cpp_i1); cpp_i2++) {
                  cpp_curdict1[py::cast(cpp_i2)] = var_RV_2d_double_Matrix2d(cpp_i1, cpp_i2);
                }
              }
          }
          cpp_current_dict = cpp_parent_dict;
        }
      }
      // store data in Python dictionary
      if (((aux_last_type_read_for_ZAI == SCALAR_DOUBLE) && (aux_ZAI_read == true))) {
        cpp_current_dict["ZAI"] = var_ZAI_0d_double_Scalar;
      }
      if (((aux_last_type_read_for_ABN == SCALAR_DOUBLE) && (aux_ABN_read == true))) {
        cpp_current_dict["ABN"] = var_ABN_0d_double_Scalar;
      }
      if (((aux_last_type_read_for_LFW == SCALAR_INT) && (aux_LFW_read == true))) {
        cpp_current_dict["LFW"] = var_LFW_0d_int_Scalar;
      }
      if (((aux_last_type_read_for_NER == SCALAR_INT) && (aux_NER_read == true))) {
        cpp_current_dict["NER"] = var_NER_0d_int_Scalar;
      }
      cpp_current_dict = cpp_parent_dict;
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_NIS == SCALAR_INT) && (aux_NIS_read == true))) {
    cpp_current_dict["NIS"] = var_NIS_0d_int_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_mf33_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_MTL_0d_int_Scalar;
  bool aux_MTL_read = false;
  vartype aux_last_type_read_for_MTL = UNKNOWN;
  int var_NL_0d_int_Scalar;
  bool aux_NL_read = false;
  vartype aux_last_type_read_for_NL = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // assign expression to variable MTL
  var_MTL_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
  aux_MTL_read = true;
  if ((aux_last_type_read_for_MTL != SCALAR_INT && aux_last_type_read_for_MTL != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MTL = SCALAR_INT;
  // assign expression to variable NL
  var_NL_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
  aux_NL_read = true;
  if ((aux_last_type_read_for_NL != SCALAR_INT && aux_last_type_read_for_NL != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NL = SCALAR_INT;
  // evaluate if-elif-else clause
  {
    bool cpp_found_match = false;
    if (! cpp_found_match) {
      if ((((((((aux_MTL_read == true)) && ((var_MTL_0d_int_Scalar)==(0)))))))) {
        // if statement evaluation
        cpp_found_match = true;

        for (int var_n_0d_int_Scalar = 1;
           var_n_0d_int_Scalar <= var_NL_0d_int_Scalar; var_n_0d_int_Scalar++) {
          bool aux_n_read = true;
          // open section subsection

          {
              py::dict cpp_parent_dict = cpp_current_dict;
              if (! cpp_parent_dict.contains("subsection")) {
                cpp_parent_dict["subsection"] = py::dict();
              }
              py::dict cpp_current_dict = cpp_parent_dict["subsection"];

              if (! cpp_current_dict.contains(py::cast(var_n_0d_int_Scalar))) {
                cpp_current_dict[py::cast(var_n_0d_int_Scalar)] = py::dict();
              }
              cpp_current_dict = cpp_current_dict[py::cast(var_n_0d_int_Scalar)];
            // variable declarations
            double var_XMF1_0d_double_Scalar;
            bool aux_XMF1_read = false;
            vartype aux_last_type_read_for_XMF1 = UNKNOWN;
            double var_XLFS1_0d_double_Scalar;
            bool aux_XLFS1_read = false;
            vartype aux_last_type_read_for_XLFS1 = UNKNOWN;
            int var_MAT1_0d_int_Scalar;
            bool aux_MAT1_read = false;
            vartype aux_last_type_read_for_MAT1 = UNKNOWN;
            int var_MT1_0d_int_Scalar;
            bool aux_MT1_read = false;
            vartype aux_last_type_read_for_MT1 = UNKNOWN;
            int var_NC_0d_int_Scalar;
            bool aux_NC_read = false;
            vartype aux_last_type_read_for_NC = UNKNOWN;
            int var_NI_0d_int_Scalar;
            bool aux_NI_read = false;
            vartype aux_last_type_read_for_NI = UNKNOWN;
            cpp_line = cpp_read_line(cont);
            // read CONT record
            // assign expression to variable XMF1
            var_XMF1_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_XMF1_read = true;
            if ((aux_last_type_read_for_XMF1 != SCALAR_DOUBLE && aux_last_type_read_for_XMF1 != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_XMF1 = SCALAR_DOUBLE;
            // assign expression to variable XLFS1
            var_XLFS1_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_XLFS1_read = true;
            if ((aux_last_type_read_for_XLFS1 != SCALAR_DOUBLE && aux_last_type_read_for_XLFS1 != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_XLFS1 = SCALAR_DOUBLE;
            // assign expression to variable MAT1
            var_MAT1_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
            aux_MAT1_read = true;
            if ((aux_last_type_read_for_MAT1 != SCALAR_INT && aux_last_type_read_for_MAT1 != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_MAT1 = SCALAR_INT;
            // assign expression to variable MT1
            var_MT1_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
            aux_MT1_read = true;
            if ((aux_last_type_read_for_MT1 != SCALAR_INT && aux_last_type_read_for_MT1 != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_MT1 = SCALAR_INT;
            // assign expression to variable NC
            var_NC_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
            aux_NC_read = true;
            if ((aux_last_type_read_for_NC != SCALAR_INT && aux_last_type_read_for_NC != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NC = SCALAR_INT;
            // assign expression to variable NI
            var_NI_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
            aux_NI_read = true;
            if ((aux_last_type_read_for_NI != SCALAR_INT && aux_last_type_read_for_NI != UNKNOWN)) {
              raise_vartype_mismatch();
            }
            aux_last_type_read_for_NI = SCALAR_INT;

            for (int var_m_0d_int_Scalar = 1;
               var_m_0d_int_Scalar <= var_NC_0d_int_Scalar; var_m_0d_int_Scalar++) {
              bool aux_m_read = true;
              // open section nc_subsection

              {
                  py::dict cpp_parent_dict = cpp_current_dict;
                  if (! cpp_parent_dict.contains("nc_subsection")) {
                    cpp_parent_dict["nc_subsection"] = py::dict();
                  }
                  py::dict cpp_current_dict = cpp_parent_dict["nc_subsection"];

                  if (! cpp_current_dict.contains(py::cast(var_m_0d_int_Scalar))) {
                    cpp_current_dict[py::cast(var_m_0d_int_Scalar)] = py::dict();
                  }
                  cpp_current_dict = cpp_current_dict[py::cast(var_m_0d_int_Scalar)];
                // variable declarations
                int var_LTY_0d_int_Scalar;
                bool aux_LTY_read = false;
                vartype aux_last_type_read_for_LTY = UNKNOWN;
                double var_E1_0d_double_Scalar;
                bool aux_E1_read = false;
                vartype aux_last_type_read_for_E1 = UNKNOWN;
                double var_E2_0d_double_Scalar;
                bool aux_E2_read = false;
                vartype aux_last_type_read_for_E2 = UNKNOWN;
                int cpp_int_val;
                bool aux_cpp_int_val_read = false;
                vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                int var_NCI_0d_int_Scalar;
                bool aux_NCI_read = false;
                vartype aux_last_type_read_for_NCI = UNKNOWN;
                NestedVector<double> var_C_1d_double_NestedVector;
                vartype aux_last_type_read_for_C = UNKNOWN;
                NestedVector<double> var_XMT_1d_double_NestedVector;
                vartype aux_last_type_read_for_XMT = UNKNOWN;
                int var_MATS_0d_int_Scalar;
                bool aux_MATS_read = false;
                vartype aux_last_type_read_for_MATS = UNKNOWN;
                int var_MTS_0d_int_Scalar;
                bool aux_MTS_read = false;
                vartype aux_last_type_read_for_MTS = UNKNOWN;
                int var_NEI_0d_int_Scalar;
                bool aux_NEI_read = false;
                vartype aux_last_type_read_for_NEI = UNKNOWN;
                double var_XMFS_0d_double_Scalar;
                bool aux_XMFS_read = false;
                vartype aux_last_type_read_for_XMFS = UNKNOWN;
                double var_XLFSS_0d_double_Scalar;
                bool aux_XLFSS_read = false;
                vartype aux_last_type_read_for_XLFSS = UNKNOWN;
                NestedVector<double> var_E_1d_double_NestedVector;
                vartype aux_last_type_read_for_E = UNKNOWN;
                NestedVector<double> var_WE_1d_double_NestedVector;
                vartype aux_last_type_read_for_WE = UNKNOWN;
                cpp_line = cpp_read_line(cont);
                // read CONT record
                // assign expression to variable LTY
                var_LTY_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                aux_LTY_read = true;
                if ((aux_last_type_read_for_LTY != SCALAR_INT && aux_last_type_read_for_LTY != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_LTY = SCALAR_INT;
                // evaluate if-elif-else clause
                {
                  bool cpp_found_match = false;
                  if (! cpp_found_match) {
                    if ((((((((aux_LTY_read == true)) && ((var_LTY_0d_int_Scalar)==(0)))))))) {
                      // if statement evaluation
                      cpp_found_match = true;
                      cpp_line = cpp_read_line(cont);
                      // read LIST record
                      // assign expression to variable E1
                      var_E1_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                      aux_E1_read = true;
                      if ((aux_last_type_read_for_E1 != SCALAR_DOUBLE && aux_last_type_read_for_E1 != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_E1 = SCALAR_DOUBLE;
                      // assign expression to variable E2
                      var_E2_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                      aux_E2_read = true;
                      if ((aux_last_type_read_for_E2 != SCALAR_DOUBLE && aux_last_type_read_for_E2 != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_E2 = SCALAR_DOUBLE;
                      // assign expression to variable cpp_int_val
                      cpp_int_val = cpp_read_int_field(cpp_line, 4);
                      aux_cpp_int_val_read = true;
                      if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                      // assign expression to variable NCI
                      var_NCI_0d_int_Scalar = (cpp_int_val/2);
                      aux_NCI_read = true;
                      if ((aux_last_type_read_for_NCI != SCALAR_INT && aux_last_type_read_for_NCI != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_NCI = SCALAR_INT;
                      if ((! (aux_NCI_read == true))) {
                        // assign expression to variable NCI
                        var_NCI_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                        aux_NCI_read = true;
                        if ((aux_last_type_read_for_NCI != SCALAR_INT && aux_last_type_read_for_NCI != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NCI = SCALAR_INT;
                      }
                      {
                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                        int cpp_j = 0;
                        // read LIST body

                        for (int var_i_0d_int_Scalar = 1;
                           var_i_0d_int_Scalar <= var_NCI_0d_int_Scalar; var_i_0d_int_Scalar++) {
                          bool aux_i_read = true;
                          // read LIST body
                          // assign expression to variable C
                          var_C_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_C != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_C != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_C = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable XMT
                          var_XMT_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_XMT != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_XMT != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_XMT = NESTEDVECTOR_DOUBLE;
                        }
                      }
                    }
                  }
                  if (! cpp_found_match) {
                    if (! cpp_found_match) {
                      if (((((((((aux_LTY_read == true)) && ((var_LTY_0d_int_Scalar)>=(1)))))&&((((aux_LTY_read == true)) && ((var_LTY_0d_int_Scalar)<=(3)))))))) {
                        // if statement evaluation
                        cpp_found_match = true;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable E1
                        var_E1_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                        aux_E1_read = true;
                        if ((aux_last_type_read_for_E1 != SCALAR_DOUBLE && aux_last_type_read_for_E1 != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_E1 = SCALAR_DOUBLE;
                        // assign expression to variable E2
                        var_E2_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_E2_read = true;
                        if ((aux_last_type_read_for_E2 != SCALAR_DOUBLE && aux_last_type_read_for_E2 != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_E2 = SCALAR_DOUBLE;
                        // assign expression to variable MATS
                        var_MATS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                        aux_MATS_read = true;
                        if ((aux_last_type_read_for_MATS != SCALAR_INT && aux_last_type_read_for_MATS != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_MATS = SCALAR_INT;
                        // assign expression to variable MTS
                        var_MTS_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                        aux_MTS_read = true;
                        if ((aux_last_type_read_for_MTS != SCALAR_INT && aux_last_type_read_for_MTS != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_MTS = SCALAR_INT;
                        // assign expression to variable cpp_int_val
                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                        aux_cpp_int_val_read = true;
                        if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                        // assign expression to variable NEI
                        var_NEI_0d_int_Scalar = ((cpp_int_val+(-2))/2);
                        aux_NEI_read = true;
                        if ((aux_last_type_read_for_NEI != SCALAR_INT && aux_last_type_read_for_NEI != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NEI = SCALAR_INT;
                        if ((! (aux_NEI_read == true))) {
                          // assign expression to variable NEI
                          var_NEI_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                          aux_NEI_read = true;
                          if ((aux_last_type_read_for_NEI != SCALAR_INT && aux_last_type_read_for_NEI != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NEI = SCALAR_INT;
                        }
                        {
                          int cpp_npl = cpp_read_int_field(cpp_line, 4);
                          cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                          int cpp_j = 0;
                          // read LIST body
                          // assign expression to variable XMFS
                          var_XMFS_0d_double_Scalar = cpp_floatvec[cpp_j++];
                          aux_XMFS_read = true;
                          if ((aux_last_type_read_for_XMFS != SCALAR_DOUBLE && aux_last_type_read_for_XMFS != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_XMFS = SCALAR_DOUBLE;
                          // assign expression to variable XLFSS
                          var_XLFSS_0d_double_Scalar = cpp_floatvec[cpp_j++];
                          aux_XLFSS_read = true;
                          if ((aux_last_type_read_for_XLFSS != SCALAR_DOUBLE && aux_last_type_read_for_XLFSS != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_XLFSS = SCALAR_DOUBLE;

                          for (int var_i_0d_int_Scalar = 1;
                             var_i_0d_int_Scalar <= var_NEI_0d_int_Scalar; var_i_0d_int_Scalar++) {
                            bool aux_i_read = true;
                            // read LIST body
                            // assign expression to variable E
                            var_E_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable WE
                            var_WE_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_WE != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_WE != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_WE = NESTEDVECTOR_DOUBLE;
                          }
                        }
                      }
                    }
                  }
                }
                // store data in Python dictionary
                if (((aux_last_type_read_for_LTY == SCALAR_INT) && (aux_LTY_read == true))) {
                  cpp_current_dict["LTY"] = var_LTY_0d_int_Scalar;
                }
                if (((aux_last_type_read_for_E1 == SCALAR_DOUBLE) && (aux_E1_read == true))) {
                  cpp_current_dict["E1"] = var_E1_0d_double_Scalar;
                }
                if (((aux_last_type_read_for_E2 == SCALAR_DOUBLE) && (aux_E2_read == true))) {
                  cpp_current_dict["E2"] = var_E2_0d_double_Scalar;
                }
                if (((aux_last_type_read_for_NCI == SCALAR_INT) && (aux_NCI_read == true))) {
                  cpp_current_dict["NCI"] = var_NCI_0d_int_Scalar;
                }
                if ((var_C_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_C_1d_double_NestedVector;
                  cpp_current_dict["C"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["C"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                if ((var_XMT_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_XMT_1d_double_NestedVector;
                  cpp_current_dict["XMT"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["XMT"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                if (((aux_last_type_read_for_MATS == SCALAR_INT) && (aux_MATS_read == true))) {
                  cpp_current_dict["MATS"] = var_MATS_0d_int_Scalar;
                }
                if (((aux_last_type_read_for_MTS == SCALAR_INT) && (aux_MTS_read == true))) {
                  cpp_current_dict["MTS"] = var_MTS_0d_int_Scalar;
                }
                if (((aux_last_type_read_for_NEI == SCALAR_INT) && (aux_NEI_read == true))) {
                  cpp_current_dict["NEI"] = var_NEI_0d_int_Scalar;
                }
                if (((aux_last_type_read_for_XMFS == SCALAR_DOUBLE) && (aux_XMFS_read == true))) {
                  cpp_current_dict["XMFS"] = var_XMFS_0d_double_Scalar;
                }
                if (((aux_last_type_read_for_XLFSS == SCALAR_DOUBLE) && (aux_XLFSS_read == true))) {
                  cpp_current_dict["XLFSS"] = var_XLFSS_0d_double_Scalar;
                }
                if ((var_E_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_E_1d_double_NestedVector;
                  cpp_current_dict["E"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["E"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                if ((var_WE_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_WE_1d_double_NestedVector;
                  cpp_current_dict["WE"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["WE"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                cpp_current_dict = cpp_parent_dict;
              }
            }

            for (int var_m_0d_int_Scalar = 1;
               var_m_0d_int_Scalar <= var_NI_0d_int_Scalar; var_m_0d_int_Scalar++) {
              bool aux_m_read = true;
              // open section ni_subsection

              {
                  py::dict cpp_parent_dict = cpp_current_dict;
                  if (! cpp_parent_dict.contains("ni_subsection")) {
                    cpp_parent_dict["ni_subsection"] = py::dict();
                  }
                  py::dict cpp_current_dict = cpp_parent_dict["ni_subsection"];

                  if (! cpp_current_dict.contains(py::cast(var_m_0d_int_Scalar))) {
                    cpp_current_dict[py::cast(var_m_0d_int_Scalar)] = py::dict();
                  }
                  cpp_current_dict = cpp_current_dict[py::cast(var_m_0d_int_Scalar)];
                // variable declarations
                int var_LT_0d_int_Scalar;
                bool aux_LT_read = false;
                vartype aux_last_type_read_for_LT = UNKNOWN;
                int var_LB_0d_int_Scalar;
                bool aux_LB_read = false;
                vartype aux_last_type_read_for_LB = UNKNOWN;
                int cpp_int_val;
                bool aux_cpp_int_val_read = false;
                vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                int var_NP_0d_int_Scalar;
                bool aux_NP_read = false;
                vartype aux_last_type_read_for_NP = UNKNOWN;
                NestedVector<double> var_Ek_1d_double_NestedVector;
                vartype aux_last_type_read_for_Ek = UNKNOWN;
                NestedVector<double> var_Fk_1d_double_NestedVector;
                vartype aux_last_type_read_for_Fk = UNKNOWN;
                NestedVector<double> var_El_1d_double_NestedVector;
                vartype aux_last_type_read_for_El = UNKNOWN;
                NestedVector<double> var_Fl_1d_double_NestedVector;
                vartype aux_last_type_read_for_Fl = UNKNOWN;
                int var_LS_0d_int_Scalar;
                bool aux_LS_read = false;
                vartype aux_last_type_read_for_LS = UNKNOWN;
                int var_NE_0d_int_Scalar;
                bool aux_NE_read = false;
                vartype aux_last_type_read_for_NE = UNKNOWN;
                NestedVector<double> var_E_1d_double_NestedVector;
                vartype aux_last_type_read_for_E = UNKNOWN;
                Matrix2d<double> var_F_2d_double_Matrix2d;
                vartype aux_last_type_read_for_F = UNKNOWN;
                int var_NER_0d_int_Scalar;
                bool aux_NER_read = false;
                vartype aux_last_type_read_for_NER = UNKNOWN;
                int var_NEC_0d_int_Scalar;
                bool aux_NEC_read = false;
                vartype aux_last_type_read_for_NEC = UNKNOWN;
                NestedVector<double> var_ER_1d_double_NestedVector;
                vartype aux_last_type_read_for_ER = UNKNOWN;
                NestedVector<double> var_EC_1d_double_NestedVector;
                vartype aux_last_type_read_for_EC = UNKNOWN;
                NestedVector<double> var_F_1d_double_NestedVector;
                // evaluate if-elif-else clause
                {
                  bool cpp_found_match = false;
                  if (! cpp_found_match) {
                    // if statement evaluation with lookahead
                    {
                      std::streampos cpp_old_streampos = cont.tellg();
                      {
                        // variable declarations
                        int& glob_var_LT_0d_int_Scalar = var_LT_0d_int_Scalar;
                        int var_LT_0d_int_Scalar = glob_var_LT_0d_int_Scalar;
                        bool& glob_aux_LT_read = aux_LT_read;
                        bool aux_LT_read = glob_aux_LT_read;
                        vartype aux_last_type_read_for_LT = UNKNOWN;
                        int& glob_var_LB_0d_int_Scalar = var_LB_0d_int_Scalar;
                        int var_LB_0d_int_Scalar = glob_var_LB_0d_int_Scalar;
                        bool& glob_aux_LB_read = aux_LB_read;
                        bool aux_LB_read = glob_aux_LB_read;
                        vartype aux_last_type_read_for_LB = UNKNOWN;
                        int& glob_cpp_int_val = cpp_int_val;
                        int cpp_int_val = glob_cpp_int_val;
                        bool& glob_aux_cpp_int_val_read = aux_cpp_int_val_read;
                        bool aux_cpp_int_val_read = glob_aux_cpp_int_val_read;
                        vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                        int& glob_var_NP_0d_int_Scalar = var_NP_0d_int_Scalar;
                        int var_NP_0d_int_Scalar = glob_var_NP_0d_int_Scalar;
                        bool& glob_aux_NP_read = aux_NP_read;
                        bool aux_NP_read = glob_aux_NP_read;
                        vartype aux_last_type_read_for_NP = UNKNOWN;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable LT
                        var_LT_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                        aux_LT_read = true;
                        if ((aux_last_type_read_for_LT != SCALAR_INT && aux_last_type_read_for_LT != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LT = SCALAR_INT;
                        // assign expression to variable LB
                        var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                        aux_LB_read = true;
                        if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LB = SCALAR_INT;
                        // assign expression to variable cpp_int_val
                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                        aux_cpp_int_val_read = true;
                        if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                        // assign expression to variable NP
                        var_NP_0d_int_Scalar = (cpp_int_val/2);
                        aux_NP_read = true;
                        if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NP = SCALAR_INT;
                        if ((! (aux_NP_read == true))) {
                          // assign expression to variable NP
                          var_NP_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                          aux_NP_read = true;
                          if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NP = SCALAR_INT;
                        }
                        if (((((((((aux_LB_read == true)) && ((var_LB_0d_int_Scalar)>=(0)))))&&((((aux_LB_read == true)) && ((var_LB_0d_int_Scalar)<=(4)))))))) {
                          cpp_found_match = true;
                        }
                        cont.seekg(cpp_old_streampos);
                      }
                      if (cpp_found_match) {
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable LT
                        var_LT_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                        aux_LT_read = true;
                        if ((aux_last_type_read_for_LT != SCALAR_INT && aux_last_type_read_for_LT != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LT = SCALAR_INT;
                        // assign expression to variable LB
                        var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                        aux_LB_read = true;
                        if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LB = SCALAR_INT;
                        // assign expression to variable cpp_int_val
                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                        aux_cpp_int_val_read = true;
                        if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                        // assign expression to variable NP
                        var_NP_0d_int_Scalar = (cpp_int_val/2);
                        aux_NP_read = true;
                        if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NP = SCALAR_INT;
                        if ((! (aux_NP_read == true))) {
                          // assign expression to variable NP
                          var_NP_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                          aux_NP_read = true;
                          if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NP = SCALAR_INT;
                        }
                        {
                          int cpp_npl = cpp_read_int_field(cpp_line, 4);
                          cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                          int cpp_j = 0;
                          // read LIST body

                          for (int var_k_0d_int_Scalar = 1;
                             var_k_0d_int_Scalar <= (var_NP_0d_int_Scalar-var_LT_0d_int_Scalar); var_k_0d_int_Scalar++) {
                            bool aux_k_read = true;
                            // read LIST body
                            // assign expression to variable Ek
                            var_Ek_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_Ek != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_Ek != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_Ek = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable Fk
                            var_Fk_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_Fk != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_Fk != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_Fk = NESTEDVECTOR_DOUBLE;
                          }

                          for (int var_k_0d_int_Scalar = 1;
                             var_k_0d_int_Scalar <= var_LT_0d_int_Scalar; var_k_0d_int_Scalar++) {
                            bool aux_k_read = true;
                            // read LIST body
                            // assign expression to variable El
                            var_El_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_El != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_El != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_El = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable Fl
                            var_Fl_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_Fl != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_Fl != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_Fl = NESTEDVECTOR_DOUBLE;
                          }
                        }
                      }
                    }
                  }
                  if (! cpp_found_match) {
                    if (! cpp_found_match) {
                      // if statement evaluation with lookahead
                      {
                        std::streampos cpp_old_streampos = cont.tellg();
                        {
                          // variable declarations
                          int& glob_var_LS_0d_int_Scalar = var_LS_0d_int_Scalar;
                          int var_LS_0d_int_Scalar = glob_var_LS_0d_int_Scalar;
                          bool& glob_aux_LS_read = aux_LS_read;
                          bool aux_LS_read = glob_aux_LS_read;
                          vartype aux_last_type_read_for_LS = UNKNOWN;
                          int& glob_var_LB_0d_int_Scalar = var_LB_0d_int_Scalar;
                          int var_LB_0d_int_Scalar = glob_var_LB_0d_int_Scalar;
                          bool& glob_aux_LB_read = aux_LB_read;
                          bool aux_LB_read = glob_aux_LB_read;
                          vartype aux_last_type_read_for_LB = UNKNOWN;
                          int& glob_var_NE_0d_int_Scalar = var_NE_0d_int_Scalar;
                          int var_NE_0d_int_Scalar = glob_var_NE_0d_int_Scalar;
                          bool& glob_aux_NE_read = aux_NE_read;
                          bool aux_NE_read = glob_aux_NE_read;
                          vartype aux_last_type_read_for_NE = UNKNOWN;
                          cpp_line = cpp_read_line(cont);
                          // read LIST record
                          // assign expression to variable LS
                          var_LS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                          aux_LS_read = true;
                          if ((aux_last_type_read_for_LS != SCALAR_INT && aux_last_type_read_for_LS != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LS = SCALAR_INT;
                          // assign expression to variable LB
                          var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                          aux_LB_read = true;
                          if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LB = SCALAR_INT;
                          // assign expression to variable NE
                          var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                          aux_NE_read = true;
                          if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NE = SCALAR_INT;
                          if ((! (aux_NE_read == true))) {
                            throw std::runtime_error("The equation ((NE*(NE-1))+1)==value cannot be solved for NE because this variable could not be isolated.");
                          }
                          if (((((((((aux_LB_read == true)) && ((var_LB_0d_int_Scalar)==(5)))))&&((((aux_LS_read == true)) && ((var_LS_0d_int_Scalar)==(0)))))))) {
                            cpp_found_match = true;
                          }
                          cont.seekg(cpp_old_streampos);
                        }
                        if (cpp_found_match) {
                          cpp_line = cpp_read_line(cont);
                          // read LIST record
                          // assign expression to variable LS
                          var_LS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                          aux_LS_read = true;
                          if ((aux_last_type_read_for_LS != SCALAR_INT && aux_last_type_read_for_LS != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LS = SCALAR_INT;
                          // assign expression to variable LB
                          var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                          aux_LB_read = true;
                          if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LB = SCALAR_INT;
                          // assign expression to variable NE
                          var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                          aux_NE_read = true;
                          if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NE = SCALAR_INT;
                          if ((! (aux_NE_read == true))) {
                            throw std::runtime_error("The equation ((NE*(NE-1))+1)==value cannot be solved for NE because this variable could not be isolated.");
                          }
                          {
                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                            int cpp_j = 0;
                            // read LIST body

                            for (int var_k_0d_int_Scalar = 1;
                               var_k_0d_int_Scalar <= var_NE_0d_int_Scalar; var_k_0d_int_Scalar++) {
                              bool aux_k_read = true;
                              // read LIST body
                              // assign expression to variable E
                              var_E_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                              if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
                            }
                            var_F_2d_double_Matrix2d.init(1, (var_NE_0d_int_Scalar-1), 1, (var_NE_0d_int_Scalar-1), false, false);

                            for (int var_k_0d_int_Scalar = 1;
                               var_k_0d_int_Scalar <= (var_NE_0d_int_Scalar-1); var_k_0d_int_Scalar++) {
                              bool aux_k_read = true;
                              // read LIST body

                              for (int var_kp_0d_int_Scalar = 1;
                                 var_kp_0d_int_Scalar <= (var_NE_0d_int_Scalar-1); var_kp_0d_int_Scalar++) {
                                bool aux_kp_read = true;
                                // read LIST body
                                // assign expression to variable F
                                var_F_2d_double_Matrix2d(var_k_0d_int_Scalar, var_kp_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                                if ((aux_last_type_read_for_F != MATRIX2D_DOUBLE && aux_last_type_read_for_F != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_F = MATRIX2D_DOUBLE;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  if (! cpp_found_match) {
                    if (! cpp_found_match) {
                      // if statement evaluation with lookahead
                      {
                        std::streampos cpp_old_streampos = cont.tellg();
                        {
                          // variable declarations
                          int& glob_var_LS_0d_int_Scalar = var_LS_0d_int_Scalar;
                          int var_LS_0d_int_Scalar = glob_var_LS_0d_int_Scalar;
                          bool& glob_aux_LS_read = aux_LS_read;
                          bool aux_LS_read = glob_aux_LS_read;
                          vartype aux_last_type_read_for_LS = UNKNOWN;
                          int& glob_var_LB_0d_int_Scalar = var_LB_0d_int_Scalar;
                          int var_LB_0d_int_Scalar = glob_var_LB_0d_int_Scalar;
                          bool& glob_aux_LB_read = aux_LB_read;
                          bool aux_LB_read = glob_aux_LB_read;
                          vartype aux_last_type_read_for_LB = UNKNOWN;
                          int& glob_var_NE_0d_int_Scalar = var_NE_0d_int_Scalar;
                          int var_NE_0d_int_Scalar = glob_var_NE_0d_int_Scalar;
                          bool& glob_aux_NE_read = aux_NE_read;
                          bool aux_NE_read = glob_aux_NE_read;
                          vartype aux_last_type_read_for_NE = UNKNOWN;
                          cpp_line = cpp_read_line(cont);
                          // read LIST record
                          // assign expression to variable LS
                          var_LS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                          aux_LS_read = true;
                          if ((aux_last_type_read_for_LS != SCALAR_INT && aux_last_type_read_for_LS != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LS = SCALAR_INT;
                          // assign expression to variable LB
                          var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                          aux_LB_read = true;
                          if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LB = SCALAR_INT;
                          // assign expression to variable NE
                          var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                          aux_NE_read = true;
                          if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NE = SCALAR_INT;
                          if ((! (aux_NE_read == true))) {
                            throw std::runtime_error("The equation ((NE*(NE+1))/2)==value cannot be solved for NE because this variable could not be isolated.");
                          }
                          if (((((((((aux_LB_read == true)) && ((var_LB_0d_int_Scalar)==(5)))))&&((((aux_LS_read == true)) && ((var_LS_0d_int_Scalar)==(1)))))))) {
                            cpp_found_match = true;
                          }
                          cont.seekg(cpp_old_streampos);
                        }
                        if (cpp_found_match) {
                          cpp_line = cpp_read_line(cont);
                          // read LIST record
                          // assign expression to variable LS
                          var_LS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                          aux_LS_read = true;
                          if ((aux_last_type_read_for_LS != SCALAR_INT && aux_last_type_read_for_LS != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LS = SCALAR_INT;
                          // assign expression to variable LB
                          var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                          aux_LB_read = true;
                          if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LB = SCALAR_INT;
                          // assign expression to variable NE
                          var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                          aux_NE_read = true;
                          if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NE = SCALAR_INT;
                          if ((! (aux_NE_read == true))) {
                            throw std::runtime_error("The equation ((NE*(NE+1))/2)==value cannot be solved for NE because this variable could not be isolated.");
                          }
                          {
                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                            int cpp_j = 0;
                            // read LIST body

                            for (int var_k_0d_int_Scalar = 1;
                               var_k_0d_int_Scalar <= var_NE_0d_int_Scalar; var_k_0d_int_Scalar++) {
                              bool aux_k_read = true;
                              // read LIST body
                              // assign expression to variable E
                              var_E_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                              if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
                            }
                            var_F_2d_double_Matrix2d.init(1, (var_NE_0d_int_Scalar-1), 1, (var_NE_0d_int_Scalar-1), true, false);

                            for (int var_k_0d_int_Scalar = 1;
                               var_k_0d_int_Scalar <= (var_NE_0d_int_Scalar-1); var_k_0d_int_Scalar++) {
                              bool aux_k_read = true;
                              // read LIST body

                              for (int var_kp_0d_int_Scalar = var_k_0d_int_Scalar;
                                 var_kp_0d_int_Scalar <= (var_NE_0d_int_Scalar-1); var_kp_0d_int_Scalar++) {
                                bool aux_kp_read = true;
                                // read LIST body
                                // assign expression to variable F
                                var_F_2d_double_Matrix2d(var_k_0d_int_Scalar, var_kp_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                                if ((aux_last_type_read_for_F != MATRIX2D_DOUBLE && aux_last_type_read_for_F != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_F = MATRIX2D_DOUBLE;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  if (! cpp_found_match) {
                    if (! cpp_found_match) {
                      // if statement evaluation with lookahead
                      {
                        std::streampos cpp_old_streampos = cont.tellg();
                        {
                          // variable declarations
                          int& glob_var_LB_0d_int_Scalar = var_LB_0d_int_Scalar;
                          int var_LB_0d_int_Scalar = glob_var_LB_0d_int_Scalar;
                          bool& glob_aux_LB_read = aux_LB_read;
                          bool aux_LB_read = glob_aux_LB_read;
                          vartype aux_last_type_read_for_LB = UNKNOWN;
                          int& glob_var_NER_0d_int_Scalar = var_NER_0d_int_Scalar;
                          int var_NER_0d_int_Scalar = glob_var_NER_0d_int_Scalar;
                          bool& glob_aux_NER_read = aux_NER_read;
                          bool aux_NER_read = glob_aux_NER_read;
                          vartype aux_last_type_read_for_NER = UNKNOWN;
                          int& glob_cpp_int_val = cpp_int_val;
                          int cpp_int_val = glob_cpp_int_val;
                          bool& glob_aux_cpp_int_val_read = aux_cpp_int_val_read;
                          bool aux_cpp_int_val_read = glob_aux_cpp_int_val_read;
                          vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                          int& glob_var_NEC_0d_int_Scalar = var_NEC_0d_int_Scalar;
                          int var_NEC_0d_int_Scalar = glob_var_NEC_0d_int_Scalar;
                          bool& glob_aux_NEC_read = aux_NEC_read;
                          bool aux_NEC_read = glob_aux_NEC_read;
                          vartype aux_last_type_read_for_NEC = UNKNOWN;
                          cpp_line = cpp_read_line(cont);
                          // read LIST record
                          // assign expression to variable LB
                          var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                          aux_LB_read = true;
                          if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LB = SCALAR_INT;
                          // assign expression to variable NER
                          var_NER_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                          aux_NER_read = true;
                          if ((aux_last_type_read_for_NER != SCALAR_INT && aux_last_type_read_for_NER != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NER = SCALAR_INT;
                          // assign expression to variable cpp_int_val
                          cpp_int_val = cpp_read_int_field(cpp_line, 4);
                          aux_cpp_int_val_read = true;
                          if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                          // assign expression to variable NEC
                          var_NEC_0d_int_Scalar = ((cpp_int_val+(-1))/var_NER_0d_int_Scalar);
                          aux_NEC_read = true;
                          if ((aux_last_type_read_for_NEC != SCALAR_INT && aux_last_type_read_for_NEC != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NEC = SCALAR_INT;
                          if ((! (aux_NER_read == true))) {
                            // assign expression to variable cpp_int_val
                            cpp_int_val = cpp_read_int_field(cpp_line, 4);
                            aux_cpp_int_val_read = true;
                            if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                            // assign expression to variable NER
                            var_NER_0d_int_Scalar = ((cpp_int_val+(-1))/var_NEC_0d_int_Scalar);
                            aux_NER_read = true;
                            if ((aux_last_type_read_for_NER != SCALAR_INT && aux_last_type_read_for_NER != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_NER = SCALAR_INT;
                          }
                          if ((((((((aux_LB_read == true)) && ((var_LB_0d_int_Scalar)==(6)))))))) {
                            cpp_found_match = true;
                          }
                          cont.seekg(cpp_old_streampos);
                        }
                        if (cpp_found_match) {
                          cpp_line = cpp_read_line(cont);
                          // read LIST record
                          // assign expression to variable LB
                          var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                          aux_LB_read = true;
                          if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LB = SCALAR_INT;
                          // assign expression to variable NER
                          var_NER_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                          aux_NER_read = true;
                          if ((aux_last_type_read_for_NER != SCALAR_INT && aux_last_type_read_for_NER != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NER = SCALAR_INT;
                          // assign expression to variable cpp_int_val
                          cpp_int_val = cpp_read_int_field(cpp_line, 4);
                          aux_cpp_int_val_read = true;
                          if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                          // assign expression to variable NEC
                          var_NEC_0d_int_Scalar = ((cpp_int_val+(-1))/var_NER_0d_int_Scalar);
                          aux_NEC_read = true;
                          if ((aux_last_type_read_for_NEC != SCALAR_INT && aux_last_type_read_for_NEC != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NEC = SCALAR_INT;
                          if ((! (aux_NER_read == true))) {
                            // assign expression to variable cpp_int_val
                            cpp_int_val = cpp_read_int_field(cpp_line, 4);
                            aux_cpp_int_val_read = true;
                            if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                            // assign expression to variable NER
                            var_NER_0d_int_Scalar = ((cpp_int_val+(-1))/var_NEC_0d_int_Scalar);
                            aux_NER_read = true;
                            if ((aux_last_type_read_for_NER != SCALAR_INT && aux_last_type_read_for_NER != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_NER = SCALAR_INT;
                          }
                          {
                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                            int cpp_j = 0;
                            // read LIST body

                            for (int var_k_0d_int_Scalar = 1;
                               var_k_0d_int_Scalar <= var_NER_0d_int_Scalar; var_k_0d_int_Scalar++) {
                              bool aux_k_read = true;
                              // read LIST body
                              // assign expression to variable ER
                              var_ER_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                              if ((aux_last_type_read_for_ER != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ER != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_ER = NESTEDVECTOR_DOUBLE;
                            }

                            for (int var_k_0d_int_Scalar = 1;
                               var_k_0d_int_Scalar <= var_NEC_0d_int_Scalar; var_k_0d_int_Scalar++) {
                              bool aux_k_read = true;
                              // read LIST body
                              // assign expression to variable EC
                              var_EC_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                              if ((aux_last_type_read_for_EC != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_EC != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_EC = NESTEDVECTOR_DOUBLE;
                            }
                            var_F_2d_double_Matrix2d.init(1, (var_NER_0d_int_Scalar-1), 1, (var_NEC_0d_int_Scalar-1), false, false);

                            for (int var_k_0d_int_Scalar = 1;
                               var_k_0d_int_Scalar <= (var_NER_0d_int_Scalar-1); var_k_0d_int_Scalar++) {
                              bool aux_k_read = true;
                              // read LIST body

                              for (int var_l_0d_int_Scalar = 1;
                                 var_l_0d_int_Scalar <= (var_NEC_0d_int_Scalar-1); var_l_0d_int_Scalar++) {
                                bool aux_l_read = true;
                                // read LIST body
                                // assign expression to variable F
                                var_F_2d_double_Matrix2d(var_k_0d_int_Scalar, var_l_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                                if ((aux_last_type_read_for_F != MATRIX2D_DOUBLE && aux_last_type_read_for_F != UNKNOWN)) {
                                  raise_vartype_mismatch();
                                }
                                aux_last_type_read_for_F = MATRIX2D_DOUBLE;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  if (! cpp_found_match) {
                    if (! cpp_found_match) {
                      // if statement evaluation with lookahead
                      {
                        std::streampos cpp_old_streampos = cont.tellg();
                        {
                          // variable declarations
                          int& glob_var_LT_0d_int_Scalar = var_LT_0d_int_Scalar;
                          int var_LT_0d_int_Scalar = glob_var_LT_0d_int_Scalar;
                          bool& glob_aux_LT_read = aux_LT_read;
                          bool aux_LT_read = glob_aux_LT_read;
                          vartype aux_last_type_read_for_LT = UNKNOWN;
                          int& glob_var_LB_0d_int_Scalar = var_LB_0d_int_Scalar;
                          int var_LB_0d_int_Scalar = glob_var_LB_0d_int_Scalar;
                          bool& glob_aux_LB_read = aux_LB_read;
                          bool aux_LB_read = glob_aux_LB_read;
                          vartype aux_last_type_read_for_LB = UNKNOWN;
                          int& glob_cpp_int_val = cpp_int_val;
                          int cpp_int_val = glob_cpp_int_val;
                          bool& glob_aux_cpp_int_val_read = aux_cpp_int_val_read;
                          bool aux_cpp_int_val_read = glob_aux_cpp_int_val_read;
                          vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                          int& glob_var_NP_0d_int_Scalar = var_NP_0d_int_Scalar;
                          int var_NP_0d_int_Scalar = glob_var_NP_0d_int_Scalar;
                          bool& glob_aux_NP_read = aux_NP_read;
                          bool aux_NP_read = glob_aux_NP_read;
                          vartype aux_last_type_read_for_NP = UNKNOWN;
                          cpp_line = cpp_read_line(cont);
                          // read LIST record
                          // assign expression to variable LT
                          var_LT_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                          aux_LT_read = true;
                          if ((aux_last_type_read_for_LT != SCALAR_INT && aux_last_type_read_for_LT != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LT = SCALAR_INT;
                          // assign expression to variable LB
                          var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                          aux_LB_read = true;
                          if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LB = SCALAR_INT;
                          // assign expression to variable cpp_int_val
                          cpp_int_val = cpp_read_int_field(cpp_line, 4);
                          aux_cpp_int_val_read = true;
                          if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                          // assign expression to variable NP
                          var_NP_0d_int_Scalar = (cpp_int_val/2);
                          aux_NP_read = true;
                          if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NP = SCALAR_INT;
                          if ((! (aux_NP_read == true))) {
                            // assign expression to variable NP
                            var_NP_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                            aux_NP_read = true;
                            if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_NP = SCALAR_INT;
                          }
                          if ((((((((((((((aux_LB_read == true)) && ((var_LB_0d_int_Scalar)==(8))))))||(((((aux_LB_read == true)) && ((var_LB_0d_int_Scalar)==(9)))))))))&&((((aux_LT_read == true)) && ((var_LT_0d_int_Scalar)==(0)))))))) {
                            cpp_found_match = true;
                          }
                          cont.seekg(cpp_old_streampos);
                        }
                        if (cpp_found_match) {
                          cpp_line = cpp_read_line(cont);
                          // read LIST record
                          // assign expression to variable LT
                          var_LT_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                          aux_LT_read = true;
                          if ((aux_last_type_read_for_LT != SCALAR_INT && aux_last_type_read_for_LT != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LT = SCALAR_INT;
                          // assign expression to variable LB
                          var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                          aux_LB_read = true;
                          if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_LB = SCALAR_INT;
                          // assign expression to variable cpp_int_val
                          cpp_int_val = cpp_read_int_field(cpp_line, 4);
                          aux_cpp_int_val_read = true;
                          if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                          // assign expression to variable NP
                          var_NP_0d_int_Scalar = (cpp_int_val/2);
                          aux_NP_read = true;
                          if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NP = SCALAR_INT;
                          if ((! (aux_NP_read == true))) {
                            // assign expression to variable NP
                            var_NP_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                            aux_NP_read = true;
                            if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_NP = SCALAR_INT;
                          }
                          {
                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                            int cpp_j = 0;
                            // read LIST body

                            for (int var_k_0d_int_Scalar = 1;
                               var_k_0d_int_Scalar <= var_NP_0d_int_Scalar; var_k_0d_int_Scalar++) {
                              bool aux_k_read = true;
                              // read LIST body
                              // assign expression to variable E
                              var_E_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                              if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
                              // assign expression to variable F
                              var_F_1d_double_NestedVector.set(var_k_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                              if ((aux_last_type_read_for_F != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_F != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_F = NESTEDVECTOR_DOUBLE;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                // store data in Python dictionary
                if (((aux_last_type_read_for_LT == SCALAR_INT) && (aux_LT_read == true))) {
                  cpp_current_dict["LT"] = var_LT_0d_int_Scalar;
                }
                if (((aux_last_type_read_for_LB == SCALAR_INT) && (aux_LB_read == true))) {
                  cpp_current_dict["LB"] = var_LB_0d_int_Scalar;
                }
                if (((aux_last_type_read_for_NP == SCALAR_INT) && (aux_NP_read == true))) {
                  cpp_current_dict["NP"] = var_NP_0d_int_Scalar;
                }
                if ((var_Ek_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_Ek_1d_double_NestedVector;
                  cpp_current_dict["Ek"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["Ek"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                if ((var_Fk_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_Fk_1d_double_NestedVector;
                  cpp_current_dict["Fk"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["Fk"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                if ((var_El_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_El_1d_double_NestedVector;
                  cpp_current_dict["El"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["El"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                if ((var_Fl_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_Fl_1d_double_NestedVector;
                  cpp_current_dict["Fl"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["Fl"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                if (((aux_last_type_read_for_LS == SCALAR_INT) && (aux_LS_read == true))) {
                  cpp_current_dict["LS"] = var_LS_0d_int_Scalar;
                }
                if (((aux_last_type_read_for_NE == SCALAR_INT) && (aux_NE_read == true))) {
                  cpp_current_dict["NE"] = var_NE_0d_int_Scalar;
                }
                if ((var_E_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_E_1d_double_NestedVector;
                  cpp_current_dict["E"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["E"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                if (var_F_2d_double_Matrix2d.did_read()) {
                    cpp_current_dict["F"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["F"];
                    for (int cpp_i1 = var_F_2d_double_Matrix2d.get_row_start_index(); cpp_i1 <= var_F_2d_double_Matrix2d.get_row_last_index(); cpp_i1++) {
                      cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                      py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                      for (int cpp_i2 = var_F_2d_double_Matrix2d.get_col_start_index(cpp_i1); cpp_i2 <= var_F_2d_double_Matrix2d.get_col_last_index(cpp_i1); cpp_i2++) {
                        cpp_curdict1[py::cast(cpp_i2)] = var_F_2d_double_Matrix2d(cpp_i1, cpp_i2);
                      }
                    }
                }
                if (((aux_last_type_read_for_NER == SCALAR_INT) && (aux_NER_read == true))) {
                  cpp_current_dict["NER"] = var_NER_0d_int_Scalar;
                }
                if (((aux_last_type_read_for_NEC == SCALAR_INT) && (aux_NEC_read == true))) {
                  cpp_current_dict["NEC"] = var_NEC_0d_int_Scalar;
                }
                if ((var_ER_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_ER_1d_double_NestedVector;
                  cpp_current_dict["ER"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["ER"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                if ((var_EC_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_EC_1d_double_NestedVector;
                  cpp_current_dict["EC"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["EC"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                if ((var_F_1d_double_NestedVector.get_last_index() != -1)) {
                  auto& cpp_curvar0 = var_F_1d_double_NestedVector;
                  cpp_current_dict["F"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["F"];
                  for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                  }
                }
                cpp_current_dict = cpp_parent_dict;
              }
            }
            // store data in Python dictionary
            if (((aux_last_type_read_for_XMF1 == SCALAR_DOUBLE) && (aux_XMF1_read == true))) {
              cpp_current_dict["XMF1"] = var_XMF1_0d_double_Scalar;
            }
            if (((aux_last_type_read_for_XLFS1 == SCALAR_DOUBLE) && (aux_XLFS1_read == true))) {
              cpp_current_dict["XLFS1"] = var_XLFS1_0d_double_Scalar;
            }
            if (((aux_last_type_read_for_MAT1 == SCALAR_INT) && (aux_MAT1_read == true))) {
              cpp_current_dict["MAT1"] = var_MAT1_0d_int_Scalar;
            }
            if (((aux_last_type_read_for_MT1 == SCALAR_INT) && (aux_MT1_read == true))) {
              cpp_current_dict["MT1"] = var_MT1_0d_int_Scalar;
            }
            if (((aux_last_type_read_for_NC == SCALAR_INT) && (aux_NC_read == true))) {
              cpp_current_dict["NC"] = var_NC_0d_int_Scalar;
            }
            if (((aux_last_type_read_for_NI == SCALAR_INT) && (aux_NI_read == true))) {
              cpp_current_dict["NI"] = var_NI_0d_int_Scalar;
            }
            cpp_current_dict = cpp_parent_dict;
          }
        }
      }
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_MTL == SCALAR_INT) && (aux_MTL_read == true))) {
    cpp_current_dict["MTL"] = var_MTL_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NL == SCALAR_INT) && (aux_NL_read == true))) {
    cpp_current_dict["NL"] = var_NL_0d_int_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_mf34_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_LTT_0d_int_Scalar;
  bool aux_LTT_read = false;
  vartype aux_last_type_read_for_LTT = UNKNOWN;
  int var_NMT1_0d_int_Scalar;
  bool aux_NMT1_read = false;
  vartype aux_last_type_read_for_NMT1 = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // assign expression to variable LTT
  var_LTT_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
  aux_LTT_read = true;
  if ((aux_last_type_read_for_LTT != SCALAR_INT && aux_last_type_read_for_LTT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LTT = SCALAR_INT;
  // assign expression to variable NMT1
  var_NMT1_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
  aux_NMT1_read = true;
  if ((aux_last_type_read_for_NMT1 != SCALAR_INT && aux_last_type_read_for_NMT1 != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NMT1 = SCALAR_INT;

  for (int var_k_0d_int_Scalar = 1;
     var_k_0d_int_Scalar <= var_NMT1_0d_int_Scalar; var_k_0d_int_Scalar++) {
    bool aux_k_read = true;
    // open section subsection

    {
        py::dict cpp_parent_dict = cpp_current_dict;
        if (! cpp_parent_dict.contains("subsection")) {
          cpp_parent_dict["subsection"] = py::dict();
        }
        py::dict cpp_current_dict = cpp_parent_dict["subsection"];

        if (! cpp_current_dict.contains(py::cast(var_k_0d_int_Scalar))) {
          cpp_current_dict[py::cast(var_k_0d_int_Scalar)] = py::dict();
        }
        cpp_current_dict = cpp_current_dict[py::cast(var_k_0d_int_Scalar)];
      // variable declarations
      int var_MAT1_0d_int_Scalar;
      bool aux_MAT1_read = false;
      vartype aux_last_type_read_for_MAT1 = UNKNOWN;
      int var_MT1_0d_int_Scalar;
      bool aux_MT1_read = false;
      vartype aux_last_type_read_for_MT1 = UNKNOWN;
      int var_NL_0d_int_Scalar;
      bool aux_NL_read = false;
      vartype aux_last_type_read_for_NL = UNKNOWN;
      NestedVector<int> var_L_1d_int_NestedVector;
      vartype aux_last_type_read_for_L = UNKNOWN;
      NestedVector<int> var_L1_1d_int_NestedVector;
      vartype aux_last_type_read_for_L1 = UNKNOWN;
      int var_LCT_0d_int_Scalar;
      bool aux_LCT_read = false;
      vartype aux_last_type_read_for_LCT = UNKNOWN;
      NestedVector<int> var_NI_1d_int_NestedVector;
      vartype aux_last_type_read_for_NI = UNKNOWN;
      NestedVector<NestedVector<int>> var_LS_2d_int_NestedVector;
      NestedVector<int>* ptr_LS_2d_idx0;
      vartype aux_last_type_read_for_LS = UNKNOWN;
      NestedVector<NestedVector<int>> var_LB_2d_int_NestedVector;
      NestedVector<int>* ptr_LB_2d_idx0;
      vartype aux_last_type_read_for_LB = UNKNOWN;
      NestedVector<NestedVector<int>> var_NT_2d_int_NestedVector;
      NestedVector<int>* ptr_NT_2d_idx0;
      vartype aux_last_type_read_for_NT = UNKNOWN;
      NestedVector<NestedVector<int>> var_NE_2d_int_NestedVector;
      NestedVector<int>* ptr_NE_2d_idx0;
      vartype aux_last_type_read_for_NE = UNKNOWN;
      NestedVector<NestedVector<NestedVector<double>>> var_Data_3d_double_NestedVector;
      NestedVector<double>* ptr_Data_3d_idx1;
      NestedVector<NestedVector<double>>* ptr_Data_3d_idx0;
      vartype aux_last_type_read_for_Data = UNKNOWN;
      int var_NL1_0d_int_Scalar;
      bool aux_NL1_read = false;
      vartype aux_last_type_read_for_NL1 = UNKNOWN;
      // evaluate if-elif-else clause
      {
        bool cpp_found_match = false;
        if (! cpp_found_match) {
          // if statement evaluation with lookahead
          {
            std::streampos cpp_old_streampos = cont.tellg();
            {
              // variable declarations
              int& glob_var_MAT1_0d_int_Scalar = var_MAT1_0d_int_Scalar;
              int var_MAT1_0d_int_Scalar = glob_var_MAT1_0d_int_Scalar;
              bool& glob_aux_MAT1_read = aux_MAT1_read;
              bool aux_MAT1_read = glob_aux_MAT1_read;
              vartype aux_last_type_read_for_MAT1 = UNKNOWN;
              int& glob_var_MT1_0d_int_Scalar = var_MT1_0d_int_Scalar;
              int var_MT1_0d_int_Scalar = glob_var_MT1_0d_int_Scalar;
              bool& glob_aux_MT1_read = aux_MT1_read;
              bool aux_MT1_read = glob_aux_MT1_read;
              vartype aux_last_type_read_for_MT1 = UNKNOWN;
              int& glob_var_NL_0d_int_Scalar = var_NL_0d_int_Scalar;
              int var_NL_0d_int_Scalar = glob_var_NL_0d_int_Scalar;
              bool& glob_aux_NL_read = aux_NL_read;
              bool aux_NL_read = glob_aux_NL_read;
              vartype aux_last_type_read_for_NL = UNKNOWN;
              cpp_line = cpp_read_line(cont);
              // read CONT record
              // assign expression to variable MAT1
              var_MAT1_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
              aux_MAT1_read = true;
              if ((aux_last_type_read_for_MAT1 != SCALAR_INT && aux_last_type_read_for_MAT1 != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_MAT1 = SCALAR_INT;
              // assign expression to variable MT1
              var_MT1_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
              aux_MT1_read = true;
              if ((aux_last_type_read_for_MT1 != SCALAR_INT && aux_last_type_read_for_MT1 != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_MT1 = SCALAR_INT;
              // assign expression to variable NL
              var_NL_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
              aux_NL_read = true;
              if ((aux_last_type_read_for_NL != SCALAR_INT && aux_last_type_read_for_NL != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NL = SCALAR_INT;
              if ((! (aux_NL_read == true))) {
                // assign expression to variable NL
                var_NL_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                aux_NL_read = true;
                if ((aux_last_type_read_for_NL != SCALAR_INT && aux_last_type_read_for_NL != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_NL = SCALAR_INT;
              }
              if (((((((((aux_MT1_read == true)) && ((var_MT1_0d_int_Scalar)==(0))))))||(((((aux_MT_read == true)) && ((var_MT_0d_int_Scalar)==(var_MT1_0d_int_Scalar)))))))) {
                cpp_found_match = true;
              }
              cont.seekg(cpp_old_streampos);
            }
            if (cpp_found_match) {
              cpp_line = cpp_read_line(cont);
              // read CONT record
              // assign expression to variable MAT1
              var_MAT1_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
              aux_MAT1_read = true;
              if ((aux_last_type_read_for_MAT1 != SCALAR_INT && aux_last_type_read_for_MAT1 != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_MAT1 = SCALAR_INT;
              // assign expression to variable MT1
              var_MT1_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
              aux_MT1_read = true;
              if ((aux_last_type_read_for_MT1 != SCALAR_INT && aux_last_type_read_for_MT1 != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_MT1 = SCALAR_INT;
              // assign expression to variable NL
              var_NL_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
              aux_NL_read = true;
              if ((aux_last_type_read_for_NL != SCALAR_INT && aux_last_type_read_for_NL != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NL = SCALAR_INT;
              if ((! (aux_NL_read == true))) {
                // assign expression to variable NL
                var_NL_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                aux_NL_read = true;
                if ((aux_last_type_read_for_NL != SCALAR_INT && aux_last_type_read_for_NL != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_NL = SCALAR_INT;
              }

              for (int var_n_0d_int_Scalar = 1;
                 var_n_0d_int_Scalar <= ((var_NL_0d_int_Scalar*(var_NL_0d_int_Scalar+1))/2); var_n_0d_int_Scalar++) {
                bool aux_n_read = true;
                // evaluate if-elif-else clause
                {
                  bool cpp_found_match = false;
                  if (! cpp_found_match) {
                    if ((((((((aux_n_read == true)) && ((var_n_0d_int_Scalar)==(1)))))))) {
                      // if statement evaluation
                      cpp_found_match = true;
                      cpp_line = cpp_read_line(cont);
                      // read CONT record
                      // assign expression to variable L
                      var_L_1d_int_NestedVector.set(var_n_0d_int_Scalar, cpp_read_int_field(cpp_line, 2));
                      if ((aux_last_type_read_for_L != NESTEDVECTOR_INT && aux_last_type_read_for_L != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_L = NESTEDVECTOR_INT;
                      // assign expression to variable L1
                      var_L1_1d_int_NestedVector.set(var_n_0d_int_Scalar, cpp_read_int_field(cpp_line, 3));
                      if ((aux_last_type_read_for_L1 != NESTEDVECTOR_INT && aux_last_type_read_for_L1 != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_L1 = NESTEDVECTOR_INT;
                      // assign expression to variable LCT
                      var_LCT_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                      aux_LCT_read = true;
                      if ((aux_last_type_read_for_LCT != SCALAR_INT && aux_last_type_read_for_LCT != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_LCT = SCALAR_INT;
                      // assign expression to variable NI
                      var_NI_1d_int_NestedVector.set(var_n_0d_int_Scalar, cpp_read_int_field(cpp_line, 5));
                      if ((aux_last_type_read_for_NI != NESTEDVECTOR_INT && aux_last_type_read_for_NI != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_NI = NESTEDVECTOR_INT;
                    }
                  }
                  if (! cpp_found_match) {
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable L
                    var_L_1d_int_NestedVector.set(var_n_0d_int_Scalar, cpp_read_int_field(cpp_line, 2));
                    if ((aux_last_type_read_for_L != NESTEDVECTOR_INT && aux_last_type_read_for_L != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_L = NESTEDVECTOR_INT;
                    // assign expression to variable L1
                    var_L1_1d_int_NestedVector.set(var_n_0d_int_Scalar, cpp_read_int_field(cpp_line, 3));
                    if ((aux_last_type_read_for_L1 != NESTEDVECTOR_INT && aux_last_type_read_for_L1 != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_L1 = NESTEDVECTOR_INT;
                    // assign expression to variable NI
                    var_NI_1d_int_NestedVector.set(var_n_0d_int_Scalar, cpp_read_int_field(cpp_line, 5));
                    if ((aux_last_type_read_for_NI != NESTEDVECTOR_INT && aux_last_type_read_for_NI != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_NI = NESTEDVECTOR_INT;
                  }
                }
                ptr_LS_2d_idx0 = var_LS_2d_int_NestedVector.prepare(var_n_0d_int_Scalar);
                ptr_LB_2d_idx0 = var_LB_2d_int_NestedVector.prepare(var_n_0d_int_Scalar);
                ptr_NE_2d_idx0 = var_NE_2d_int_NestedVector.prepare(var_n_0d_int_Scalar);
                ptr_Data_3d_idx0 = var_Data_3d_double_NestedVector.prepare(var_n_0d_int_Scalar);

                for (int var_m_0d_int_Scalar = 1;
                   var_m_0d_int_Scalar <= var_NI_1d_int_NestedVector[var_n_0d_int_Scalar]; var_m_0d_int_Scalar++) {
                  bool aux_m_read = true;
                  cpp_line = cpp_read_line(cont);
                  // read LIST record
                  // assign expression to variable LS
                  ptr_LS_2d_idx0->set(var_m_0d_int_Scalar, cpp_read_int_field(cpp_line, 2));
                  if ((aux_last_type_read_for_LS != NESTEDVECTOR_INT && aux_last_type_read_for_LS != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_LS = NESTEDVECTOR_INT;
                  // assign expression to variable LB
                  ptr_LB_2d_idx0->set(var_m_0d_int_Scalar, cpp_read_int_field(cpp_line, 3));
                  if ((aux_last_type_read_for_LB != NESTEDVECTOR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_LB = NESTEDVECTOR_INT;
                  // assign expression to variable NT
                  ptr_NT_2d_idx0 = var_NT_2d_int_NestedVector.prepare(var_n_0d_int_Scalar);
                  ptr_NT_2d_idx0->set(var_m_0d_int_Scalar, cpp_read_int_field(cpp_line, 4));
                  if ((aux_last_type_read_for_NT != NESTEDVECTOR_INT && aux_last_type_read_for_NT != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_NT = NESTEDVECTOR_INT;
                  // assign expression to variable NE
                  ptr_NE_2d_idx0->set(var_m_0d_int_Scalar, cpp_read_int_field(cpp_line, 5));
                  if ((aux_last_type_read_for_NE != NESTEDVECTOR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_NE = NESTEDVECTOR_INT;
                  {
                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                    int cpp_j = 0;
                    // read LIST body
                    ptr_Data_3d_idx1 = ptr_Data_3d_idx0->prepare(var_m_0d_int_Scalar);

                    for (int var_q_0d_int_Scalar = 1;
                       var_q_0d_int_Scalar <= var_NT_2d_int_NestedVector[var_n_0d_int_Scalar][var_m_0d_int_Scalar]; var_q_0d_int_Scalar++) {
                      bool aux_q_read = true;
                      // read LIST body
                      // assign expression to variable Data
                      ptr_Data_3d_idx1->set(var_q_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                      if ((aux_last_type_read_for_Data != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_Data != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_Data = NESTEDVECTOR_DOUBLE;
                    }
                  }
                }
              }
            }
          }
        }
        if (! cpp_found_match) {
          cpp_line = cpp_read_line(cont);
          // read CONT record
          // assign expression to variable MAT1
          var_MAT1_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
          aux_MAT1_read = true;
          if ((aux_last_type_read_for_MAT1 != SCALAR_INT && aux_last_type_read_for_MAT1 != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_MAT1 = SCALAR_INT;
          // assign expression to variable MT1
          var_MT1_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
          aux_MT1_read = true;
          if ((aux_last_type_read_for_MT1 != SCALAR_INT && aux_last_type_read_for_MT1 != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_MT1 = SCALAR_INT;
          // assign expression to variable NL
          var_NL_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
          aux_NL_read = true;
          if ((aux_last_type_read_for_NL != SCALAR_INT && aux_last_type_read_for_NL != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NL = SCALAR_INT;
          // assign expression to variable NL1
          var_NL1_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
          aux_NL1_read = true;
          if ((aux_last_type_read_for_NL1 != SCALAR_INT && aux_last_type_read_for_NL1 != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NL1 = SCALAR_INT;

          for (int var_n_0d_int_Scalar = 1;
             var_n_0d_int_Scalar <= (var_NL_0d_int_Scalar*var_NL1_0d_int_Scalar); var_n_0d_int_Scalar++) {
            bool aux_n_read = true;
            // evaluate if-elif-else clause
            {
              bool cpp_found_match = false;
              if (! cpp_found_match) {
                if ((((((((aux_n_read == true)) && ((var_n_0d_int_Scalar)==(1)))))))) {
                  // if statement evaluation
                  cpp_found_match = true;
                  cpp_line = cpp_read_line(cont);
                  // read CONT record
                  // assign expression to variable L
                  var_L_1d_int_NestedVector.set(var_n_0d_int_Scalar, cpp_read_int_field(cpp_line, 2));
                  if ((aux_last_type_read_for_L != NESTEDVECTOR_INT && aux_last_type_read_for_L != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_L = NESTEDVECTOR_INT;
                  // assign expression to variable L1
                  var_L1_1d_int_NestedVector.set(var_n_0d_int_Scalar, cpp_read_int_field(cpp_line, 3));
                  if ((aux_last_type_read_for_L1 != NESTEDVECTOR_INT && aux_last_type_read_for_L1 != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_L1 = NESTEDVECTOR_INT;
                  // assign expression to variable LCT
                  var_LCT_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                  aux_LCT_read = true;
                  if ((aux_last_type_read_for_LCT != SCALAR_INT && aux_last_type_read_for_LCT != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_LCT = SCALAR_INT;
                  // assign expression to variable NI
                  var_NI_1d_int_NestedVector.set(var_n_0d_int_Scalar, cpp_read_int_field(cpp_line, 5));
                  if ((aux_last_type_read_for_NI != NESTEDVECTOR_INT && aux_last_type_read_for_NI != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_NI = NESTEDVECTOR_INT;
                }
              }
              if (! cpp_found_match) {
                cpp_line = cpp_read_line(cont);
                // read CONT record
                // assign expression to variable L
                var_L_1d_int_NestedVector.set(var_n_0d_int_Scalar, cpp_read_int_field(cpp_line, 2));
                if ((aux_last_type_read_for_L != NESTEDVECTOR_INT && aux_last_type_read_for_L != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_L = NESTEDVECTOR_INT;
                // assign expression to variable L1
                var_L1_1d_int_NestedVector.set(var_n_0d_int_Scalar, cpp_read_int_field(cpp_line, 3));
                if ((aux_last_type_read_for_L1 != NESTEDVECTOR_INT && aux_last_type_read_for_L1 != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_L1 = NESTEDVECTOR_INT;
                // assign expression to variable NI
                var_NI_1d_int_NestedVector.set(var_n_0d_int_Scalar, cpp_read_int_field(cpp_line, 5));
                if ((aux_last_type_read_for_NI != NESTEDVECTOR_INT && aux_last_type_read_for_NI != UNKNOWN)) {
                  raise_vartype_mismatch();
                }
                aux_last_type_read_for_NI = NESTEDVECTOR_INT;
              }
            }
            ptr_LS_2d_idx0 = var_LS_2d_int_NestedVector.prepare(var_n_0d_int_Scalar);
            ptr_LB_2d_idx0 = var_LB_2d_int_NestedVector.prepare(var_n_0d_int_Scalar);
            ptr_NE_2d_idx0 = var_NE_2d_int_NestedVector.prepare(var_n_0d_int_Scalar);
            ptr_Data_3d_idx0 = var_Data_3d_double_NestedVector.prepare(var_n_0d_int_Scalar);

            for (int var_m_0d_int_Scalar = 1;
               var_m_0d_int_Scalar <= var_NI_1d_int_NestedVector[var_n_0d_int_Scalar]; var_m_0d_int_Scalar++) {
              bool aux_m_read = true;
              cpp_line = cpp_read_line(cont);
              // read LIST record
              // assign expression to variable LS
              ptr_LS_2d_idx0->set(var_m_0d_int_Scalar, cpp_read_int_field(cpp_line, 2));
              if ((aux_last_type_read_for_LS != NESTEDVECTOR_INT && aux_last_type_read_for_LS != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_LS = NESTEDVECTOR_INT;
              // assign expression to variable LB
              ptr_LB_2d_idx0->set(var_m_0d_int_Scalar, cpp_read_int_field(cpp_line, 3));
              if ((aux_last_type_read_for_LB != NESTEDVECTOR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_LB = NESTEDVECTOR_INT;
              // assign expression to variable NT
              ptr_NT_2d_idx0 = var_NT_2d_int_NestedVector.prepare(var_n_0d_int_Scalar);
              ptr_NT_2d_idx0->set(var_m_0d_int_Scalar, cpp_read_int_field(cpp_line, 4));
              if ((aux_last_type_read_for_NT != NESTEDVECTOR_INT && aux_last_type_read_for_NT != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NT = NESTEDVECTOR_INT;
              // assign expression to variable NE
              ptr_NE_2d_idx0->set(var_m_0d_int_Scalar, cpp_read_int_field(cpp_line, 5));
              if ((aux_last_type_read_for_NE != NESTEDVECTOR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NE = NESTEDVECTOR_INT;
              {
                int cpp_npl = cpp_read_int_field(cpp_line, 4);
                cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                int cpp_j = 0;
                // read LIST body
                ptr_Data_3d_idx1 = ptr_Data_3d_idx0->prepare(var_m_0d_int_Scalar);

                for (int var_q_0d_int_Scalar = 1;
                   var_q_0d_int_Scalar <= var_NT_2d_int_NestedVector[var_n_0d_int_Scalar][var_m_0d_int_Scalar]; var_q_0d_int_Scalar++) {
                  bool aux_q_read = true;
                  // read LIST body
                  // assign expression to variable Data
                  ptr_Data_3d_idx1->set(var_q_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                  if ((aux_last_type_read_for_Data != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_Data != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_Data = NESTEDVECTOR_DOUBLE;
                }
              }
            }
          }
        }
      }
      // store data in Python dictionary
      if (((aux_last_type_read_for_MAT1 == SCALAR_INT) && (aux_MAT1_read == true))) {
        cpp_current_dict["MAT1"] = var_MAT1_0d_int_Scalar;
      }
      if (((aux_last_type_read_for_MT1 == SCALAR_INT) && (aux_MT1_read == true))) {
        cpp_current_dict["MT1"] = var_MT1_0d_int_Scalar;
      }
      if (((aux_last_type_read_for_NL == SCALAR_INT) && (aux_NL_read == true))) {
        cpp_current_dict["NL"] = var_NL_0d_int_Scalar;
      }
      if ((var_L_1d_int_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_L_1d_int_NestedVector;
        cpp_current_dict["L"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["L"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
        }
      }
      if ((var_L1_1d_int_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_L1_1d_int_NestedVector;
        cpp_current_dict["L1"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["L1"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
        }
      }
      if (((aux_last_type_read_for_LCT == SCALAR_INT) && (aux_LCT_read == true))) {
        cpp_current_dict["LCT"] = var_LCT_0d_int_Scalar;
      }
      if ((var_NI_1d_int_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_NI_1d_int_NestedVector;
        cpp_current_dict["NI"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["NI"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
        }
      }
      if ((var_LS_2d_int_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_LS_2d_int_NestedVector;
        cpp_current_dict["LS"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["LS"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
          cpp_curdict0[py::cast(cpp_i1)] = py::dict();
          py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
          for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
            cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
          }
        }
      }
      if ((var_LB_2d_int_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_LB_2d_int_NestedVector;
        cpp_current_dict["LB"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["LB"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
          cpp_curdict0[py::cast(cpp_i1)] = py::dict();
          py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
          for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
            cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
          }
        }
      }
      if ((var_NT_2d_int_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_NT_2d_int_NestedVector;
        cpp_current_dict["NT"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["NT"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
          cpp_curdict0[py::cast(cpp_i1)] = py::dict();
          py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
          for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
            cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
          }
        }
      }
      if ((var_NE_2d_int_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_NE_2d_int_NestedVector;
        cpp_current_dict["NE"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["NE"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
          cpp_curdict0[py::cast(cpp_i1)] = py::dict();
          py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
          for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
            cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
          }
        }
      }
      if ((var_Data_3d_double_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_Data_3d_double_NestedVector;
        cpp_current_dict["Data"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["Data"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
          cpp_curdict0[py::cast(cpp_i1)] = py::dict();
          py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
          for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
            auto& cpp_curvar2 = cpp_curvar1[cpp_i2];
            cpp_curdict1[py::cast(cpp_i2)] = py::dict();
            py::dict cpp_curdict2 = cpp_curdict1[py::cast(cpp_i2)];
            for (int cpp_i3 = cpp_curvar2.get_start_index(); cpp_i3 <= cpp_curvar2.get_last_index(); cpp_i3++) {
              cpp_curdict2[py::cast(cpp_i3)] = cpp_curvar2[cpp_i3];
            }
          }
        }
      }
      if (((aux_last_type_read_for_NL1 == SCALAR_INT) && (aux_NL1_read == true))) {
        cpp_current_dict["NL1"] = var_NL1_0d_int_Scalar;
      }
      cpp_current_dict = cpp_parent_dict;
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LTT == SCALAR_INT) && (aux_LTT_read == true))) {
    cpp_current_dict["LTT"] = var_LTT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NMT1 == SCALAR_INT) && (aux_NMT1_read == true))) {
    cpp_current_dict["NMT1"] = var_NMT1_0d_int_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_mf35_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_NK_0d_int_Scalar;
  bool aux_NK_read = false;
  vartype aux_last_type_read_for_NK = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // assign expression to variable NK
  var_NK_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
  aux_NK_read = true;
  if ((aux_last_type_read_for_NK != SCALAR_INT && aux_last_type_read_for_NK != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NK = SCALAR_INT;

  for (int var_k_0d_int_Scalar = 1;
     var_k_0d_int_Scalar <= var_NK_0d_int_Scalar; var_k_0d_int_Scalar++) {
    bool aux_k_read = true;
    // open section subsection

    {
        py::dict cpp_parent_dict = cpp_current_dict;
        if (! cpp_parent_dict.contains("subsection")) {
          cpp_parent_dict["subsection"] = py::dict();
        }
        py::dict cpp_current_dict = cpp_parent_dict["subsection"];

        if (! cpp_current_dict.contains(py::cast(var_k_0d_int_Scalar))) {
          cpp_current_dict[py::cast(var_k_0d_int_Scalar)] = py::dict();
        }
        cpp_current_dict = cpp_current_dict[py::cast(var_k_0d_int_Scalar)];
      // variable declarations
      double var_E1_0d_double_Scalar;
      bool aux_E1_read = false;
      vartype aux_last_type_read_for_E1 = UNKNOWN;
      double var_E2_0d_double_Scalar;
      bool aux_E2_read = false;
      vartype aux_last_type_read_for_E2 = UNKNOWN;
      int var_LS_0d_int_Scalar;
      bool aux_LS_read = false;
      vartype aux_last_type_read_for_LS = UNKNOWN;
      int var_LB_0d_int_Scalar;
      bool aux_LB_read = false;
      vartype aux_last_type_read_for_LB = UNKNOWN;
      int var_NT_0d_int_Scalar;
      bool aux_NT_read = false;
      vartype aux_last_type_read_for_NT = UNKNOWN;
      int var_NE_0d_int_Scalar;
      bool aux_NE_read = false;
      vartype aux_last_type_read_for_NE = UNKNOWN;
      NestedVector<double> var_E_1d_double_NestedVector;
      vartype aux_last_type_read_for_E = UNKNOWN;
      Matrix2d<double> var_F_2d_double_Matrix2d;
      vartype aux_last_type_read_for_F = UNKNOWN;
      // evaluate if-elif-else clause
      {
        bool cpp_found_match = false;
        if (! cpp_found_match) {
          // if statement evaluation with lookahead
          {
            std::streampos cpp_old_streampos = cont.tellg();
            {
              // variable declarations
              double& glob_var_E1_0d_double_Scalar = var_E1_0d_double_Scalar;
              double var_E1_0d_double_Scalar = glob_var_E1_0d_double_Scalar;
              bool& glob_aux_E1_read = aux_E1_read;
              bool aux_E1_read = glob_aux_E1_read;
              vartype aux_last_type_read_for_E1 = UNKNOWN;
              double& glob_var_E2_0d_double_Scalar = var_E2_0d_double_Scalar;
              double var_E2_0d_double_Scalar = glob_var_E2_0d_double_Scalar;
              bool& glob_aux_E2_read = aux_E2_read;
              bool aux_E2_read = glob_aux_E2_read;
              vartype aux_last_type_read_for_E2 = UNKNOWN;
              int& glob_var_LS_0d_int_Scalar = var_LS_0d_int_Scalar;
              int var_LS_0d_int_Scalar = glob_var_LS_0d_int_Scalar;
              bool& glob_aux_LS_read = aux_LS_read;
              bool aux_LS_read = glob_aux_LS_read;
              vartype aux_last_type_read_for_LS = UNKNOWN;
              int& glob_var_LB_0d_int_Scalar = var_LB_0d_int_Scalar;
              int var_LB_0d_int_Scalar = glob_var_LB_0d_int_Scalar;
              bool& glob_aux_LB_read = aux_LB_read;
              bool aux_LB_read = glob_aux_LB_read;
              vartype aux_last_type_read_for_LB = UNKNOWN;
              int& glob_var_NT_0d_int_Scalar = var_NT_0d_int_Scalar;
              int var_NT_0d_int_Scalar = glob_var_NT_0d_int_Scalar;
              bool& glob_aux_NT_read = aux_NT_read;
              bool aux_NT_read = glob_aux_NT_read;
              vartype aux_last_type_read_for_NT = UNKNOWN;
              int& glob_var_NE_0d_int_Scalar = var_NE_0d_int_Scalar;
              int var_NE_0d_int_Scalar = glob_var_NE_0d_int_Scalar;
              bool& glob_aux_NE_read = aux_NE_read;
              bool aux_NE_read = glob_aux_NE_read;
              vartype aux_last_type_read_for_NE = UNKNOWN;
              cpp_line = cpp_read_line(cont);
              // read LIST record
              // assign expression to variable E1
              var_E1_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
              aux_E1_read = true;
              if ((aux_last_type_read_for_E1 != SCALAR_DOUBLE && aux_last_type_read_for_E1 != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_E1 = SCALAR_DOUBLE;
              // assign expression to variable E2
              var_E2_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
              aux_E2_read = true;
              if ((aux_last_type_read_for_E2 != SCALAR_DOUBLE && aux_last_type_read_for_E2 != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_E2 = SCALAR_DOUBLE;
              // assign expression to variable LS
              var_LS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
              aux_LS_read = true;
              if ((aux_last_type_read_for_LS != SCALAR_INT && aux_last_type_read_for_LS != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_LS = SCALAR_INT;
              // assign expression to variable LB
              var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
              aux_LB_read = true;
              if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_LB = SCALAR_INT;
              // assign expression to variable NT
              var_NT_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
              aux_NT_read = true;
              if ((aux_last_type_read_for_NT != SCALAR_INT && aux_last_type_read_for_NT != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NT = SCALAR_INT;
              // assign expression to variable NE
              var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
              aux_NE_read = true;
              if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NE = SCALAR_INT;
              if (((((((((aux_LS_read == true)) && ((var_LS_0d_int_Scalar)==(1)))))&&((((aux_LB_read == true)) && ((var_LB_0d_int_Scalar)==(7)))))))) {
                cpp_found_match = true;
              }
              cont.seekg(cpp_old_streampos);
            }
            if (cpp_found_match) {
              cpp_line = cpp_read_line(cont);
              // read LIST record
              // assign expression to variable E1
              var_E1_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
              aux_E1_read = true;
              if ((aux_last_type_read_for_E1 != SCALAR_DOUBLE && aux_last_type_read_for_E1 != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_E1 = SCALAR_DOUBLE;
              // assign expression to variable E2
              var_E2_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
              aux_E2_read = true;
              if ((aux_last_type_read_for_E2 != SCALAR_DOUBLE && aux_last_type_read_for_E2 != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_E2 = SCALAR_DOUBLE;
              // assign expression to variable LS
              var_LS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
              aux_LS_read = true;
              if ((aux_last_type_read_for_LS != SCALAR_INT && aux_last_type_read_for_LS != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_LS = SCALAR_INT;
              // assign expression to variable LB
              var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
              aux_LB_read = true;
              if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_LB = SCALAR_INT;
              // assign expression to variable NT
              var_NT_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
              aux_NT_read = true;
              if ((aux_last_type_read_for_NT != SCALAR_INT && aux_last_type_read_for_NT != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NT = SCALAR_INT;
              // assign expression to variable NE
              var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
              aux_NE_read = true;
              if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                raise_vartype_mismatch();
              }
              aux_last_type_read_for_NE = SCALAR_INT;
              {
                int cpp_npl = cpp_read_int_field(cpp_line, 4);
                cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                int cpp_j = 0;
                // read LIST body

                for (int var_i_0d_int_Scalar = 1;
                   var_i_0d_int_Scalar <= var_NE_0d_int_Scalar; var_i_0d_int_Scalar++) {
                  bool aux_i_read = true;
                  // read LIST body
                  // assign expression to variable E
                  var_E_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                  if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
                    raise_vartype_mismatch();
                  }
                  aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
                }
                var_F_2d_double_Matrix2d.init(1, (var_NE_0d_int_Scalar-1), 1, (var_NE_0d_int_Scalar-1), true, false);

                for (int var_i_0d_int_Scalar = 1;
                   var_i_0d_int_Scalar <= (var_NE_0d_int_Scalar-1); var_i_0d_int_Scalar++) {
                  bool aux_i_read = true;
                  // read LIST body

                  for (int var_j_0d_int_Scalar = var_i_0d_int_Scalar;
                     var_j_0d_int_Scalar <= (var_NE_0d_int_Scalar-1); var_j_0d_int_Scalar++) {
                    bool aux_j_read = true;
                    // read LIST body
                    // assign expression to variable F
                    var_F_2d_double_Matrix2d(var_i_0d_int_Scalar, var_j_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                    if ((aux_last_type_read_for_F != MATRIX2D_DOUBLE && aux_last_type_read_for_F != UNKNOWN)) {
                      raise_vartype_mismatch();
                    }
                    aux_last_type_read_for_F = MATRIX2D_DOUBLE;
                  }
                }
              }
            }
          }
        }
      }
      // store data in Python dictionary
      if (((aux_last_type_read_for_E1 == SCALAR_DOUBLE) && (aux_E1_read == true))) {
        cpp_current_dict["E1"] = var_E1_0d_double_Scalar;
      }
      if (((aux_last_type_read_for_E2 == SCALAR_DOUBLE) && (aux_E2_read == true))) {
        cpp_current_dict["E2"] = var_E2_0d_double_Scalar;
      }
      if (((aux_last_type_read_for_LS == SCALAR_INT) && (aux_LS_read == true))) {
        cpp_current_dict["LS"] = var_LS_0d_int_Scalar;
      }
      if (((aux_last_type_read_for_LB == SCALAR_INT) && (aux_LB_read == true))) {
        cpp_current_dict["LB"] = var_LB_0d_int_Scalar;
      }
      if (((aux_last_type_read_for_NT == SCALAR_INT) && (aux_NT_read == true))) {
        cpp_current_dict["NT"] = var_NT_0d_int_Scalar;
      }
      if (((aux_last_type_read_for_NE == SCALAR_INT) && (aux_NE_read == true))) {
        cpp_current_dict["NE"] = var_NE_0d_int_Scalar;
      }
      if ((var_E_1d_double_NestedVector.get_last_index() != -1)) {
        auto& cpp_curvar0 = var_E_1d_double_NestedVector;
        cpp_current_dict["E"] = py::dict();
        py::dict cpp_curdict0 = cpp_current_dict["E"];
        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
          cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
        }
      }
      if (var_F_2d_double_Matrix2d.did_read()) {
          cpp_current_dict["F"] = py::dict();
          py::dict cpp_curdict0 = cpp_current_dict["F"];
          for (int cpp_i1 = var_F_2d_double_Matrix2d.get_row_start_index(); cpp_i1 <= var_F_2d_double_Matrix2d.get_row_last_index(); cpp_i1++) {
            cpp_curdict0[py::cast(cpp_i1)] = py::dict();
            py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
            for (int cpp_i2 = var_F_2d_double_Matrix2d.get_col_start_index(cpp_i1); cpp_i2 <= var_F_2d_double_Matrix2d.get_col_last_index(cpp_i1); cpp_i2++) {
              cpp_curdict1[py::cast(cpp_i2)] = var_F_2d_double_Matrix2d(cpp_i1, cpp_i2);
            }
          }
      }
      cpp_current_dict = cpp_parent_dict;
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_NK == SCALAR_INT) && (aux_NK_read == true))) {
    cpp_current_dict["NK"] = var_NK_0d_int_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_mf40_istream(std::istream& cont) {
  std::vector<int> cpp_intvec;
  std::vector<double> cpp_floatvec;
  py::dict cpp_parent_dict;
  py::dict cpp_current_dict;
  py::dict cpp_workdict;
  int cpp_idxnum;
  std::string cpp_line;
  double cpp_float_val;
  // variable declarations
  int var_MAT_0d_int_Scalar;
  bool aux_MAT_read = false;
  vartype aux_last_type_read_for_MAT = UNKNOWN;
  int var_MF_0d_int_Scalar;
  bool aux_MF_read = false;
  vartype aux_last_type_read_for_MF = UNKNOWN;
  int var_MT_0d_int_Scalar;
  bool aux_MT_read = false;
  vartype aux_last_type_read_for_MT = UNKNOWN;
  double var_ZA_0d_double_Scalar;
  bool aux_ZA_read = false;
  vartype aux_last_type_read_for_ZA = UNKNOWN;
  double var_AWR_0d_double_Scalar;
  bool aux_AWR_read = false;
  vartype aux_last_type_read_for_AWR = UNKNOWN;
  int var_LIS_0d_int_Scalar;
  bool aux_LIS_read = false;
  vartype aux_last_type_read_for_LIS = UNKNOWN;
  int var_NS_0d_int_Scalar;
  bool aux_NS_read = false;
  vartype aux_last_type_read_for_NS = UNKNOWN;
  std::streampos cpp_startpos = cont.tellg();
  cpp_line = cpp_read_line(cont);
  // assign expression to variable MAT
  var_MAT_0d_int_Scalar = std::stoi(cpp_line.substr(66, 4));
  aux_MAT_read = true;
  if ((aux_last_type_read_for_MAT != SCALAR_INT && aux_last_type_read_for_MAT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MAT = SCALAR_INT;
  // assign expression to variable MF
  var_MF_0d_int_Scalar = std::stoi(cpp_line.substr(70, 2));
  aux_MF_read = true;
  if ((aux_last_type_read_for_MF != SCALAR_INT && aux_last_type_read_for_MF != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MF = SCALAR_INT;
  // assign expression to variable MT
  var_MT_0d_int_Scalar = std::stoi(cpp_line.substr(72, 3));
  aux_MT_read = true;
  if ((aux_last_type_read_for_MT != SCALAR_INT && aux_last_type_read_for_MT != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_MT = SCALAR_INT;
  // store variable MAT in endf dictionary
  cpp_current_dict[py::cast("MAT")] = var_MAT_0d_int_Scalar;
  // store variable MF in endf dictionary
  cpp_current_dict[py::cast("MF")] = var_MF_0d_int_Scalar;
  // store variable MT in endf dictionary
  cpp_current_dict[py::cast("MT")] = var_MT_0d_int_Scalar;
  cont.seekg(cpp_startpos);
  cpp_line = cpp_read_line(cont);
  // read CONT record
  // assign expression to variable ZA
  var_ZA_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
  aux_ZA_read = true;
  if ((aux_last_type_read_for_ZA != SCALAR_DOUBLE && aux_last_type_read_for_ZA != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_ZA = SCALAR_DOUBLE;
  // assign expression to variable AWR
  var_AWR_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
  aux_AWR_read = true;
  if ((aux_last_type_read_for_AWR != SCALAR_DOUBLE && aux_last_type_read_for_AWR != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_AWR = SCALAR_DOUBLE;
  // assign expression to variable LIS
  var_LIS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
  aux_LIS_read = true;
  if ((aux_last_type_read_for_LIS != SCALAR_INT && aux_last_type_read_for_LIS != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_LIS = SCALAR_INT;
  // assign expression to variable NS
  var_NS_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
  aux_NS_read = true;
  if ((aux_last_type_read_for_NS != SCALAR_INT && aux_last_type_read_for_NS != UNKNOWN)) {
    raise_vartype_mismatch();
  }
  aux_last_type_read_for_NS = SCALAR_INT;

  for (int var_k_0d_int_Scalar = 1;
     var_k_0d_int_Scalar <= var_NS_0d_int_Scalar; var_k_0d_int_Scalar++) {
    bool aux_k_read = true;
    // open section subsection

    {
        py::dict cpp_parent_dict = cpp_current_dict;
        if (! cpp_parent_dict.contains("subsection")) {
          cpp_parent_dict["subsection"] = py::dict();
        }
        py::dict cpp_current_dict = cpp_parent_dict["subsection"];

        if (! cpp_current_dict.contains(py::cast(var_k_0d_int_Scalar))) {
          cpp_current_dict[py::cast(var_k_0d_int_Scalar)] = py::dict();
        }
        cpp_current_dict = cpp_current_dict[py::cast(var_k_0d_int_Scalar)];
      // variable declarations
      double var_QM_0d_double_Scalar;
      bool aux_QM_read = false;
      vartype aux_last_type_read_for_QM = UNKNOWN;
      double var_QI_0d_double_Scalar;
      bool aux_QI_read = false;
      vartype aux_last_type_read_for_QI = UNKNOWN;
      int var_IZAP_0d_int_Scalar;
      bool aux_IZAP_read = false;
      vartype aux_last_type_read_for_IZAP = UNKNOWN;
      int var_LFS_0d_int_Scalar;
      bool aux_LFS_read = false;
      vartype aux_last_type_read_for_LFS = UNKNOWN;
      int var_NL_0d_int_Scalar;
      bool aux_NL_read = false;
      vartype aux_last_type_read_for_NL = UNKNOWN;
      cpp_line = cpp_read_line(cont);
      // read CONT record
      // assign expression to variable QM
      var_QM_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
      aux_QM_read = true;
      if ((aux_last_type_read_for_QM != SCALAR_DOUBLE && aux_last_type_read_for_QM != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_QM = SCALAR_DOUBLE;
      // assign expression to variable QI
      var_QI_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
      aux_QI_read = true;
      if ((aux_last_type_read_for_QI != SCALAR_DOUBLE && aux_last_type_read_for_QI != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_QI = SCALAR_DOUBLE;
      // assign expression to variable IZAP
      var_IZAP_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
      aux_IZAP_read = true;
      if ((aux_last_type_read_for_IZAP != SCALAR_INT && aux_last_type_read_for_IZAP != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_IZAP = SCALAR_INT;
      // assign expression to variable LFS
      var_LFS_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
      aux_LFS_read = true;
      if ((aux_last_type_read_for_LFS != SCALAR_INT && aux_last_type_read_for_LFS != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_LFS = SCALAR_INT;
      // assign expression to variable NL
      var_NL_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
      aux_NL_read = true;
      if ((aux_last_type_read_for_NL != SCALAR_INT && aux_last_type_read_for_NL != UNKNOWN)) {
        raise_vartype_mismatch();
      }
      aux_last_type_read_for_NL = SCALAR_INT;

      for (int var_i_0d_int_Scalar = 1;
         var_i_0d_int_Scalar <= var_NL_0d_int_Scalar; var_i_0d_int_Scalar++) {
        bool aux_i_read = true;
        // open section subsubsec

        {
            py::dict cpp_parent_dict = cpp_current_dict;
            if (! cpp_parent_dict.contains("subsubsec")) {
              cpp_parent_dict["subsubsec"] = py::dict();
            }
            py::dict cpp_current_dict = cpp_parent_dict["subsubsec"];

            if (! cpp_current_dict.contains(py::cast(var_i_0d_int_Scalar))) {
              cpp_current_dict[py::cast(var_i_0d_int_Scalar)] = py::dict();
            }
            cpp_current_dict = cpp_current_dict[py::cast(var_i_0d_int_Scalar)];
          // variable declarations
          double var_XMF1_0d_double_Scalar;
          bool aux_XMF1_read = false;
          vartype aux_last_type_read_for_XMF1 = UNKNOWN;
          double var_XLFS1_0d_double_Scalar;
          bool aux_XLFS1_read = false;
          vartype aux_last_type_read_for_XLFS1 = UNKNOWN;
          int var_MAT1_0d_int_Scalar;
          bool aux_MAT1_read = false;
          vartype aux_last_type_read_for_MAT1 = UNKNOWN;
          int var_MT1_0d_int_Scalar;
          bool aux_MT1_read = false;
          vartype aux_last_type_read_for_MT1 = UNKNOWN;
          int var_NC_0d_int_Scalar;
          bool aux_NC_read = false;
          vartype aux_last_type_read_for_NC = UNKNOWN;
          int var_NI_0d_int_Scalar;
          bool aux_NI_read = false;
          vartype aux_last_type_read_for_NI = UNKNOWN;
          cpp_line = cpp_read_line(cont);
          // read CONT record
          // assign expression to variable XMF1
          var_XMF1_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
          aux_XMF1_read = true;
          if ((aux_last_type_read_for_XMF1 != SCALAR_DOUBLE && aux_last_type_read_for_XMF1 != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_XMF1 = SCALAR_DOUBLE;
          // assign expression to variable XLFS1
          var_XLFS1_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
          aux_XLFS1_read = true;
          if ((aux_last_type_read_for_XLFS1 != SCALAR_DOUBLE && aux_last_type_read_for_XLFS1 != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_XLFS1 = SCALAR_DOUBLE;
          // assign expression to variable MAT1
          var_MAT1_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
          aux_MAT1_read = true;
          if ((aux_last_type_read_for_MAT1 != SCALAR_INT && aux_last_type_read_for_MAT1 != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_MAT1 = SCALAR_INT;
          // assign expression to variable MT1
          var_MT1_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
          aux_MT1_read = true;
          if ((aux_last_type_read_for_MT1 != SCALAR_INT && aux_last_type_read_for_MT1 != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_MT1 = SCALAR_INT;
          // assign expression to variable NC
          var_NC_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
          aux_NC_read = true;
          if ((aux_last_type_read_for_NC != SCALAR_INT && aux_last_type_read_for_NC != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NC = SCALAR_INT;
          // assign expression to variable NI
          var_NI_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
          aux_NI_read = true;
          if ((aux_last_type_read_for_NI != SCALAR_INT && aux_last_type_read_for_NI != UNKNOWN)) {
            raise_vartype_mismatch();
          }
          aux_last_type_read_for_NI = SCALAR_INT;

          for (int var_j_0d_int_Scalar = 1;
             var_j_0d_int_Scalar <= var_NC_0d_int_Scalar; var_j_0d_int_Scalar++) {
            bool aux_j_read = true;
            // open section nc_subsubsubsec

            {
                py::dict cpp_parent_dict = cpp_current_dict;
                if (! cpp_parent_dict.contains("nc_subsubsubsec")) {
                  cpp_parent_dict["nc_subsubsubsec"] = py::dict();
                }
                py::dict cpp_current_dict = cpp_parent_dict["nc_subsubsubsec"];

                if (! cpp_current_dict.contains(py::cast(var_j_0d_int_Scalar))) {
                  cpp_current_dict[py::cast(var_j_0d_int_Scalar)] = py::dict();
                }
                cpp_current_dict = cpp_current_dict[py::cast(var_j_0d_int_Scalar)];
              // variable declarations
              int var_LTY_0d_int_Scalar;
              bool aux_LTY_read = false;
              vartype aux_last_type_read_for_LTY = UNKNOWN;
              double var_E1_0d_double_Scalar;
              bool aux_E1_read = false;
              vartype aux_last_type_read_for_E1 = UNKNOWN;
              double var_E2_0d_double_Scalar;
              bool aux_E2_read = false;
              vartype aux_last_type_read_for_E2 = UNKNOWN;
              int cpp_int_val;
              bool aux_cpp_int_val_read = false;
              vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
              int var_NCI_0d_int_Scalar;
              bool aux_NCI_read = false;
              vartype aux_last_type_read_for_NCI = UNKNOWN;
              NestedVector<double> var_C_1d_double_NestedVector;
              vartype aux_last_type_read_for_C = UNKNOWN;
              NestedVector<double> var_XMT_1d_double_NestedVector;
              vartype aux_last_type_read_for_XMT = UNKNOWN;
              int var_MATS_0d_int_Scalar;
              bool aux_MATS_read = false;
              vartype aux_last_type_read_for_MATS = UNKNOWN;
              int var_MTS_0d_int_Scalar;
              bool aux_MTS_read = false;
              vartype aux_last_type_read_for_MTS = UNKNOWN;
              int var_NEI_0d_int_Scalar;
              bool aux_NEI_read = false;
              vartype aux_last_type_read_for_NEI = UNKNOWN;
              double var_XMFS_0d_double_Scalar;
              bool aux_XMFS_read = false;
              vartype aux_last_type_read_for_XMFS = UNKNOWN;
              double var_XLFSS_0d_double_Scalar;
              bool aux_XLFSS_read = false;
              vartype aux_last_type_read_for_XLFSS = UNKNOWN;
              NestedVector<double> var_E_1d_double_NestedVector;
              vartype aux_last_type_read_for_E = UNKNOWN;
              NestedVector<double> var_WE_1d_double_NestedVector;
              vartype aux_last_type_read_for_WE = UNKNOWN;
              // evaluate if-elif-else clause
              {
                bool cpp_found_match = false;
                if (! cpp_found_match) {
                  // if statement evaluation with lookahead
                  {
                    std::streampos cpp_old_streampos = cont.tellg();
                    {
                      // variable declarations
                      int& glob_var_LTY_0d_int_Scalar = var_LTY_0d_int_Scalar;
                      int var_LTY_0d_int_Scalar = glob_var_LTY_0d_int_Scalar;
                      bool& glob_aux_LTY_read = aux_LTY_read;
                      bool aux_LTY_read = glob_aux_LTY_read;
                      vartype aux_last_type_read_for_LTY = UNKNOWN;
                      cpp_line = cpp_read_line(cont);
                      // read CONT record
                      // assign expression to variable LTY
                      var_LTY_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                      aux_LTY_read = true;
                      if ((aux_last_type_read_for_LTY != SCALAR_INT && aux_last_type_read_for_LTY != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_LTY = SCALAR_INT;
                      if ((((((((aux_LTY_read == true)) && ((var_LTY_0d_int_Scalar)==(0)))))))) {
                        cpp_found_match = true;
                      }
                      cont.seekg(cpp_old_streampos);
                    }
                    if (cpp_found_match) {
                      cpp_line = cpp_read_line(cont);
                      // read CONT record
                      // assign expression to variable LTY
                      var_LTY_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                      aux_LTY_read = true;
                      if ((aux_last_type_read_for_LTY != SCALAR_INT && aux_last_type_read_for_LTY != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_LTY = SCALAR_INT;
                      cpp_line = cpp_read_line(cont);
                      // read LIST record
                      // assign expression to variable E1
                      var_E1_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                      aux_E1_read = true;
                      if ((aux_last_type_read_for_E1 != SCALAR_DOUBLE && aux_last_type_read_for_E1 != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_E1 = SCALAR_DOUBLE;
                      // assign expression to variable E2
                      var_E2_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                      aux_E2_read = true;
                      if ((aux_last_type_read_for_E2 != SCALAR_DOUBLE && aux_last_type_read_for_E2 != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_E2 = SCALAR_DOUBLE;
                      // assign expression to variable cpp_int_val
                      cpp_int_val = cpp_read_int_field(cpp_line, 4);
                      aux_cpp_int_val_read = true;
                      if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                      // assign expression to variable NCI
                      var_NCI_0d_int_Scalar = (cpp_int_val/2);
                      aux_NCI_read = true;
                      if ((aux_last_type_read_for_NCI != SCALAR_INT && aux_last_type_read_for_NCI != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_NCI = SCALAR_INT;
                      if ((! (aux_NCI_read == true))) {
                        // assign expression to variable NCI
                        var_NCI_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                        aux_NCI_read = true;
                        if ((aux_last_type_read_for_NCI != SCALAR_INT && aux_last_type_read_for_NCI != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NCI = SCALAR_INT;
                      }
                      {
                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                        int cpp_j = 0;
                        // read LIST body

                        for (int var_i_0d_int_Scalar = 1;
                           var_i_0d_int_Scalar <= var_NCI_0d_int_Scalar; var_i_0d_int_Scalar++) {
                          bool aux_i_read = true;
                          // read LIST body
                          // assign expression to variable C
                          var_C_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_C != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_C != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_C = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable XMT
                          var_XMT_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_XMT != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_XMT != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_XMT = NESTEDVECTOR_DOUBLE;
                        }
                      }
                    }
                  }
                }
                if (! cpp_found_match) {
                  if (! cpp_found_match) {
                    // if statement evaluation with lookahead
                    {
                      std::streampos cpp_old_streampos = cont.tellg();
                      {
                        // variable declarations
                        int& glob_var_LTY_0d_int_Scalar = var_LTY_0d_int_Scalar;
                        int var_LTY_0d_int_Scalar = glob_var_LTY_0d_int_Scalar;
                        bool& glob_aux_LTY_read = aux_LTY_read;
                        bool aux_LTY_read = glob_aux_LTY_read;
                        vartype aux_last_type_read_for_LTY = UNKNOWN;
                        cpp_line = cpp_read_line(cont);
                        // read CONT record
                        // assign expression to variable LTY
                        var_LTY_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                        aux_LTY_read = true;
                        if ((aux_last_type_read_for_LTY != SCALAR_INT && aux_last_type_read_for_LTY != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LTY = SCALAR_INT;
                        if ((((((((((aux_LTY_read == true)) && ((var_LTY_0d_int_Scalar)==(1))))))||(((((aux_LTY_read == true)) && ((var_LTY_0d_int_Scalar)==(2))))))||(((((aux_LTY_read == true)) && ((var_LTY_0d_int_Scalar)==(3)))))))) {
                          cpp_found_match = true;
                        }
                        cont.seekg(cpp_old_streampos);
                      }
                      if (cpp_found_match) {
                        cpp_line = cpp_read_line(cont);
                        // read CONT record
                        // assign expression to variable LTY
                        var_LTY_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                        aux_LTY_read = true;
                        if ((aux_last_type_read_for_LTY != SCALAR_INT && aux_last_type_read_for_LTY != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LTY = SCALAR_INT;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable E1
                        var_E1_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 0);
                        aux_E1_read = true;
                        if ((aux_last_type_read_for_E1 != SCALAR_DOUBLE && aux_last_type_read_for_E1 != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_E1 = SCALAR_DOUBLE;
                        // assign expression to variable E2
                        var_E2_0d_double_Scalar = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_E2_read = true;
                        if ((aux_last_type_read_for_E2 != SCALAR_DOUBLE && aux_last_type_read_for_E2 != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_E2 = SCALAR_DOUBLE;
                        // assign expression to variable MATS
                        var_MATS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                        aux_MATS_read = true;
                        if ((aux_last_type_read_for_MATS != SCALAR_INT && aux_last_type_read_for_MATS != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_MATS = SCALAR_INT;
                        // assign expression to variable MTS
                        var_MTS_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                        aux_MTS_read = true;
                        if ((aux_last_type_read_for_MTS != SCALAR_INT && aux_last_type_read_for_MTS != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_MTS = SCALAR_INT;
                        // assign expression to variable cpp_int_val
                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                        aux_cpp_int_val_read = true;
                        if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                        // assign expression to variable NEI
                        var_NEI_0d_int_Scalar = ((cpp_int_val+(-2))/2);
                        aux_NEI_read = true;
                        if ((aux_last_type_read_for_NEI != SCALAR_INT && aux_last_type_read_for_NEI != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NEI = SCALAR_INT;
                        if ((! (aux_NEI_read == true))) {
                          // assign expression to variable NEI
                          var_NEI_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                          aux_NEI_read = true;
                          if ((aux_last_type_read_for_NEI != SCALAR_INT && aux_last_type_read_for_NEI != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NEI = SCALAR_INT;
                        }
                        {
                          int cpp_npl = cpp_read_int_field(cpp_line, 4);
                          cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                          int cpp_j = 0;
                          // read LIST body
                          // assign expression to variable XMFS
                          var_XMFS_0d_double_Scalar = cpp_floatvec[cpp_j++];
                          aux_XMFS_read = true;
                          if ((aux_last_type_read_for_XMFS != SCALAR_DOUBLE && aux_last_type_read_for_XMFS != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_XMFS = SCALAR_DOUBLE;
                          // assign expression to variable XLFSS
                          var_XLFSS_0d_double_Scalar = cpp_floatvec[cpp_j++];
                          aux_XLFSS_read = true;
                          if ((aux_last_type_read_for_XLFSS != SCALAR_DOUBLE && aux_last_type_read_for_XLFSS != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_XLFSS = SCALAR_DOUBLE;

                          for (int var_i_0d_int_Scalar = 1;
                             var_i_0d_int_Scalar <= var_NEI_0d_int_Scalar; var_i_0d_int_Scalar++) {
                            bool aux_i_read = true;
                            // read LIST body
                            // assign expression to variable E
                            var_E_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable WE
                            var_WE_1d_double_NestedVector.set(var_i_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_WE != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_WE != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_WE = NESTEDVECTOR_DOUBLE;
                          }
                        }
                      }
                    }
                  }
                }
              }
              // store data in Python dictionary
              if (((aux_last_type_read_for_LTY == SCALAR_INT) && (aux_LTY_read == true))) {
                cpp_current_dict["LTY"] = var_LTY_0d_int_Scalar;
              }
              if (((aux_last_type_read_for_E1 == SCALAR_DOUBLE) && (aux_E1_read == true))) {
                cpp_current_dict["E1"] = var_E1_0d_double_Scalar;
              }
              if (((aux_last_type_read_for_E2 == SCALAR_DOUBLE) && (aux_E2_read == true))) {
                cpp_current_dict["E2"] = var_E2_0d_double_Scalar;
              }
              if (((aux_last_type_read_for_NCI == SCALAR_INT) && (aux_NCI_read == true))) {
                cpp_current_dict["NCI"] = var_NCI_0d_int_Scalar;
              }
              if ((var_C_1d_double_NestedVector.get_last_index() != -1)) {
                auto& cpp_curvar0 = var_C_1d_double_NestedVector;
                cpp_current_dict["C"] = py::dict();
                py::dict cpp_curdict0 = cpp_current_dict["C"];
                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                  cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                }
              }
              if ((var_XMT_1d_double_NestedVector.get_last_index() != -1)) {
                auto& cpp_curvar0 = var_XMT_1d_double_NestedVector;
                cpp_current_dict["XMT"] = py::dict();
                py::dict cpp_curdict0 = cpp_current_dict["XMT"];
                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                  cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                }
              }
              if (((aux_last_type_read_for_MATS == SCALAR_INT) && (aux_MATS_read == true))) {
                cpp_current_dict["MATS"] = var_MATS_0d_int_Scalar;
              }
              if (((aux_last_type_read_for_MTS == SCALAR_INT) && (aux_MTS_read == true))) {
                cpp_current_dict["MTS"] = var_MTS_0d_int_Scalar;
              }
              if (((aux_last_type_read_for_NEI == SCALAR_INT) && (aux_NEI_read == true))) {
                cpp_current_dict["NEI"] = var_NEI_0d_int_Scalar;
              }
              if (((aux_last_type_read_for_XMFS == SCALAR_DOUBLE) && (aux_XMFS_read == true))) {
                cpp_current_dict["XMFS"] = var_XMFS_0d_double_Scalar;
              }
              if (((aux_last_type_read_for_XLFSS == SCALAR_DOUBLE) && (aux_XLFSS_read == true))) {
                cpp_current_dict["XLFSS"] = var_XLFSS_0d_double_Scalar;
              }
              if ((var_E_1d_double_NestedVector.get_last_index() != -1)) {
                auto& cpp_curvar0 = var_E_1d_double_NestedVector;
                cpp_current_dict["E"] = py::dict();
                py::dict cpp_curdict0 = cpp_current_dict["E"];
                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                  cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                }
              }
              if ((var_WE_1d_double_NestedVector.get_last_index() != -1)) {
                auto& cpp_curvar0 = var_WE_1d_double_NestedVector;
                cpp_current_dict["WE"] = py::dict();
                py::dict cpp_curdict0 = cpp_current_dict["WE"];
                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                  cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                }
              }
              cpp_current_dict = cpp_parent_dict;
            }
          }

          for (int var_j_0d_int_Scalar = 1;
             var_j_0d_int_Scalar <= var_NI_0d_int_Scalar; var_j_0d_int_Scalar++) {
            bool aux_j_read = true;
            // open section ni_subsubsubsec

            {
                py::dict cpp_parent_dict = cpp_current_dict;
                if (! cpp_parent_dict.contains("ni_subsubsubsec")) {
                  cpp_parent_dict["ni_subsubsubsec"] = py::dict();
                }
                py::dict cpp_current_dict = cpp_parent_dict["ni_subsubsubsec"];

                if (! cpp_current_dict.contains(py::cast(var_j_0d_int_Scalar))) {
                  cpp_current_dict[py::cast(var_j_0d_int_Scalar)] = py::dict();
                }
                cpp_current_dict = cpp_current_dict[py::cast(var_j_0d_int_Scalar)];
              // variable declarations
              int var_LT_0d_int_Scalar;
              bool aux_LT_read = false;
              vartype aux_last_type_read_for_LT = UNKNOWN;
              int var_LB_0d_int_Scalar;
              bool aux_LB_read = false;
              vartype aux_last_type_read_for_LB = UNKNOWN;
              int cpp_int_val;
              bool aux_cpp_int_val_read = false;
              vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
              int var_NP_0d_int_Scalar;
              bool aux_NP_read = false;
              vartype aux_last_type_read_for_NP = UNKNOWN;
              NestedVector<double> var_Ek_1d_double_NestedVector;
              vartype aux_last_type_read_for_Ek = UNKNOWN;
              NestedVector<double> var_Fk_1d_double_NestedVector;
              vartype aux_last_type_read_for_Fk = UNKNOWN;
              NestedVector<double> var_El_1d_double_NestedVector;
              vartype aux_last_type_read_for_El = UNKNOWN;
              NestedVector<double> var_Fl_1d_double_NestedVector;
              vartype aux_last_type_read_for_Fl = UNKNOWN;
              int var_LS_0d_int_Scalar;
              bool aux_LS_read = false;
              vartype aux_last_type_read_for_LS = UNKNOWN;
              int var_NT_0d_int_Scalar;
              bool aux_NT_read = false;
              vartype aux_last_type_read_for_NT = UNKNOWN;
              int var_NE_0d_int_Scalar;
              bool aux_NE_read = false;
              vartype aux_last_type_read_for_NE = UNKNOWN;
              NestedVector<double> var_E_1d_double_NestedVector;
              vartype aux_last_type_read_for_E = UNKNOWN;
              Matrix2d<double> var_F_2d_double_Matrix2d;
              vartype aux_last_type_read_for_F = UNKNOWN;
              int var_NER_0d_int_Scalar;
              bool aux_NER_read = false;
              vartype aux_last_type_read_for_NER = UNKNOWN;
              NestedVector<double> var_ER_1d_double_NestedVector;
              vartype aux_last_type_read_for_ER = UNKNOWN;
              NestedVector<double> var_EC_1d_double_NestedVector;
              vartype aux_last_type_read_for_EC = UNKNOWN;
              NestedVector<double> var_F_1d_double_NestedVector;
              // evaluate if-elif-else clause
              {
                bool cpp_found_match = false;
                if (! cpp_found_match) {
                  // if statement evaluation with lookahead
                  {
                    std::streampos cpp_old_streampos = cont.tellg();
                    {
                      // variable declarations
                      int& glob_var_LT_0d_int_Scalar = var_LT_0d_int_Scalar;
                      int var_LT_0d_int_Scalar = glob_var_LT_0d_int_Scalar;
                      bool& glob_aux_LT_read = aux_LT_read;
                      bool aux_LT_read = glob_aux_LT_read;
                      vartype aux_last_type_read_for_LT = UNKNOWN;
                      int& glob_var_LB_0d_int_Scalar = var_LB_0d_int_Scalar;
                      int var_LB_0d_int_Scalar = glob_var_LB_0d_int_Scalar;
                      bool& glob_aux_LB_read = aux_LB_read;
                      bool aux_LB_read = glob_aux_LB_read;
                      vartype aux_last_type_read_for_LB = UNKNOWN;
                      int& glob_cpp_int_val = cpp_int_val;
                      int cpp_int_val = glob_cpp_int_val;
                      bool& glob_aux_cpp_int_val_read = aux_cpp_int_val_read;
                      bool aux_cpp_int_val_read = glob_aux_cpp_int_val_read;
                      vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                      int& glob_var_NP_0d_int_Scalar = var_NP_0d_int_Scalar;
                      int var_NP_0d_int_Scalar = glob_var_NP_0d_int_Scalar;
                      bool& glob_aux_NP_read = aux_NP_read;
                      bool aux_NP_read = glob_aux_NP_read;
                      vartype aux_last_type_read_for_NP = UNKNOWN;
                      cpp_line = cpp_read_line(cont);
                      // read LIST record
                      // assign expression to variable LT
                      var_LT_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                      aux_LT_read = true;
                      if ((aux_last_type_read_for_LT != SCALAR_INT && aux_last_type_read_for_LT != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_LT = SCALAR_INT;
                      // assign expression to variable LB
                      var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                      aux_LB_read = true;
                      if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_LB = SCALAR_INT;
                      // assign expression to variable cpp_int_val
                      cpp_int_val = cpp_read_int_field(cpp_line, 4);
                      aux_cpp_int_val_read = true;
                      if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                      // assign expression to variable NP
                      var_NP_0d_int_Scalar = (cpp_int_val/2);
                      aux_NP_read = true;
                      if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_NP = SCALAR_INT;
                      if ((! (aux_NP_read == true))) {
                        // assign expression to variable NP
                        var_NP_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                        aux_NP_read = true;
                        if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NP = SCALAR_INT;
                      }
                      if (((((((((aux_LB_read == true)) && ((var_LB_0d_int_Scalar)>=(0)))))&&((((aux_LB_read == true)) && ((var_LB_0d_int_Scalar)<=(4)))))))) {
                        cpp_found_match = true;
                      }
                      cont.seekg(cpp_old_streampos);
                    }
                    if (cpp_found_match) {
                      cpp_line = cpp_read_line(cont);
                      // read LIST record
                      // assign expression to variable LT
                      var_LT_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                      aux_LT_read = true;
                      if ((aux_last_type_read_for_LT != SCALAR_INT && aux_last_type_read_for_LT != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_LT = SCALAR_INT;
                      // assign expression to variable LB
                      var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                      aux_LB_read = true;
                      if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_LB = SCALAR_INT;
                      // assign expression to variable cpp_int_val
                      cpp_int_val = cpp_read_int_field(cpp_line, 4);
                      aux_cpp_int_val_read = true;
                      if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                      // assign expression to variable NP
                      var_NP_0d_int_Scalar = (cpp_int_val/2);
                      aux_NP_read = true;
                      if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                        raise_vartype_mismatch();
                      }
                      aux_last_type_read_for_NP = SCALAR_INT;
                      if ((! (aux_NP_read == true))) {
                        // assign expression to variable NP
                        var_NP_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                        aux_NP_read = true;
                        if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NP = SCALAR_INT;
                      }
                      {
                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                        int cpp_j = 0;
                        // read LIST body

                        for (int var_q_0d_int_Scalar = 1;
                           var_q_0d_int_Scalar <= (var_NP_0d_int_Scalar-var_LT_0d_int_Scalar); var_q_0d_int_Scalar++) {
                          bool aux_q_read = true;
                          // read LIST body
                          // assign expression to variable Ek
                          var_Ek_1d_double_NestedVector.set(var_q_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_Ek != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_Ek != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_Ek = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable Fk
                          var_Fk_1d_double_NestedVector.set(var_q_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_Fk != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_Fk != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_Fk = NESTEDVECTOR_DOUBLE;
                        }

                        for (int var_q_0d_int_Scalar = 1;
                           var_q_0d_int_Scalar <= var_LT_0d_int_Scalar; var_q_0d_int_Scalar++) {
                          bool aux_q_read = true;
                          // read LIST body
                          // assign expression to variable El
                          var_El_1d_double_NestedVector.set(var_q_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_El != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_El != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_El = NESTEDVECTOR_DOUBLE;
                          // assign expression to variable Fl
                          var_Fl_1d_double_NestedVector.set(var_q_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                          if ((aux_last_type_read_for_Fl != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_Fl != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_Fl = NESTEDVECTOR_DOUBLE;
                        }
                      }
                    }
                  }
                }
                if (! cpp_found_match) {
                  if (! cpp_found_match) {
                    // if statement evaluation with lookahead
                    {
                      std::streampos cpp_old_streampos = cont.tellg();
                      {
                        // variable declarations
                        int& glob_var_LS_0d_int_Scalar = var_LS_0d_int_Scalar;
                        int var_LS_0d_int_Scalar = glob_var_LS_0d_int_Scalar;
                        bool& glob_aux_LS_read = aux_LS_read;
                        bool aux_LS_read = glob_aux_LS_read;
                        vartype aux_last_type_read_for_LS = UNKNOWN;
                        int& glob_var_LB_0d_int_Scalar = var_LB_0d_int_Scalar;
                        int var_LB_0d_int_Scalar = glob_var_LB_0d_int_Scalar;
                        bool& glob_aux_LB_read = aux_LB_read;
                        bool aux_LB_read = glob_aux_LB_read;
                        vartype aux_last_type_read_for_LB = UNKNOWN;
                        int& glob_var_NT_0d_int_Scalar = var_NT_0d_int_Scalar;
                        int var_NT_0d_int_Scalar = glob_var_NT_0d_int_Scalar;
                        bool& glob_aux_NT_read = aux_NT_read;
                        bool aux_NT_read = glob_aux_NT_read;
                        vartype aux_last_type_read_for_NT = UNKNOWN;
                        int& glob_var_NE_0d_int_Scalar = var_NE_0d_int_Scalar;
                        int var_NE_0d_int_Scalar = glob_var_NE_0d_int_Scalar;
                        bool& glob_aux_NE_read = aux_NE_read;
                        bool aux_NE_read = glob_aux_NE_read;
                        vartype aux_last_type_read_for_NE = UNKNOWN;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable LS
                        var_LS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                        aux_LS_read = true;
                        if ((aux_last_type_read_for_LS != SCALAR_INT && aux_last_type_read_for_LS != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LS = SCALAR_INT;
                        // assign expression to variable LB
                        var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                        aux_LB_read = true;
                        if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LB = SCALAR_INT;
                        // assign expression to variable NT
                        var_NT_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                        aux_NT_read = true;
                        if ((aux_last_type_read_for_NT != SCALAR_INT && aux_last_type_read_for_NT != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NT = SCALAR_INT;
                        // assign expression to variable NE
                        var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                        aux_NE_read = true;
                        if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NE = SCALAR_INT;
                        if (((((((((aux_LB_read == true)) && ((var_LB_0d_int_Scalar)==(5)))))&&((((aux_LS_read == true)) && ((var_LS_0d_int_Scalar)==(0)))))))) {
                          cpp_found_match = true;
                        }
                        cont.seekg(cpp_old_streampos);
                      }
                      if (cpp_found_match) {
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable LS
                        var_LS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                        aux_LS_read = true;
                        if ((aux_last_type_read_for_LS != SCALAR_INT && aux_last_type_read_for_LS != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LS = SCALAR_INT;
                        // assign expression to variable LB
                        var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                        aux_LB_read = true;
                        if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LB = SCALAR_INT;
                        // assign expression to variable NT
                        var_NT_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                        aux_NT_read = true;
                        if ((aux_last_type_read_for_NT != SCALAR_INT && aux_last_type_read_for_NT != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NT = SCALAR_INT;
                        // assign expression to variable NE
                        var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                        aux_NE_read = true;
                        if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NE = SCALAR_INT;
                        {
                          int cpp_npl = cpp_read_int_field(cpp_line, 4);
                          cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                          int cpp_j = 0;
                          // read LIST body

                          for (int var_q_0d_int_Scalar = 1;
                             var_q_0d_int_Scalar <= var_NE_0d_int_Scalar; var_q_0d_int_Scalar++) {
                            bool aux_q_read = true;
                            // read LIST body
                            // assign expression to variable E
                            var_E_1d_double_NestedVector.set(var_q_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
                          }
                          var_F_2d_double_Matrix2d.init(1, (var_NE_0d_int_Scalar-1), 1, (var_NE_0d_int_Scalar-1), false, false);

                          for (int var_q_0d_int_Scalar = 1;
                             var_q_0d_int_Scalar <= (var_NE_0d_int_Scalar-1); var_q_0d_int_Scalar++) {
                            bool aux_q_read = true;
                            // read LIST body

                            for (int var_qp_0d_int_Scalar = 1;
                               var_qp_0d_int_Scalar <= (var_NE_0d_int_Scalar-1); var_qp_0d_int_Scalar++) {
                              bool aux_qp_read = true;
                              // read LIST body
                              // assign expression to variable F
                              var_F_2d_double_Matrix2d(var_q_0d_int_Scalar, var_qp_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                              if ((aux_last_type_read_for_F != MATRIX2D_DOUBLE && aux_last_type_read_for_F != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_F = MATRIX2D_DOUBLE;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (! cpp_found_match) {
                  if (! cpp_found_match) {
                    // if statement evaluation with lookahead
                    {
                      std::streampos cpp_old_streampos = cont.tellg();
                      {
                        // variable declarations
                        int& glob_var_LS_0d_int_Scalar = var_LS_0d_int_Scalar;
                        int var_LS_0d_int_Scalar = glob_var_LS_0d_int_Scalar;
                        bool& glob_aux_LS_read = aux_LS_read;
                        bool aux_LS_read = glob_aux_LS_read;
                        vartype aux_last_type_read_for_LS = UNKNOWN;
                        int& glob_var_LB_0d_int_Scalar = var_LB_0d_int_Scalar;
                        int var_LB_0d_int_Scalar = glob_var_LB_0d_int_Scalar;
                        bool& glob_aux_LB_read = aux_LB_read;
                        bool aux_LB_read = glob_aux_LB_read;
                        vartype aux_last_type_read_for_LB = UNKNOWN;
                        int& glob_var_NT_0d_int_Scalar = var_NT_0d_int_Scalar;
                        int var_NT_0d_int_Scalar = glob_var_NT_0d_int_Scalar;
                        bool& glob_aux_NT_read = aux_NT_read;
                        bool aux_NT_read = glob_aux_NT_read;
                        vartype aux_last_type_read_for_NT = UNKNOWN;
                        int& glob_var_NE_0d_int_Scalar = var_NE_0d_int_Scalar;
                        int var_NE_0d_int_Scalar = glob_var_NE_0d_int_Scalar;
                        bool& glob_aux_NE_read = aux_NE_read;
                        bool aux_NE_read = glob_aux_NE_read;
                        vartype aux_last_type_read_for_NE = UNKNOWN;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable LS
                        var_LS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                        aux_LS_read = true;
                        if ((aux_last_type_read_for_LS != SCALAR_INT && aux_last_type_read_for_LS != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LS = SCALAR_INT;
                        // assign expression to variable LB
                        var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                        aux_LB_read = true;
                        if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LB = SCALAR_INT;
                        // assign expression to variable NT
                        var_NT_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                        aux_NT_read = true;
                        if ((aux_last_type_read_for_NT != SCALAR_INT && aux_last_type_read_for_NT != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NT = SCALAR_INT;
                        // assign expression to variable NE
                        var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                        aux_NE_read = true;
                        if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NE = SCALAR_INT;
                        if (((((((((aux_LB_read == true)) && ((var_LB_0d_int_Scalar)==(5)))))&&((((aux_LS_read == true)) && ((var_LS_0d_int_Scalar)==(1)))))))) {
                          cpp_found_match = true;
                        }
                        cont.seekg(cpp_old_streampos);
                      }
                      if (cpp_found_match) {
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable LS
                        var_LS_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                        aux_LS_read = true;
                        if ((aux_last_type_read_for_LS != SCALAR_INT && aux_last_type_read_for_LS != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LS = SCALAR_INT;
                        // assign expression to variable LB
                        var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                        aux_LB_read = true;
                        if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LB = SCALAR_INT;
                        // assign expression to variable NT
                        var_NT_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                        aux_NT_read = true;
                        if ((aux_last_type_read_for_NT != SCALAR_INT && aux_last_type_read_for_NT != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NT = SCALAR_INT;
                        // assign expression to variable NE
                        var_NE_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                        aux_NE_read = true;
                        if ((aux_last_type_read_for_NE != SCALAR_INT && aux_last_type_read_for_NE != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NE = SCALAR_INT;
                        {
                          int cpp_npl = cpp_read_int_field(cpp_line, 4);
                          cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                          int cpp_j = 0;
                          // read LIST body

                          for (int var_q_0d_int_Scalar = 1;
                             var_q_0d_int_Scalar <= var_NE_0d_int_Scalar; var_q_0d_int_Scalar++) {
                            bool aux_q_read = true;
                            // read LIST body
                            // assign expression to variable E
                            var_E_1d_double_NestedVector.set(var_q_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
                          }
                          var_F_2d_double_Matrix2d.init(1, (var_NE_0d_int_Scalar-1), 1, (var_NE_0d_int_Scalar-1), true, false);

                          for (int var_q_0d_int_Scalar = 1;
                             var_q_0d_int_Scalar <= (var_NE_0d_int_Scalar-1); var_q_0d_int_Scalar++) {
                            bool aux_q_read = true;
                            // read LIST body

                            for (int var_qp_0d_int_Scalar = var_q_0d_int_Scalar;
                               var_qp_0d_int_Scalar <= (var_NE_0d_int_Scalar-1); var_qp_0d_int_Scalar++) {
                              bool aux_qp_read = true;
                              // read LIST body
                              // assign expression to variable F
                              var_F_2d_double_Matrix2d(var_q_0d_int_Scalar, var_qp_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                              if ((aux_last_type_read_for_F != MATRIX2D_DOUBLE && aux_last_type_read_for_F != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_F = MATRIX2D_DOUBLE;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (! cpp_found_match) {
                  if (! cpp_found_match) {
                    // if statement evaluation with lookahead
                    {
                      std::streampos cpp_old_streampos = cont.tellg();
                      {
                        // variable declarations
                        int& glob_var_LB_0d_int_Scalar = var_LB_0d_int_Scalar;
                        int var_LB_0d_int_Scalar = glob_var_LB_0d_int_Scalar;
                        bool& glob_aux_LB_read = aux_LB_read;
                        bool aux_LB_read = glob_aux_LB_read;
                        vartype aux_last_type_read_for_LB = UNKNOWN;
                        int& glob_var_NT_0d_int_Scalar = var_NT_0d_int_Scalar;
                        int var_NT_0d_int_Scalar = glob_var_NT_0d_int_Scalar;
                        bool& glob_aux_NT_read = aux_NT_read;
                        bool aux_NT_read = glob_aux_NT_read;
                        vartype aux_last_type_read_for_NT = UNKNOWN;
                        int& glob_var_NER_0d_int_Scalar = var_NER_0d_int_Scalar;
                        int var_NER_0d_int_Scalar = glob_var_NER_0d_int_Scalar;
                        bool& glob_aux_NER_read = aux_NER_read;
                        bool aux_NER_read = glob_aux_NER_read;
                        vartype aux_last_type_read_for_NER = UNKNOWN;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable LB
                        var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                        aux_LB_read = true;
                        if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LB = SCALAR_INT;
                        // assign expression to variable NT
                        var_NT_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                        aux_NT_read = true;
                        if ((aux_last_type_read_for_NT != SCALAR_INT && aux_last_type_read_for_NT != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NT = SCALAR_INT;
                        // assign expression to variable NER
                        var_NER_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                        aux_NER_read = true;
                        if ((aux_last_type_read_for_NER != SCALAR_INT && aux_last_type_read_for_NER != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NER = SCALAR_INT;
                        if ((((((((aux_LB_read == true)) && ((var_LB_0d_int_Scalar)==(6)))))))) {
                          cpp_found_match = true;
                        }
                        cont.seekg(cpp_old_streampos);
                      }
                      if (cpp_found_match) {
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable LB
                        var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                        aux_LB_read = true;
                        if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LB = SCALAR_INT;
                        // assign expression to variable NT
                        var_NT_0d_int_Scalar = cpp_read_int_field(cpp_line, 4);
                        aux_NT_read = true;
                        if ((aux_last_type_read_for_NT != SCALAR_INT && aux_last_type_read_for_NT != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NT = SCALAR_INT;
                        // assign expression to variable NER
                        var_NER_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                        aux_NER_read = true;
                        if ((aux_last_type_read_for_NER != SCALAR_INT && aux_last_type_read_for_NER != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NER = SCALAR_INT;
                        {
                          int cpp_npl = cpp_read_int_field(cpp_line, 4);
                          cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                          int cpp_j = 0;
                          // read LIST body

                          for (int var_q_0d_int_Scalar = 1;
                             var_q_0d_int_Scalar <= var_NER_0d_int_Scalar; var_q_0d_int_Scalar++) {
                            bool aux_q_read = true;
                            // read LIST body
                            // assign expression to variable ER
                            var_ER_1d_double_NestedVector.set(var_q_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_ER != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_ER != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_ER = NESTEDVECTOR_DOUBLE;
                          }

                          for (int var_q_0d_int_Scalar = 1;
                             var_q_0d_int_Scalar <= ((var_NT_0d_int_Scalar-1)/var_NER_0d_int_Scalar); var_q_0d_int_Scalar++) {
                            bool aux_q_read = true;
                            // read LIST body
                            // assign expression to variable EC
                            var_EC_1d_double_NestedVector.set(var_q_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_EC != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_EC != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_EC = NESTEDVECTOR_DOUBLE;
                          }
                          var_F_2d_double_Matrix2d.init(1, (var_NER_0d_int_Scalar-1), 1, (((var_NT_0d_int_Scalar-1)/var_NER_0d_int_Scalar)-1), false, false);

                          for (int var_q_0d_int_Scalar = 1;
                             var_q_0d_int_Scalar <= (var_NER_0d_int_Scalar-1); var_q_0d_int_Scalar++) {
                            bool aux_q_read = true;
                            // read LIST body

                            for (int var_l_0d_int_Scalar = 1;
                               var_l_0d_int_Scalar <= (((var_NT_0d_int_Scalar-1)/var_NER_0d_int_Scalar)-1); var_l_0d_int_Scalar++) {
                              bool aux_l_read = true;
                              // read LIST body
                              // assign expression to variable F
                              var_F_2d_double_Matrix2d(var_q_0d_int_Scalar, var_l_0d_int_Scalar) = cpp_floatvec[cpp_j++];
                              if ((aux_last_type_read_for_F != MATRIX2D_DOUBLE && aux_last_type_read_for_F != UNKNOWN)) {
                                raise_vartype_mismatch();
                              }
                              aux_last_type_read_for_F = MATRIX2D_DOUBLE;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (! cpp_found_match) {
                  if (! cpp_found_match) {
                    // if statement evaluation with lookahead
                    {
                      std::streampos cpp_old_streampos = cont.tellg();
                      {
                        // variable declarations
                        int& glob_var_LT_0d_int_Scalar = var_LT_0d_int_Scalar;
                        int var_LT_0d_int_Scalar = glob_var_LT_0d_int_Scalar;
                        bool& glob_aux_LT_read = aux_LT_read;
                        bool aux_LT_read = glob_aux_LT_read;
                        vartype aux_last_type_read_for_LT = UNKNOWN;
                        int& glob_var_LB_0d_int_Scalar = var_LB_0d_int_Scalar;
                        int var_LB_0d_int_Scalar = glob_var_LB_0d_int_Scalar;
                        bool& glob_aux_LB_read = aux_LB_read;
                        bool aux_LB_read = glob_aux_LB_read;
                        vartype aux_last_type_read_for_LB = UNKNOWN;
                        int& glob_cpp_int_val = cpp_int_val;
                        int cpp_int_val = glob_cpp_int_val;
                        bool& glob_aux_cpp_int_val_read = aux_cpp_int_val_read;
                        bool aux_cpp_int_val_read = glob_aux_cpp_int_val_read;
                        vartype aux_last_type_read_for_cpp_int_val = UNKNOWN;
                        int& glob_var_NP_0d_int_Scalar = var_NP_0d_int_Scalar;
                        int var_NP_0d_int_Scalar = glob_var_NP_0d_int_Scalar;
                        bool& glob_aux_NP_read = aux_NP_read;
                        bool aux_NP_read = glob_aux_NP_read;
                        vartype aux_last_type_read_for_NP = UNKNOWN;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable LT
                        var_LT_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                        aux_LT_read = true;
                        if ((aux_last_type_read_for_LT != SCALAR_INT && aux_last_type_read_for_LT != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LT = SCALAR_INT;
                        // assign expression to variable LB
                        var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                        aux_LB_read = true;
                        if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LB = SCALAR_INT;
                        // assign expression to variable cpp_int_val
                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                        aux_cpp_int_val_read = true;
                        if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                        // assign expression to variable NP
                        var_NP_0d_int_Scalar = (cpp_int_val/2);
                        aux_NP_read = true;
                        if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NP = SCALAR_INT;
                        if ((! (aux_NP_read == true))) {
                          // assign expression to variable NP
                          var_NP_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                          aux_NP_read = true;
                          if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NP = SCALAR_INT;
                        }
                        if ((((((((((((((aux_LB_read == true)) && ((var_LB_0d_int_Scalar)==(8))))))||(((((aux_LB_read == true)) && ((var_LB_0d_int_Scalar)==(9)))))))))&&((((aux_LT_read == true)) && ((var_LT_0d_int_Scalar)==(0)))))))) {
                          cpp_found_match = true;
                        }
                        cont.seekg(cpp_old_streampos);
                      }
                      if (cpp_found_match) {
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable LT
                        var_LT_0d_int_Scalar = cpp_read_int_field(cpp_line, 2);
                        aux_LT_read = true;
                        if ((aux_last_type_read_for_LT != SCALAR_INT && aux_last_type_read_for_LT != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LT = SCALAR_INT;
                        // assign expression to variable LB
                        var_LB_0d_int_Scalar = cpp_read_int_field(cpp_line, 3);
                        aux_LB_read = true;
                        if ((aux_last_type_read_for_LB != SCALAR_INT && aux_last_type_read_for_LB != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_LB = SCALAR_INT;
                        // assign expression to variable cpp_int_val
                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                        aux_cpp_int_val_read = true;
                        if ((aux_last_type_read_for_cpp_int_val != SCALAR_INT && aux_last_type_read_for_cpp_int_val != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_cpp_int_val = SCALAR_INT;
                        // assign expression to variable NP
                        var_NP_0d_int_Scalar = (cpp_int_val/2);
                        aux_NP_read = true;
                        if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                          raise_vartype_mismatch();
                        }
                        aux_last_type_read_for_NP = SCALAR_INT;
                        if ((! (aux_NP_read == true))) {
                          // assign expression to variable NP
                          var_NP_0d_int_Scalar = cpp_read_int_field(cpp_line, 5);
                          aux_NP_read = true;
                          if ((aux_last_type_read_for_NP != SCALAR_INT && aux_last_type_read_for_NP != UNKNOWN)) {
                            raise_vartype_mismatch();
                          }
                          aux_last_type_read_for_NP = SCALAR_INT;
                        }
                        {
                          int cpp_npl = cpp_read_int_field(cpp_line, 4);
                          cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                          int cpp_j = 0;
                          // read LIST body

                          for (int var_q_0d_int_Scalar = 1;
                             var_q_0d_int_Scalar <= var_NP_0d_int_Scalar; var_q_0d_int_Scalar++) {
                            bool aux_q_read = true;
                            // read LIST body
                            // assign expression to variable E
                            var_E_1d_double_NestedVector.set(var_q_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_E != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_E != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_E = NESTEDVECTOR_DOUBLE;
                            // assign expression to variable F
                            var_F_1d_double_NestedVector.set(var_q_0d_int_Scalar, cpp_floatvec[cpp_j++]);
                            if ((aux_last_type_read_for_F != NESTEDVECTOR_DOUBLE && aux_last_type_read_for_F != UNKNOWN)) {
                              raise_vartype_mismatch();
                            }
                            aux_last_type_read_for_F = NESTEDVECTOR_DOUBLE;
                          }
                        }
                      }
                    }
                  }
                }
              }
              // store data in Python dictionary
              if (((aux_last_type_read_for_LT == SCALAR_INT) && (aux_LT_read == true))) {
                cpp_current_dict["LT"] = var_LT_0d_int_Scalar;
              }
              if (((aux_last_type_read_for_LB == SCALAR_INT) && (aux_LB_read == true))) {
                cpp_current_dict["LB"] = var_LB_0d_int_Scalar;
              }
              if (((aux_last_type_read_for_NP == SCALAR_INT) && (aux_NP_read == true))) {
                cpp_current_dict["NP"] = var_NP_0d_int_Scalar;
              }
              if ((var_Ek_1d_double_NestedVector.get_last_index() != -1)) {
                auto& cpp_curvar0 = var_Ek_1d_double_NestedVector;
                cpp_current_dict["Ek"] = py::dict();
                py::dict cpp_curdict0 = cpp_current_dict["Ek"];
                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                  cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                }
              }
              if ((var_Fk_1d_double_NestedVector.get_last_index() != -1)) {
                auto& cpp_curvar0 = var_Fk_1d_double_NestedVector;
                cpp_current_dict["Fk"] = py::dict();
                py::dict cpp_curdict0 = cpp_current_dict["Fk"];
                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                  cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                }
              }
              if ((var_El_1d_double_NestedVector.get_last_index() != -1)) {
                auto& cpp_curvar0 = var_El_1d_double_NestedVector;
                cpp_current_dict["El"] = py::dict();
                py::dict cpp_curdict0 = cpp_current_dict["El"];
                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                  cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                }
              }
              if ((var_Fl_1d_double_NestedVector.get_last_index() != -1)) {
                auto& cpp_curvar0 = var_Fl_1d_double_NestedVector;
                cpp_current_dict["Fl"] = py::dict();
                py::dict cpp_curdict0 = cpp_current_dict["Fl"];
                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                  cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                }
              }
              if (((aux_last_type_read_for_LS == SCALAR_INT) && (aux_LS_read == true))) {
                cpp_current_dict["LS"] = var_LS_0d_int_Scalar;
              }
              if (((aux_last_type_read_for_NT == SCALAR_INT) && (aux_NT_read == true))) {
                cpp_current_dict["NT"] = var_NT_0d_int_Scalar;
              }
              if (((aux_last_type_read_for_NE == SCALAR_INT) && (aux_NE_read == true))) {
                cpp_current_dict["NE"] = var_NE_0d_int_Scalar;
              }
              if ((var_E_1d_double_NestedVector.get_last_index() != -1)) {
                auto& cpp_curvar0 = var_E_1d_double_NestedVector;
                cpp_current_dict["E"] = py::dict();
                py::dict cpp_curdict0 = cpp_current_dict["E"];
                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                  cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                }
              }
              if (var_F_2d_double_Matrix2d.did_read()) {
                  cpp_current_dict["F"] = py::dict();
                  py::dict cpp_curdict0 = cpp_current_dict["F"];
                  for (int cpp_i1 = var_F_2d_double_Matrix2d.get_row_start_index(); cpp_i1 <= var_F_2d_double_Matrix2d.get_row_last_index(); cpp_i1++) {
                    cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                    py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                    for (int cpp_i2 = var_F_2d_double_Matrix2d.get_col_start_index(cpp_i1); cpp_i2 <= var_F_2d_double_Matrix2d.get_col_last_index(cpp_i1); cpp_i2++) {
                      cpp_curdict1[py::cast(cpp_i2)] = var_F_2d_double_Matrix2d(cpp_i1, cpp_i2);
                    }
                  }
              }
              if (((aux_last_type_read_for_NER == SCALAR_INT) && (aux_NER_read == true))) {
                cpp_current_dict["NER"] = var_NER_0d_int_Scalar;
              }
              if ((var_ER_1d_double_NestedVector.get_last_index() != -1)) {
                auto& cpp_curvar0 = var_ER_1d_double_NestedVector;
                cpp_current_dict["ER"] = py::dict();
                py::dict cpp_curdict0 = cpp_current_dict["ER"];
                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                  cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                }
              }
              if ((var_EC_1d_double_NestedVector.get_last_index() != -1)) {
                auto& cpp_curvar0 = var_EC_1d_double_NestedVector;
                cpp_current_dict["EC"] = py::dict();
                py::dict cpp_curdict0 = cpp_current_dict["EC"];
                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                  cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                }
              }
              if ((var_F_1d_double_NestedVector.get_last_index() != -1)) {
                auto& cpp_curvar0 = var_F_1d_double_NestedVector;
                cpp_current_dict["F"] = py::dict();
                py::dict cpp_curdict0 = cpp_current_dict["F"];
                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                  cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                }
              }
              cpp_current_dict = cpp_parent_dict;
            }
          }
          // store data in Python dictionary
          if (((aux_last_type_read_for_XMF1 == SCALAR_DOUBLE) && (aux_XMF1_read == true))) {
            cpp_current_dict["XMF1"] = var_XMF1_0d_double_Scalar;
          }
          if (((aux_last_type_read_for_XLFS1 == SCALAR_DOUBLE) && (aux_XLFS1_read == true))) {
            cpp_current_dict["XLFS1"] = var_XLFS1_0d_double_Scalar;
          }
          if (((aux_last_type_read_for_MAT1 == SCALAR_INT) && (aux_MAT1_read == true))) {
            cpp_current_dict["MAT1"] = var_MAT1_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_MT1 == SCALAR_INT) && (aux_MT1_read == true))) {
            cpp_current_dict["MT1"] = var_MT1_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_NC == SCALAR_INT) && (aux_NC_read == true))) {
            cpp_current_dict["NC"] = var_NC_0d_int_Scalar;
          }
          if (((aux_last_type_read_for_NI == SCALAR_INT) && (aux_NI_read == true))) {
            cpp_current_dict["NI"] = var_NI_0d_int_Scalar;
          }
          cpp_current_dict = cpp_parent_dict;
        }
      }
      // store data in Python dictionary
      if (((aux_last_type_read_for_QM == SCALAR_DOUBLE) && (aux_QM_read == true))) {
        cpp_current_dict["QM"] = var_QM_0d_double_Scalar;
      }
      if (((aux_last_type_read_for_QI == SCALAR_DOUBLE) && (aux_QI_read == true))) {
        cpp_current_dict["QI"] = var_QI_0d_double_Scalar;
      }
      if (((aux_last_type_read_for_IZAP == SCALAR_INT) && (aux_IZAP_read == true))) {
        cpp_current_dict["IZAP"] = var_IZAP_0d_int_Scalar;
      }
      if (((aux_last_type_read_for_LFS == SCALAR_INT) && (aux_LFS_read == true))) {
        cpp_current_dict["LFS"] = var_LFS_0d_int_Scalar;
      }
      if (((aux_last_type_read_for_NL == SCALAR_INT) && (aux_NL_read == true))) {
        cpp_current_dict["NL"] = var_NL_0d_int_Scalar;
      }
      cpp_current_dict = cpp_parent_dict;
    }
  }
  cpp_read_send(cont);
  // store data in Python dictionary
  if (((aux_last_type_read_for_MAT == SCALAR_INT) && (aux_MAT_read == true))) {
    cpp_current_dict["MAT"] = var_MAT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MF == SCALAR_INT) && (aux_MF_read == true))) {
    cpp_current_dict["MF"] = var_MF_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_MT == SCALAR_INT) && (aux_MT_read == true))) {
    cpp_current_dict["MT"] = var_MT_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_ZA == SCALAR_DOUBLE) && (aux_ZA_read == true))) {
    cpp_current_dict["ZA"] = var_ZA_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_AWR == SCALAR_DOUBLE) && (aux_AWR_read == true))) {
    cpp_current_dict["AWR"] = var_AWR_0d_double_Scalar;
  }
  if (((aux_last_type_read_for_LIS == SCALAR_INT) && (aux_LIS_read == true))) {
    cpp_current_dict["LIS"] = var_LIS_0d_int_Scalar;
  }
  if (((aux_last_type_read_for_NS == SCALAR_INT) && (aux_NS_read == true))) {
    cpp_current_dict["NS"] = var_NS_0d_int_Scalar;
  }
  return cpp_current_dict;
}

py::dict parse_endf_istream(std::istream& cont, py::object exclude, py::object include) {
  bool is_firstline = true;
  std::streampos curpos;
  py::dict mfmt_dict;
  py::dict curdict;
  int mf;
  int mt;
  std::string cpp_line;
  std::vector<std::string> verbatim_section;
  curpos = cont.tellg();
  while (std::getline(cont, cpp_line)) {
    mf = std::stoi(cpp_line.substr(70, 2));
    mt = std::stoi(cpp_line.substr(72, 3));
    if ((mf == 0 && mt == 0 && is_firstline)) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf0mt0_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 1 && mt == 460) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf1mt460_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 1 && mt == 458) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf1mt458_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 1 && mt == 456) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf1mt456_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 1 && mt == 455) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf1mt455_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 1 && mt == 452) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf1mt452_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 1 && mt == 451) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf1mt451_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 2 && mt == 151) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf2mt151_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 3) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf3_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 4) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf4_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 5) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf5_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 6) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf6_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 7 && mt == 4) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf7mt4_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 7 && mt == 2) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf7mt2_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 8 && mt == 459) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf8mt459_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 8 && mt == 457) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf8mt457_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 8 && mt == 454) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf8mt454_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 8) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf8_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 9) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf9_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 10) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf10_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 12) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf12_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 13) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf13_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 14) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf14_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 15) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf15_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 23) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf23_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 26) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf26_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 27) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf27_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 28) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf28_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 31) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf31_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 32) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf32_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 33) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf33_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 34) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf34_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 35) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf35_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if (mf == 40) {
      cont.seekg(curpos);
      if (should_parse_section(mf, mt, exclude, include)) {
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = parse_mf40_istream(cont);
        }

      } else {
        verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
        {
          py::dict curdict = mfmt_dict;
          if (! curdict.contains(py::cast(mf))) {
            curdict[py::cast(mf)] = py::dict();
          }
          curdict = curdict[py::cast(mf)];
          curdict[py::cast(mt)] = verbatim_section;
        }
      }

    } else if ((mf != 0 && mt != 0)) {
      verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
      {
        py::dict curdict = mfmt_dict;
        if (! curdict.contains(py::cast(mf))) {
          curdict[py::cast(mf)] = py::dict();
        }
        curdict = curdict[py::cast(mf)];
        curdict[py::cast(mt)] = verbatim_section;
      }
    }
    curpos = cont.tellg();
    is_firstline = false;
  }
  return mfmt_dict;
}

py::dict parse_mf0mt0(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf0mt0_istream(iss);
}

py::dict parse_mf1mt451(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf1mt451_istream(iss);
}

py::dict parse_mf1mt452(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf1mt452_istream(iss);
}

py::dict parse_mf1mt455(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf1mt455_istream(iss);
}

py::dict parse_mf1mt456(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf1mt456_istream(iss);
}

py::dict parse_mf1mt458(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf1mt458_istream(iss);
}

py::dict parse_mf1mt460(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf1mt460_istream(iss);
}

py::dict parse_mf2mt151(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf2mt151_istream(iss);
}

py::dict parse_mf3(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf3_istream(iss);
}

py::dict parse_mf4(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf4_istream(iss);
}

py::dict parse_mf5(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf5_istream(iss);
}

py::dict parse_mf6(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf6_istream(iss);
}

py::dict parse_mf7mt2(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf7mt2_istream(iss);
}

py::dict parse_mf7mt4(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf7mt4_istream(iss);
}

py::dict parse_mf8(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf8_istream(iss);
}

py::dict parse_mf8mt454(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf8mt454_istream(iss);
}

py::dict parse_mf8mt457(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf8mt457_istream(iss);
}

py::dict parse_mf8mt459(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf8mt459_istream(iss);
}

py::dict parse_mf9(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf9_istream(iss);
}

py::dict parse_mf10(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf10_istream(iss);
}

py::dict parse_mf12(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf12_istream(iss);
}

py::dict parse_mf13(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf13_istream(iss);
}

py::dict parse_mf14(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf14_istream(iss);
}

py::dict parse_mf15(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf15_istream(iss);
}

py::dict parse_mf23(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf23_istream(iss);
}

py::dict parse_mf26(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf26_istream(iss);
}

py::dict parse_mf27(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf27_istream(iss);
}

py::dict parse_mf28(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf28_istream(iss);
}

py::dict parse_mf31(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf31_istream(iss);
}

py::dict parse_mf32(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf32_istream(iss);
}

py::dict parse_mf33(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf33_istream(iss);
}

py::dict parse_mf34(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf34_istream(iss);
}

py::dict parse_mf35(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf35_istream(iss);
}

py::dict parse_mf40(std::string& strcont) {
  std::istringstream iss(strcont);
  return parse_mf40_istream(iss);
}

py::dict parse_endf(std::string& strcont, py::object exclude, py::object include) {
  std::istringstream iss(strcont);
  return parse_endf_istream(iss, exclude, include);
}

py::dict parse_mf0mt0_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf0mt0_istream(inpfile);
}

py::dict parse_mf1mt451_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf1mt451_istream(inpfile);
}

py::dict parse_mf1mt452_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf1mt452_istream(inpfile);
}

py::dict parse_mf1mt455_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf1mt455_istream(inpfile);
}

py::dict parse_mf1mt456_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf1mt456_istream(inpfile);
}

py::dict parse_mf1mt458_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf1mt458_istream(inpfile);
}

py::dict parse_mf1mt460_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf1mt460_istream(inpfile);
}

py::dict parse_mf2mt151_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf2mt151_istream(inpfile);
}

py::dict parse_mf3_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf3_istream(inpfile);
}

py::dict parse_mf4_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf4_istream(inpfile);
}

py::dict parse_mf5_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf5_istream(inpfile);
}

py::dict parse_mf6_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf6_istream(inpfile);
}

py::dict parse_mf7mt2_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf7mt2_istream(inpfile);
}

py::dict parse_mf7mt4_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf7mt4_istream(inpfile);
}

py::dict parse_mf8_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf8_istream(inpfile);
}

py::dict parse_mf8mt454_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf8mt454_istream(inpfile);
}

py::dict parse_mf8mt457_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf8mt457_istream(inpfile);
}

py::dict parse_mf8mt459_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf8mt459_istream(inpfile);
}

py::dict parse_mf9_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf9_istream(inpfile);
}

py::dict parse_mf10_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf10_istream(inpfile);
}

py::dict parse_mf12_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf12_istream(inpfile);
}

py::dict parse_mf13_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf13_istream(inpfile);
}

py::dict parse_mf14_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf14_istream(inpfile);
}

py::dict parse_mf15_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf15_istream(inpfile);
}

py::dict parse_mf23_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf23_istream(inpfile);
}

py::dict parse_mf26_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf26_istream(inpfile);
}

py::dict parse_mf27_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf27_istream(inpfile);
}

py::dict parse_mf28_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf28_istream(inpfile);
}

py::dict parse_mf31_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf31_istream(inpfile);
}

py::dict parse_mf32_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf32_istream(inpfile);
}

py::dict parse_mf33_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf33_istream(inpfile);
}

py::dict parse_mf34_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf34_istream(inpfile);
}

py::dict parse_mf35_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf35_istream(inpfile);
}

py::dict parse_mf40_file(std::string& filename) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_mf40_istream(inpfile);
}

py::dict parse_endf_file(std::string& filename, py::object exclude, py::object include) {
  std::ifstream inpfile(filename);
if ((! inpfile.is_open())) {
  throw std::ifstream::failure("failed to open file " + filename);
}
  return parse_endf_istream(inpfile, exclude, include);
}



PYBIND11_MODULE(endf6, m) {
  m.def("parse_mf0mt0", &parse_mf0mt0, "parsing function");
  m.def("parse_mf1mt451", &parse_mf1mt451, "parsing function");
  m.def("parse_mf1mt452", &parse_mf1mt452, "parsing function");
  m.def("parse_mf1mt455", &parse_mf1mt455, "parsing function");
  m.def("parse_mf1mt456", &parse_mf1mt456, "parsing function");
  m.def("parse_mf1mt458", &parse_mf1mt458, "parsing function");
  m.def("parse_mf1mt460", &parse_mf1mt460, "parsing function");
  m.def("parse_mf2mt151", &parse_mf2mt151, "parsing function");
  m.def("parse_mf3", &parse_mf3, "parsing function");
  m.def("parse_mf4", &parse_mf4, "parsing function");
  m.def("parse_mf5", &parse_mf5, "parsing function");
  m.def("parse_mf6", &parse_mf6, "parsing function");
  m.def("parse_mf7mt2", &parse_mf7mt2, "parsing function");
  m.def("parse_mf7mt4", &parse_mf7mt4, "parsing function");
  m.def("parse_mf8", &parse_mf8, "parsing function");
  m.def("parse_mf8mt454", &parse_mf8mt454, "parsing function");
  m.def("parse_mf8mt457", &parse_mf8mt457, "parsing function");
  m.def("parse_mf8mt459", &parse_mf8mt459, "parsing function");
  m.def("parse_mf9", &parse_mf9, "parsing function");
  m.def("parse_mf10", &parse_mf10, "parsing function");
  m.def("parse_mf12", &parse_mf12, "parsing function");
  m.def("parse_mf13", &parse_mf13, "parsing function");
  m.def("parse_mf14", &parse_mf14, "parsing function");
  m.def("parse_mf15", &parse_mf15, "parsing function");
  m.def("parse_mf23", &parse_mf23, "parsing function");
  m.def("parse_mf26", &parse_mf26, "parsing function");
  m.def("parse_mf27", &parse_mf27, "parsing function");
  m.def("parse_mf28", &parse_mf28, "parsing function");
  m.def("parse_mf31", &parse_mf31, "parsing function");
  m.def("parse_mf32", &parse_mf32, "parsing function");
  m.def("parse_mf33", &parse_mf33, "parsing function");
  m.def("parse_mf34", &parse_mf34, "parsing function");
  m.def("parse_mf35", &parse_mf35, "parsing function");
  m.def("parse_mf40", &parse_mf40, "parsing function");
  m.def("parse_endf", &parse_endf, "parsing function", py::arg("cont"), py::arg("exclude") = py::none(), py::arg("include") = py::none());
  m.def("parse_endf_file", &parse_endf_file, "parsing function", py::arg("filename"), py::arg("exclude") = py::none(), py::arg("include") = py::none());
}
