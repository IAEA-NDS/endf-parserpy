
#include <pybind11/pybind11.h>
#include <pybind11/stl.h> // Necessary for STL containers like std::map

#include <stdexcept>
#include <iostream>
#include <sstream>
#include <fstream>
#include <vector>
#include <string>

namespace py = pybind11;


double endfstr2float(const char* str) {
    char tbuf[13];
    int j = 0;
    bool in_number = false;
    bool in_exponent = false;
    for (int i=0; i < 11; i++) {
        char c = str[i];
        if (c == ' ') continue;
        if (in_number) {
            if (!in_exponent) {
                if (c=='+' || c=='-') {
                    tbuf[j++] = 'e';
                    in_exponent = true;
                } else if (c=='e' || c=='E') {
                    in_exponent = true;
                }
            }
        } else {
            if (c == '.' || (c >= '0' && c <= '9')) {
                in_number = true;
            }
        }
        tbuf[j++] = c;
    }
    if (j==0) tbuf[j++] = '0';
    tbuf[j++] = '\0';
    return std::stod(tbuf);
}


int endfstr2int(const std::string& str) {
    if (str.find_first_not_of(' ') == std::string::npos) {
        return 0;
    }
    return std::stoi(str);
}


double cpp_read_float_field(const char *str, const char fieldnum) {
    return endfstr2float(str+fieldnum*11);
}


double cpp_read_int_field(const std::string& str, const char fieldnum) {
    return endfstr2int(str.substr(fieldnum*11, 11));
}


double cpp_read_custom_int_field(const std::string& str, int start_pos, int length) {
    return endfstr2int(str.substr(start_pos, length));
}


std::string cpp_read_line(std::istream& cont) {
    std::string line;
    std::getline(cont, line);
    return line;
}


void cpp_read_send(std::istream& cont) {
    std::string line = cpp_read_line(cont);
    int mtnum = std::stoi(line.substr(72, 3));
    if (cpp_read_float_field(line.c_str(), 0) != 0.0 ||
        cpp_read_float_field(line.c_str(), 1) != 0.0 ||
        cpp_read_int_field(line, 2) != 0 ||
        cpp_read_int_field(line, 3) != 0 ||
        cpp_read_int_field(line, 4) != 0 ||
        cpp_read_int_field(line, 5) != 0 ||
        mtnum != 0) {

        std::cout << line << std::endl;  // debug
        throw std::runtime_error("expected SEND record");
    }
}


std::vector<int> cpp_read_int_vec(std::istream& cont, const int numel) {
    int j = 0;
    std::vector<int> res;
    std::string line = cpp_read_line(cont);
    for (int i=0; i < numel; i++) {
        res.push_back(cpp_read_int_field(line, j++));
        if (j > 5 && i+1 < numel) {
            line = cpp_read_line(cont);
            j = 0;
        }
    }
    return res;
}


std::vector<double> cpp_read_float_vec(std::istream& cont, const int numel) {
    int j = 0;
    std::vector<double> res;
    std::string line = cpp_read_line(cont);
    for (int i=0; i < numel; i++) {
        res.push_back(cpp_read_float_field(line.c_str(), j++));
        if (j > 5 && i+1 < numel) {
            line = cpp_read_line(cont);
            j = 0;
        }
    }
    return res;
}


bool seq_contains(py::sequence seq, py::object value) {
    int i = 0;
    for (const auto& item : seq) {
        if (py::cast<py::object>(item).equal(value)) {
            return true;
        }
    }
    return false;
}


bool should_parse_section(int mf, int mt, py::object& exclude, py::object& include) {
    py::tuple mf_mt_tup = py::make_tuple(mf, mt);
    if (! exclude.is_none()) {
        if (! py::isinstance<py::sequence>(exclude)) {
            throw std::runtime_error("`exclude` argument must be of sequence type");
        }
        if (seq_contains(exclude, py::int_(mf)) || seq_contains(exclude, mf_mt_tup)) {
            return false;
        } else {
            return true;
        }
    } else if (! include.is_none()) {
        if (! py::isinstance<py::sequence>(include)) {
            throw std::runtime_error("`include` argument must be of sequence type");
        }
        if (seq_contains(include, py::int_(mf)) || seq_contains(include, mf_mt_tup)) {
            return true;
        } else {
            return false;
        }
    } else {
        return true;
    }
}


std::vector<std::string> read_section_verbatim(
    int mf, int mt, std::istream& cont, bool is_first=false
) {
    std::streampos curpos;
    std::string line;
    std::vector<std::string> secvec;
    int curmf;
    int curmt;
    size_t lastpos;
    while (std::getline(cont, line)) {
        // remove trailing \r that we may
        // get from reading win-style line endings
        lastpos = line.size() - 1;
        if (line[lastpos] == '\r') {
            line.erase(lastpos);
        }
        curmf = std::stoi(line.substr(70, 2));
        curmt = std::stoi(line.substr(72, 3));
        if (curmf != mf || curmt != mt) break;
        // the newline for compatibility with the Python parser
        secvec.push_back(line + "\n");
        curpos = cont.tellg();
    }
    if (! is_first && (curmf != mf || curmt != 0)) {
       std::string errmsg = "expected SEND of MF/MT " +
                            std::to_string(mf) + "/" + std::to_string(mt);
       throw std::runtime_error(errmsg);
    }
    if (is_first) {
        // we rewind one line because in the case of MF0/MT0 (tapeid)
        // we have also consumed the HEAD record of the next section
        cont.seekg(curpos);
    }
    return secvec;
}

template<typename T>
class Matrix2d {

    private:
        std::vector<T> data;
        size_t num_rows;
        size_t num_cols;
        size_t row_start;
        size_t col_start;
        bool initialized;
        bool accessed;
        bool triagonal;
        bool lower;

    public:

        Matrix2d() : initialized(false), accessed(false),
                     triagonal(false), lower(false) {};

        void init(size_t first_row_idx, size_t last_row_idx,
                  size_t first_col_idx, size_t last_col_idx,
                  bool triagonal=false, bool lower=false) {
            this->num_rows = last_row_idx - first_row_idx + 1;
            this->num_cols = last_col_idx - first_col_idx + 1;
            this->row_start = first_row_idx;
            this->col_start = first_col_idx;
            this->data.resize(this->num_rows * this->num_cols);
            this->initialized = true;
            this->triagonal = triagonal;
            this->lower = lower;
        }

        bool is_initialized() {
            return initialized;
        }

        bool did_read() {
            return accessed;
        }

        T& operator()(size_t i, size_t j) {
            accessed = true;
            return data.at((i-row_start)*num_cols + (j-col_start));
        }

        int get_row_start_index() {
            return row_start;
        }

        int get_row_last_index() {
            return row_start + num_rows - 1;
        }

        int get_col_start_index() {
            return col_start;
        }

        int get_col_start_index(int i) {
            if (! triagonal || lower) {
                return col_start;
            } else {
                return col_start + (i - row_start);
            }
        }

        int get_col_last_index() {
            return col_start + num_cols - 1;
        }

        int get_col_last_index(int i) {
            if (! triagonal || ! lower) {
                return col_start + num_cols - 1;
            } else {
                return col_start + (i - row_start);
            }
        }
};

template<typename T>
class NestedVector : public std::vector<T> {
    private:
        int startIndex;
        int lastIndex;

    public:
        // default constructor
        NestedVector() : startIndex(0), lastIndex(-1) {}

        // copy constructor
        NestedVector(const NestedVector<T>& other) :
            std::vector<T>(other), startIndex(other.startIndex),
            lastIndex(other.lastIndex) {}

        // assignment constructor
        NestedVector<T>& operator=(const NestedVector<T>& other) {
            if (this != &other) {
                std::vector<T>::operator=(other);
                startIndex = other.startIndex;
                lastIndex = other.lastIndex;
            }
            return *this;
        }

        void set_start_index(int start) {
            this->startIndex = start;
        }

        int get_start_index() {
            return this->startIndex;
        }

        void set_last_index(int lastIndex) {
            this->lastIndex = lastIndex;
        }

        int get_last_index() {
            return this->lastIndex;
        }

        T& operator[](int index) {
            if (! contains(index)) {
                throw std::out_of_range("index out of range 1");
            }
            return std::vector<T>::operator[](index - startIndex);
        }

        T& at(int index) {
            return std::vector<T>::at(index - startIndex);
        }

        T* prepare(int index) {
            if (contains(index)) return &((*this)[index]);
            T cpp_curel;
            set(index, cpp_curel);
            return &(*this)[index];
        }

        void set(int index, const T& value) {
            bool is_first = false;
            if (this->lastIndex == -1) {
                this->startIndex = index;
                this->lastIndex = index;
                is_first = true;
            }
            if (index == startIndex + (int)this->size()) {
                std::vector<T>::push_back(value);
                if (! is_first) {
                    this->lastIndex++;
                }
            } else if (index >= startIndex && index < startIndex + (int)this->size())  {
                std::vector<T>::operator[](index - startIndex) = value;
            } else {
                throw std::out_of_range("index out of range 2");
            }
        }

        bool contains(int index) {
            return (this->startIndex <= index && index <= this->lastIndex);
        }
};

py::dict parse_mf0mt0_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    std::string var_TAPEDESCR_0d;
    bool aux_var_TAPEDESCR_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // assign expression to variable TAPEDESCR
    var_TAPEDESCR_0d = cpp_line.substr(0, 66);
    aux_var_TAPEDESCR_0d_read = true;
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_TAPEDESCR_0d_read == true)) {
        cpp_current_dict["TAPEDESCR"] = var_TAPEDESCR_0d;
    }
    return cpp_current_dict;
}

py::dict parse_mf1mt451_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_LRP_0d;
    bool aux_var_LRP_0d_read = false;
    int var_LFI_0d;
    bool aux_var_LFI_0d_read = false;
    int var_NLIB_0d;
    bool aux_var_NLIB_0d_read = false;
    int var_NMOD_0d;
    bool aux_var_NMOD_0d_read = false;
    double var_ELIS_0d;
    bool aux_var_ELIS_0d_read = false;
    double var_STA_0d;
    bool aux_var_STA_0d_read = false;
    int var_LIS_0d;
    bool aux_var_LIS_0d_read = false;
    int var_LISO_0d;
    bool aux_var_LISO_0d_read = false;
    int var_NFOR_0d;
    bool aux_var_NFOR_0d_read = false;
    double var_AWI_0d;
    bool aux_var_AWI_0d_read = false;
    double var_EMAX_0d;
    bool aux_var_EMAX_0d_read = false;
    int var_LREL_0d;
    bool aux_var_LREL_0d_read = false;
    int var_NSUB_0d;
    bool aux_var_NSUB_0d_read = false;
    int var_NVER_0d;
    bool aux_var_NVER_0d_read = false;
    double var_TEMP_0d;
    bool aux_var_TEMP_0d_read = false;
    int var_LDRV_0d;
    bool aux_var_LDRV_0d_read = false;
    int var_NWD_0d;
    bool aux_var_NWD_0d_read = false;
    int var_NXC_0d;
    bool aux_var_NXC_0d_read = false;
    std::string var_ZSYMAM_0d;
    bool aux_var_ZSYMAM_0d_read = false;
    std::string var_ALAB_0d;
    bool aux_var_ALAB_0d_read = false;
    std::string var_EDATE_0d;
    bool aux_var_EDATE_0d_read = false;
    std::string var_AUTH_0d;
    bool aux_var_AUTH_0d_read = false;
    std::string var_REF_0d;
    bool aux_var_REF_0d_read = false;
    std::string var_DDATE_0d;
    bool aux_var_DDATE_0d_read = false;
    std::string var_RDATE_0d;
    bool aux_var_RDATE_0d_read = false;
    std::string var_ENDATE_0d;
    bool aux_var_ENDATE_0d_read = false;
    NestedVector<std::string> var_HSUB_1d;
    NestedVector<std::string> var_DESCRIPTION_1d;
    NestedVector<int> var_MFx_1d;
    NestedVector<int> var_MTx_1d;
    NestedVector<int> var_NCx_1d;
    NestedVector<int> var_MOD_1d;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // assign expression to variable LRP
    var_LRP_0d = cpp_read_int_field(cpp_line, 2);
    aux_var_LRP_0d_read = true;
    // assign expression to variable LFI
    var_LFI_0d = cpp_read_int_field(cpp_line, 3);
    aux_var_LFI_0d_read = true;
    // assign expression to variable NLIB
    var_NLIB_0d = cpp_read_int_field(cpp_line, 4);
    aux_var_NLIB_0d_read = true;
    // assign expression to variable NMOD
    var_NMOD_0d = cpp_read_int_field(cpp_line, 5);
    aux_var_NMOD_0d_read = true;
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ELIS
    var_ELIS_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ELIS_0d_read = true;
    // assign expression to variable STA
    var_STA_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_STA_0d_read = true;
    // assign expression to variable LIS
    var_LIS_0d = cpp_read_int_field(cpp_line, 2);
    aux_var_LIS_0d_read = true;
    // assign expression to variable LISO
    var_LISO_0d = cpp_read_int_field(cpp_line, 3);
    aux_var_LISO_0d_read = true;
    // assign expression to variable NFOR
    var_NFOR_0d = cpp_read_int_field(cpp_line, 5);
    aux_var_NFOR_0d_read = true;
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable AWI
    var_AWI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_AWI_0d_read = true;
    // assign expression to variable EMAX
    var_EMAX_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_EMAX_0d_read = true;
    // assign expression to variable LREL
    var_LREL_0d = cpp_read_int_field(cpp_line, 2);
    aux_var_LREL_0d_read = true;
    // assign expression to variable NSUB
    var_NSUB_0d = cpp_read_int_field(cpp_line, 4);
    aux_var_NSUB_0d_read = true;
    // assign expression to variable NVER
    var_NVER_0d = cpp_read_int_field(cpp_line, 5);
    aux_var_NVER_0d_read = true;
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable TEMP
    var_TEMP_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_TEMP_0d_read = true;
    // assign expression to variable LDRV
    var_LDRV_0d = cpp_read_int_field(cpp_line, 2);
    aux_var_LDRV_0d_read = true;
    // assign expression to variable NWD
    var_NWD_0d = cpp_read_int_field(cpp_line, 4);
    aux_var_NWD_0d_read = true;
    // assign expression to variable NXC
    var_NXC_0d = cpp_read_int_field(cpp_line, 5);
    aux_var_NXC_0d_read = true;
    cpp_line = cpp_read_line(cont);
    // assign expression to variable ZSYMAM
    var_ZSYMAM_0d = cpp_line.substr(0, 11);
    aux_var_ZSYMAM_0d_read = true;
    // assign expression to variable ALAB
    var_ALAB_0d = cpp_line.substr(11, 11);
    aux_var_ALAB_0d_read = true;
    // assign expression to variable EDATE
    var_EDATE_0d = cpp_line.substr(22, 10);
    aux_var_EDATE_0d_read = true;
    // assign expression to variable AUTH
    var_AUTH_0d = cpp_line.substr(33, 33);
    aux_var_AUTH_0d_read = true;
    cpp_line = cpp_read_line(cont);
    // assign expression to variable REF
    var_REF_0d = cpp_line.substr(1, 21);
    aux_var_REF_0d_read = true;
    // assign expression to variable DDATE
    var_DDATE_0d = cpp_line.substr(22, 10);
    aux_var_DDATE_0d_read = true;
    // assign expression to variable RDATE
    var_RDATE_0d = cpp_line.substr(33, 10);
    aux_var_RDATE_0d_read = true;
    // assign expression to variable ENDATE
    var_ENDATE_0d = cpp_line.substr(55, 8);
    aux_var_ENDATE_0d_read = true;

    for (int var_i_0d = 1;
         var_i_0d <= 3; var_i_0d++) {
        bool aux_var_i_0d_read = true;
        cpp_line = cpp_read_line(cont);
        // assign expression to variable HSUB
        var_HSUB_1d.set(var_i_0d, cpp_line.substr(0, 66));
    }

    for (int var_i_0d = 1;
         var_i_0d <= (var_NWD_0d-5); var_i_0d++) {
        bool aux_var_i_0d_read = true;
        cpp_line = cpp_read_line(cont);
        // assign expression to variable DESCRIPTION
        var_DESCRIPTION_1d.set(var_i_0d, cpp_line.substr(0, 66));
    }

    for (int var_i_0d = 1;
         var_i_0d <= var_NXC_0d; var_i_0d++) {
        bool aux_var_i_0d_read = true;
        cpp_line = cpp_read_line(cont);
        // read TEXT record
        // assign expression to variable MFx
        var_MFx_1d.set(var_i_0d, cpp_read_int_field(cpp_line, 2));
        // assign expression to variable MTx
        var_MTx_1d.set(var_i_0d, cpp_read_int_field(cpp_line, 3));
        // assign expression to variable NCx
        var_NCx_1d.set(var_i_0d, cpp_read_int_field(cpp_line, 4));
        // assign expression to variable MOD
        var_MOD_1d.set(var_i_0d, cpp_read_int_field(cpp_line, 5));
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_LRP_0d_read == true)) {
        cpp_current_dict["LRP"] = var_LRP_0d;
    }
    if ((aux_var_LFI_0d_read == true)) {
        cpp_current_dict["LFI"] = var_LFI_0d;
    }
    if ((aux_var_NLIB_0d_read == true)) {
        cpp_current_dict["NLIB"] = var_NLIB_0d;
    }
    if ((aux_var_NMOD_0d_read == true)) {
        cpp_current_dict["NMOD"] = var_NMOD_0d;
    }
    if ((aux_var_ELIS_0d_read == true)) {
        cpp_current_dict["ELIS"] = var_ELIS_0d;
    }
    if ((aux_var_STA_0d_read == true)) {
        cpp_current_dict["STA"] = var_STA_0d;
    }
    if ((aux_var_LIS_0d_read == true)) {
        cpp_current_dict["LIS"] = var_LIS_0d;
    }
    if ((aux_var_LISO_0d_read == true)) {
        cpp_current_dict["LISO"] = var_LISO_0d;
    }
    if ((aux_var_NFOR_0d_read == true)) {
        cpp_current_dict["NFOR"] = var_NFOR_0d;
    }
    if ((aux_var_AWI_0d_read == true)) {
        cpp_current_dict["AWI"] = var_AWI_0d;
    }
    if ((aux_var_EMAX_0d_read == true)) {
        cpp_current_dict["EMAX"] = var_EMAX_0d;
    }
    if ((aux_var_LREL_0d_read == true)) {
        cpp_current_dict["LREL"] = var_LREL_0d;
    }
    if ((aux_var_NSUB_0d_read == true)) {
        cpp_current_dict["NSUB"] = var_NSUB_0d;
    }
    if ((aux_var_NVER_0d_read == true)) {
        cpp_current_dict["NVER"] = var_NVER_0d;
    }
    if ((aux_var_TEMP_0d_read == true)) {
        cpp_current_dict["TEMP"] = var_TEMP_0d;
    }
    if ((aux_var_LDRV_0d_read == true)) {
        cpp_current_dict["LDRV"] = var_LDRV_0d;
    }
    if ((aux_var_NWD_0d_read == true)) {
        cpp_current_dict["NWD"] = var_NWD_0d;
    }
    if ((aux_var_NXC_0d_read == true)) {
        cpp_current_dict["NXC"] = var_NXC_0d;
    }
    if ((aux_var_ZSYMAM_0d_read == true)) {
        cpp_current_dict["ZSYMAM"] = var_ZSYMAM_0d;
    }
    if ((aux_var_ALAB_0d_read == true)) {
        cpp_current_dict["ALAB"] = var_ALAB_0d;
    }
    if ((aux_var_EDATE_0d_read == true)) {
        cpp_current_dict["EDATE"] = var_EDATE_0d;
    }
    if ((aux_var_AUTH_0d_read == true)) {
        cpp_current_dict["AUTH"] = var_AUTH_0d;
    }
    if ((aux_var_REF_0d_read == true)) {
        cpp_current_dict["REF"] = var_REF_0d;
    }
    if ((aux_var_DDATE_0d_read == true)) {
        cpp_current_dict["DDATE"] = var_DDATE_0d;
    }
    if ((aux_var_RDATE_0d_read == true)) {
        cpp_current_dict["RDATE"] = var_RDATE_0d;
    }
    if ((aux_var_ENDATE_0d_read == true)) {
        cpp_current_dict["ENDATE"] = var_ENDATE_0d;
    }
    if ((var_HSUB_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_HSUB_1d;
            cpp_current_dict["HSUB"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["HSUB"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_DESCRIPTION_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_DESCRIPTION_1d;
            cpp_current_dict["DESCRIPTION"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["DESCRIPTION"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_MFx_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_MFx_1d;
            cpp_current_dict["MFx"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["MFx"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_MTx_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_MTx_1d;
            cpp_current_dict["MTx"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["MTx"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_NCx_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_NCx_1d;
            cpp_current_dict["NCx"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["NCx"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_MOD_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_MOD_1d;
            cpp_current_dict["MOD"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["MOD"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    return cpp_current_dict;
}

py::dict parse_mf1mt452_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_LNU_0d;
    bool aux_var_LNU_0d_read = false;
    int var_NC_0d;
    bool aux_var_NC_0d_read = false;
    NestedVector<double> var_C_1d;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // assign expression to variable LNU
    var_LNU_0d = cpp_read_int_field(cpp_line, 3);
    aux_var_LNU_0d_read = true;
    // evaluate if-elif-else clause
    {
        bool cpp_found_match = false;
        if (! cpp_found_match) {
            if (((((((var_LNU_0d)==(1))))))) {
                // if statement evaluation
                cpp_found_match = true;
                cpp_line = cpp_read_line(cont);
                // read LIST record
                // assign expression to variable NC
                var_NC_0d = cpp_read_int_field(cpp_line, 4);
                aux_var_NC_0d_read = true;
                {
                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                    int cpp_j = 0;
                    // read LIST body

                    for (int var_k_0d = 1;
                         var_k_0d <= var_NC_0d; var_k_0d++) {
                        bool aux_var_k_0d_read = true;
                        // read LIST body
                        // assign expression to variable C
                        var_C_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                    }
                }
            }
        }
        if (! cpp_found_match) {
            if (! cpp_found_match) {
                if (((((((var_LNU_0d)==(2))))))) {
                    // if statement evaluation
                    cpp_found_match = true;
                    // read TAB1 record
                    cpp_line = cpp_read_line(cont);
                    {

                        int cpp_j;
                        int cpp_nr = cpp_read_int_field(cpp_line, 4);
                        int cpp_np = cpp_read_int_field(cpp_line, 5);

                        std::vector<int> NBT;
                        std::vector<int> INT;
                        cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                        cpp_j = 0;
                        for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                            NBT.push_back(cpp_intvec[cpp_j++]);
                            INT.push_back(cpp_intvec[cpp_j++]);
                        }

                        cpp_current_dict["NBT"] = NBT;
                        cpp_current_dict["INT"] = INT;

                    std::vector<double> Eint;
                    std::vector<double> nu;
                    cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                    cpp_j = 0;
                    for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                        Eint.push_back(cpp_floatvec[cpp_j++]);
                        nu.push_back(cpp_floatvec[cpp_j++]);
                    }

                    cpp_current_dict["Eint"] = Eint;
                    cpp_current_dict["nu"] = nu;
                    }
                }
            }
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_LNU_0d_read == true)) {
        cpp_current_dict["LNU"] = var_LNU_0d;
    }
    if ((aux_var_NC_0d_read == true)) {
        cpp_current_dict["NC"] = var_NC_0d;
    }
    if ((var_C_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_C_1d;
            cpp_current_dict["C"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["C"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    return cpp_current_dict;
}

py::dict parse_mf1mt455_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_LDG_0d;
    bool aux_var_LDG_0d_read = false;
    int var_LNU_0d;
    bool aux_var_LNU_0d_read = false;
    int var_NNF_0d;
    bool aux_var_NNF_0d_read = false;
    NestedVector<double> var_lambda_1d;
    int var_NE_0d;
    bool aux_var_NE_0d_read = false;
    NestedVector<double> var_E_1d;
    int cpp_int_val;
    bool aux_cpp_int_val_read = false;
    Matrix2d<double> var_lambda_2d;
    Matrix2d<double> var_alpha_2d;
    double var_nubar_d_0d;
    bool aux_var_nubar_d_0d_read = false;
    double var_E1_0d;
    bool aux_var_E1_0d_read = false;
    int var_NC_0d;
    bool aux_var_NC_0d_read = false;
    NestedVector<double> var_nubar_d_1d;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // assign expression to variable LDG
    var_LDG_0d = cpp_read_int_field(cpp_line, 2);
    aux_var_LDG_0d_read = true;
    // assign expression to variable LNU
    var_LNU_0d = cpp_read_int_field(cpp_line, 3);
    aux_var_LNU_0d_read = true;
    // evaluate if-elif-else clause
    {
        bool cpp_found_match = false;
        if (! cpp_found_match) {
            if ((((((((var_LDG_0d)==(0))))&&(((var_LNU_0d)==(2))))))) {
                // if statement evaluation
                cpp_found_match = true;
                cpp_line = cpp_read_line(cont);
                // read LIST record
                // assign expression to variable NNF
                var_NNF_0d = cpp_read_int_field(cpp_line, 4);
                aux_var_NNF_0d_read = true;
                {
                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                    int cpp_j = 0;
                    // read LIST body

                    for (int var_k_0d = 1;
                         var_k_0d <= var_NNF_0d; var_k_0d++) {
                        bool aux_var_k_0d_read = true;
                        // read LIST body
                        // assign expression to variable lambda
                        var_lambda_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                    }
                }
                // read TAB1 record
                cpp_line = cpp_read_line(cont);
                {

                    int cpp_j;
                    int cpp_nr = cpp_read_int_field(cpp_line, 4);
                    int cpp_np = cpp_read_int_field(cpp_line, 5);

                    std::vector<int> NBT;
                    std::vector<int> INT;
                    cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                    cpp_j = 0;
                    for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                        NBT.push_back(cpp_intvec[cpp_j++]);
                        INT.push_back(cpp_intvec[cpp_j++]);
                    }

                    cpp_current_dict["NBT"] = NBT;
                    cpp_current_dict["INT"] = INT;

                std::vector<double> Eint;
                std::vector<double> nubar_d;
                cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                cpp_j = 0;
                for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                    Eint.push_back(cpp_floatvec[cpp_j++]);
                    nubar_d.push_back(cpp_floatvec[cpp_j++]);
                }

                cpp_current_dict["Eint"] = Eint;
                cpp_current_dict["nubar_d"] = nubar_d;
                }
            }
        }
        if (! cpp_found_match) {
            if (! cpp_found_match) {
                if ((((((((var_LDG_0d)==(1))))&&(((var_LNU_0d)==(2))))))) {
                    // if statement evaluation
                    cpp_found_match = true;
                    // read TAB2 record
                    cpp_line = cpp_read_line(cont);
                    // assign expression to variable NE
                    var_NE_0d = cpp_read_int_field(cpp_line, 5);
                    aux_var_NE_0d_read = true;
                    {

                        int cpp_j;
                        int cpp_nr = cpp_read_int_field(cpp_line, 4);
                        int cpp_np = cpp_read_int_field(cpp_line, 5);

                        std::vector<int> NBT;
                        std::vector<int> INT;
                        cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                        cpp_j = 0;
                        for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                            NBT.push_back(cpp_intvec[cpp_j++]);
                            INT.push_back(cpp_intvec[cpp_j++]);
                        }

                        cpp_current_dict["NBT"] = NBT;
                        cpp_current_dict["INT"] = INT;
                    }
                    var_lambda_2d.init(1, var_NE_0d, 1, var_NNF_0d, false, false);
                    var_alpha_2d.init(1, var_NE_0d, 1, var_NNF_0d, false, false);

                    for (int var_k_0d = 1;
                         var_k_0d <= var_NE_0d; var_k_0d++) {
                        bool aux_var_k_0d_read = true;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable E
                        var_E_1d.set(var_k_0d, cpp_read_float_field(cpp_line.c_str(), 1));
                        // assign expression to variable cpp_int_val
                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                        aux_cpp_int_val_read = true;
                        // assign expression to variable NNF
                        var_NNF_0d = (cpp_int_val/2);
                        aux_var_NNF_0d_read = true;
                        {
                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                            int cpp_j = 0;
                            // read LIST body

                            for (int var_l_0d = 1;
                                 var_l_0d <= var_NNF_0d; var_l_0d++) {
                                bool aux_var_l_0d_read = true;
                                // read LIST body
                                // assign expression to variable lambda
                                var_lambda_2d(var_k_0d, var_l_0d) = cpp_floatvec[cpp_j++];
                                // assign expression to variable alpha
                                var_alpha_2d(var_k_0d, var_l_0d) = cpp_floatvec[cpp_j++];
                            }
                        }
                    }
                    // read TAB1 record
                    cpp_line = cpp_read_line(cont);
                    {

                        int cpp_j;
                        int cpp_nr = cpp_read_int_field(cpp_line, 4);
                        int cpp_np = cpp_read_int_field(cpp_line, 5);

                        std::vector<int> NBT;
                        std::vector<int> INT;
                        cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                        cpp_j = 0;
                        for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                            NBT.push_back(cpp_intvec[cpp_j++]);
                            INT.push_back(cpp_intvec[cpp_j++]);
                        }

                        cpp_current_dict["NBT"] = NBT;
                        cpp_current_dict["INT"] = INT;

                    std::vector<double> Eint;
                    std::vector<double> nubar_d;
                    cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                    cpp_j = 0;
                    for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                        Eint.push_back(cpp_floatvec[cpp_j++]);
                        nubar_d.push_back(cpp_floatvec[cpp_j++]);
                    }

                    cpp_current_dict["Eint"] = Eint;
                    cpp_current_dict["nubar_d"] = nubar_d;
                    }
                }
            }
        }
        if (! cpp_found_match) {
            if (! cpp_found_match) {
                if ((((((((var_LDG_0d)==(0))))&&(((var_LNU_0d)==(1))))))) {
                    // if statement evaluation
                    cpp_found_match = true;
                    cpp_line = cpp_read_line(cont);
                    // read LIST record
                    // assign expression to variable NNF
                    var_NNF_0d = cpp_read_int_field(cpp_line, 4);
                    aux_var_NNF_0d_read = true;
                    {
                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                        int cpp_j = 0;
                        // read LIST body

                        for (int var_k_0d = 1;
                             var_k_0d <= var_NNF_0d; var_k_0d++) {
                            bool aux_var_k_0d_read = true;
                            // read LIST body
                            // assign expression to variable lambda
                            var_lambda_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                        }
                    }
                    cpp_line = cpp_read_line(cont);
                    // read LIST record
                    {
                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                        int cpp_j = 0;
                        // read LIST body
                        // assign expression to variable nubar_d
                        var_nubar_d_0d = cpp_floatvec[cpp_j++];
                        aux_var_nubar_d_0d_read = true;
                    }
                }
            }
        }
        if (! cpp_found_match) {
            if (! cpp_found_match) {
                if ((((((((var_LDG_0d)==(1))))&&(((var_LNU_0d)==(1))))))) {
                    // if statement evaluation
                    cpp_found_match = true;
                    // read TAB2 record
                    cpp_line = cpp_read_line(cont);
                    // assign expression to variable NE
                    var_NE_0d = cpp_read_int_field(cpp_line, 5);
                    aux_var_NE_0d_read = true;
                    {

                        int cpp_j;
                        int cpp_nr = cpp_read_int_field(cpp_line, 4);
                        int cpp_np = cpp_read_int_field(cpp_line, 5);

                        std::vector<int> NBT;
                        std::vector<int> INT;
                        cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                        cpp_j = 0;
                        for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                            NBT.push_back(cpp_intvec[cpp_j++]);
                            INT.push_back(cpp_intvec[cpp_j++]);
                        }

                        cpp_current_dict["NBT"] = NBT;
                        cpp_current_dict["INT"] = INT;
                    }
                    var_lambda_2d.init(1, var_NE_0d, 1, var_NNF_0d, false, false);
                    var_alpha_2d.init(1, var_NE_0d, 1, var_NNF_0d, false, false);

                    for (int var_k_0d = 1;
                         var_k_0d <= var_NE_0d; var_k_0d++) {
                        bool aux_var_k_0d_read = true;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable E1
                        var_E1_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_var_E1_0d_read = true;
                        // assign expression to variable cpp_int_val
                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                        aux_cpp_int_val_read = true;
                        // assign expression to variable NNF
                        var_NNF_0d = (cpp_int_val/2);
                        aux_var_NNF_0d_read = true;
                        {
                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                            int cpp_j = 0;
                            // read LIST body

                            for (int var_l_0d = 1;
                                 var_l_0d <= var_NNF_0d; var_l_0d++) {
                                bool aux_var_l_0d_read = true;
                                // read LIST body
                                // assign expression to variable lambda
                                var_lambda_2d(var_k_0d, var_l_0d) = cpp_floatvec[cpp_j++];
                                // assign expression to variable alpha
                                var_alpha_2d(var_k_0d, var_l_0d) = cpp_floatvec[cpp_j++];
                            }
                        }
                    }
                    cpp_line = cpp_read_line(cont);
                    // read LIST record
                    // assign expression to variable NC
                    var_NC_0d = cpp_read_int_field(cpp_line, 4);
                    aux_var_NC_0d_read = true;
                    {
                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                        int cpp_j = 0;
                        // read LIST body

                        for (int var_k_0d = 1;
                             var_k_0d <= var_NC_0d; var_k_0d++) {
                            bool aux_var_k_0d_read = true;
                            // read LIST body
                            // assign expression to variable nubar_d
                            var_nubar_d_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                        }
                    }
                }
            }
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_LDG_0d_read == true)) {
        cpp_current_dict["LDG"] = var_LDG_0d;
    }
    if ((aux_var_LNU_0d_read == true)) {
        cpp_current_dict["LNU"] = var_LNU_0d;
    }
    if ((aux_var_NNF_0d_read == true)) {
        cpp_current_dict["NNF"] = var_NNF_0d;
    }
    if ((var_lambda_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_lambda_1d;
            cpp_current_dict["lambda"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["lambda"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((aux_var_NE_0d_read == true)) {
        cpp_current_dict["NE"] = var_NE_0d;
    }
    if ((var_E_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_E_1d;
            cpp_current_dict["E"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["E"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if (var_lambda_2d.did_read()) {
            cpp_current_dict["lambda"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["lambda"];
            for (int cpp_i1 = var_lambda_2d.get_row_start_index(); cpp_i1 <= var_lambda_2d.get_row_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                for (int cpp_i2 = var_lambda_2d.get_col_start_index(cpp_i1); cpp_i2 <= var_lambda_2d.get_col_last_index(cpp_i1); cpp_i2++) {
                    cpp_curdict1[py::cast(cpp_i2)] = var_lambda_2d(cpp_i1, cpp_i2);
                }
            }
    }
    if (var_alpha_2d.did_read()) {
            cpp_current_dict["alpha"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["alpha"];
            for (int cpp_i1 = var_alpha_2d.get_row_start_index(); cpp_i1 <= var_alpha_2d.get_row_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                for (int cpp_i2 = var_alpha_2d.get_col_start_index(cpp_i1); cpp_i2 <= var_alpha_2d.get_col_last_index(cpp_i1); cpp_i2++) {
                    cpp_curdict1[py::cast(cpp_i2)] = var_alpha_2d(cpp_i1, cpp_i2);
                }
            }
    }
    if ((aux_var_nubar_d_0d_read == true)) {
        cpp_current_dict["nubar_d"] = var_nubar_d_0d;
    }
    if ((aux_var_E1_0d_read == true)) {
        cpp_current_dict["E1"] = var_E1_0d;
    }
    if ((aux_var_NC_0d_read == true)) {
        cpp_current_dict["NC"] = var_NC_0d;
    }
    if ((var_nubar_d_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_nubar_d_1d;
            cpp_current_dict["nubar_d"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["nubar_d"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    return cpp_current_dict;
}

py::dict parse_mf1mt456_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_LNU_0d;
    bool aux_var_LNU_0d_read = false;
    double var_nubar_p_0d;
    bool aux_var_nubar_p_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // assign expression to variable LNU
    var_LNU_0d = cpp_read_int_field(cpp_line, 3);
    aux_var_LNU_0d_read = true;
    // evaluate if-elif-else clause
    {
        bool cpp_found_match = false;
        if (! cpp_found_match) {
            if (((((((var_LNU_0d)==(2))))))) {
                // if statement evaluation
                cpp_found_match = true;
                // read TAB1 record
                cpp_line = cpp_read_line(cont);
                {

                    int cpp_j;
                    int cpp_nr = cpp_read_int_field(cpp_line, 4);
                    int cpp_np = cpp_read_int_field(cpp_line, 5);

                    std::vector<int> NBT;
                    std::vector<int> INT;
                    cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                    cpp_j = 0;
                    for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                        NBT.push_back(cpp_intvec[cpp_j++]);
                        INT.push_back(cpp_intvec[cpp_j++]);
                    }

                    cpp_current_dict["NBT"] = NBT;
                    cpp_current_dict["INT"] = INT;

                std::vector<double> Eint;
                std::vector<double> nubar_p;
                cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                cpp_j = 0;
                for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                    Eint.push_back(cpp_floatvec[cpp_j++]);
                    nubar_p.push_back(cpp_floatvec[cpp_j++]);
                }

                cpp_current_dict["Eint"] = Eint;
                cpp_current_dict["nubar_p"] = nubar_p;
                }
            }
        }
        if (! cpp_found_match) {
            if (! cpp_found_match) {
                if (((((((var_LNU_0d)==(1))))))) {
                    // if statement evaluation
                    cpp_found_match = true;
                    cpp_line = cpp_read_line(cont);
                    // read LIST record
                    {
                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                        int cpp_j = 0;
                        // read LIST body
                        // assign expression to variable nubar_p
                        var_nubar_p_0d = cpp_floatvec[cpp_j++];
                        aux_var_nubar_p_0d_read = true;
                    }
                }
            }
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_LNU_0d_read == true)) {
        cpp_current_dict["LNU"] = var_LNU_0d;
    }
    if ((aux_var_nubar_p_0d_read == true)) {
        cpp_current_dict["nubar_p"] = var_nubar_p_0d;
    }
    return cpp_current_dict;
}

py::dict parse_mf1mt458_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_LFC_0d;
    bool aux_var_LFC_0d_read = false;
    int var_NPLY_0d;
    bool aux_var_NPLY_0d_read = false;
    double var_EFR_0d;
    bool aux_var_EFR_0d_read = false;
    double var_dEFR_0d;
    bool aux_var_dEFR_0d_read = false;
    double var_ENP_0d;
    bool aux_var_ENP_0d_read = false;
    double var_dENP_0d;
    bool aux_var_dENP_0d_read = false;
    double var_END_0d;
    bool aux_var_END_0d_read = false;
    double var_dEND_0d;
    bool aux_var_dEND_0d_read = false;
    double var_EGP_0d;
    bool aux_var_EGP_0d_read = false;
    double var_dEGP_0d;
    bool aux_var_dEGP_0d_read = false;
    double var_EGD_0d;
    bool aux_var_EGD_0d_read = false;
    double var_dEGD_0d;
    bool aux_var_dEGD_0d_read = false;
    double var_EB_0d;
    bool aux_var_EB_0d_read = false;
    double var_dEB_0d;
    bool aux_var_dEB_0d_read = false;
    double var_ENU_0d;
    bool aux_var_ENU_0d_read = false;
    double var_dENU_0d;
    bool aux_var_dENU_0d_read = false;
    double var_ER_0d;
    bool aux_var_ER_0d_read = false;
    double var_dER_0d;
    bool aux_var_dER_0d_read = false;
    double var_ET_0d;
    bool aux_var_ET_0d_read = false;
    double var_dET_0d;
    bool aux_var_dET_0d_read = false;
    int cpp_int_val;
    bool aux_cpp_int_val_read = false;
    NestedVector<double> var_c_EFR_1d;
    NestedVector<double> var_dc_EFR_1d;
    NestedVector<double> var_c_ENP_1d;
    NestedVector<double> var_dc_ENP_1d;
    NestedVector<double> var_c_END_1d;
    NestedVector<double> var_dc_END_1d;
    NestedVector<double> var_c_EGP_1d;
    NestedVector<double> var_dc_EGP_1d;
    NestedVector<double> var_c_EGD_1d;
    NestedVector<double> var_dc_EGD_1d;
    NestedVector<double> var_c_EB_1d;
    NestedVector<double> var_dc_EB_1d;
    NestedVector<double> var_c_ENU_1d;
    NestedVector<double> var_dc_ENU_1d;
    NestedVector<double> var_c_ER_1d;
    NestedVector<double> var_dc_ER_1d;
    NestedVector<double> var_c_ET_1d;
    NestedVector<double> var_dc_ET_1d;
    int var_NFC_0d;
    bool aux_var_NFC_0d_read = false;
    NestedVector<int> var_LDRV_1d;
    NestedVector<int> var_IFC_1d;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    // evaluate if-elif-else clause
    {
        bool cpp_found_match = false;
        if (! cpp_found_match) {
            // if statement evaluation with lookahead
            {
                std::streampos cpp_old_streampos = cont.tellg();
                {
                    // variable declarations
                    int& glob_var_MAT_0d = var_MAT_0d;
                    int var_MAT_0d = glob_var_MAT_0d;
                    bool& glob_aux_var_MAT_0d_read = aux_var_MAT_0d_read;
                    bool aux_var_MAT_0d_read = glob_aux_var_MAT_0d_read;
                    int& glob_var_MF_0d = var_MF_0d;
                    int var_MF_0d = glob_var_MF_0d;
                    bool& glob_aux_var_MF_0d_read = aux_var_MF_0d_read;
                    bool aux_var_MF_0d_read = glob_aux_var_MF_0d_read;
                    int& glob_var_MT_0d = var_MT_0d;
                    int var_MT_0d = glob_var_MT_0d;
                    bool& glob_aux_var_MT_0d_read = aux_var_MT_0d_read;
                    bool aux_var_MT_0d_read = glob_aux_var_MT_0d_read;
                    double& glob_var_ZA_0d = var_ZA_0d;
                    double var_ZA_0d = glob_var_ZA_0d;
                    bool& glob_aux_var_ZA_0d_read = aux_var_ZA_0d_read;
                    bool aux_var_ZA_0d_read = glob_aux_var_ZA_0d_read;
                    double& glob_var_AWR_0d = var_AWR_0d;
                    double var_AWR_0d = glob_var_AWR_0d;
                    bool& glob_aux_var_AWR_0d_read = aux_var_AWR_0d_read;
                    bool aux_var_AWR_0d_read = glob_aux_var_AWR_0d_read;
                    int& glob_var_LFC_0d = var_LFC_0d;
                    int var_LFC_0d = glob_var_LFC_0d;
                    bool& glob_aux_var_LFC_0d_read = aux_var_LFC_0d_read;
                    bool aux_var_LFC_0d_read = glob_aux_var_LFC_0d_read;
                    int& glob_var_NPLY_0d = var_NPLY_0d;
                    int var_NPLY_0d = glob_var_NPLY_0d;
                    bool& glob_aux_var_NPLY_0d_read = aux_var_NPLY_0d_read;
                    bool aux_var_NPLY_0d_read = glob_aux_var_NPLY_0d_read;
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable ZA
                    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_var_ZA_0d_read = true;
                    // assign expression to variable AWR
                    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_var_AWR_0d_read = true;
                    // assign expression to variable LFC
                    var_LFC_0d = cpp_read_int_field(cpp_line, 3);
                    aux_var_LFC_0d_read = true;
                    cpp_line = cpp_read_line(cont);
                    // read LIST record
                    // assign expression to variable NPLY
                    var_NPLY_0d = cpp_read_int_field(cpp_line, 3);
                    aux_var_NPLY_0d_read = true;
                    if ((((((((var_LFC_0d)==(0))))&&(((var_NPLY_0d)==(0))))))) {
                        cpp_found_match = true;
                    }
                    cont.seekg(cpp_old_streampos);
                }
                if (cpp_found_match) {
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable ZA
                    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_var_ZA_0d_read = true;
                    // assign expression to variable AWR
                    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_var_AWR_0d_read = true;
                    // assign expression to variable LFC
                    var_LFC_0d = cpp_read_int_field(cpp_line, 3);
                    aux_var_LFC_0d_read = true;
                    cpp_line = cpp_read_line(cont);
                    // read LIST record
                    // assign expression to variable NPLY
                    var_NPLY_0d = cpp_read_int_field(cpp_line, 3);
                    aux_var_NPLY_0d_read = true;
                    {
                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                        int cpp_j = 0;
                        // read LIST body
                        // assign expression to variable EFR
                        var_EFR_0d = cpp_floatvec[cpp_j++];
                        aux_var_EFR_0d_read = true;
                        // assign expression to variable dEFR
                        var_dEFR_0d = cpp_floatvec[cpp_j++];
                        aux_var_dEFR_0d_read = true;
                        // assign expression to variable ENP
                        var_ENP_0d = cpp_floatvec[cpp_j++];
                        aux_var_ENP_0d_read = true;
                        // assign expression to variable dENP
                        var_dENP_0d = cpp_floatvec[cpp_j++];
                        aux_var_dENP_0d_read = true;
                        // assign expression to variable END
                        var_END_0d = cpp_floatvec[cpp_j++];
                        aux_var_END_0d_read = true;
                        // assign expression to variable dEND
                        var_dEND_0d = cpp_floatvec[cpp_j++];
                        aux_var_dEND_0d_read = true;
                        // assign expression to variable EGP
                        var_EGP_0d = cpp_floatvec[cpp_j++];
                        aux_var_EGP_0d_read = true;
                        // assign expression to variable dEGP
                        var_dEGP_0d = cpp_floatvec[cpp_j++];
                        aux_var_dEGP_0d_read = true;
                        // assign expression to variable EGD
                        var_EGD_0d = cpp_floatvec[cpp_j++];
                        aux_var_EGD_0d_read = true;
                        // assign expression to variable dEGD
                        var_dEGD_0d = cpp_floatvec[cpp_j++];
                        aux_var_dEGD_0d_read = true;
                        // assign expression to variable EB
                        var_EB_0d = cpp_floatvec[cpp_j++];
                        aux_var_EB_0d_read = true;
                        // assign expression to variable dEB
                        var_dEB_0d = cpp_floatvec[cpp_j++];
                        aux_var_dEB_0d_read = true;
                        // assign expression to variable ENU
                        var_ENU_0d = cpp_floatvec[cpp_j++];
                        aux_var_ENU_0d_read = true;
                        // assign expression to variable dENU
                        var_dENU_0d = cpp_floatvec[cpp_j++];
                        aux_var_dENU_0d_read = true;
                        // assign expression to variable ER
                        var_ER_0d = cpp_floatvec[cpp_j++];
                        aux_var_ER_0d_read = true;
                        // assign expression to variable dER
                        var_dER_0d = cpp_floatvec[cpp_j++];
                        aux_var_dER_0d_read = true;
                        // assign expression to variable ET
                        var_ET_0d = cpp_floatvec[cpp_j++];
                        aux_var_ET_0d_read = true;
                        // assign expression to variable dET
                        var_dET_0d = cpp_floatvec[cpp_j++];
                        aux_var_dET_0d_read = true;
                    }
                }
            }
        }
        if (! cpp_found_match) {
            if (! cpp_found_match) {
                // if statement evaluation with lookahead
                {
                    std::streampos cpp_old_streampos = cont.tellg();
                    {
                        // variable declarations
                        int& glob_var_MAT_0d = var_MAT_0d;
                        int var_MAT_0d = glob_var_MAT_0d;
                        bool& glob_aux_var_MAT_0d_read = aux_var_MAT_0d_read;
                        bool aux_var_MAT_0d_read = glob_aux_var_MAT_0d_read;
                        int& glob_var_MF_0d = var_MF_0d;
                        int var_MF_0d = glob_var_MF_0d;
                        bool& glob_aux_var_MF_0d_read = aux_var_MF_0d_read;
                        bool aux_var_MF_0d_read = glob_aux_var_MF_0d_read;
                        int& glob_var_MT_0d = var_MT_0d;
                        int var_MT_0d = glob_var_MT_0d;
                        bool& glob_aux_var_MT_0d_read = aux_var_MT_0d_read;
                        bool aux_var_MT_0d_read = glob_aux_var_MT_0d_read;
                        double& glob_var_ZA_0d = var_ZA_0d;
                        double var_ZA_0d = glob_var_ZA_0d;
                        bool& glob_aux_var_ZA_0d_read = aux_var_ZA_0d_read;
                        bool aux_var_ZA_0d_read = glob_aux_var_ZA_0d_read;
                        double& glob_var_AWR_0d = var_AWR_0d;
                        double var_AWR_0d = glob_var_AWR_0d;
                        bool& glob_aux_var_AWR_0d_read = aux_var_AWR_0d_read;
                        bool aux_var_AWR_0d_read = glob_aux_var_AWR_0d_read;
                        int& glob_var_LFC_0d = var_LFC_0d;
                        int var_LFC_0d = glob_var_LFC_0d;
                        bool& glob_aux_var_LFC_0d_read = aux_var_LFC_0d_read;
                        bool aux_var_LFC_0d_read = glob_aux_var_LFC_0d_read;
                        int& glob_var_NPLY_0d = var_NPLY_0d;
                        int var_NPLY_0d = glob_var_NPLY_0d;
                        bool& glob_aux_var_NPLY_0d_read = aux_var_NPLY_0d_read;
                        bool aux_var_NPLY_0d_read = glob_aux_var_NPLY_0d_read;
                        int& glob_cpp_int_val = cpp_int_val;
                        int cpp_int_val = glob_cpp_int_val;
                        bool& glob_aux_cpp_int_val_read = aux_cpp_int_val_read;
                        bool aux_cpp_int_val_read = glob_aux_cpp_int_val_read;
                        cpp_line = cpp_read_line(cont);
                        // read CONT record
                        // assign expression to variable ZA
                        var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                        aux_var_ZA_0d_read = true;
                        // assign expression to variable AWR
                        var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_var_AWR_0d_read = true;
                        // assign expression to variable LFC
                        var_LFC_0d = cpp_read_int_field(cpp_line, 3);
                        aux_var_LFC_0d_read = true;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable NPLY
                        var_NPLY_0d = cpp_read_int_field(cpp_line, 3);
                        aux_var_NPLY_0d_read = true;
                        if ((! (aux_var_NPLY_0d_read == true))) {
                            // assign expression to variable cpp_int_val
                            cpp_int_val = cpp_read_int_field(cpp_line, 4);
                            aux_cpp_int_val_read = true;
                            // assign expression to variable NPLY
                            var_NPLY_0d = ((cpp_int_val+(-18))/18);
                            aux_var_NPLY_0d_read = true;
                        }
                        if ((! (aux_var_NPLY_0d_read == true))) {
                            // assign expression to variable cpp_int_val
                            cpp_int_val = cpp_read_int_field(cpp_line, 5);
                            aux_cpp_int_val_read = true;
                            // assign expression to variable NPLY
                            var_NPLY_0d = ((cpp_int_val+(-9))/9);
                            aux_var_NPLY_0d_read = true;
                        }
                        if ((((((((var_LFC_0d)==(0))))&&(((var_NPLY_0d)>(0))))))) {
                            cpp_found_match = true;
                        }
                        cont.seekg(cpp_old_streampos);
                    }
                    if (cpp_found_match) {
                        cpp_line = cpp_read_line(cont);
                        // read CONT record
                        // assign expression to variable ZA
                        var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                        aux_var_ZA_0d_read = true;
                        // assign expression to variable AWR
                        var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_var_AWR_0d_read = true;
                        // assign expression to variable LFC
                        var_LFC_0d = cpp_read_int_field(cpp_line, 3);
                        aux_var_LFC_0d_read = true;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable NPLY
                        var_NPLY_0d = cpp_read_int_field(cpp_line, 3);
                        aux_var_NPLY_0d_read = true;
                        if ((! (aux_var_NPLY_0d_read == true))) {
                            // assign expression to variable cpp_int_val
                            cpp_int_val = cpp_read_int_field(cpp_line, 4);
                            aux_cpp_int_val_read = true;
                            // assign expression to variable NPLY
                            var_NPLY_0d = ((cpp_int_val+(-18))/18);
                            aux_var_NPLY_0d_read = true;
                        }
                        if ((! (aux_var_NPLY_0d_read == true))) {
                            // assign expression to variable cpp_int_val
                            cpp_int_val = cpp_read_int_field(cpp_line, 5);
                            aux_cpp_int_val_read = true;
                            // assign expression to variable NPLY
                            var_NPLY_0d = ((cpp_int_val+(-9))/9);
                            aux_var_NPLY_0d_read = true;
                        }
                        {
                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                            int cpp_j = 0;
                            // read LIST body

                            for (int var_k_0d = 0;
                                 var_k_0d <= var_NPLY_0d; var_k_0d++) {
                                bool aux_var_k_0d_read = true;
                                // read LIST body
                                // assign expression to variable c_EFR
                                var_c_EFR_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                // assign expression to variable dc_EFR
                                var_dc_EFR_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                // assign expression to variable c_ENP
                                var_c_ENP_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                // assign expression to variable dc_ENP
                                var_dc_ENP_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                // assign expression to variable c_END
                                var_c_END_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                // assign expression to variable dc_END
                                var_dc_END_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                // assign expression to variable c_EGP
                                var_c_EGP_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                // assign expression to variable dc_EGP
                                var_dc_EGP_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                // assign expression to variable c_EGD
                                var_c_EGD_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                // assign expression to variable dc_EGD
                                var_dc_EGD_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                // assign expression to variable c_EB
                                var_c_EB_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                // assign expression to variable dc_EB
                                var_dc_EB_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                // assign expression to variable c_ENU
                                var_c_ENU_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                // assign expression to variable dc_ENU
                                var_dc_ENU_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                // assign expression to variable c_ER
                                var_c_ER_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                // assign expression to variable dc_ER
                                var_dc_ER_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                // assign expression to variable c_ET
                                var_c_ET_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                // assign expression to variable dc_ET
                                var_dc_ET_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                            }
                        }
                    }
                }
            }
        }
        if (! cpp_found_match) {
            if (! cpp_found_match) {
                // if statement evaluation with lookahead
                {
                    std::streampos cpp_old_streampos = cont.tellg();
                    {
                        // variable declarations
                        int& glob_var_MAT_0d = var_MAT_0d;
                        int var_MAT_0d = glob_var_MAT_0d;
                        bool& glob_aux_var_MAT_0d_read = aux_var_MAT_0d_read;
                        bool aux_var_MAT_0d_read = glob_aux_var_MAT_0d_read;
                        int& glob_var_MF_0d = var_MF_0d;
                        int var_MF_0d = glob_var_MF_0d;
                        bool& glob_aux_var_MF_0d_read = aux_var_MF_0d_read;
                        bool aux_var_MF_0d_read = glob_aux_var_MF_0d_read;
                        int& glob_var_MT_0d = var_MT_0d;
                        int var_MT_0d = glob_var_MT_0d;
                        bool& glob_aux_var_MT_0d_read = aux_var_MT_0d_read;
                        bool aux_var_MT_0d_read = glob_aux_var_MT_0d_read;
                        double& glob_var_ZA_0d = var_ZA_0d;
                        double var_ZA_0d = glob_var_ZA_0d;
                        bool& glob_aux_var_ZA_0d_read = aux_var_ZA_0d_read;
                        bool aux_var_ZA_0d_read = glob_aux_var_ZA_0d_read;
                        double& glob_var_AWR_0d = var_AWR_0d;
                        double var_AWR_0d = glob_var_AWR_0d;
                        bool& glob_aux_var_AWR_0d_read = aux_var_AWR_0d_read;
                        bool aux_var_AWR_0d_read = glob_aux_var_AWR_0d_read;
                        int& glob_var_LFC_0d = var_LFC_0d;
                        int var_LFC_0d = glob_var_LFC_0d;
                        bool& glob_aux_var_LFC_0d_read = aux_var_LFC_0d_read;
                        bool aux_var_LFC_0d_read = glob_aux_var_LFC_0d_read;
                        int& glob_var_NFC_0d = var_NFC_0d;
                        int var_NFC_0d = glob_var_NFC_0d;
                        bool& glob_aux_var_NFC_0d_read = aux_var_NFC_0d_read;
                        bool aux_var_NFC_0d_read = glob_aux_var_NFC_0d_read;
                        int& glob_var_NPLY_0d = var_NPLY_0d;
                        int var_NPLY_0d = glob_var_NPLY_0d;
                        bool& glob_aux_var_NPLY_0d_read = aux_var_NPLY_0d_read;
                        bool aux_var_NPLY_0d_read = glob_aux_var_NPLY_0d_read;
                        cpp_line = cpp_read_line(cont);
                        // read CONT record
                        // assign expression to variable ZA
                        var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                        aux_var_ZA_0d_read = true;
                        // assign expression to variable AWR
                        var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_var_AWR_0d_read = true;
                        // assign expression to variable LFC
                        var_LFC_0d = cpp_read_int_field(cpp_line, 3);
                        aux_var_LFC_0d_read = true;
                        // assign expression to variable NFC
                        var_NFC_0d = cpp_read_int_field(cpp_line, 5);
                        aux_var_NFC_0d_read = true;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable NPLY
                        var_NPLY_0d = cpp_read_int_field(cpp_line, 3);
                        aux_var_NPLY_0d_read = true;
                        if ((((((((var_LFC_0d)==(1))))&&(((var_NPLY_0d)==(0))))))) {
                            cpp_found_match = true;
                        }
                        cont.seekg(cpp_old_streampos);
                    }
                    if (cpp_found_match) {
                        cpp_line = cpp_read_line(cont);
                        // read CONT record
                        // assign expression to variable ZA
                        var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                        aux_var_ZA_0d_read = true;
                        // assign expression to variable AWR
                        var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_var_AWR_0d_read = true;
                        // assign expression to variable LFC
                        var_LFC_0d = cpp_read_int_field(cpp_line, 3);
                        aux_var_LFC_0d_read = true;
                        // assign expression to variable NFC
                        var_NFC_0d = cpp_read_int_field(cpp_line, 5);
                        aux_var_NFC_0d_read = true;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable NPLY
                        var_NPLY_0d = cpp_read_int_field(cpp_line, 3);
                        aux_var_NPLY_0d_read = true;
                        {
                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                            int cpp_j = 0;
                            // read LIST body
                            // assign expression to variable EFR
                            var_EFR_0d = cpp_floatvec[cpp_j++];
                            aux_var_EFR_0d_read = true;
                            // assign expression to variable dEFR
                            var_dEFR_0d = cpp_floatvec[cpp_j++];
                            aux_var_dEFR_0d_read = true;
                            // assign expression to variable ENP
                            var_ENP_0d = cpp_floatvec[cpp_j++];
                            aux_var_ENP_0d_read = true;
                            // assign expression to variable dENP
                            var_dENP_0d = cpp_floatvec[cpp_j++];
                            aux_var_dENP_0d_read = true;
                            // assign expression to variable END
                            var_END_0d = cpp_floatvec[cpp_j++];
                            aux_var_END_0d_read = true;
                            // assign expression to variable dEND
                            var_dEND_0d = cpp_floatvec[cpp_j++];
                            aux_var_dEND_0d_read = true;
                            // assign expression to variable EGP
                            var_EGP_0d = cpp_floatvec[cpp_j++];
                            aux_var_EGP_0d_read = true;
                            // assign expression to variable dEGP
                            var_dEGP_0d = cpp_floatvec[cpp_j++];
                            aux_var_dEGP_0d_read = true;
                            // assign expression to variable EGD
                            var_EGD_0d = cpp_floatvec[cpp_j++];
                            aux_var_EGD_0d_read = true;
                            // assign expression to variable dEGD
                            var_dEGD_0d = cpp_floatvec[cpp_j++];
                            aux_var_dEGD_0d_read = true;
                            // assign expression to variable EB
                            var_EB_0d = cpp_floatvec[cpp_j++];
                            aux_var_EB_0d_read = true;
                            // assign expression to variable dEB
                            var_dEB_0d = cpp_floatvec[cpp_j++];
                            aux_var_dEB_0d_read = true;
                            // assign expression to variable ENU
                            var_ENU_0d = cpp_floatvec[cpp_j++];
                            aux_var_ENU_0d_read = true;
                            // assign expression to variable dENU
                            var_dENU_0d = cpp_floatvec[cpp_j++];
                            aux_var_dENU_0d_read = true;
                            // assign expression to variable ER
                            var_ER_0d = cpp_floatvec[cpp_j++];
                            aux_var_ER_0d_read = true;
                            // assign expression to variable dER
                            var_dER_0d = cpp_floatvec[cpp_j++];
                            aux_var_dER_0d_read = true;
                            // assign expression to variable ET
                            var_ET_0d = cpp_floatvec[cpp_j++];
                            aux_var_ET_0d_read = true;
                            // assign expression to variable dET
                            var_dET_0d = cpp_floatvec[cpp_j++];
                            aux_var_dET_0d_read = true;
                        }

                        for (int var_k_0d = 1;
                             var_k_0d <= var_NFC_0d; var_k_0d++) {
                            bool aux_var_k_0d_read = true;
                            // read TAB1 record
                            cpp_line = cpp_read_line(cont);
                            // assign expression to variable LDRV
                            var_LDRV_1d.set(var_k_0d, cpp_read_int_field(cpp_line, 2));
                            // assign expression to variable IFC
                            var_IFC_1d.set(var_k_0d, cpp_read_int_field(cpp_line, 3));

                            {
                                py::dict cpp_parent_dict = cpp_current_dict;
                                if (! cpp_parent_dict.contains("fiscomp")) {
                                    cpp_parent_dict["fiscomp"] = py::dict();
                                }
                                py::dict cpp_current_dict = cpp_parent_dict["fiscomp"];

                                if (! cpp_current_dict.contains(py::cast(var_k_0d))) {
                                    cpp_current_dict[py::cast(var_k_0d)] = py::dict();
                                }
                                cpp_current_dict = cpp_current_dict[py::cast(var_k_0d)];
                                {

                                    int cpp_j;
                                    int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                    int cpp_np = cpp_read_int_field(cpp_line, 5);

                                    std::vector<int> NBT;
                                    std::vector<int> INT;
                                    cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                    cpp_j = 0;
                                    for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                        NBT.push_back(cpp_intvec[cpp_j++]);
                                        INT.push_back(cpp_intvec[cpp_j++]);
                                    }

                                    cpp_current_dict["NBT"] = NBT;
                                    cpp_current_dict["INT"] = INT;

                                std::vector<double> Eint;
                                std::vector<double> EIFC;
                                cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                                cpp_j = 0;
                                for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                    Eint.push_back(cpp_floatvec[cpp_j++]);
                                    EIFC.push_back(cpp_floatvec[cpp_j++]);
                                }

                                cpp_current_dict["Eint"] = Eint;
                                cpp_current_dict["EIFC"] = EIFC;
                                }
                                cpp_current_dict = cpp_parent_dict;
                            }
                        }
                    }
                }
            }
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_LFC_0d_read == true)) {
        cpp_current_dict["LFC"] = var_LFC_0d;
    }
    if ((aux_var_NPLY_0d_read == true)) {
        cpp_current_dict["NPLY"] = var_NPLY_0d;
    }
    if ((aux_var_EFR_0d_read == true)) {
        cpp_current_dict["EFR"] = var_EFR_0d;
    }
    if ((aux_var_dEFR_0d_read == true)) {
        cpp_current_dict["dEFR"] = var_dEFR_0d;
    }
    if ((aux_var_ENP_0d_read == true)) {
        cpp_current_dict["ENP"] = var_ENP_0d;
    }
    if ((aux_var_dENP_0d_read == true)) {
        cpp_current_dict["dENP"] = var_dENP_0d;
    }
    if ((aux_var_END_0d_read == true)) {
        cpp_current_dict["END"] = var_END_0d;
    }
    if ((aux_var_dEND_0d_read == true)) {
        cpp_current_dict["dEND"] = var_dEND_0d;
    }
    if ((aux_var_EGP_0d_read == true)) {
        cpp_current_dict["EGP"] = var_EGP_0d;
    }
    if ((aux_var_dEGP_0d_read == true)) {
        cpp_current_dict["dEGP"] = var_dEGP_0d;
    }
    if ((aux_var_EGD_0d_read == true)) {
        cpp_current_dict["EGD"] = var_EGD_0d;
    }
    if ((aux_var_dEGD_0d_read == true)) {
        cpp_current_dict["dEGD"] = var_dEGD_0d;
    }
    if ((aux_var_EB_0d_read == true)) {
        cpp_current_dict["EB"] = var_EB_0d;
    }
    if ((aux_var_dEB_0d_read == true)) {
        cpp_current_dict["dEB"] = var_dEB_0d;
    }
    if ((aux_var_ENU_0d_read == true)) {
        cpp_current_dict["ENU"] = var_ENU_0d;
    }
    if ((aux_var_dENU_0d_read == true)) {
        cpp_current_dict["dENU"] = var_dENU_0d;
    }
    if ((aux_var_ER_0d_read == true)) {
        cpp_current_dict["ER"] = var_ER_0d;
    }
    if ((aux_var_dER_0d_read == true)) {
        cpp_current_dict["dER"] = var_dER_0d;
    }
    if ((aux_var_ET_0d_read == true)) {
        cpp_current_dict["ET"] = var_ET_0d;
    }
    if ((aux_var_dET_0d_read == true)) {
        cpp_current_dict["dET"] = var_dET_0d;
    }
    if ((var_c_EFR_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_c_EFR_1d;
            cpp_current_dict["c_EFR"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["c_EFR"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_dc_EFR_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_dc_EFR_1d;
            cpp_current_dict["dc_EFR"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["dc_EFR"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_c_ENP_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_c_ENP_1d;
            cpp_current_dict["c_ENP"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["c_ENP"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_dc_ENP_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_dc_ENP_1d;
            cpp_current_dict["dc_ENP"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["dc_ENP"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_c_END_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_c_END_1d;
            cpp_current_dict["c_END"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["c_END"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_dc_END_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_dc_END_1d;
            cpp_current_dict["dc_END"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["dc_END"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_c_EGP_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_c_EGP_1d;
            cpp_current_dict["c_EGP"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["c_EGP"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_dc_EGP_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_dc_EGP_1d;
            cpp_current_dict["dc_EGP"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["dc_EGP"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_c_EGD_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_c_EGD_1d;
            cpp_current_dict["c_EGD"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["c_EGD"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_dc_EGD_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_dc_EGD_1d;
            cpp_current_dict["dc_EGD"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["dc_EGD"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_c_EB_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_c_EB_1d;
            cpp_current_dict["c_EB"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["c_EB"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_dc_EB_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_dc_EB_1d;
            cpp_current_dict["dc_EB"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["dc_EB"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_c_ENU_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_c_ENU_1d;
            cpp_current_dict["c_ENU"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["c_ENU"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_dc_ENU_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_dc_ENU_1d;
            cpp_current_dict["dc_ENU"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["dc_ENU"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_c_ER_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_c_ER_1d;
            cpp_current_dict["c_ER"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["c_ER"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_dc_ER_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_dc_ER_1d;
            cpp_current_dict["dc_ER"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["dc_ER"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_c_ET_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_c_ET_1d;
            cpp_current_dict["c_ET"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["c_ET"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_dc_ET_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_dc_ET_1d;
            cpp_current_dict["dc_ET"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["dc_ET"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((aux_var_NFC_0d_read == true)) {
        cpp_current_dict["NFC"] = var_NFC_0d;
    }
    if ((var_LDRV_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_LDRV_1d;
            cpp_current_dict["LDRV"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["LDRV"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_IFC_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_IFC_1d;
            cpp_current_dict["IFC"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["IFC"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    return cpp_current_dict;
}

py::dict parse_mf1mt460_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_LO_0d;
    bool aux_var_LO_0d_read = false;
    int var_NG_0d;
    bool aux_var_NG_0d_read = false;
    NestedVector<double> var_E_1d;
    int var_NNF_0d;
    bool aux_var_NNF_0d_read = false;
    NestedVector<double> var_lambda_1d;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    // evaluate if-elif-else clause
    {
        bool cpp_found_match = false;
        if (! cpp_found_match) {
            // if statement evaluation with lookahead
            {
                std::streampos cpp_old_streampos = cont.tellg();
                {
                    // variable declarations
                    int& glob_var_MAT_0d = var_MAT_0d;
                    int var_MAT_0d = glob_var_MAT_0d;
                    bool& glob_aux_var_MAT_0d_read = aux_var_MAT_0d_read;
                    bool aux_var_MAT_0d_read = glob_aux_var_MAT_0d_read;
                    int& glob_var_MF_0d = var_MF_0d;
                    int var_MF_0d = glob_var_MF_0d;
                    bool& glob_aux_var_MF_0d_read = aux_var_MF_0d_read;
                    bool aux_var_MF_0d_read = glob_aux_var_MF_0d_read;
                    int& glob_var_MT_0d = var_MT_0d;
                    int var_MT_0d = glob_var_MT_0d;
                    bool& glob_aux_var_MT_0d_read = aux_var_MT_0d_read;
                    bool aux_var_MT_0d_read = glob_aux_var_MT_0d_read;
                    double& glob_var_ZA_0d = var_ZA_0d;
                    double var_ZA_0d = glob_var_ZA_0d;
                    bool& glob_aux_var_ZA_0d_read = aux_var_ZA_0d_read;
                    bool aux_var_ZA_0d_read = glob_aux_var_ZA_0d_read;
                    double& glob_var_AWR_0d = var_AWR_0d;
                    double var_AWR_0d = glob_var_AWR_0d;
                    bool& glob_aux_var_AWR_0d_read = aux_var_AWR_0d_read;
                    bool aux_var_AWR_0d_read = glob_aux_var_AWR_0d_read;
                    int& glob_var_LO_0d = var_LO_0d;
                    int var_LO_0d = glob_var_LO_0d;
                    bool& glob_aux_var_LO_0d_read = aux_var_LO_0d_read;
                    bool aux_var_LO_0d_read = glob_aux_var_LO_0d_read;
                    int& glob_var_NG_0d = var_NG_0d;
                    int var_NG_0d = glob_var_NG_0d;
                    bool& glob_aux_var_NG_0d_read = aux_var_NG_0d_read;
                    bool aux_var_NG_0d_read = glob_aux_var_NG_0d_read;
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable ZA
                    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_var_ZA_0d_read = true;
                    // assign expression to variable AWR
                    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_var_AWR_0d_read = true;
                    // assign expression to variable LO
                    var_LO_0d = cpp_read_int_field(cpp_line, 2);
                    aux_var_LO_0d_read = true;
                    // assign expression to variable NG
                    var_NG_0d = cpp_read_int_field(cpp_line, 4);
                    aux_var_NG_0d_read = true;
                    if (((((((var_LO_0d)==(1))))))) {
                        cpp_found_match = true;
                    }
                    cont.seekg(cpp_old_streampos);
                }
                if (cpp_found_match) {
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable ZA
                    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_var_ZA_0d_read = true;
                    // assign expression to variable AWR
                    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_var_AWR_0d_read = true;
                    // assign expression to variable LO
                    var_LO_0d = cpp_read_int_field(cpp_line, 2);
                    aux_var_LO_0d_read = true;
                    // assign expression to variable NG
                    var_NG_0d = cpp_read_int_field(cpp_line, 4);
                    aux_var_NG_0d_read = true;

                    for (int var_i_0d = 1;
                         var_i_0d <= var_NG_0d; var_i_0d++) {
                        bool aux_var_i_0d_read = true;
                        // read TAB1 record
                        cpp_line = cpp_read_line(cont);
                        // assign expression to variable E
                        var_E_1d.set(var_i_0d, cpp_read_float_field(cpp_line.c_str(), 0));
                        if ((! (aux_var_i_0d_read == true))) {
                            // assign expression to variable i
                        }
                        {

                            int cpp_j;
                            int cpp_nr = cpp_read_int_field(cpp_line, 4);
                            int cpp_np = cpp_read_int_field(cpp_line, 5);

                            std::vector<int> NBT;
                            std::vector<int> INT;
                            cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                            cpp_j = 0;
                            for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                NBT.push_back(cpp_intvec[cpp_j++]);
                                INT.push_back(cpp_intvec[cpp_j++]);
                            }

                            cpp_current_dict["NBT"] = NBT;
                            cpp_current_dict["INT"] = INT;

                        std::vector<double> tint;
                        std::vector<double> T;
                        cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                        cpp_j = 0;
                        for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                            tint.push_back(cpp_floatvec[cpp_j++]);
                            T.push_back(cpp_floatvec[cpp_j++]);
                        }

                        cpp_current_dict["tint"] = tint;
                        cpp_current_dict["T"] = T;
                        }
                    }
                }
            }
        }
        if (! cpp_found_match) {
            if (! cpp_found_match) {
                // if statement evaluation with lookahead
                {
                    std::streampos cpp_old_streampos = cont.tellg();
                    {
                        // variable declarations
                        int& glob_var_MAT_0d = var_MAT_0d;
                        int var_MAT_0d = glob_var_MAT_0d;
                        bool& glob_aux_var_MAT_0d_read = aux_var_MAT_0d_read;
                        bool aux_var_MAT_0d_read = glob_aux_var_MAT_0d_read;
                        int& glob_var_MF_0d = var_MF_0d;
                        int var_MF_0d = glob_var_MF_0d;
                        bool& glob_aux_var_MF_0d_read = aux_var_MF_0d_read;
                        bool aux_var_MF_0d_read = glob_aux_var_MF_0d_read;
                        int& glob_var_MT_0d = var_MT_0d;
                        int var_MT_0d = glob_var_MT_0d;
                        bool& glob_aux_var_MT_0d_read = aux_var_MT_0d_read;
                        bool aux_var_MT_0d_read = glob_aux_var_MT_0d_read;
                        double& glob_var_ZA_0d = var_ZA_0d;
                        double var_ZA_0d = glob_var_ZA_0d;
                        bool& glob_aux_var_ZA_0d_read = aux_var_ZA_0d_read;
                        bool aux_var_ZA_0d_read = glob_aux_var_ZA_0d_read;
                        double& glob_var_AWR_0d = var_AWR_0d;
                        double var_AWR_0d = glob_var_AWR_0d;
                        bool& glob_aux_var_AWR_0d_read = aux_var_AWR_0d_read;
                        bool aux_var_AWR_0d_read = glob_aux_var_AWR_0d_read;
                        int& glob_var_LO_0d = var_LO_0d;
                        int var_LO_0d = glob_var_LO_0d;
                        bool& glob_aux_var_LO_0d_read = aux_var_LO_0d_read;
                        bool aux_var_LO_0d_read = glob_aux_var_LO_0d_read;
                        cpp_line = cpp_read_line(cont);
                        // read CONT record
                        // assign expression to variable ZA
                        var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                        aux_var_ZA_0d_read = true;
                        // assign expression to variable AWR
                        var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_var_AWR_0d_read = true;
                        // assign expression to variable LO
                        var_LO_0d = cpp_read_int_field(cpp_line, 2);
                        aux_var_LO_0d_read = true;
                        if (((((((var_LO_0d)==(2))))))) {
                            cpp_found_match = true;
                        }
                        cont.seekg(cpp_old_streampos);
                    }
                    if (cpp_found_match) {
                        cpp_line = cpp_read_line(cont);
                        // read CONT record
                        // assign expression to variable ZA
                        var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                        aux_var_ZA_0d_read = true;
                        // assign expression to variable AWR
                        var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_var_AWR_0d_read = true;
                        // assign expression to variable LO
                        var_LO_0d = cpp_read_int_field(cpp_line, 2);
                        aux_var_LO_0d_read = true;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable NNF
                        var_NNF_0d = cpp_read_int_field(cpp_line, 4);
                        aux_var_NNF_0d_read = true;
                        {
                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                            int cpp_j = 0;
                            // read LIST body

                            for (int var_i_0d = 1;
                                 var_i_0d <= var_NNF_0d; var_i_0d++) {
                                bool aux_var_i_0d_read = true;
                                // read LIST body
                                // assign expression to variable lambda
                                var_lambda_1d.set(var_i_0d, cpp_floatvec[cpp_j++]);
                            }
                        }
                    }
                }
            }
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_LO_0d_read == true)) {
        cpp_current_dict["LO"] = var_LO_0d;
    }
    if ((aux_var_NG_0d_read == true)) {
        cpp_current_dict["NG"] = var_NG_0d;
    }
    if ((var_E_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_E_1d;
            cpp_current_dict["E"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["E"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((aux_var_NNF_0d_read == true)) {
        cpp_current_dict["NNF"] = var_NNF_0d;
    }
    if ((var_lambda_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_lambda_1d;
            cpp_current_dict["lambda"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["lambda"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    return cpp_current_dict;
}

py::dict parse_mf2mt151_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_NIS_0d;
    bool aux_var_NIS_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // assign expression to variable NIS
    var_NIS_0d = cpp_read_int_field(cpp_line, 4);
    aux_var_NIS_0d_read = true;

    for (int var_i_0d = 1;
         var_i_0d <= var_NIS_0d; var_i_0d++) {
        bool aux_var_i_0d_read = true;
        // open section isotope

        {
            py::dict cpp_parent_dict = cpp_current_dict;
            if (! cpp_parent_dict.contains("isotope")) {
                cpp_parent_dict["isotope"] = py::dict();
            }
            py::dict cpp_current_dict = cpp_parent_dict["isotope"];

            if (! cpp_current_dict.contains(py::cast(var_i_0d))) {
                cpp_current_dict[py::cast(var_i_0d)] = py::dict();
            }
            cpp_current_dict = cpp_current_dict[py::cast(var_i_0d)];
            // variable declarations
            double var_ZAI_0d;
            bool aux_var_ZAI_0d_read = false;
            double var_ABN_0d;
            bool aux_var_ABN_0d_read = false;
            int var_LFW_0d;
            bool aux_var_LFW_0d_read = false;
            int var_NER_0d;
            bool aux_var_NER_0d_read = false;
            cpp_line = cpp_read_line(cont);
            // read CONT record
            // assign expression to variable ZAI
            var_ZAI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_var_ZAI_0d_read = true;
            // assign expression to variable ABN
            var_ABN_0d = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_var_ABN_0d_read = true;
            // assign expression to variable LFW
            var_LFW_0d = cpp_read_int_field(cpp_line, 3);
            aux_var_LFW_0d_read = true;
            // assign expression to variable NER
            var_NER_0d = cpp_read_int_field(cpp_line, 4);
            aux_var_NER_0d_read = true;

            for (int var_j_0d = 1;
                 var_j_0d <= var_NER_0d; var_j_0d++) {
                bool aux_var_j_0d_read = true;
                // open section range

                {
                    py::dict cpp_parent_dict = cpp_current_dict;
                    if (! cpp_parent_dict.contains("range")) {
                        cpp_parent_dict["range"] = py::dict();
                    }
                    py::dict cpp_current_dict = cpp_parent_dict["range"];

                    if (! cpp_current_dict.contains(py::cast(var_j_0d))) {
                        cpp_current_dict[py::cast(var_j_0d)] = py::dict();
                    }
                    cpp_current_dict = cpp_current_dict[py::cast(var_j_0d)];
                    // variable declarations
                    double var_EL_0d;
                    bool aux_var_EL_0d_read = false;
                    double var_EH_0d;
                    bool aux_var_EH_0d_read = false;
                    int var_LRU_0d;
                    bool aux_var_LRU_0d_read = false;
                    int var_LRF_0d;
                    bool aux_var_LRF_0d_read = false;
                    int var_NRO_0d;
                    bool aux_var_NRO_0d_read = false;
                    int var_NAPS_0d;
                    bool aux_var_NAPS_0d_read = false;
                    double var_SPI_0d;
                    bool aux_var_SPI_0d_read = false;
                    double var_AP_0d;
                    bool aux_var_AP_0d_read = false;
                    int var_NLS_0d;
                    bool aux_var_NLS_0d_read = false;
                    int var_LAD_0d;
                    bool aux_var_LAD_0d_read = false;
                    int var_NLSC_0d;
                    bool aux_var_NLSC_0d_read = false;
                    int var_IFG_0d;
                    bool aux_var_IFG_0d_read = false;
                    int var_KRM_0d;
                    bool aux_var_KRM_0d_read = false;
                    int var_NJS_0d;
                    bool aux_var_NJS_0d_read = false;
                    int var_KRL_0d;
                    bool aux_var_KRL_0d_read = false;
                    int var_NPP_0d;
                    bool aux_var_NPP_0d_read = false;
                    int cpp_int_val;
                    bool aux_cpp_int_val_read = false;
                    NestedVector<double> var_MA_1d;
                    NestedVector<double> var_MB_1d;
                    NestedVector<double> var_ZA_1d;
                    NestedVector<double> var_ZB_1d;
                    NestedVector<double> var_IA_1d;
                    NestedVector<double> var_IB_1d;
                    NestedVector<double> var_Q_1d;
                    NestedVector<double> var_PNT_1d;
                    NestedVector<double> var_SHF_1d;
                    NestedVector<double> var_MT_1d;
                    NestedVector<double> var_PA_1d;
                    NestedVector<double> var_PB_1d;
                    int var_LSSF_0d;
                    bool aux_var_LSSF_0d_read = false;
                    int var_NE_0d;
                    bool aux_var_NE_0d_read = false;
                    NestedVector<double> var_ES_1d;
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable EL
                    var_EL_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_var_EL_0d_read = true;
                    // assign expression to variable EH
                    var_EH_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_var_EH_0d_read = true;
                    // assign expression to variable LRU
                    var_LRU_0d = cpp_read_int_field(cpp_line, 2);
                    aux_var_LRU_0d_read = true;
                    // assign expression to variable LRF
                    var_LRF_0d = cpp_read_int_field(cpp_line, 3);
                    aux_var_LRF_0d_read = true;
                    // assign expression to variable NRO
                    var_NRO_0d = cpp_read_int_field(cpp_line, 4);
                    aux_var_NRO_0d_read = true;
                    // assign expression to variable NAPS
                    var_NAPS_0d = cpp_read_int_field(cpp_line, 5);
                    aux_var_NAPS_0d_read = true;
                    // evaluate if-elif-else clause
                    {
                        bool cpp_found_match = false;
                        if (! cpp_found_match) {
                            if (((((((((((var_NIS_0d)==(1))))&&(((var_ZAI_0d)==(var_ZA_0d))))&&(((var_ABN_0d)==(1))))&&(((var_LFW_0d)==(0))))&&(((var_NER_0d)==(1))))))) {
                                // if statement evaluation
                                cpp_found_match = true;
                                // evaluate if-elif-else clause
                                {
                                    bool cpp_found_match = false;
                                    if (! cpp_found_match) {
                                        if ((((((((((var_LRU_0d)==(0))))&&(((var_LRF_0d)==(0))))&&(((var_NRO_0d)==(0))))&&(((var_NAPS_0d)==(0))))))) {
                                            // if statement evaluation
                                            cpp_found_match = true;
                                            // evaluate if-elif-else clause
                                            {
                                                bool cpp_found_match = false;
                                                if (! cpp_found_match) {
                                                    // if statement evaluation with lookahead
                                                    {
                                                        std::streampos cpp_old_streampos = cont.tellg();
                                                        {
                                                            // variable declarations
                                                            double& glob_var_EL_0d = var_EL_0d;
                                                            double var_EL_0d = glob_var_EL_0d;
                                                            bool& glob_aux_var_EL_0d_read = aux_var_EL_0d_read;
                                                            bool aux_var_EL_0d_read = glob_aux_var_EL_0d_read;
                                                            double& glob_var_EH_0d = var_EH_0d;
                                                            double var_EH_0d = glob_var_EH_0d;
                                                            bool& glob_aux_var_EH_0d_read = aux_var_EH_0d_read;
                                                            bool aux_var_EH_0d_read = glob_aux_var_EH_0d_read;
                                                            int& glob_var_LRU_0d = var_LRU_0d;
                                                            int var_LRU_0d = glob_var_LRU_0d;
                                                            bool& glob_aux_var_LRU_0d_read = aux_var_LRU_0d_read;
                                                            bool aux_var_LRU_0d_read = glob_aux_var_LRU_0d_read;
                                                            int& glob_var_LRF_0d = var_LRF_0d;
                                                            int var_LRF_0d = glob_var_LRF_0d;
                                                            bool& glob_aux_var_LRF_0d_read = aux_var_LRF_0d_read;
                                                            bool aux_var_LRF_0d_read = glob_aux_var_LRF_0d_read;
                                                            int& glob_var_NRO_0d = var_NRO_0d;
                                                            int var_NRO_0d = glob_var_NRO_0d;
                                                            bool& glob_aux_var_NRO_0d_read = aux_var_NRO_0d_read;
                                                            bool aux_var_NRO_0d_read = glob_aux_var_NRO_0d_read;
                                                            int& glob_var_NAPS_0d = var_NAPS_0d;
                                                            int var_NAPS_0d = glob_var_NAPS_0d;
                                                            bool& glob_aux_var_NAPS_0d_read = aux_var_NAPS_0d_read;
                                                            bool aux_var_NAPS_0d_read = glob_aux_var_NAPS_0d_read;
                                                            double& glob_var_SPI_0d = var_SPI_0d;
                                                            double var_SPI_0d = glob_var_SPI_0d;
                                                            bool& glob_aux_var_SPI_0d_read = aux_var_SPI_0d_read;
                                                            bool aux_var_SPI_0d_read = glob_aux_var_SPI_0d_read;
                                                            double& glob_var_AP_0d = var_AP_0d;
                                                            double var_AP_0d = glob_var_AP_0d;
                                                            bool& glob_aux_var_AP_0d_read = aux_var_AP_0d_read;
                                                            bool aux_var_AP_0d_read = glob_aux_var_AP_0d_read;
                                                            int& glob_var_NLS_0d = var_NLS_0d;
                                                            int var_NLS_0d = glob_var_NLS_0d;
                                                            bool& glob_aux_var_NLS_0d_read = aux_var_NLS_0d_read;
                                                            bool aux_var_NLS_0d_read = glob_aux_var_NLS_0d_read;
                                                            cpp_line = cpp_read_line(cont);
                                                            // read CONT record
                                                            // assign expression to variable SPI
                                                            var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                            aux_var_SPI_0d_read = true;
                                                            // assign expression to variable AP
                                                            var_AP_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                            aux_var_AP_0d_read = true;
                                                            // assign expression to variable NLS
                                                            var_NLS_0d = cpp_read_int_field(cpp_line, 4);
                                                            aux_var_NLS_0d_read = true;
                                                            if (((((((var_NLS_0d)==(0))))))) {
                                                                cpp_found_match = true;
                                                            }
                                                            cont.seekg(cpp_old_streampos);
                                                        }
                                                        if (cpp_found_match) {
                                                            cpp_line = cpp_read_line(cont);
                                                            // read CONT record
                                                            // assign expression to variable SPI
                                                            var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                            aux_var_SPI_0d_read = true;
                                                            // assign expression to variable AP
                                                            var_AP_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                            aux_var_AP_0d_read = true;
                                                            // assign expression to variable NLS
                                                            var_NLS_0d = cpp_read_int_field(cpp_line, 4);
                                                            aux_var_NLS_0d_read = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    // evaluate if-elif-else clause
                    {
                        bool cpp_found_match = false;
                        if (! cpp_found_match) {
                            if (((((((var_LRU_0d)==(1))))))) {
                                // if statement evaluation
                                cpp_found_match = true;
                                // evaluate if-elif-else clause
                                {
                                    bool cpp_found_match = false;
                                    if (! cpp_found_match) {
                                        if ((((((((var_LRF_0d)==(1)))))||((((var_LRF_0d)==(2))))))) {
                                            // if statement evaluation
                                            cpp_found_match = true;
                                            // evaluate if-elif-else clause
                                            {
                                                bool cpp_found_match = false;
                                                if (! cpp_found_match) {
                                                    if (((((((var_NRO_0d)!=(0))))))) {
                                                        // if statement evaluation
                                                        cpp_found_match = true;
                                                        // read TAB1 record
                                                        cpp_line = cpp_read_line(cont);
                                                        {

                                                            int cpp_j;
                                                            int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                                            int cpp_np = cpp_read_int_field(cpp_line, 5);

                                                            std::vector<int> NBT;
                                                            std::vector<int> INT;
                                                            cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                                            cpp_j = 0;
                                                            for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                                                NBT.push_back(cpp_intvec[cpp_j++]);
                                                                INT.push_back(cpp_intvec[cpp_j++]);
                                                            }

                                                            cpp_current_dict["NBT"] = NBT;
                                                            cpp_current_dict["INT"] = INT;

                                                        std::vector<double> Eint;
                                                        std::vector<double> AP;
                                                        cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                                                        cpp_j = 0;
                                                        for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                                            Eint.push_back(cpp_floatvec[cpp_j++]);
                                                            AP.push_back(cpp_floatvec[cpp_j++]);
                                                        }

                                                        cpp_current_dict["Eint"] = Eint;
                                                        cpp_current_dict["AP"] = AP;
                                                        }
                                                    }
                                                }
                                            }
                                            // evaluate if-elif-else clause
                                            {
                                                bool cpp_found_match = false;
                                                if (! cpp_found_match) {
                                                    if ((((((((var_NRO_0d)!=(0))))&&((((((((var_NAPS_0d)==(0)))))||((((var_NAPS_0d)==(1))))))))))) {
                                                        // if statement evaluation
                                                        cpp_found_match = true;
                                                        cpp_line = cpp_read_line(cont);
                                                        // read CONT record
                                                        if ((! (aux_var_SPI_0d_read == true))) {
                                                            // assign expression to variable SPI
                                                            var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                            aux_var_SPI_0d_read = true;
                                                        }
                                                        if ((! (aux_var_NLS_0d_read == true))) {
                                                            // assign expression to variable NLS
                                                            var_NLS_0d = cpp_read_int_field(cpp_line, 4);
                                                            aux_var_NLS_0d_read = true;
                                                        }
                                                    }
                                                }
                                                if (! cpp_found_match) {
                                                    cpp_line = cpp_read_line(cont);
                                                    // read CONT record
                                                    if ((! (aux_var_SPI_0d_read == true))) {
                                                        // assign expression to variable SPI
                                                        var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                        aux_var_SPI_0d_read = true;
                                                    }
                                                    if ((! (aux_var_AP_0d_read == true))) {
                                                        // assign expression to variable AP
                                                        var_AP_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                        aux_var_AP_0d_read = true;
                                                    }
                                                    if ((! (aux_var_NLS_0d_read == true))) {
                                                        // assign expression to variable NLS
                                                        var_NLS_0d = cpp_read_int_field(cpp_line, 4);
                                                        aux_var_NLS_0d_read = true;
                                                    }
                                                }
                                            }

                                            for (int var_m_0d = 1;
                                                 var_m_0d <= var_NLS_0d; var_m_0d++) {
                                                bool aux_var_m_0d_read = true;
                                                // open section spingroup

                                                {
                                                    py::dict cpp_parent_dict = cpp_current_dict;
                                                    if (! cpp_parent_dict.contains("spingroup")) {
                                                        cpp_parent_dict["spingroup"] = py::dict();
                                                    }
                                                    py::dict cpp_current_dict = cpp_parent_dict["spingroup"];

                                                    if (! cpp_current_dict.contains(py::cast(var_m_0d))) {
                                                        cpp_current_dict[py::cast(var_m_0d)] = py::dict();
                                                    }
                                                    cpp_current_dict = cpp_current_dict[py::cast(var_m_0d)];
                                                    // variable declarations
                                                    double var_AWRI_0d;
                                                    bool aux_var_AWRI_0d_read = false;
                                                    double var_QX_0d;
                                                    bool aux_var_QX_0d_read = false;
                                                    int var_L_0d;
                                                    bool aux_var_L_0d_read = false;
                                                    int var_LRX_0d;
                                                    bool aux_var_LRX_0d_read = false;
                                                    int cpp_int_val;
                                                    bool aux_cpp_int_val_read = false;
                                                    int var_NRS_0d;
                                                    bool aux_var_NRS_0d_read = false;
                                                    NestedVector<double> var_ER_1d;
                                                    NestedVector<double> var_AJ_1d;
                                                    NestedVector<double> var_GT_1d;
                                                    NestedVector<double> var_GN_1d;
                                                    NestedVector<double> var_GG_1d;
                                                    NestedVector<double> var_GF_1d;
                                                    cpp_line = cpp_read_line(cont);
                                                    // read LIST record
                                                    // assign expression to variable AWRI
                                                    var_AWRI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                    aux_var_AWRI_0d_read = true;
                                                    // assign expression to variable QX
                                                    var_QX_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                    aux_var_QX_0d_read = true;
                                                    // assign expression to variable L
                                                    var_L_0d = cpp_read_int_field(cpp_line, 2);
                                                    aux_var_L_0d_read = true;
                                                    // assign expression to variable LRX
                                                    var_LRX_0d = cpp_read_int_field(cpp_line, 3);
                                                    aux_var_LRX_0d_read = true;
                                                    // assign expression to variable cpp_int_val
                                                    cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                    aux_cpp_int_val_read = true;
                                                    // assign expression to variable NRS
                                                    var_NRS_0d = (cpp_int_val/6);
                                                    aux_var_NRS_0d_read = true;
                                                    if ((! (aux_var_NRS_0d_read == true))) {
                                                        // assign expression to variable NRS
                                                        var_NRS_0d = cpp_read_int_field(cpp_line, 5);
                                                        aux_var_NRS_0d_read = true;
                                                    }
                                                    {
                                                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                        int cpp_j = 0;
                                                        // read LIST body

                                                        for (int var_k_0d = 1;
                                                             var_k_0d <= var_NRS_0d; var_k_0d++) {
                                                            bool aux_var_k_0d_read = true;
                                                            // read LIST body
                                                            // assign expression to variable ER
                                                            var_ER_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                            // assign expression to variable AJ
                                                            var_AJ_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                            // assign expression to variable GT
                                                            var_GT_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                            // assign expression to variable GN
                                                            var_GN_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                            // assign expression to variable GG
                                                            var_GG_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                            // assign expression to variable GF
                                                            var_GF_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        }
                                                    }
                                                    // store data in Python dictionary
                                                    if ((aux_var_AWRI_0d_read == true)) {
                                                        cpp_current_dict["AWRI"] = var_AWRI_0d;
                                                    }
                                                    if ((aux_var_QX_0d_read == true)) {
                                                        cpp_current_dict["QX"] = var_QX_0d;
                                                    }
                                                    if ((aux_var_L_0d_read == true)) {
                                                        cpp_current_dict["L"] = var_L_0d;
                                                    }
                                                    if ((aux_var_LRX_0d_read == true)) {
                                                        cpp_current_dict["LRX"] = var_LRX_0d;
                                                    }
                                                    if ((aux_var_NRS_0d_read == true)) {
                                                        cpp_current_dict["NRS"] = var_NRS_0d;
                                                    }
                                                    if ((var_ER_1d.get_last_index() != -1)) {
                                                            auto& cpp_curvar0 = var_ER_1d;
                                                            cpp_current_dict["ER"] = py::dict();
                                                            py::dict cpp_curdict0 = cpp_current_dict["ER"];
                                                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                            }
                                                    }
                                                    if ((var_AJ_1d.get_last_index() != -1)) {
                                                            auto& cpp_curvar0 = var_AJ_1d;
                                                            cpp_current_dict["AJ"] = py::dict();
                                                            py::dict cpp_curdict0 = cpp_current_dict["AJ"];
                                                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                            }
                                                    }
                                                    if ((var_GT_1d.get_last_index() != -1)) {
                                                            auto& cpp_curvar0 = var_GT_1d;
                                                            cpp_current_dict["GT"] = py::dict();
                                                            py::dict cpp_curdict0 = cpp_current_dict["GT"];
                                                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                            }
                                                    }
                                                    if ((var_GN_1d.get_last_index() != -1)) {
                                                            auto& cpp_curvar0 = var_GN_1d;
                                                            cpp_current_dict["GN"] = py::dict();
                                                            py::dict cpp_curdict0 = cpp_current_dict["GN"];
                                                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                            }
                                                    }
                                                    if ((var_GG_1d.get_last_index() != -1)) {
                                                            auto& cpp_curvar0 = var_GG_1d;
                                                            cpp_current_dict["GG"] = py::dict();
                                                            py::dict cpp_curdict0 = cpp_current_dict["GG"];
                                                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                            }
                                                    }
                                                    if ((var_GF_1d.get_last_index() != -1)) {
                                                            auto& cpp_curvar0 = var_GF_1d;
                                                            cpp_current_dict["GF"] = py::dict();
                                                            py::dict cpp_curdict0 = cpp_current_dict["GF"];
                                                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                            }
                                                    }
                                                    cpp_current_dict = cpp_parent_dict;
                                                }
                                            }
                                        }
                                    }
                                    if (! cpp_found_match) {
                                        if (! cpp_found_match) {
                                            if (((((((var_LRF_0d)==(3))))))) {
                                                // if statement evaluation
                                                cpp_found_match = true;
                                                // evaluate if-elif-else clause
                                                {
                                                    bool cpp_found_match = false;
                                                    if (! cpp_found_match) {
                                                        if (((((((var_NRO_0d)!=(0))))))) {
                                                            // if statement evaluation
                                                            cpp_found_match = true;
                                                            // read TAB1 record
                                                            cpp_line = cpp_read_line(cont);
                                                            {

                                                                int cpp_j;
                                                                int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                                                int cpp_np = cpp_read_int_field(cpp_line, 5);

                                                                std::vector<int> NBT;
                                                                std::vector<int> INT;
                                                                cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                                                cpp_j = 0;
                                                                for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                                                    NBT.push_back(cpp_intvec[cpp_j++]);
                                                                    INT.push_back(cpp_intvec[cpp_j++]);
                                                                }

                                                                cpp_current_dict["NBT"] = NBT;
                                                                cpp_current_dict["INT"] = INT;

                                                            std::vector<double> Eint;
                                                            std::vector<double> AP;
                                                            cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                                                            cpp_j = 0;
                                                            for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                                                Eint.push_back(cpp_floatvec[cpp_j++]);
                                                                AP.push_back(cpp_floatvec[cpp_j++]);
                                                            }

                                                            cpp_current_dict["Eint"] = Eint;
                                                            cpp_current_dict["AP"] = AP;
                                                            }
                                                        }
                                                    }
                                                }
                                                // evaluate if-elif-else clause
                                                {
                                                    bool cpp_found_match = false;
                                                    if (! cpp_found_match) {
                                                        if ((((((((var_NRO_0d)!=(0))))&&((((((((var_NAPS_0d)==(0)))))||((((var_NAPS_0d)==(1))))))))))) {
                                                            // if statement evaluation
                                                            cpp_found_match = true;
                                                            cpp_line = cpp_read_line(cont);
                                                            // read CONT record
                                                            if ((! (aux_var_SPI_0d_read == true))) {
                                                                // assign expression to variable SPI
                                                                var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                                aux_var_SPI_0d_read = true;
                                                            }
                                                            // assign expression to variable LAD
                                                            var_LAD_0d = cpp_read_int_field(cpp_line, 2);
                                                            aux_var_LAD_0d_read = true;
                                                            if ((! (aux_var_NLS_0d_read == true))) {
                                                                // assign expression to variable NLS
                                                                var_NLS_0d = cpp_read_int_field(cpp_line, 4);
                                                                aux_var_NLS_0d_read = true;
                                                            }
                                                            // assign expression to variable NLSC
                                                            var_NLSC_0d = cpp_read_int_field(cpp_line, 5);
                                                            aux_var_NLSC_0d_read = true;
                                                        }
                                                    }
                                                    if (! cpp_found_match) {
                                                        cpp_line = cpp_read_line(cont);
                                                        // read CONT record
                                                        if ((! (aux_var_SPI_0d_read == true))) {
                                                            // assign expression to variable SPI
                                                            var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                            aux_var_SPI_0d_read = true;
                                                        }
                                                        if ((! (aux_var_AP_0d_read == true))) {
                                                            // assign expression to variable AP
                                                            var_AP_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                            aux_var_AP_0d_read = true;
                                                        }
                                                        // assign expression to variable LAD
                                                        var_LAD_0d = cpp_read_int_field(cpp_line, 2);
                                                        aux_var_LAD_0d_read = true;
                                                        if ((! (aux_var_NLS_0d_read == true))) {
                                                            // assign expression to variable NLS
                                                            var_NLS_0d = cpp_read_int_field(cpp_line, 4);
                                                            aux_var_NLS_0d_read = true;
                                                        }
                                                        // assign expression to variable NLSC
                                                        var_NLSC_0d = cpp_read_int_field(cpp_line, 5);
                                                        aux_var_NLSC_0d_read = true;
                                                    }
                                                }

                                                for (int var_m_0d = 1;
                                                     var_m_0d <= var_NLS_0d; var_m_0d++) {
                                                    bool aux_var_m_0d_read = true;
                                                    // open section spingroup

                                                    {
                                                        py::dict cpp_parent_dict = cpp_current_dict;
                                                        if (! cpp_parent_dict.contains("spingroup")) {
                                                            cpp_parent_dict["spingroup"] = py::dict();
                                                        }
                                                        py::dict cpp_current_dict = cpp_parent_dict["spingroup"];

                                                        if (! cpp_current_dict.contains(py::cast(var_m_0d))) {
                                                            cpp_current_dict[py::cast(var_m_0d)] = py::dict();
                                                        }
                                                        cpp_current_dict = cpp_current_dict[py::cast(var_m_0d)];
                                                        // variable declarations
                                                        double var_AWRI_0d;
                                                        bool aux_var_AWRI_0d_read = false;
                                                        double var_APL_0d;
                                                        bool aux_var_APL_0d_read = false;
                                                        int var_L_0d;
                                                        bool aux_var_L_0d_read = false;
                                                        int cpp_int_val;
                                                        bool aux_cpp_int_val_read = false;
                                                        int var_NRS_0d;
                                                        bool aux_var_NRS_0d_read = false;
                                                        NestedVector<double> var_ER_1d;
                                                        NestedVector<double> var_AJ_1d;
                                                        NestedVector<double> var_GN_1d;
                                                        NestedVector<double> var_GG_1d;
                                                        NestedVector<double> var_GFA_1d;
                                                        NestedVector<double> var_GFB_1d;
                                                        cpp_line = cpp_read_line(cont);
                                                        // read LIST record
                                                        // assign expression to variable AWRI
                                                        var_AWRI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                        aux_var_AWRI_0d_read = true;
                                                        // assign expression to variable APL
                                                        var_APL_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                        aux_var_APL_0d_read = true;
                                                        // assign expression to variable L
                                                        var_L_0d = cpp_read_int_field(cpp_line, 2);
                                                        aux_var_L_0d_read = true;
                                                        // assign expression to variable cpp_int_val
                                                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                        aux_cpp_int_val_read = true;
                                                        // assign expression to variable NRS
                                                        var_NRS_0d = (cpp_int_val/6);
                                                        aux_var_NRS_0d_read = true;
                                                        if ((! (aux_var_NRS_0d_read == true))) {
                                                            // assign expression to variable NRS
                                                            var_NRS_0d = cpp_read_int_field(cpp_line, 5);
                                                            aux_var_NRS_0d_read = true;
                                                        }
                                                        {
                                                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                            int cpp_j = 0;
                                                            // read LIST body

                                                            for (int var_k_0d = 1;
                                                                 var_k_0d <= var_NRS_0d; var_k_0d++) {
                                                                bool aux_var_k_0d_read = true;
                                                                // read LIST body
                                                                // assign expression to variable ER
                                                                var_ER_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                                // assign expression to variable AJ
                                                                var_AJ_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                                // assign expression to variable GN
                                                                var_GN_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                                // assign expression to variable GG
                                                                var_GG_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                                // assign expression to variable GFA
                                                                var_GFA_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                                // assign expression to variable GFB
                                                                var_GFB_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                            }
                                                        }
                                                        // store data in Python dictionary
                                                        if ((aux_var_AWRI_0d_read == true)) {
                                                            cpp_current_dict["AWRI"] = var_AWRI_0d;
                                                        }
                                                        if ((aux_var_APL_0d_read == true)) {
                                                            cpp_current_dict["APL"] = var_APL_0d;
                                                        }
                                                        if ((aux_var_L_0d_read == true)) {
                                                            cpp_current_dict["L"] = var_L_0d;
                                                        }
                                                        if ((aux_var_NRS_0d_read == true)) {
                                                            cpp_current_dict["NRS"] = var_NRS_0d;
                                                        }
                                                        if ((var_ER_1d.get_last_index() != -1)) {
                                                                auto& cpp_curvar0 = var_ER_1d;
                                                                cpp_current_dict["ER"] = py::dict();
                                                                py::dict cpp_curdict0 = cpp_current_dict["ER"];
                                                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                }
                                                        }
                                                        if ((var_AJ_1d.get_last_index() != -1)) {
                                                                auto& cpp_curvar0 = var_AJ_1d;
                                                                cpp_current_dict["AJ"] = py::dict();
                                                                py::dict cpp_curdict0 = cpp_current_dict["AJ"];
                                                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                }
                                                        }
                                                        if ((var_GN_1d.get_last_index() != -1)) {
                                                                auto& cpp_curvar0 = var_GN_1d;
                                                                cpp_current_dict["GN"] = py::dict();
                                                                py::dict cpp_curdict0 = cpp_current_dict["GN"];
                                                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                }
                                                        }
                                                        if ((var_GG_1d.get_last_index() != -1)) {
                                                                auto& cpp_curvar0 = var_GG_1d;
                                                                cpp_current_dict["GG"] = py::dict();
                                                                py::dict cpp_curdict0 = cpp_current_dict["GG"];
                                                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                }
                                                        }
                                                        if ((var_GFA_1d.get_last_index() != -1)) {
                                                                auto& cpp_curvar0 = var_GFA_1d;
                                                                cpp_current_dict["GFA"] = py::dict();
                                                                py::dict cpp_curdict0 = cpp_current_dict["GFA"];
                                                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                }
                                                        }
                                                        if ((var_GFB_1d.get_last_index() != -1)) {
                                                                auto& cpp_curvar0 = var_GFB_1d;
                                                                cpp_current_dict["GFB"] = py::dict();
                                                                py::dict cpp_curdict0 = cpp_current_dict["GFB"];
                                                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                }
                                                        }
                                                        cpp_current_dict = cpp_parent_dict;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (! cpp_found_match) {
                                        if (! cpp_found_match) {
                                            if (((((((var_LRF_0d)==(7))))))) {
                                                // if statement evaluation
                                                cpp_found_match = true;
                                                cpp_line = cpp_read_line(cont);
                                                // read CONT record
                                                // assign expression to variable IFG
                                                var_IFG_0d = cpp_read_int_field(cpp_line, 2);
                                                aux_var_IFG_0d_read = true;
                                                // assign expression to variable KRM
                                                var_KRM_0d = cpp_read_int_field(cpp_line, 3);
                                                aux_var_KRM_0d_read = true;
                                                // assign expression to variable NJS
                                                var_NJS_0d = cpp_read_int_field(cpp_line, 4);
                                                aux_var_NJS_0d_read = true;
                                                // assign expression to variable KRL
                                                var_KRL_0d = cpp_read_int_field(cpp_line, 5);
                                                aux_var_KRL_0d_read = true;
                                                cpp_line = cpp_read_line(cont);
                                                // read LIST record
                                                // assign expression to variable NPP
                                                var_NPP_0d = cpp_read_int_field(cpp_line, 2);
                                                aux_var_NPP_0d_read = true;
                                                if ((! (aux_var_NPP_0d_read == true))) {
                                                    // assign expression to variable cpp_int_val
                                                    cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                    aux_cpp_int_val_read = true;
                                                    // assign expression to variable NPP
                                                    var_NPP_0d = (cpp_int_val/12);
                                                    aux_var_NPP_0d_read = true;
                                                }
                                                if ((! (aux_var_NPP_0d_read == true))) {
                                                    // assign expression to variable cpp_int_val
                                                    cpp_int_val = cpp_read_int_field(cpp_line, 5);
                                                    aux_cpp_int_val_read = true;
                                                    // assign expression to variable NPP
                                                    var_NPP_0d = (cpp_int_val/2);
                                                    aux_var_NPP_0d_read = true;
                                                }
                                                {
                                                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                    int cpp_j = 0;
                                                    // read LIST body

                                                    for (int var_k_0d = 1;
                                                         var_k_0d <= var_NPP_0d; var_k_0d++) {
                                                        bool aux_var_k_0d_read = true;
                                                        // read LIST body
                                                        // assign expression to variable MA
                                                        var_MA_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable MB
                                                        var_MB_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable ZA
                                                        var_ZA_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable ZB
                                                        var_ZB_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable IA
                                                        var_IA_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable IB
                                                        var_IB_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable Q
                                                        var_Q_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable PNT
                                                        var_PNT_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable SHF
                                                        var_SHF_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable MT
                                                        var_MT_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable PA
                                                        var_PA_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable PB
                                                        var_PB_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                    }
                                                }

                                                for (int var_k_0d = 1;
                                                     var_k_0d <= var_NJS_0d; var_k_0d++) {
                                                    bool aux_var_k_0d_read = true;
                                                    // open section spingroup

                                                    {
                                                        py::dict cpp_parent_dict = cpp_current_dict;
                                                        if (! cpp_parent_dict.contains("spingroup")) {
                                                            cpp_parent_dict["spingroup"] = py::dict();
                                                        }
                                                        py::dict cpp_current_dict = cpp_parent_dict["spingroup"];

                                                        if (! cpp_current_dict.contains(py::cast(var_k_0d))) {
                                                            cpp_current_dict[py::cast(var_k_0d)] = py::dict();
                                                        }
                                                        cpp_current_dict = cpp_current_dict[py::cast(var_k_0d)];
                                                        // variable declarations
                                                        double var_AJ_0d;
                                                        bool aux_var_AJ_0d_read = false;
                                                        double var_PJ_0d;
                                                        bool aux_var_PJ_0d_read = false;
                                                        int var_KBK_0d;
                                                        bool aux_var_KBK_0d_read = false;
                                                        int var_KPS_0d;
                                                        bool aux_var_KPS_0d_read = false;
                                                        int cpp_int_val;
                                                        bool aux_cpp_int_val_read = false;
                                                        int var_NCH_0d;
                                                        bool aux_var_NCH_0d_read = false;
                                                        NestedVector<double> var_PPI_1d;
                                                        NestedVector<double> var_L_1d;
                                                        NestedVector<double> var_SCH_1d;
                                                        NestedVector<double> var_BND_1d;
                                                        NestedVector<double> var_APE_1d;
                                                        NestedVector<double> var_APT_1d;
                                                        int var_NRS_0d;
                                                        bool aux_var_NRS_0d_read = false;
                                                        NestedVector<double> var_ER_1d;
                                                        Matrix2d<double> var_GAM_2d;
                                                        int var_NX_0d;
                                                        bool aux_var_NX_0d_read = false;
                                                        cpp_line = cpp_read_line(cont);
                                                        // read LIST record
                                                        // assign expression to variable AJ
                                                        var_AJ_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                        aux_var_AJ_0d_read = true;
                                                        // assign expression to variable PJ
                                                        var_PJ_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                        aux_var_PJ_0d_read = true;
                                                        // assign expression to variable KBK
                                                        var_KBK_0d = cpp_read_int_field(cpp_line, 2);
                                                        aux_var_KBK_0d_read = true;
                                                        // assign expression to variable KPS
                                                        var_KPS_0d = cpp_read_int_field(cpp_line, 3);
                                                        aux_var_KPS_0d_read = true;
                                                        // assign expression to variable cpp_int_val
                                                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                        aux_cpp_int_val_read = true;
                                                        // assign expression to variable NCH
                                                        var_NCH_0d = (cpp_int_val/6);
                                                        aux_var_NCH_0d_read = true;
                                                        if ((! (aux_var_NCH_0d_read == true))) {
                                                            // assign expression to variable NCH
                                                            var_NCH_0d = cpp_read_int_field(cpp_line, 5);
                                                            aux_var_NCH_0d_read = true;
                                                        }
                                                        {
                                                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                            int cpp_j = 0;
                                                            // read LIST body

                                                            for (int var_l_0d = 1;
                                                                 var_l_0d <= var_NCH_0d; var_l_0d++) {
                                                                bool aux_var_l_0d_read = true;
                                                                // read LIST body
                                                                // assign expression to variable PPI
                                                                var_PPI_1d.set(var_l_0d, cpp_floatvec[cpp_j++]);
                                                                // assign expression to variable L
                                                                var_L_1d.set(var_l_0d, cpp_floatvec[cpp_j++]);
                                                                // assign expression to variable SCH
                                                                var_SCH_1d.set(var_l_0d, cpp_floatvec[cpp_j++]);
                                                                // assign expression to variable BND
                                                                var_BND_1d.set(var_l_0d, cpp_floatvec[cpp_j++]);
                                                                // assign expression to variable APE
                                                                var_APE_1d.set(var_l_0d, cpp_floatvec[cpp_j++]);
                                                                // assign expression to variable APT
                                                                var_APT_1d.set(var_l_0d, cpp_floatvec[cpp_j++]);
                                                            }
                                                        }
                                                        // evaluate if-elif-else clause
                                                        {
                                                            bool cpp_found_match = false;
                                                            if (! cpp_found_match) {
                                                                // if statement evaluation with lookahead
                                                                {
                                                                    std::streampos cpp_old_streampos = cont.tellg();
                                                                    {
                                                                        // variable declarations
                                                                        double& glob_var_AJ_0d = var_AJ_0d;
                                                                        double var_AJ_0d = glob_var_AJ_0d;
                                                                        bool& glob_aux_var_AJ_0d_read = aux_var_AJ_0d_read;
                                                                        bool aux_var_AJ_0d_read = glob_aux_var_AJ_0d_read;
                                                                        double& glob_var_PJ_0d = var_PJ_0d;
                                                                        double var_PJ_0d = glob_var_PJ_0d;
                                                                        bool& glob_aux_var_PJ_0d_read = aux_var_PJ_0d_read;
                                                                        bool aux_var_PJ_0d_read = glob_aux_var_PJ_0d_read;
                                                                        int& glob_var_KBK_0d = var_KBK_0d;
                                                                        int var_KBK_0d = glob_var_KBK_0d;
                                                                        bool& glob_aux_var_KBK_0d_read = aux_var_KBK_0d_read;
                                                                        bool aux_var_KBK_0d_read = glob_aux_var_KBK_0d_read;
                                                                        int& glob_var_KPS_0d = var_KPS_0d;
                                                                        int var_KPS_0d = glob_var_KPS_0d;
                                                                        bool& glob_aux_var_KPS_0d_read = aux_var_KPS_0d_read;
                                                                        bool aux_var_KPS_0d_read = glob_aux_var_KPS_0d_read;
                                                                        int& glob_cpp_int_val = cpp_int_val;
                                                                        int cpp_int_val = glob_cpp_int_val;
                                                                        bool& glob_aux_cpp_int_val_read = aux_cpp_int_val_read;
                                                                        bool aux_cpp_int_val_read = glob_aux_cpp_int_val_read;
                                                                        int& glob_var_NCH_0d = var_NCH_0d;
                                                                        int var_NCH_0d = glob_var_NCH_0d;
                                                                        bool& glob_aux_var_NCH_0d_read = aux_var_NCH_0d_read;
                                                                        bool aux_var_NCH_0d_read = glob_aux_var_NCH_0d_read;
                                                                        NestedVector<double>& glob_var_PPI_1d = var_PPI_1d;
                                                                        NestedVector<double> var_PPI_1d = glob_var_PPI_1d;
                                                                        NestedVector<double>& glob_var_L_1d = var_L_1d;
                                                                        NestedVector<double> var_L_1d = glob_var_L_1d;
                                                                        NestedVector<double>& glob_var_SCH_1d = var_SCH_1d;
                                                                        NestedVector<double> var_SCH_1d = glob_var_SCH_1d;
                                                                        NestedVector<double>& glob_var_BND_1d = var_BND_1d;
                                                                        NestedVector<double> var_BND_1d = glob_var_BND_1d;
                                                                        NestedVector<double>& glob_var_APE_1d = var_APE_1d;
                                                                        NestedVector<double> var_APE_1d = glob_var_APE_1d;
                                                                        NestedVector<double>& glob_var_APT_1d = var_APT_1d;
                                                                        NestedVector<double> var_APT_1d = glob_var_APT_1d;
                                                                        int& glob_var_NRS_0d = var_NRS_0d;
                                                                        int var_NRS_0d = glob_var_NRS_0d;
                                                                        bool& glob_aux_var_NRS_0d_read = aux_var_NRS_0d_read;
                                                                        bool aux_var_NRS_0d_read = glob_aux_var_NRS_0d_read;
                                                                        cpp_line = cpp_read_line(cont);
                                                                        // read LIST record
                                                                        // assign expression to variable NRS
                                                                        var_NRS_0d = cpp_read_int_field(cpp_line, 3);
                                                                        aux_var_NRS_0d_read = true;
                                                                        if ((! (aux_var_NRS_0d_read == true))) {
                                                                            throw std::runtime_error("The equation (6*((((1+NCH)+((5-NCH)%6))*NRS)/6))==value cannot be solved for NRS because the modulo operator is not supported.");
                                                                        }
                                                                        if ((! (aux_var_NCH_0d_read == true))) {
                                                                            throw std::runtime_error("The equation (6*((((1+NCH)+((5-NCH)%6))*NRS)/6))==value cannot be solved for NCH because the modulo operator is not supported.");
                                                                        }
                                                                        if ((! (aux_var_NRS_0d_read == true))) {
                                                                            throw std::runtime_error("The equation ((((1+NCH)+((5-NCH)%6))*NRS)/6)==value cannot be solved for NRS because the modulo operator is not supported.");
                                                                        }
                                                                        if ((! (aux_var_NCH_0d_read == true))) {
                                                                            throw std::runtime_error("The equation ((((1+NCH)+((5-NCH)%6))*NRS)/6)==value cannot be solved for NCH because the modulo operator is not supported.");
                                                                        }
                                                                        if (((((((var_NRS_0d)>(0))))))) {
                                                                            cpp_found_match = true;
                                                                        }
                                                                        cont.seekg(cpp_old_streampos);
                                                                    }
                                                                    if (cpp_found_match) {
                                                                        cpp_line = cpp_read_line(cont);
                                                                        // read LIST record
                                                                        // assign expression to variable NRS
                                                                        var_NRS_0d = cpp_read_int_field(cpp_line, 3);
                                                                        aux_var_NRS_0d_read = true;
                                                                        if ((! (aux_var_NRS_0d_read == true))) {
                                                                            throw std::runtime_error("The equation (6*((((1+NCH)+((5-NCH)%6))*NRS)/6))==value cannot be solved for NRS because the modulo operator is not supported.");
                                                                        }
                                                                        if ((! (aux_var_NCH_0d_read == true))) {
                                                                            throw std::runtime_error("The equation (6*((((1+NCH)+((5-NCH)%6))*NRS)/6))==value cannot be solved for NCH because the modulo operator is not supported.");
                                                                        }
                                                                        if ((! (aux_var_NRS_0d_read == true))) {
                                                                            throw std::runtime_error("The equation ((((1+NCH)+((5-NCH)%6))*NRS)/6)==value cannot be solved for NRS because the modulo operator is not supported.");
                                                                        }
                                                                        if ((! (aux_var_NCH_0d_read == true))) {
                                                                            throw std::runtime_error("The equation ((((1+NCH)+((5-NCH)%6))*NRS)/6)==value cannot be solved for NCH because the modulo operator is not supported.");
                                                                        }
                                                                        {
                                                                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                                            int cpp_j = 0;
                                                                            // read LIST body
                                                                            var_GAM_2d.init(1, var_NCH_0d, 1, var_NRS_0d, false, false);

                                                                            for (int var_n_0d = 1;
                                                                                 var_n_0d <= var_NRS_0d; var_n_0d++) {
                                                                                bool aux_var_n_0d_read = true;
                                                                                // read LIST body
                                                                                // assign expression to variable ER
                                                                                var_ER_1d.set(var_n_0d, cpp_floatvec[cpp_j++]);

                                                                                for (int var_m_0d = 1;
                                                                                     var_m_0d <= var_NCH_0d; var_m_0d++) {
                                                                                    bool aux_var_m_0d_read = true;
                                                                                    // read LIST body
                                                                                    // assign expression to variable GAM
                                                                                    var_GAM_2d(var_m_0d, var_n_0d) = cpp_floatvec[cpp_j++];
                                                                                }

                                                                                for (int var_p_0d = 1;
                                                                                     var_p_0d <= ((5-var_NCH_0d)%6); var_p_0d++) {
                                                                                    bool aux_var_p_0d_read = true;
                                                                                    // read LIST body
                                                                                    cpp_j++;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        // evaluate if-elif-else clause
                                                        {
                                                            bool cpp_found_match = false;
                                                            if (! cpp_found_match) {
                                                                // if statement evaluation with lookahead
                                                                {
                                                                    std::streampos cpp_old_streampos = cont.tellg();
                                                                    {
                                                                        // variable declarations
                                                                        double& glob_var_AJ_0d = var_AJ_0d;
                                                                        double var_AJ_0d = glob_var_AJ_0d;
                                                                        bool& glob_aux_var_AJ_0d_read = aux_var_AJ_0d_read;
                                                                        bool aux_var_AJ_0d_read = glob_aux_var_AJ_0d_read;
                                                                        double& glob_var_PJ_0d = var_PJ_0d;
                                                                        double var_PJ_0d = glob_var_PJ_0d;
                                                                        bool& glob_aux_var_PJ_0d_read = aux_var_PJ_0d_read;
                                                                        bool aux_var_PJ_0d_read = glob_aux_var_PJ_0d_read;
                                                                        int& glob_var_KBK_0d = var_KBK_0d;
                                                                        int var_KBK_0d = glob_var_KBK_0d;
                                                                        bool& glob_aux_var_KBK_0d_read = aux_var_KBK_0d_read;
                                                                        bool aux_var_KBK_0d_read = glob_aux_var_KBK_0d_read;
                                                                        int& glob_var_KPS_0d = var_KPS_0d;
                                                                        int var_KPS_0d = glob_var_KPS_0d;
                                                                        bool& glob_aux_var_KPS_0d_read = aux_var_KPS_0d_read;
                                                                        bool aux_var_KPS_0d_read = glob_aux_var_KPS_0d_read;
                                                                        int& glob_cpp_int_val = cpp_int_val;
                                                                        int cpp_int_val = glob_cpp_int_val;
                                                                        bool& glob_aux_cpp_int_val_read = aux_cpp_int_val_read;
                                                                        bool aux_cpp_int_val_read = glob_aux_cpp_int_val_read;
                                                                        int& glob_var_NCH_0d = var_NCH_0d;
                                                                        int var_NCH_0d = glob_var_NCH_0d;
                                                                        bool& glob_aux_var_NCH_0d_read = aux_var_NCH_0d_read;
                                                                        bool aux_var_NCH_0d_read = glob_aux_var_NCH_0d_read;
                                                                        NestedVector<double>& glob_var_PPI_1d = var_PPI_1d;
                                                                        NestedVector<double> var_PPI_1d = glob_var_PPI_1d;
                                                                        NestedVector<double>& glob_var_L_1d = var_L_1d;
                                                                        NestedVector<double> var_L_1d = glob_var_L_1d;
                                                                        NestedVector<double>& glob_var_SCH_1d = var_SCH_1d;
                                                                        NestedVector<double> var_SCH_1d = glob_var_SCH_1d;
                                                                        NestedVector<double>& glob_var_BND_1d = var_BND_1d;
                                                                        NestedVector<double> var_BND_1d = glob_var_BND_1d;
                                                                        NestedVector<double>& glob_var_APE_1d = var_APE_1d;
                                                                        NestedVector<double> var_APE_1d = glob_var_APE_1d;
                                                                        NestedVector<double>& glob_var_APT_1d = var_APT_1d;
                                                                        NestedVector<double> var_APT_1d = glob_var_APT_1d;
                                                                        int& glob_var_NRS_0d = var_NRS_0d;
                                                                        int var_NRS_0d = glob_var_NRS_0d;
                                                                        bool& glob_aux_var_NRS_0d_read = aux_var_NRS_0d_read;
                                                                        bool aux_var_NRS_0d_read = glob_aux_var_NRS_0d_read;
                                                                        NestedVector<double>& glob_var_ER_1d = var_ER_1d;
                                                                        NestedVector<double> var_ER_1d = glob_var_ER_1d;
                                                                        Matrix2d<double>& glob_var_GAM_2d = var_GAM_2d;
                                                                        Matrix2d<double> var_GAM_2d = glob_var_GAM_2d;
                                                                        int& glob_var_NX_0d = var_NX_0d;
                                                                        int var_NX_0d = glob_var_NX_0d;
                                                                        bool& glob_aux_var_NX_0d_read = aux_var_NX_0d_read;
                                                                        bool aux_var_NX_0d_read = glob_aux_var_NX_0d_read;
                                                                        cpp_line = cpp_read_line(cont);
                                                                        // read LIST record
                                                                        if ((! (aux_var_NRS_0d_read == true))) {
                                                                            // assign expression to variable NRS
                                                                            var_NRS_0d = cpp_read_int_field(cpp_line, 3);
                                                                            aux_var_NRS_0d_read = true;
                                                                        }
                                                                        // assign expression to variable cpp_int_val
                                                                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                                        aux_cpp_int_val_read = true;
                                                                        // assign expression to variable NX
                                                                        var_NX_0d = (cpp_int_val/6);
                                                                        aux_var_NX_0d_read = true;
                                                                        if ((! (aux_var_NX_0d_read == true))) {
                                                                            // assign expression to variable NX
                                                                            var_NX_0d = cpp_read_int_field(cpp_line, 5);
                                                                            aux_var_NX_0d_read = true;
                                                                        }
                                                                        if ((((((((var_NRS_0d)==(0))))&&(((var_NX_0d)==(1))))))) {
                                                                            cpp_found_match = true;
                                                                        }
                                                                        cont.seekg(cpp_old_streampos);
                                                                    }
                                                                    if (cpp_found_match) {
                                                                        cpp_line = cpp_read_line(cont);
                                                                        // read LIST record
                                                                        if ((! (aux_var_NRS_0d_read == true))) {
                                                                            // assign expression to variable NRS
                                                                            var_NRS_0d = cpp_read_int_field(cpp_line, 3);
                                                                            aux_var_NRS_0d_read = true;
                                                                        }
                                                                        // assign expression to variable cpp_int_val
                                                                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                                        aux_cpp_int_val_read = true;
                                                                        // assign expression to variable NX
                                                                        var_NX_0d = (cpp_int_val/6);
                                                                        aux_var_NX_0d_read = true;
                                                                        if ((! (aux_var_NX_0d_read == true))) {
                                                                            // assign expression to variable NX
                                                                            var_NX_0d = cpp_read_int_field(cpp_line, 5);
                                                                            aux_var_NX_0d_read = true;
                                                                        }
                                                                        {
                                                                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                                            int cpp_j = 0;
                                                                            // read LIST body

                                                                            for (int var_m_0d = 1;
                                                                                 var_m_0d <= 6; var_m_0d++) {
                                                                                bool aux_var_m_0d_read = true;
                                                                                // read LIST body
                                                                                cpp_j++;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        // store data in Python dictionary
                                                        if ((aux_var_AJ_0d_read == true)) {
                                                            cpp_current_dict["AJ"] = var_AJ_0d;
                                                        }
                                                        if ((aux_var_PJ_0d_read == true)) {
                                                            cpp_current_dict["PJ"] = var_PJ_0d;
                                                        }
                                                        if ((aux_var_KBK_0d_read == true)) {
                                                            cpp_current_dict["KBK"] = var_KBK_0d;
                                                        }
                                                        if ((aux_var_KPS_0d_read == true)) {
                                                            cpp_current_dict["KPS"] = var_KPS_0d;
                                                        }
                                                        if ((aux_var_NCH_0d_read == true)) {
                                                            cpp_current_dict["NCH"] = var_NCH_0d;
                                                        }
                                                        if ((var_PPI_1d.get_last_index() != -1)) {
                                                                auto& cpp_curvar0 = var_PPI_1d;
                                                                cpp_current_dict["PPI"] = py::dict();
                                                                py::dict cpp_curdict0 = cpp_current_dict["PPI"];
                                                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                }
                                                        }
                                                        if ((var_L_1d.get_last_index() != -1)) {
                                                                auto& cpp_curvar0 = var_L_1d;
                                                                cpp_current_dict["L"] = py::dict();
                                                                py::dict cpp_curdict0 = cpp_current_dict["L"];
                                                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                }
                                                        }
                                                        if ((var_SCH_1d.get_last_index() != -1)) {
                                                                auto& cpp_curvar0 = var_SCH_1d;
                                                                cpp_current_dict["SCH"] = py::dict();
                                                                py::dict cpp_curdict0 = cpp_current_dict["SCH"];
                                                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                }
                                                        }
                                                        if ((var_BND_1d.get_last_index() != -1)) {
                                                                auto& cpp_curvar0 = var_BND_1d;
                                                                cpp_current_dict["BND"] = py::dict();
                                                                py::dict cpp_curdict0 = cpp_current_dict["BND"];
                                                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                }
                                                        }
                                                        if ((var_APE_1d.get_last_index() != -1)) {
                                                                auto& cpp_curvar0 = var_APE_1d;
                                                                cpp_current_dict["APE"] = py::dict();
                                                                py::dict cpp_curdict0 = cpp_current_dict["APE"];
                                                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                }
                                                        }
                                                        if ((var_APT_1d.get_last_index() != -1)) {
                                                                auto& cpp_curvar0 = var_APT_1d;
                                                                cpp_current_dict["APT"] = py::dict();
                                                                py::dict cpp_curdict0 = cpp_current_dict["APT"];
                                                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                }
                                                        }
                                                        if ((aux_var_NRS_0d_read == true)) {
                                                            cpp_current_dict["NRS"] = var_NRS_0d;
                                                        }
                                                        if ((var_ER_1d.get_last_index() != -1)) {
                                                                auto& cpp_curvar0 = var_ER_1d;
                                                                cpp_current_dict["ER"] = py::dict();
                                                                py::dict cpp_curdict0 = cpp_current_dict["ER"];
                                                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                }
                                                        }
                                                        if (var_GAM_2d.did_read()) {
                                                                cpp_current_dict["GAM"] = py::dict();
                                                                py::dict cpp_curdict0 = cpp_current_dict["GAM"];
                                                                for (int cpp_i1 = var_GAM_2d.get_row_start_index(); cpp_i1 <= var_GAM_2d.get_row_last_index(); cpp_i1++) {
                                                                    cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                                                                    py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                                                                    for (int cpp_i2 = var_GAM_2d.get_col_start_index(cpp_i1); cpp_i2 <= var_GAM_2d.get_col_last_index(cpp_i1); cpp_i2++) {
                                                                        cpp_curdict1[py::cast(cpp_i2)] = var_GAM_2d(cpp_i1, cpp_i2);
                                                                    }
                                                                }
                                                        }
                                                        if ((aux_var_NX_0d_read == true)) {
                                                            cpp_current_dict["NX"] = var_NX_0d;
                                                        }
                                                        cpp_current_dict = cpp_parent_dict;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (! cpp_found_match) {
                            if (! cpp_found_match) {
                                if (((((((var_LRU_0d)==(2))))))) {
                                    // if statement evaluation
                                    cpp_found_match = true;
                                    // evaluate if-elif-else clause
                                    {
                                        bool cpp_found_match = false;
                                        if (! cpp_found_match) {
                                            if ((((((((var_LFW_0d)==(0))))&&(((var_LRF_0d)==(1))))))) {
                                                // if statement evaluation
                                                cpp_found_match = true;
                                                // evaluate if-elif-else clause
                                                {
                                                    bool cpp_found_match = false;
                                                    if (! cpp_found_match) {
                                                        if (((((((var_NRO_0d)!=(0))))))) {
                                                            // if statement evaluation
                                                            cpp_found_match = true;
                                                            // read TAB1 record
                                                            cpp_line = cpp_read_line(cont);
                                                            {

                                                                int cpp_j;
                                                                int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                                                int cpp_np = cpp_read_int_field(cpp_line, 5);

                                                                std::vector<int> NBT;
                                                                std::vector<int> INT;
                                                                cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                                                cpp_j = 0;
                                                                for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                                                    NBT.push_back(cpp_intvec[cpp_j++]);
                                                                    INT.push_back(cpp_intvec[cpp_j++]);
                                                                }

                                                                cpp_current_dict["NBT"] = NBT;
                                                                cpp_current_dict["INT"] = INT;

                                                            std::vector<double> Eint;
                                                            std::vector<double> AP;
                                                            cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                                                            cpp_j = 0;
                                                            for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                                                Eint.push_back(cpp_floatvec[cpp_j++]);
                                                                AP.push_back(cpp_floatvec[cpp_j++]);
                                                            }

                                                            cpp_current_dict["Eint"] = Eint;
                                                            cpp_current_dict["AP"] = AP;
                                                            }
                                                        }
                                                    }
                                                }
                                                // evaluate if-elif-else clause
                                                {
                                                    bool cpp_found_match = false;
                                                    if (! cpp_found_match) {
                                                        if ((((((((var_NRO_0d)!=(0))))&&((((((((var_NAPS_0d)==(0)))))||((((var_NAPS_0d)==(1))))))))))) {
                                                            // if statement evaluation
                                                            cpp_found_match = true;
                                                            cpp_line = cpp_read_line(cont);
                                                            // read CONT record
                                                            if ((! (aux_var_SPI_0d_read == true))) {
                                                                // assign expression to variable SPI
                                                                var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                                aux_var_SPI_0d_read = true;
                                                            }
                                                            // assign expression to variable LSSF
                                                            var_LSSF_0d = cpp_read_int_field(cpp_line, 2);
                                                            aux_var_LSSF_0d_read = true;
                                                            if ((! (aux_var_NLS_0d_read == true))) {
                                                                // assign expression to variable NLS
                                                                var_NLS_0d = cpp_read_int_field(cpp_line, 4);
                                                                aux_var_NLS_0d_read = true;
                                                            }
                                                        }
                                                    }
                                                    if (! cpp_found_match) {
                                                        cpp_line = cpp_read_line(cont);
                                                        // read CONT record
                                                        if ((! (aux_var_SPI_0d_read == true))) {
                                                            // assign expression to variable SPI
                                                            var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                            aux_var_SPI_0d_read = true;
                                                        }
                                                        if ((! (aux_var_AP_0d_read == true))) {
                                                            // assign expression to variable AP
                                                            var_AP_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                            aux_var_AP_0d_read = true;
                                                        }
                                                        // assign expression to variable LSSF
                                                        var_LSSF_0d = cpp_read_int_field(cpp_line, 2);
                                                        aux_var_LSSF_0d_read = true;
                                                        if ((! (aux_var_NLS_0d_read == true))) {
                                                            // assign expression to variable NLS
                                                            var_NLS_0d = cpp_read_int_field(cpp_line, 4);
                                                            aux_var_NLS_0d_read = true;
                                                        }
                                                    }
                                                }

                                                for (int var_p_0d = 1;
                                                     var_p_0d <= var_NLS_0d; var_p_0d++) {
                                                    bool aux_var_p_0d_read = true;
                                                    // open section l_group

                                                    {
                                                        py::dict cpp_parent_dict = cpp_current_dict;
                                                        if (! cpp_parent_dict.contains("l_group")) {
                                                            cpp_parent_dict["l_group"] = py::dict();
                                                        }
                                                        py::dict cpp_current_dict = cpp_parent_dict["l_group"];

                                                        if (! cpp_current_dict.contains(py::cast(var_p_0d))) {
                                                            cpp_current_dict[py::cast(var_p_0d)] = py::dict();
                                                        }
                                                        cpp_current_dict = cpp_current_dict[py::cast(var_p_0d)];
                                                        // variable declarations
                                                        double var_AWRI_0d;
                                                        bool aux_var_AWRI_0d_read = false;
                                                        int var_L_0d;
                                                        bool aux_var_L_0d_read = false;
                                                        int cpp_int_val;
                                                        bool aux_cpp_int_val_read = false;
                                                        int var_NJS_0d;
                                                        bool aux_var_NJS_0d_read = false;
                                                        NestedVector<double> var_D_1d;
                                                        NestedVector<double> var_AJ_1d;
                                                        NestedVector<double> var_AMUN_1d;
                                                        NestedVector<double> var_GN0_1d;
                                                        NestedVector<double> var_GG_1d;
                                                        cpp_line = cpp_read_line(cont);
                                                        // read LIST record
                                                        // assign expression to variable AWRI
                                                        var_AWRI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                        aux_var_AWRI_0d_read = true;
                                                        // assign expression to variable L
                                                        var_L_0d = cpp_read_int_field(cpp_line, 2);
                                                        aux_var_L_0d_read = true;
                                                        // assign expression to variable cpp_int_val
                                                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                        aux_cpp_int_val_read = true;
                                                        // assign expression to variable NJS
                                                        var_NJS_0d = (cpp_int_val/6);
                                                        aux_var_NJS_0d_read = true;
                                                        if ((! (aux_var_NJS_0d_read == true))) {
                                                            // assign expression to variable NJS
                                                            var_NJS_0d = cpp_read_int_field(cpp_line, 5);
                                                            aux_var_NJS_0d_read = true;
                                                        }
                                                        {
                                                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                            int cpp_j = 0;
                                                            // read LIST body

                                                            for (int var_m_0d = 1;
                                                                 var_m_0d <= var_NJS_0d; var_m_0d++) {
                                                                bool aux_var_m_0d_read = true;
                                                                // read LIST body
                                                                // assign expression to variable D
                                                                var_D_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                                // assign expression to variable AJ
                                                                var_AJ_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                                // assign expression to variable AMUN
                                                                var_AMUN_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                                // assign expression to variable GN0
                                                                var_GN0_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                                // assign expression to variable GG
                                                                var_GG_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                                cpp_j++;
                                                            }
                                                        }
                                                        // store data in Python dictionary
                                                        if ((aux_var_AWRI_0d_read == true)) {
                                                            cpp_current_dict["AWRI"] = var_AWRI_0d;
                                                        }
                                                        if ((aux_var_L_0d_read == true)) {
                                                            cpp_current_dict["L"] = var_L_0d;
                                                        }
                                                        if ((aux_var_NJS_0d_read == true)) {
                                                            cpp_current_dict["NJS"] = var_NJS_0d;
                                                        }
                                                        if ((var_D_1d.get_last_index() != -1)) {
                                                                auto& cpp_curvar0 = var_D_1d;
                                                                cpp_current_dict["D"] = py::dict();
                                                                py::dict cpp_curdict0 = cpp_current_dict["D"];
                                                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                }
                                                        }
                                                        if ((var_AJ_1d.get_last_index() != -1)) {
                                                                auto& cpp_curvar0 = var_AJ_1d;
                                                                cpp_current_dict["AJ"] = py::dict();
                                                                py::dict cpp_curdict0 = cpp_current_dict["AJ"];
                                                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                }
                                                        }
                                                        if ((var_AMUN_1d.get_last_index() != -1)) {
                                                                auto& cpp_curvar0 = var_AMUN_1d;
                                                                cpp_current_dict["AMUN"] = py::dict();
                                                                py::dict cpp_curdict0 = cpp_current_dict["AMUN"];
                                                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                }
                                                        }
                                                        if ((var_GN0_1d.get_last_index() != -1)) {
                                                                auto& cpp_curvar0 = var_GN0_1d;
                                                                cpp_current_dict["GN0"] = py::dict();
                                                                py::dict cpp_curdict0 = cpp_current_dict["GN0"];
                                                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                }
                                                        }
                                                        if ((var_GG_1d.get_last_index() != -1)) {
                                                                auto& cpp_curvar0 = var_GG_1d;
                                                                cpp_current_dict["GG"] = py::dict();
                                                                py::dict cpp_curdict0 = cpp_current_dict["GG"];
                                                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                }
                                                        }
                                                        cpp_current_dict = cpp_parent_dict;
                                                    }
                                                }
                                            }
                                        }
                                        if (! cpp_found_match) {
                                            if (! cpp_found_match) {
                                                if ((((((((var_LFW_0d)==(1))))&&(((var_LRF_0d)==(1))))))) {
                                                    // if statement evaluation
                                                    cpp_found_match = true;
                                                    cpp_line = cpp_read_line(cont);
                                                    // read LIST record
                                                    if ((! (aux_var_SPI_0d_read == true))) {
                                                        // assign expression to variable SPI
                                                        var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                        aux_var_SPI_0d_read = true;
                                                    }
                                                    if ((! (aux_var_AP_0d_read == true))) {
                                                        // assign expression to variable AP
                                                        var_AP_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                        aux_var_AP_0d_read = true;
                                                    }
                                                    // assign expression to variable LSSF
                                                    var_LSSF_0d = cpp_read_int_field(cpp_line, 2);
                                                    aux_var_LSSF_0d_read = true;
                                                    // assign expression to variable NE
                                                    var_NE_0d = cpp_read_int_field(cpp_line, 4);
                                                    aux_var_NE_0d_read = true;
                                                    if ((! (aux_var_NLS_0d_read == true))) {
                                                        // assign expression to variable NLS
                                                        var_NLS_0d = cpp_read_int_field(cpp_line, 5);
                                                        aux_var_NLS_0d_read = true;
                                                    }
                                                    {
                                                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                        int cpp_j = 0;
                                                        // read LIST body

                                                        for (int var_p_0d = 1;
                                                             var_p_0d <= var_NE_0d; var_p_0d++) {
                                                            bool aux_var_p_0d_read = true;
                                                            // read LIST body
                                                            // assign expression to variable ES
                                                            var_ES_1d.set(var_p_0d, cpp_floatvec[cpp_j++]);
                                                        }
                                                    }

                                                    for (int var_p_0d = 1;
                                                         var_p_0d <= var_NLS_0d; var_p_0d++) {
                                                        bool aux_var_p_0d_read = true;
                                                        // open section j_group

                                                        {
                                                            py::dict cpp_parent_dict = cpp_current_dict;
                                                            if (! cpp_parent_dict.contains("j_group")) {
                                                                cpp_parent_dict["j_group"] = py::dict();
                                                            }
                                                            py::dict cpp_current_dict = cpp_parent_dict["j_group"];

                                                            if (! cpp_current_dict.contains(py::cast(var_p_0d))) {
                                                                cpp_current_dict[py::cast(var_p_0d)] = py::dict();
                                                            }
                                                            cpp_current_dict = cpp_current_dict[py::cast(var_p_0d)];
                                                            // variable declarations
                                                            double var_AWRI_0d;
                                                            bool aux_var_AWRI_0d_read = false;
                                                            int var_L_0d;
                                                            bool aux_var_L_0d_read = false;
                                                            int var_NJS_0d;
                                                            bool aux_var_NJS_0d_read = false;
                                                            cpp_line = cpp_read_line(cont);
                                                            // read CONT record
                                                            // assign expression to variable AWRI
                                                            var_AWRI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                            aux_var_AWRI_0d_read = true;
                                                            // assign expression to variable L
                                                            var_L_0d = cpp_read_int_field(cpp_line, 2);
                                                            aux_var_L_0d_read = true;
                                                            // assign expression to variable NJS
                                                            var_NJS_0d = cpp_read_int_field(cpp_line, 4);
                                                            aux_var_NJS_0d_read = true;

                                                            for (int var_n_0d = 1;
                                                                 var_n_0d <= var_NJS_0d; var_n_0d++) {
                                                                bool aux_var_n_0d_read = true;
                                                                // open section subsec

                                                                {
                                                                    py::dict cpp_parent_dict = cpp_current_dict;
                                                                    if (! cpp_parent_dict.contains("subsec")) {
                                                                        cpp_parent_dict["subsec"] = py::dict();
                                                                    }
                                                                    py::dict cpp_current_dict = cpp_parent_dict["subsec"];

                                                                    if (! cpp_current_dict.contains(py::cast(var_n_0d))) {
                                                                        cpp_current_dict[py::cast(var_n_0d)] = py::dict();
                                                                    }
                                                                    cpp_current_dict = cpp_current_dict[py::cast(var_n_0d)];
                                                                    // variable declarations
                                                                    int var_L_0d;
                                                                    bool aux_var_L_0d_read = false;
                                                                    int var_MUF_0d;
                                                                    bool aux_var_MUF_0d_read = false;
                                                                    int cpp_int_val;
                                                                    bool aux_cpp_int_val_read = false;
                                                                    int var_NE_0d;
                                                                    bool aux_var_NE_0d_read = false;
                                                                    double var_D_0d;
                                                                    bool aux_var_D_0d_read = false;
                                                                    double var_AJ_0d;
                                                                    bool aux_var_AJ_0d_read = false;
                                                                    double var_AMUN_0d;
                                                                    bool aux_var_AMUN_0d_read = false;
                                                                    double var_GN0_0d;
                                                                    bool aux_var_GN0_0d_read = false;
                                                                    double var_GG_0d;
                                                                    bool aux_var_GG_0d_read = false;
                                                                    NestedVector<double> var_GF_1d;
                                                                    cpp_line = cpp_read_line(cont);
                                                                    // read LIST record
                                                                    if ((! (aux_var_L_0d_read == true))) {
                                                                        // assign expression to variable L
                                                                        var_L_0d = cpp_read_int_field(cpp_line, 2);
                                                                        aux_var_L_0d_read = true;
                                                                    }
                                                                    // assign expression to variable MUF
                                                                    var_MUF_0d = cpp_read_int_field(cpp_line, 3);
                                                                    aux_var_MUF_0d_read = true;
                                                                    if ((! (aux_var_NE_0d_read == true))) {
                                                                        // assign expression to variable cpp_int_val
                                                                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                                        aux_cpp_int_val_read = true;
                                                                        // assign expression to variable NE
                                                                        var_NE_0d = (cpp_int_val+(-6));
                                                                        aux_var_NE_0d_read = true;
                                                                    }
                                                                    {
                                                                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                                        int cpp_j = 0;
                                                                        // read LIST body
                                                                        // assign expression to variable D
                                                                        var_D_0d = cpp_floatvec[cpp_j++];
                                                                        aux_var_D_0d_read = true;
                                                                        // assign expression to variable AJ
                                                                        var_AJ_0d = cpp_floatvec[cpp_j++];
                                                                        aux_var_AJ_0d_read = true;
                                                                        // assign expression to variable AMUN
                                                                        var_AMUN_0d = cpp_floatvec[cpp_j++];
                                                                        aux_var_AMUN_0d_read = true;
                                                                        // assign expression to variable GN0
                                                                        var_GN0_0d = cpp_floatvec[cpp_j++];
                                                                        aux_var_GN0_0d_read = true;
                                                                        // assign expression to variable GG
                                                                        var_GG_0d = cpp_floatvec[cpp_j++];
                                                                        aux_var_GG_0d_read = true;
                                                                        cpp_j++;

                                                                        for (int var_m_0d = 1;
                                                                             var_m_0d <= var_NE_0d; var_m_0d++) {
                                                                            bool aux_var_m_0d_read = true;
                                                                            // read LIST body
                                                                            // assign expression to variable GF
                                                                            var_GF_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                                        }
                                                                    }
                                                                    // store data in Python dictionary
                                                                    if ((aux_var_L_0d_read == true)) {
                                                                        cpp_current_dict["L"] = var_L_0d;
                                                                    }
                                                                    if ((aux_var_MUF_0d_read == true)) {
                                                                        cpp_current_dict["MUF"] = var_MUF_0d;
                                                                    }
                                                                    if ((aux_var_NE_0d_read == true)) {
                                                                        cpp_current_dict["NE"] = var_NE_0d;
                                                                    }
                                                                    if ((aux_var_D_0d_read == true)) {
                                                                        cpp_current_dict["D"] = var_D_0d;
                                                                    }
                                                                    if ((aux_var_AJ_0d_read == true)) {
                                                                        cpp_current_dict["AJ"] = var_AJ_0d;
                                                                    }
                                                                    if ((aux_var_AMUN_0d_read == true)) {
                                                                        cpp_current_dict["AMUN"] = var_AMUN_0d;
                                                                    }
                                                                    if ((aux_var_GN0_0d_read == true)) {
                                                                        cpp_current_dict["GN0"] = var_GN0_0d;
                                                                    }
                                                                    if ((aux_var_GG_0d_read == true)) {
                                                                        cpp_current_dict["GG"] = var_GG_0d;
                                                                    }
                                                                    if ((var_GF_1d.get_last_index() != -1)) {
                                                                            auto& cpp_curvar0 = var_GF_1d;
                                                                            cpp_current_dict["GF"] = py::dict();
                                                                            py::dict cpp_curdict0 = cpp_current_dict["GF"];
                                                                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                            }
                                                                    }
                                                                    cpp_current_dict = cpp_parent_dict;
                                                                }
                                                            }
                                                            // store data in Python dictionary
                                                            if ((aux_var_AWRI_0d_read == true)) {
                                                                cpp_current_dict["AWRI"] = var_AWRI_0d;
                                                            }
                                                            if ((aux_var_L_0d_read == true)) {
                                                                cpp_current_dict["L"] = var_L_0d;
                                                            }
                                                            if ((aux_var_NJS_0d_read == true)) {
                                                                cpp_current_dict["NJS"] = var_NJS_0d;
                                                            }
                                                            cpp_current_dict = cpp_parent_dict;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (! cpp_found_match) {
                                            if (! cpp_found_match) {
                                                if (((((((((((((var_LFW_0d)==(0)))))||((((var_LFW_0d)==(1))))))))&&(((var_LRF_0d)==(2))))))) {
                                                    // if statement evaluation
                                                    cpp_found_match = true;
                                                    // evaluate if-elif-else clause
                                                    {
                                                        bool cpp_found_match = false;
                                                        if (! cpp_found_match) {
                                                            if (((((((var_NRO_0d)!=(0))))))) {
                                                                // if statement evaluation
                                                                cpp_found_match = true;
                                                                // read TAB1 record
                                                                cpp_line = cpp_read_line(cont);
                                                                {

                                                                    int cpp_j;
                                                                    int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                                                    int cpp_np = cpp_read_int_field(cpp_line, 5);

                                                                    std::vector<int> NBT;
                                                                    std::vector<int> INT;
                                                                    cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                                                    cpp_j = 0;
                                                                    for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                                                        NBT.push_back(cpp_intvec[cpp_j++]);
                                                                        INT.push_back(cpp_intvec[cpp_j++]);
                                                                    }

                                                                    cpp_current_dict["NBT"] = NBT;
                                                                    cpp_current_dict["INT"] = INT;

                                                                std::vector<double> Eint;
                                                                std::vector<double> AP;
                                                                cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                                                                cpp_j = 0;
                                                                for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                                                    Eint.push_back(cpp_floatvec[cpp_j++]);
                                                                    AP.push_back(cpp_floatvec[cpp_j++]);
                                                                }

                                                                cpp_current_dict["Eint"] = Eint;
                                                                cpp_current_dict["AP"] = AP;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    // evaluate if-elif-else clause
                                                    {
                                                        bool cpp_found_match = false;
                                                        if (! cpp_found_match) {
                                                            if ((((((((var_NRO_0d)!=(0))))&&((((((((var_NAPS_0d)==(0)))))||((((var_NAPS_0d)==(1))))))))))) {
                                                                // if statement evaluation
                                                                cpp_found_match = true;
                                                                cpp_line = cpp_read_line(cont);
                                                                // read CONT record
                                                                if ((! (aux_var_SPI_0d_read == true))) {
                                                                    // assign expression to variable SPI
                                                                    var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                                    aux_var_SPI_0d_read = true;
                                                                }
                                                                // assign expression to variable LSSF
                                                                var_LSSF_0d = cpp_read_int_field(cpp_line, 2);
                                                                aux_var_LSSF_0d_read = true;
                                                                if ((! (aux_var_NLS_0d_read == true))) {
                                                                    // assign expression to variable NLS
                                                                    var_NLS_0d = cpp_read_int_field(cpp_line, 4);
                                                                    aux_var_NLS_0d_read = true;
                                                                }
                                                            }
                                                        }
                                                        if (! cpp_found_match) {
                                                            cpp_line = cpp_read_line(cont);
                                                            // read CONT record
                                                            if ((! (aux_var_SPI_0d_read == true))) {
                                                                // assign expression to variable SPI
                                                                var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                                aux_var_SPI_0d_read = true;
                                                            }
                                                            if ((! (aux_var_AP_0d_read == true))) {
                                                                // assign expression to variable AP
                                                                var_AP_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                                aux_var_AP_0d_read = true;
                                                            }
                                                            // assign expression to variable LSSF
                                                            var_LSSF_0d = cpp_read_int_field(cpp_line, 2);
                                                            aux_var_LSSF_0d_read = true;
                                                            if ((! (aux_var_NLS_0d_read == true))) {
                                                                // assign expression to variable NLS
                                                                var_NLS_0d = cpp_read_int_field(cpp_line, 4);
                                                                aux_var_NLS_0d_read = true;
                                                            }
                                                        }
                                                    }

                                                    for (int var_p_0d = 1;
                                                         var_p_0d <= var_NLS_0d; var_p_0d++) {
                                                        bool aux_var_p_0d_read = true;
                                                        // open section l_group

                                                        {
                                                            py::dict cpp_parent_dict = cpp_current_dict;
                                                            if (! cpp_parent_dict.contains("l_group")) {
                                                                cpp_parent_dict["l_group"] = py::dict();
                                                            }
                                                            py::dict cpp_current_dict = cpp_parent_dict["l_group"];

                                                            if (! cpp_current_dict.contains(py::cast(var_p_0d))) {
                                                                cpp_current_dict[py::cast(var_p_0d)] = py::dict();
                                                            }
                                                            cpp_current_dict = cpp_current_dict[py::cast(var_p_0d)];
                                                            // variable declarations
                                                            double var_AWRI_0d;
                                                            bool aux_var_AWRI_0d_read = false;
                                                            int var_L_0d;
                                                            bool aux_var_L_0d_read = false;
                                                            int var_NJS_0d;
                                                            bool aux_var_NJS_0d_read = false;
                                                            cpp_line = cpp_read_line(cont);
                                                            // read CONT record
                                                            // assign expression to variable AWRI
                                                            var_AWRI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                            aux_var_AWRI_0d_read = true;
                                                            // assign expression to variable L
                                                            var_L_0d = cpp_read_int_field(cpp_line, 2);
                                                            aux_var_L_0d_read = true;
                                                            // assign expression to variable NJS
                                                            var_NJS_0d = cpp_read_int_field(cpp_line, 4);
                                                            aux_var_NJS_0d_read = true;

                                                            for (int var_n_0d = 1;
                                                                 var_n_0d <= var_NJS_0d; var_n_0d++) {
                                                                bool aux_var_n_0d_read = true;
                                                                // open section subsec

                                                                {
                                                                    py::dict cpp_parent_dict = cpp_current_dict;
                                                                    if (! cpp_parent_dict.contains("subsec")) {
                                                                        cpp_parent_dict["subsec"] = py::dict();
                                                                    }
                                                                    py::dict cpp_current_dict = cpp_parent_dict["subsec"];

                                                                    if (! cpp_current_dict.contains(py::cast(var_n_0d))) {
                                                                        cpp_current_dict[py::cast(var_n_0d)] = py::dict();
                                                                    }
                                                                    cpp_current_dict = cpp_current_dict[py::cast(var_n_0d)];
                                                                    // variable declarations
                                                                    double var_AJ_0d;
                                                                    bool aux_var_AJ_0d_read = false;
                                                                    int var_INT_0d;
                                                                    bool aux_var_INT_0d_read = false;
                                                                    int cpp_int_val;
                                                                    bool aux_cpp_int_val_read = false;
                                                                    int var_NE_0d;
                                                                    bool aux_var_NE_0d_read = false;
                                                                    double var_AMUX_0d;
                                                                    bool aux_var_AMUX_0d_read = false;
                                                                    double var_AMUN_0d;
                                                                    bool aux_var_AMUN_0d_read = false;
                                                                    double var_AMUG_0d;
                                                                    bool aux_var_AMUG_0d_read = false;
                                                                    double var_AMUF_0d;
                                                                    bool aux_var_AMUF_0d_read = false;
                                                                    NestedVector<double> var_ES_1d;
                                                                    NestedVector<double> var_D_1d;
                                                                    NestedVector<double> var_GX_1d;
                                                                    NestedVector<double> var_GN0_1d;
                                                                    NestedVector<double> var_GG_1d;
                                                                    NestedVector<double> var_GF_1d;
                                                                    cpp_line = cpp_read_line(cont);
                                                                    // read LIST record
                                                                    // assign expression to variable AJ
                                                                    var_AJ_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                                    aux_var_AJ_0d_read = true;
                                                                    // assign expression to variable INT
                                                                    var_INT_0d = cpp_read_int_field(cpp_line, 2);
                                                                    aux_var_INT_0d_read = true;
                                                                    // assign expression to variable cpp_int_val
                                                                    cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                                    aux_cpp_int_val_read = true;
                                                                    // assign expression to variable NE
                                                                    var_NE_0d = ((cpp_int_val+(-6))/6);
                                                                    aux_var_NE_0d_read = true;
                                                                    if ((! (aux_var_NE_0d_read == true))) {
                                                                        // assign expression to variable NE
                                                                        var_NE_0d = cpp_read_int_field(cpp_line, 5);
                                                                        aux_var_NE_0d_read = true;
                                                                    }
                                                                    {
                                                                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                                        int cpp_j = 0;
                                                                        // read LIST body
                                                                        cpp_j++;
                                                                        cpp_j++;
                                                                        // assign expression to variable AMUX
                                                                        var_AMUX_0d = cpp_floatvec[cpp_j++];
                                                                        aux_var_AMUX_0d_read = true;
                                                                        // assign expression to variable AMUN
                                                                        var_AMUN_0d = cpp_floatvec[cpp_j++];
                                                                        aux_var_AMUN_0d_read = true;
                                                                        // assign expression to variable AMUG
                                                                        var_AMUG_0d = cpp_floatvec[cpp_j++];
                                                                        aux_var_AMUG_0d_read = true;
                                                                        // assign expression to variable AMUF
                                                                        var_AMUF_0d = cpp_floatvec[cpp_j++];
                                                                        aux_var_AMUF_0d_read = true;

                                                                        for (int var_m_0d = 1;
                                                                             var_m_0d <= var_NE_0d; var_m_0d++) {
                                                                            bool aux_var_m_0d_read = true;
                                                                            // read LIST body
                                                                            // assign expression to variable ES
                                                                            var_ES_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                                            // assign expression to variable D
                                                                            var_D_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                                            // assign expression to variable GX
                                                                            var_GX_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                                            // assign expression to variable GN0
                                                                            var_GN0_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                                            // assign expression to variable GG
                                                                            var_GG_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                                            // assign expression to variable GF
                                                                            var_GF_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                                        }
                                                                    }
                                                                    // store data in Python dictionary
                                                                    if ((aux_var_AJ_0d_read == true)) {
                                                                        cpp_current_dict["AJ"] = var_AJ_0d;
                                                                    }
                                                                    if ((aux_var_INT_0d_read == true)) {
                                                                        cpp_current_dict["INT"] = var_INT_0d;
                                                                    }
                                                                    if ((aux_var_NE_0d_read == true)) {
                                                                        cpp_current_dict["NE"] = var_NE_0d;
                                                                    }
                                                                    if ((aux_var_AMUX_0d_read == true)) {
                                                                        cpp_current_dict["AMUX"] = var_AMUX_0d;
                                                                    }
                                                                    if ((aux_var_AMUN_0d_read == true)) {
                                                                        cpp_current_dict["AMUN"] = var_AMUN_0d;
                                                                    }
                                                                    if ((aux_var_AMUG_0d_read == true)) {
                                                                        cpp_current_dict["AMUG"] = var_AMUG_0d;
                                                                    }
                                                                    if ((aux_var_AMUF_0d_read == true)) {
                                                                        cpp_current_dict["AMUF"] = var_AMUF_0d;
                                                                    }
                                                                    if ((var_ES_1d.get_last_index() != -1)) {
                                                                            auto& cpp_curvar0 = var_ES_1d;
                                                                            cpp_current_dict["ES"] = py::dict();
                                                                            py::dict cpp_curdict0 = cpp_current_dict["ES"];
                                                                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                            }
                                                                    }
                                                                    if ((var_D_1d.get_last_index() != -1)) {
                                                                            auto& cpp_curvar0 = var_D_1d;
                                                                            cpp_current_dict["D"] = py::dict();
                                                                            py::dict cpp_curdict0 = cpp_current_dict["D"];
                                                                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                            }
                                                                    }
                                                                    if ((var_GX_1d.get_last_index() != -1)) {
                                                                            auto& cpp_curvar0 = var_GX_1d;
                                                                            cpp_current_dict["GX"] = py::dict();
                                                                            py::dict cpp_curdict0 = cpp_current_dict["GX"];
                                                                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                            }
                                                                    }
                                                                    if ((var_GN0_1d.get_last_index() != -1)) {
                                                                            auto& cpp_curvar0 = var_GN0_1d;
                                                                            cpp_current_dict["GN0"] = py::dict();
                                                                            py::dict cpp_curdict0 = cpp_current_dict["GN0"];
                                                                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                            }
                                                                    }
                                                                    if ((var_GG_1d.get_last_index() != -1)) {
                                                                            auto& cpp_curvar0 = var_GG_1d;
                                                                            cpp_current_dict["GG"] = py::dict();
                                                                            py::dict cpp_curdict0 = cpp_current_dict["GG"];
                                                                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                            }
                                                                    }
                                                                    if ((var_GF_1d.get_last_index() != -1)) {
                                                                            auto& cpp_curvar0 = var_GF_1d;
                                                                            cpp_current_dict["GF"] = py::dict();
                                                                            py::dict cpp_curdict0 = cpp_current_dict["GF"];
                                                                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                            }
                                                                    }
                                                                    cpp_current_dict = cpp_parent_dict;
                                                                }
                                                            }
                                                            // store data in Python dictionary
                                                            if ((aux_var_AWRI_0d_read == true)) {
                                                                cpp_current_dict["AWRI"] = var_AWRI_0d;
                                                            }
                                                            if ((aux_var_L_0d_read == true)) {
                                                                cpp_current_dict["L"] = var_L_0d;
                                                            }
                                                            if ((aux_var_NJS_0d_read == true)) {
                                                                cpp_current_dict["NJS"] = var_NJS_0d;
                                                            }
                                                            cpp_current_dict = cpp_parent_dict;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    // store data in Python dictionary
                    if ((aux_var_EL_0d_read == true)) {
                        cpp_current_dict["EL"] = var_EL_0d;
                    }
                    if ((aux_var_EH_0d_read == true)) {
                        cpp_current_dict["EH"] = var_EH_0d;
                    }
                    if ((aux_var_LRU_0d_read == true)) {
                        cpp_current_dict["LRU"] = var_LRU_0d;
                    }
                    if ((aux_var_LRF_0d_read == true)) {
                        cpp_current_dict["LRF"] = var_LRF_0d;
                    }
                    if ((aux_var_NRO_0d_read == true)) {
                        cpp_current_dict["NRO"] = var_NRO_0d;
                    }
                    if ((aux_var_NAPS_0d_read == true)) {
                        cpp_current_dict["NAPS"] = var_NAPS_0d;
                    }
                    if ((aux_var_SPI_0d_read == true)) {
                        cpp_current_dict["SPI"] = var_SPI_0d;
                    }
                    if ((aux_var_AP_0d_read == true)) {
                        cpp_current_dict["AP"] = var_AP_0d;
                    }
                    if ((aux_var_NLS_0d_read == true)) {
                        cpp_current_dict["NLS"] = var_NLS_0d;
                    }
                    if ((aux_var_LAD_0d_read == true)) {
                        cpp_current_dict["LAD"] = var_LAD_0d;
                    }
                    if ((aux_var_NLSC_0d_read == true)) {
                        cpp_current_dict["NLSC"] = var_NLSC_0d;
                    }
                    if ((aux_var_IFG_0d_read == true)) {
                        cpp_current_dict["IFG"] = var_IFG_0d;
                    }
                    if ((aux_var_KRM_0d_read == true)) {
                        cpp_current_dict["KRM"] = var_KRM_0d;
                    }
                    if ((aux_var_NJS_0d_read == true)) {
                        cpp_current_dict["NJS"] = var_NJS_0d;
                    }
                    if ((aux_var_KRL_0d_read == true)) {
                        cpp_current_dict["KRL"] = var_KRL_0d;
                    }
                    if ((aux_var_NPP_0d_read == true)) {
                        cpp_current_dict["NPP"] = var_NPP_0d;
                    }
                    if ((var_MA_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_MA_1d;
                            cpp_current_dict["MA"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["MA"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_MB_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_MB_1d;
                            cpp_current_dict["MB"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["MB"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_ZA_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_ZA_1d;
                            cpp_current_dict["ZA"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["ZA"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_ZB_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_ZB_1d;
                            cpp_current_dict["ZB"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["ZB"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_IA_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_IA_1d;
                            cpp_current_dict["IA"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["IA"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_IB_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_IB_1d;
                            cpp_current_dict["IB"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["IB"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_Q_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_Q_1d;
                            cpp_current_dict["Q"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["Q"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_PNT_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_PNT_1d;
                            cpp_current_dict["PNT"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["PNT"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_SHF_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_SHF_1d;
                            cpp_current_dict["SHF"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["SHF"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_MT_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_MT_1d;
                            cpp_current_dict["MT"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["MT"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_PA_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_PA_1d;
                            cpp_current_dict["PA"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["PA"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_PB_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_PB_1d;
                            cpp_current_dict["PB"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["PB"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((aux_var_LSSF_0d_read == true)) {
                        cpp_current_dict["LSSF"] = var_LSSF_0d;
                    }
                    if ((aux_var_NE_0d_read == true)) {
                        cpp_current_dict["NE"] = var_NE_0d;
                    }
                    if ((var_ES_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_ES_1d;
                            cpp_current_dict["ES"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["ES"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    cpp_current_dict = cpp_parent_dict;
                }
            }
            // store data in Python dictionary
            if ((aux_var_ZAI_0d_read == true)) {
                cpp_current_dict["ZAI"] = var_ZAI_0d;
            }
            if ((aux_var_ABN_0d_read == true)) {
                cpp_current_dict["ABN"] = var_ABN_0d;
            }
            if ((aux_var_LFW_0d_read == true)) {
                cpp_current_dict["LFW"] = var_LFW_0d;
            }
            if ((aux_var_NER_0d_read == true)) {
                cpp_current_dict["NER"] = var_NER_0d;
            }
            cpp_current_dict = cpp_parent_dict;
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_NIS_0d_read == true)) {
        cpp_current_dict["NIS"] = var_NIS_0d;
    }
    return cpp_current_dict;
}

py::dict parse_mf3_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    double var_QM_0d;
    bool aux_var_QM_0d_read = false;
    double var_QI_0d;
    bool aux_var_QI_0d_read = false;
    int var_LR_0d;
    bool aux_var_LR_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // read TAB1 record
    cpp_line = cpp_read_line(cont);
    // assign expression to variable QM
    var_QM_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_QM_0d_read = true;
    // assign expression to variable QI
    var_QI_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_QI_0d_read = true;
    // assign expression to variable LR
    var_LR_0d = cpp_read_int_field(cpp_line, 3);
    aux_var_LR_0d_read = true;

    {
        py::dict cpp_parent_dict = cpp_current_dict;
        if (! cpp_parent_dict.contains("xstable")) {
            cpp_parent_dict["xstable"] = py::dict();
        }
        py::dict cpp_current_dict = cpp_parent_dict["xstable"];
        {

            int cpp_j;
            int cpp_nr = cpp_read_int_field(cpp_line, 4);
            int cpp_np = cpp_read_int_field(cpp_line, 5);

            std::vector<int> NBT;
            std::vector<int> INT;
            cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
            cpp_j = 0;
            for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                NBT.push_back(cpp_intvec[cpp_j++]);
                INT.push_back(cpp_intvec[cpp_j++]);
            }

            cpp_current_dict["NBT"] = NBT;
            cpp_current_dict["INT"] = INT;

        std::vector<double> E;
        std::vector<double> xs;
        cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
        cpp_j = 0;
        for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
            E.push_back(cpp_floatvec[cpp_j++]);
            xs.push_back(cpp_floatvec[cpp_j++]);
        }

        cpp_current_dict["E"] = E;
        cpp_current_dict["xs"] = xs;
        }
        cpp_current_dict = cpp_parent_dict;
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_QM_0d_read == true)) {
        cpp_current_dict["QM"] = var_QM_0d;
    }
    if ((aux_var_QI_0d_read == true)) {
        cpp_current_dict["QI"] = var_QI_0d;
    }
    if ((aux_var_LR_0d_read == true)) {
        cpp_current_dict["LR"] = var_LR_0d;
    }
    return cpp_current_dict;
}

py::dict parse_mf4_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_LTT_0d;
    bool aux_var_LTT_0d_read = false;
    int var_LI_0d;
    bool aux_var_LI_0d_read = false;
    int var_LCT_0d;
    bool aux_var_LCT_0d_read = false;
    int var_NM_0d;
    bool aux_var_NM_0d_read = false;
    int var_NE_0d;
    bool aux_var_NE_0d_read = false;
    double var_T_0d;
    bool aux_var_T_0d_read = false;
    NestedVector<double> var_E_1d;
    int var_LT_0d;
    bool aux_var_LT_0d_read = false;
    NestedVector<int> var_NL_1d;
    NestedVector<NestedVector<double>> var_a_2d;
    NestedVector<double>* ptr_a_2d_idx0;
    int var_NE1_0d;
    bool aux_var_NE1_0d_read = false;
    NestedVector<NestedVector<double>> var_al_2d;
    NestedVector<double>* ptr_al_2d_idx0;
    int var_NE2_0d;
    bool aux_var_NE2_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // assign expression to variable LTT
    var_LTT_0d = cpp_read_int_field(cpp_line, 3);
    aux_var_LTT_0d_read = true;
    // evaluate if-elif-else clause
    {
        bool cpp_found_match = false;
        if (! cpp_found_match) {
            // if statement evaluation with lookahead
            {
                std::streampos cpp_old_streampos = cont.tellg();
                {
                    // variable declarations
                    int& glob_var_MAT_0d = var_MAT_0d;
                    int var_MAT_0d = glob_var_MAT_0d;
                    bool& glob_aux_var_MAT_0d_read = aux_var_MAT_0d_read;
                    bool aux_var_MAT_0d_read = glob_aux_var_MAT_0d_read;
                    int& glob_var_MF_0d = var_MF_0d;
                    int var_MF_0d = glob_var_MF_0d;
                    bool& glob_aux_var_MF_0d_read = aux_var_MF_0d_read;
                    bool aux_var_MF_0d_read = glob_aux_var_MF_0d_read;
                    int& glob_var_MT_0d = var_MT_0d;
                    int var_MT_0d = glob_var_MT_0d;
                    bool& glob_aux_var_MT_0d_read = aux_var_MT_0d_read;
                    bool aux_var_MT_0d_read = glob_aux_var_MT_0d_read;
                    double& glob_var_ZA_0d = var_ZA_0d;
                    double var_ZA_0d = glob_var_ZA_0d;
                    bool& glob_aux_var_ZA_0d_read = aux_var_ZA_0d_read;
                    bool aux_var_ZA_0d_read = glob_aux_var_ZA_0d_read;
                    double& glob_var_AWR_0d = var_AWR_0d;
                    double var_AWR_0d = glob_var_AWR_0d;
                    bool& glob_aux_var_AWR_0d_read = aux_var_AWR_0d_read;
                    bool aux_var_AWR_0d_read = glob_aux_var_AWR_0d_read;
                    int& glob_var_LTT_0d = var_LTT_0d;
                    int var_LTT_0d = glob_var_LTT_0d;
                    bool& glob_aux_var_LTT_0d_read = aux_var_LTT_0d_read;
                    bool aux_var_LTT_0d_read = glob_aux_var_LTT_0d_read;
                    int& glob_var_LI_0d = var_LI_0d;
                    int var_LI_0d = glob_var_LI_0d;
                    bool& glob_aux_var_LI_0d_read = aux_var_LI_0d_read;
                    bool aux_var_LI_0d_read = glob_aux_var_LI_0d_read;
                    int& glob_var_LCT_0d = var_LCT_0d;
                    int var_LCT_0d = glob_var_LCT_0d;
                    bool& glob_aux_var_LCT_0d_read = aux_var_LCT_0d_read;
                    bool aux_var_LCT_0d_read = glob_aux_var_LCT_0d_read;
                    int& glob_var_NM_0d = var_NM_0d;
                    int var_NM_0d = glob_var_NM_0d;
                    bool& glob_aux_var_NM_0d_read = aux_var_NM_0d_read;
                    bool aux_var_NM_0d_read = glob_aux_var_NM_0d_read;
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    if ((! (aux_var_AWR_0d_read == true))) {
                        // assign expression to variable AWR
                        var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_var_AWR_0d_read = true;
                    }
                    // assign expression to variable LI
                    var_LI_0d = cpp_read_int_field(cpp_line, 2);
                    aux_var_LI_0d_read = true;
                    // assign expression to variable LCT
                    var_LCT_0d = cpp_read_int_field(cpp_line, 3);
                    aux_var_LCT_0d_read = true;
                    // assign expression to variable NM
                    var_NM_0d = cpp_read_int_field(cpp_line, 5);
                    aux_var_NM_0d_read = true;
                    if ((((((((var_LTT_0d)==(3))))&&(((var_LI_0d)==(0))))))) {
                        cpp_found_match = true;
                    }
                    cont.seekg(cpp_old_streampos);
                }
                if (cpp_found_match) {
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    if ((! (aux_var_AWR_0d_read == true))) {
                        // assign expression to variable AWR
                        var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_var_AWR_0d_read = true;
                    }
                    // assign expression to variable LI
                    var_LI_0d = cpp_read_int_field(cpp_line, 2);
                    aux_var_LI_0d_read = true;
                    // assign expression to variable LCT
                    var_LCT_0d = cpp_read_int_field(cpp_line, 3);
                    aux_var_LCT_0d_read = true;
                    // assign expression to variable NM
                    var_NM_0d = cpp_read_int_field(cpp_line, 5);
                    aux_var_NM_0d_read = true;
                }
            }
        }
        if (! cpp_found_match) {
            cpp_line = cpp_read_line(cont);
            // read CONT record
            if ((! (aux_var_AWR_0d_read == true))) {
                // assign expression to variable AWR
                var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                aux_var_AWR_0d_read = true;
            }
            // assign expression to variable LI
            var_LI_0d = cpp_read_int_field(cpp_line, 2);
            aux_var_LI_0d_read = true;
            // assign expression to variable LCT
            var_LCT_0d = cpp_read_int_field(cpp_line, 3);
            aux_var_LCT_0d_read = true;
        }
    }
    // evaluate if-elif-else clause
    {
        bool cpp_found_match = false;
        if (! cpp_found_match) {
            if ((((((((var_LTT_0d)==(1))))&&(((var_LI_0d)==(0))))))) {
                // if statement evaluation
                cpp_found_match = true;
                // read TAB2 record
                cpp_line = cpp_read_line(cont);
                // assign expression to variable NE
                var_NE_0d = cpp_read_int_field(cpp_line, 5);
                aux_var_NE_0d_read = true;
                {

                    int cpp_j;
                    int cpp_nr = cpp_read_int_field(cpp_line, 4);
                    int cpp_np = cpp_read_int_field(cpp_line, 5);

                    std::vector<int> NBT;
                    std::vector<int> INT;
                    cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                    cpp_j = 0;
                    for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                        NBT.push_back(cpp_intvec[cpp_j++]);
                        INT.push_back(cpp_intvec[cpp_j++]);
                    }

                    cpp_current_dict["NBT"] = NBT;
                    cpp_current_dict["INT"] = INT;
                }

                for (int var_i_0d = 1;
                     var_i_0d <= var_NE_0d; var_i_0d++) {
                    bool aux_var_i_0d_read = true;
                    cpp_line = cpp_read_line(cont);
                    // read LIST record
                    // assign expression to variable T
                    var_T_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_var_T_0d_read = true;
                    // assign expression to variable E
                    var_E_1d.set(var_i_0d, cpp_read_float_field(cpp_line.c_str(), 1));
                    // assign expression to variable LT
                    var_LT_0d = cpp_read_int_field(cpp_line, 2);
                    aux_var_LT_0d_read = true;
                    // assign expression to variable NL
                    var_NL_1d.set(var_i_0d, cpp_read_int_field(cpp_line, 4));
                    {
                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                        int cpp_j = 0;
                        // read LIST body
                        ptr_a_2d_idx0 = var_a_2d.prepare(var_i_0d);

                        for (int var_l_0d = 1;
                             var_l_0d <= var_NL_1d[var_i_0d]; var_l_0d++) {
                            bool aux_var_l_0d_read = true;
                            // read LIST body
                            // assign expression to variable a
                            ptr_a_2d_idx0->set(var_l_0d, cpp_floatvec[cpp_j++]);
                        }
                    }
                }
            }
        }
        if (! cpp_found_match) {
            if (! cpp_found_match) {
                if ((((((((var_LTT_0d)==(2))))&&(((var_LI_0d)==(0))))))) {
                    // if statement evaluation
                    cpp_found_match = true;
                    // read TAB2 record
                    cpp_line = cpp_read_line(cont);
                    // assign expression to variable NE
                    var_NE_0d = cpp_read_int_field(cpp_line, 5);
                    aux_var_NE_0d_read = true;

                    {
                        py::dict cpp_parent_dict = cpp_current_dict;
                        if (! cpp_parent_dict.contains("energy_table")) {
                            cpp_parent_dict["energy_table"] = py::dict();
                        }
                        py::dict cpp_current_dict = cpp_parent_dict["energy_table"];
                        {

                            int cpp_j;
                            int cpp_nr = cpp_read_int_field(cpp_line, 4);
                            int cpp_np = cpp_read_int_field(cpp_line, 5);

                            std::vector<int> NBT;
                            std::vector<int> INT;
                            cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                            cpp_j = 0;
                            for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                NBT.push_back(cpp_intvec[cpp_j++]);
                                INT.push_back(cpp_intvec[cpp_j++]);
                            }

                            cpp_current_dict["NBT"] = NBT;
                            cpp_current_dict["INT"] = INT;
                        }
                        cpp_current_dict = cpp_parent_dict;
                    }

                    for (int var_i_0d = 1;
                         var_i_0d <= var_NE_0d; var_i_0d++) {
                        bool aux_var_i_0d_read = true;
                        // read TAB1 record
                        cpp_line = cpp_read_line(cont);
                        // assign expression to variable T
                        var_T_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                        aux_var_T_0d_read = true;
                        // assign expression to variable E
                        var_E_1d.set(var_i_0d, cpp_read_float_field(cpp_line.c_str(), 1));
                        // assign expression to variable LT
                        var_LT_0d = cpp_read_int_field(cpp_line, 2);
                        aux_var_LT_0d_read = true;

                        {
                            py::dict cpp_parent_dict = cpp_current_dict;
                            if (! cpp_parent_dict.contains("angtable")) {
                                cpp_parent_dict["angtable"] = py::dict();
                            }
                            py::dict cpp_current_dict = cpp_parent_dict["angtable"];

                            if (! cpp_current_dict.contains(py::cast(var_i_0d))) {
                                cpp_current_dict[py::cast(var_i_0d)] = py::dict();
                            }
                            cpp_current_dict = cpp_current_dict[py::cast(var_i_0d)];
                            {

                                int cpp_j;
                                int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                int cpp_np = cpp_read_int_field(cpp_line, 5);

                                std::vector<int> NBT;
                                std::vector<int> INT;
                                cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                cpp_j = 0;
                                for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                    NBT.push_back(cpp_intvec[cpp_j++]);
                                    INT.push_back(cpp_intvec[cpp_j++]);
                                }

                                cpp_current_dict["NBT"] = NBT;
                                cpp_current_dict["INT"] = INT;

                            std::vector<double> mu;
                            std::vector<double> f;
                            cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                            cpp_j = 0;
                            for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                mu.push_back(cpp_floatvec[cpp_j++]);
                                f.push_back(cpp_floatvec[cpp_j++]);
                            }

                            cpp_current_dict["mu"] = mu;
                            cpp_current_dict["f"] = f;
                            }
                            cpp_current_dict = cpp_parent_dict;
                        }
                    }
                }
            }
        }
        if (! cpp_found_match) {
            if (! cpp_found_match) {
                if ((((((((var_LTT_0d)==(3))))&&(((var_LI_0d)==(0))))))) {
                    // if statement evaluation
                    cpp_found_match = true;
                    // read TAB2 record
                    cpp_line = cpp_read_line(cont);
                    // assign expression to variable NE1
                    var_NE1_0d = cpp_read_int_field(cpp_line, 5);
                    aux_var_NE1_0d_read = true;

                    {
                        py::dict cpp_parent_dict = cpp_current_dict;
                        if (! cpp_parent_dict.contains("leg_int")) {
                            cpp_parent_dict["leg_int"] = py::dict();
                        }
                        py::dict cpp_current_dict = cpp_parent_dict["leg_int"];
                        {

                            int cpp_j;
                            int cpp_nr = cpp_read_int_field(cpp_line, 4);
                            int cpp_np = cpp_read_int_field(cpp_line, 5);

                            std::vector<int> NBT;
                            std::vector<int> INT;
                            cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                            cpp_j = 0;
                            for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                NBT.push_back(cpp_intvec[cpp_j++]);
                                INT.push_back(cpp_intvec[cpp_j++]);
                            }

                            cpp_current_dict["NBT"] = NBT;
                            cpp_current_dict["INT"] = INT;
                        }
                        cpp_current_dict = cpp_parent_dict;
                    }

                    for (int var_i_0d = 1;
                         var_i_0d <= var_NE1_0d; var_i_0d++) {
                        bool aux_var_i_0d_read = true;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable T
                        var_T_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                        aux_var_T_0d_read = true;
                        // assign expression to variable E
                        var_E_1d.set(var_i_0d, cpp_read_float_field(cpp_line.c_str(), 1));
                        // assign expression to variable LT
                        var_LT_0d = cpp_read_int_field(cpp_line, 2);
                        aux_var_LT_0d_read = true;
                        // assign expression to variable NL
                        var_NL_1d.set(var_i_0d, cpp_read_int_field(cpp_line, 4));
                        {
                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                            int cpp_j = 0;
                            // read LIST body
                            ptr_al_2d_idx0 = var_al_2d.prepare(var_i_0d);

                            for (int var_j_0d = 1;
                                 var_j_0d <= var_NL_1d[var_i_0d]; var_j_0d++) {
                                bool aux_var_j_0d_read = true;
                                // read LIST body
                                // assign expression to variable al
                                ptr_al_2d_idx0->set(var_j_0d, cpp_floatvec[cpp_j++]);
                            }
                        }
                    }
                    // read TAB2 record
                    cpp_line = cpp_read_line(cont);
                    // assign expression to variable NE2
                    var_NE2_0d = cpp_read_int_field(cpp_line, 5);
                    aux_var_NE2_0d_read = true;

                    {
                        py::dict cpp_parent_dict = cpp_current_dict;
                        if (! cpp_parent_dict.contains("ang_int")) {
                            cpp_parent_dict["ang_int"] = py::dict();
                        }
                        py::dict cpp_current_dict = cpp_parent_dict["ang_int"];
                        {

                            int cpp_j;
                            int cpp_nr = cpp_read_int_field(cpp_line, 4);
                            int cpp_np = cpp_read_int_field(cpp_line, 5);

                            std::vector<int> NBT;
                            std::vector<int> INT;
                            cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                            cpp_j = 0;
                            for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                NBT.push_back(cpp_intvec[cpp_j++]);
                                INT.push_back(cpp_intvec[cpp_j++]);
                            }

                            cpp_current_dict["NBT"] = NBT;
                            cpp_current_dict["INT"] = INT;
                        }
                        cpp_current_dict = cpp_parent_dict;
                    }

                    for (int var_i_0d = var_NE1_0d;
                         var_i_0d <= ((var_NE1_0d+var_NE2_0d)-1); var_i_0d++) {
                        bool aux_var_i_0d_read = true;
                        // read TAB1 record
                        cpp_line = cpp_read_line(cont);
                        if ((! (aux_var_T_0d_read == true))) {
                            // assign expression to variable T
                            var_T_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                            aux_var_T_0d_read = true;
                        }
                        if ((! var_E_1d.contains(var_i_0d))) {
                            // assign expression to variable E
                            var_E_1d.set(var_i_0d, cpp_read_float_field(cpp_line.c_str(), 1));
                        }
                        if ((! (aux_var_LT_0d_read == true))) {
                            // assign expression to variable LT
                            var_LT_0d = cpp_read_int_field(cpp_line, 2);
                            aux_var_LT_0d_read = true;
                        }

                        {
                            py::dict cpp_parent_dict = cpp_current_dict;
                            if (! cpp_parent_dict.contains("angtable")) {
                                cpp_parent_dict["angtable"] = py::dict();
                            }
                            py::dict cpp_current_dict = cpp_parent_dict["angtable"];

                            if (! cpp_current_dict.contains(py::cast(var_i_0d))) {
                                cpp_current_dict[py::cast(var_i_0d)] = py::dict();
                            }
                            cpp_current_dict = cpp_current_dict[py::cast(var_i_0d)];
                            {

                                int cpp_j;
                                int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                int cpp_np = cpp_read_int_field(cpp_line, 5);

                                std::vector<int> NBT;
                                std::vector<int> INT;
                                cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                cpp_j = 0;
                                for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                    NBT.push_back(cpp_intvec[cpp_j++]);
                                    INT.push_back(cpp_intvec[cpp_j++]);
                                }

                                cpp_current_dict["NBT"] = NBT;
                                cpp_current_dict["INT"] = INT;

                            std::vector<double> mu;
                            std::vector<double> f;
                            cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                            cpp_j = 0;
                            for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                mu.push_back(cpp_floatvec[cpp_j++]);
                                f.push_back(cpp_floatvec[cpp_j++]);
                            }

                            cpp_current_dict["mu"] = mu;
                            cpp_current_dict["f"] = f;
                            }
                            cpp_current_dict = cpp_parent_dict;
                        }
                    }
                }
            }
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_LTT_0d_read == true)) {
        cpp_current_dict["LTT"] = var_LTT_0d;
    }
    if ((aux_var_LI_0d_read == true)) {
        cpp_current_dict["LI"] = var_LI_0d;
    }
    if ((aux_var_LCT_0d_read == true)) {
        cpp_current_dict["LCT"] = var_LCT_0d;
    }
    if ((aux_var_NM_0d_read == true)) {
        cpp_current_dict["NM"] = var_NM_0d;
    }
    if ((aux_var_NE_0d_read == true)) {
        cpp_current_dict["NE"] = var_NE_0d;
    }
    if ((aux_var_T_0d_read == true)) {
        cpp_current_dict["T"] = var_T_0d;
    }
    if ((var_E_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_E_1d;
            cpp_current_dict["E"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["E"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((aux_var_LT_0d_read == true)) {
        cpp_current_dict["LT"] = var_LT_0d;
    }
    if ((var_NL_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_NL_1d;
            cpp_current_dict["NL"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["NL"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_a_2d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_a_2d;
            cpp_current_dict["a"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["a"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
                cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
                    cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
                }
            }
    }
    if ((aux_var_NE1_0d_read == true)) {
        cpp_current_dict["NE1"] = var_NE1_0d;
    }
    if ((var_al_2d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_al_2d;
            cpp_current_dict["al"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["al"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
                cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
                    cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
                }
            }
    }
    if ((aux_var_NE2_0d_read == true)) {
        cpp_current_dict["NE2"] = var_NE2_0d;
    }
    return cpp_current_dict;
}

py::dict parse_mf5_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_NK_0d;
    bool aux_var_NK_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // assign expression to variable NK
    var_NK_0d = cpp_read_int_field(cpp_line, 4);
    aux_var_NK_0d_read = true;

    for (int var_k_0d = 1;
         var_k_0d <= var_NK_0d; var_k_0d++) {
        bool aux_var_k_0d_read = true;
        // open section contribution

        {
            py::dict cpp_parent_dict = cpp_current_dict;
            if (! cpp_parent_dict.contains("contribution")) {
                cpp_parent_dict["contribution"] = py::dict();
            }
            py::dict cpp_current_dict = cpp_parent_dict["contribution"];

            if (! cpp_current_dict.contains(py::cast(var_k_0d))) {
                cpp_current_dict[py::cast(var_k_0d)] = py::dict();
            }
            cpp_current_dict = cpp_current_dict[py::cast(var_k_0d)];
            // variable declarations
            int var_LF_0d;
            bool aux_var_LF_0d_read = false;
            int var_NE_0d;
            bool aux_var_NE_0d_read = false;
            NestedVector<double> var_E_1d;
            double var_U_0d;
            bool aux_var_U_0d_read = false;
            // evaluate if-elif-else clause
            {
                bool cpp_found_match = false;
                if (! cpp_found_match) {
                    // if statement evaluation with lookahead
                    {
                        std::streampos cpp_old_streampos = cont.tellg();
                        {
                            // variable declarations
                            int& glob_var_LF_0d = var_LF_0d;
                            int var_LF_0d = glob_var_LF_0d;
                            bool& glob_aux_var_LF_0d_read = aux_var_LF_0d_read;
                            bool aux_var_LF_0d_read = glob_aux_var_LF_0d_read;
                            // read TAB1 record
                            cpp_line = cpp_read_line(cont);
                            // assign expression to variable LF
                            var_LF_0d = cpp_read_int_field(cpp_line, 3);
                            aux_var_LF_0d_read = true;
                            if (((((((var_LF_0d)==(1))))))) {
                                cpp_found_match = true;
                            }
                            cont.seekg(cpp_old_streampos);
                        }
                        if (cpp_found_match) {
                            // read TAB1 record
                            cpp_line = cpp_read_line(cont);
                            // assign expression to variable LF
                            var_LF_0d = cpp_read_int_field(cpp_line, 3);
                            aux_var_LF_0d_read = true;

                            {
                                py::dict cpp_parent_dict = cpp_current_dict;
                                if (! cpp_parent_dict.contains("p_table")) {
                                    cpp_parent_dict["p_table"] = py::dict();
                                }
                                py::dict cpp_current_dict = cpp_parent_dict["p_table"];
                                {

                                    int cpp_j;
                                    int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                    int cpp_np = cpp_read_int_field(cpp_line, 5);

                                    std::vector<int> NBT;
                                    std::vector<int> INT;
                                    cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                    cpp_j = 0;
                                    for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                        NBT.push_back(cpp_intvec[cpp_j++]);
                                        INT.push_back(cpp_intvec[cpp_j++]);
                                    }

                                    cpp_current_dict["NBT"] = NBT;
                                    cpp_current_dict["INT"] = INT;

                                std::vector<double> E;
                                std::vector<double> p;
                                cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                                cpp_j = 0;
                                for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                    E.push_back(cpp_floatvec[cpp_j++]);
                                    p.push_back(cpp_floatvec[cpp_j++]);
                                }

                                cpp_current_dict["E"] = E;
                                cpp_current_dict["p"] = p;
                                }
                                cpp_current_dict = cpp_parent_dict;
                            }
                            // read TAB2 record
                            cpp_line = cpp_read_line(cont);
                            // assign expression to variable NE
                            var_NE_0d = cpp_read_int_field(cpp_line, 5);
                            aux_var_NE_0d_read = true;

                            {
                                py::dict cpp_parent_dict = cpp_current_dict;
                                if (! cpp_parent_dict.contains("E_interp")) {
                                    cpp_parent_dict["E_interp"] = py::dict();
                                }
                                py::dict cpp_current_dict = cpp_parent_dict["E_interp"];
                                {

                                    int cpp_j;
                                    int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                    int cpp_np = cpp_read_int_field(cpp_line, 5);

                                    std::vector<int> NBT;
                                    std::vector<int> INT;
                                    cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                    cpp_j = 0;
                                    for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                        NBT.push_back(cpp_intvec[cpp_j++]);
                                        INT.push_back(cpp_intvec[cpp_j++]);
                                    }

                                    cpp_current_dict["NBT"] = NBT;
                                    cpp_current_dict["INT"] = INT;
                                }
                                cpp_current_dict = cpp_parent_dict;
                            }

                            for (int var_l_0d = 1;
                                 var_l_0d <= var_NE_0d; var_l_0d++) {
                                bool aux_var_l_0d_read = true;
                                // read TAB1 record
                                cpp_line = cpp_read_line(cont);
                                // assign expression to variable E
                                var_E_1d.set(var_l_0d, cpp_read_float_field(cpp_line.c_str(), 1));

                                {
                                    py::dict cpp_parent_dict = cpp_current_dict;
                                    if (! cpp_parent_dict.contains("spectrum")) {
                                        cpp_parent_dict["spectrum"] = py::dict();
                                    }
                                    py::dict cpp_current_dict = cpp_parent_dict["spectrum"];

                                    if (! cpp_current_dict.contains(py::cast(var_l_0d))) {
                                        cpp_current_dict[py::cast(var_l_0d)] = py::dict();
                                    }
                                    cpp_current_dict = cpp_current_dict[py::cast(var_l_0d)];
                                    {

                                        int cpp_j;
                                        int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                        int cpp_np = cpp_read_int_field(cpp_line, 5);

                                        std::vector<int> NBT;
                                        std::vector<int> INT;
                                        cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                        cpp_j = 0;
                                        for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                            NBT.push_back(cpp_intvec[cpp_j++]);
                                            INT.push_back(cpp_intvec[cpp_j++]);
                                        }

                                        cpp_current_dict["NBT"] = NBT;
                                        cpp_current_dict["INT"] = INT;

                                    std::vector<double> Eout;
                                    std::vector<double> g;
                                    cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                                    cpp_j = 0;
                                    for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                        Eout.push_back(cpp_floatvec[cpp_j++]);
                                        g.push_back(cpp_floatvec[cpp_j++]);
                                    }

                                    cpp_current_dict["Eout"] = Eout;
                                    cpp_current_dict["g"] = g;
                                    }
                                    cpp_current_dict = cpp_parent_dict;
                                }
                            }
                        }
                    }
                }
                if (! cpp_found_match) {
                    if (! cpp_found_match) {
                        // if statement evaluation with lookahead
                        {
                            std::streampos cpp_old_streampos = cont.tellg();
                            {
                                // variable declarations
                                double& glob_var_U_0d = var_U_0d;
                                double var_U_0d = glob_var_U_0d;
                                bool& glob_aux_var_U_0d_read = aux_var_U_0d_read;
                                bool aux_var_U_0d_read = glob_aux_var_U_0d_read;
                                int& glob_var_LF_0d = var_LF_0d;
                                int var_LF_0d = glob_var_LF_0d;
                                bool& glob_aux_var_LF_0d_read = aux_var_LF_0d_read;
                                bool aux_var_LF_0d_read = glob_aux_var_LF_0d_read;
                                // read TAB1 record
                                cpp_line = cpp_read_line(cont);
                                // assign expression to variable U
                                var_U_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                aux_var_U_0d_read = true;
                                // assign expression to variable LF
                                var_LF_0d = cpp_read_int_field(cpp_line, 3);
                                aux_var_LF_0d_read = true;
                                if (((((((var_LF_0d)==(5))))))) {
                                    cpp_found_match = true;
                                }
                                cont.seekg(cpp_old_streampos);
                            }
                            if (cpp_found_match) {
                                // read TAB1 record
                                cpp_line = cpp_read_line(cont);
                                // assign expression to variable U
                                var_U_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                aux_var_U_0d_read = true;
                                // assign expression to variable LF
                                var_LF_0d = cpp_read_int_field(cpp_line, 3);
                                aux_var_LF_0d_read = true;

                                {
                                    py::dict cpp_parent_dict = cpp_current_dict;
                                    if (! cpp_parent_dict.contains("p_table")) {
                                        cpp_parent_dict["p_table"] = py::dict();
                                    }
                                    py::dict cpp_current_dict = cpp_parent_dict["p_table"];
                                    {

                                        int cpp_j;
                                        int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                        int cpp_np = cpp_read_int_field(cpp_line, 5);

                                        std::vector<int> NBT;
                                        std::vector<int> INT;
                                        cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                        cpp_j = 0;
                                        for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                            NBT.push_back(cpp_intvec[cpp_j++]);
                                            INT.push_back(cpp_intvec[cpp_j++]);
                                        }

                                        cpp_current_dict["NBT"] = NBT;
                                        cpp_current_dict["INT"] = INT;

                                    std::vector<double> E;
                                    std::vector<double> p;
                                    cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                                    cpp_j = 0;
                                    for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                        E.push_back(cpp_floatvec[cpp_j++]);
                                        p.push_back(cpp_floatvec[cpp_j++]);
                                    }

                                    cpp_current_dict["E"] = E;
                                    cpp_current_dict["p"] = p;
                                    }
                                    cpp_current_dict = cpp_parent_dict;
                                }
                                // read TAB1 record
                                cpp_line = cpp_read_line(cont);

                                {
                                    py::dict cpp_parent_dict = cpp_current_dict;
                                    if (! cpp_parent_dict.contains("theta_table")) {
                                        cpp_parent_dict["theta_table"] = py::dict();
                                    }
                                    py::dict cpp_current_dict = cpp_parent_dict["theta_table"];
                                    {

                                        int cpp_j;
                                        int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                        int cpp_np = cpp_read_int_field(cpp_line, 5);

                                        std::vector<int> NBT;
                                        std::vector<int> INT;
                                        cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                        cpp_j = 0;
                                        for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                            NBT.push_back(cpp_intvec[cpp_j++]);
                                            INT.push_back(cpp_intvec[cpp_j++]);
                                        }

                                        cpp_current_dict["NBT"] = NBT;
                                        cpp_current_dict["INT"] = INT;

                                    std::vector<double> E;
                                    std::vector<double> theta;
                                    cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                                    cpp_j = 0;
                                    for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                        E.push_back(cpp_floatvec[cpp_j++]);
                                        theta.push_back(cpp_floatvec[cpp_j++]);
                                    }

                                    cpp_current_dict["E"] = E;
                                    cpp_current_dict["theta"] = theta;
                                    }
                                    cpp_current_dict = cpp_parent_dict;
                                }
                                // read TAB1 record
                                cpp_line = cpp_read_line(cont);

                                {
                                    py::dict cpp_parent_dict = cpp_current_dict;
                                    if (! cpp_parent_dict.contains("g_table")) {
                                        cpp_parent_dict["g_table"] = py::dict();
                                    }
                                    py::dict cpp_current_dict = cpp_parent_dict["g_table"];
                                    {

                                        int cpp_j;
                                        int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                        int cpp_np = cpp_read_int_field(cpp_line, 5);

                                        std::vector<int> NBT;
                                        std::vector<int> INT;
                                        cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                        cpp_j = 0;
                                        for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                            NBT.push_back(cpp_intvec[cpp_j++]);
                                            INT.push_back(cpp_intvec[cpp_j++]);
                                        }

                                        cpp_current_dict["NBT"] = NBT;
                                        cpp_current_dict["INT"] = INT;

                                    std::vector<double> x;
                                    std::vector<double> g;
                                    cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                                    cpp_j = 0;
                                    for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                        x.push_back(cpp_floatvec[cpp_j++]);
                                        g.push_back(cpp_floatvec[cpp_j++]);
                                    }

                                    cpp_current_dict["x"] = x;
                                    cpp_current_dict["g"] = g;
                                    }
                                    cpp_current_dict = cpp_parent_dict;
                                }
                            }
                        }
                    }
                }
                if (! cpp_found_match) {
                    if (! cpp_found_match) {
                        // if statement evaluation with lookahead
                        {
                            std::streampos cpp_old_streampos = cont.tellg();
                            {
                                // variable declarations
                                double& glob_var_U_0d = var_U_0d;
                                double var_U_0d = glob_var_U_0d;
                                bool& glob_aux_var_U_0d_read = aux_var_U_0d_read;
                                bool aux_var_U_0d_read = glob_aux_var_U_0d_read;
                                int& glob_var_LF_0d = var_LF_0d;
                                int var_LF_0d = glob_var_LF_0d;
                                bool& glob_aux_var_LF_0d_read = aux_var_LF_0d_read;
                                bool aux_var_LF_0d_read = glob_aux_var_LF_0d_read;
                                // read TAB1 record
                                cpp_line = cpp_read_line(cont);
                                // assign expression to variable U
                                var_U_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                aux_var_U_0d_read = true;
                                // assign expression to variable LF
                                var_LF_0d = cpp_read_int_field(cpp_line, 3);
                                aux_var_LF_0d_read = true;
                                if (((((((var_LF_0d)==(7))))))) {
                                    cpp_found_match = true;
                                }
                                cont.seekg(cpp_old_streampos);
                            }
                            if (cpp_found_match) {
                                // read TAB1 record
                                cpp_line = cpp_read_line(cont);
                                // assign expression to variable U
                                var_U_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                aux_var_U_0d_read = true;
                                // assign expression to variable LF
                                var_LF_0d = cpp_read_int_field(cpp_line, 3);
                                aux_var_LF_0d_read = true;

                                {
                                    py::dict cpp_parent_dict = cpp_current_dict;
                                    if (! cpp_parent_dict.contains("p_table")) {
                                        cpp_parent_dict["p_table"] = py::dict();
                                    }
                                    py::dict cpp_current_dict = cpp_parent_dict["p_table"];
                                    {

                                        int cpp_j;
                                        int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                        int cpp_np = cpp_read_int_field(cpp_line, 5);

                                        std::vector<int> NBT;
                                        std::vector<int> INT;
                                        cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                        cpp_j = 0;
                                        for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                            NBT.push_back(cpp_intvec[cpp_j++]);
                                            INT.push_back(cpp_intvec[cpp_j++]);
                                        }

                                        cpp_current_dict["NBT"] = NBT;
                                        cpp_current_dict["INT"] = INT;

                                    std::vector<double> E;
                                    std::vector<double> p;
                                    cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                                    cpp_j = 0;
                                    for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                        E.push_back(cpp_floatvec[cpp_j++]);
                                        p.push_back(cpp_floatvec[cpp_j++]);
                                    }

                                    cpp_current_dict["E"] = E;
                                    cpp_current_dict["p"] = p;
                                    }
                                    cpp_current_dict = cpp_parent_dict;
                                }
                                // read TAB1 record
                                cpp_line = cpp_read_line(cont);

                                {
                                    py::dict cpp_parent_dict = cpp_current_dict;
                                    if (! cpp_parent_dict.contains("theta_table")) {
                                        cpp_parent_dict["theta_table"] = py::dict();
                                    }
                                    py::dict cpp_current_dict = cpp_parent_dict["theta_table"];
                                    {

                                        int cpp_j;
                                        int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                        int cpp_np = cpp_read_int_field(cpp_line, 5);

                                        std::vector<int> NBT;
                                        std::vector<int> INT;
                                        cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                        cpp_j = 0;
                                        for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                            NBT.push_back(cpp_intvec[cpp_j++]);
                                            INT.push_back(cpp_intvec[cpp_j++]);
                                        }

                                        cpp_current_dict["NBT"] = NBT;
                                        cpp_current_dict["INT"] = INT;

                                    std::vector<double> E;
                                    std::vector<double> theta;
                                    cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                                    cpp_j = 0;
                                    for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                        E.push_back(cpp_floatvec[cpp_j++]);
                                        theta.push_back(cpp_floatvec[cpp_j++]);
                                    }

                                    cpp_current_dict["E"] = E;
                                    cpp_current_dict["theta"] = theta;
                                    }
                                    cpp_current_dict = cpp_parent_dict;
                                }
                            }
                        }
                    }
                }
                if (! cpp_found_match) {
                    if (! cpp_found_match) {
                        // if statement evaluation with lookahead
                        {
                            std::streampos cpp_old_streampos = cont.tellg();
                            {
                                // variable declarations
                                double& glob_var_U_0d = var_U_0d;
                                double var_U_0d = glob_var_U_0d;
                                bool& glob_aux_var_U_0d_read = aux_var_U_0d_read;
                                bool aux_var_U_0d_read = glob_aux_var_U_0d_read;
                                int& glob_var_LF_0d = var_LF_0d;
                                int var_LF_0d = glob_var_LF_0d;
                                bool& glob_aux_var_LF_0d_read = aux_var_LF_0d_read;
                                bool aux_var_LF_0d_read = glob_aux_var_LF_0d_read;
                                // read TAB1 record
                                cpp_line = cpp_read_line(cont);
                                // assign expression to variable U
                                var_U_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                aux_var_U_0d_read = true;
                                // assign expression to variable LF
                                var_LF_0d = cpp_read_int_field(cpp_line, 3);
                                aux_var_LF_0d_read = true;
                                if (((((((var_LF_0d)==(9))))))) {
                                    cpp_found_match = true;
                                }
                                cont.seekg(cpp_old_streampos);
                            }
                            if (cpp_found_match) {
                                // read TAB1 record
                                cpp_line = cpp_read_line(cont);
                                // assign expression to variable U
                                var_U_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                aux_var_U_0d_read = true;
                                // assign expression to variable LF
                                var_LF_0d = cpp_read_int_field(cpp_line, 3);
                                aux_var_LF_0d_read = true;

                                {
                                    py::dict cpp_parent_dict = cpp_current_dict;
                                    if (! cpp_parent_dict.contains("p_table")) {
                                        cpp_parent_dict["p_table"] = py::dict();
                                    }
                                    py::dict cpp_current_dict = cpp_parent_dict["p_table"];
                                    {

                                        int cpp_j;
                                        int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                        int cpp_np = cpp_read_int_field(cpp_line, 5);

                                        std::vector<int> NBT;
                                        std::vector<int> INT;
                                        cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                        cpp_j = 0;
                                        for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                            NBT.push_back(cpp_intvec[cpp_j++]);
                                            INT.push_back(cpp_intvec[cpp_j++]);
                                        }

                                        cpp_current_dict["NBT"] = NBT;
                                        cpp_current_dict["INT"] = INT;

                                    std::vector<double> E;
                                    std::vector<double> p;
                                    cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                                    cpp_j = 0;
                                    for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                        E.push_back(cpp_floatvec[cpp_j++]);
                                        p.push_back(cpp_floatvec[cpp_j++]);
                                    }

                                    cpp_current_dict["E"] = E;
                                    cpp_current_dict["p"] = p;
                                    }
                                    cpp_current_dict = cpp_parent_dict;
                                }
                                // read TAB1 record
                                cpp_line = cpp_read_line(cont);

                                {
                                    py::dict cpp_parent_dict = cpp_current_dict;
                                    if (! cpp_parent_dict.contains("theta_table")) {
                                        cpp_parent_dict["theta_table"] = py::dict();
                                    }
                                    py::dict cpp_current_dict = cpp_parent_dict["theta_table"];
                                    {

                                        int cpp_j;
                                        int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                        int cpp_np = cpp_read_int_field(cpp_line, 5);

                                        std::vector<int> NBT;
                                        std::vector<int> INT;
                                        cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                        cpp_j = 0;
                                        for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                            NBT.push_back(cpp_intvec[cpp_j++]);
                                            INT.push_back(cpp_intvec[cpp_j++]);
                                        }

                                        cpp_current_dict["NBT"] = NBT;
                                        cpp_current_dict["INT"] = INT;

                                    std::vector<double> E;
                                    std::vector<double> theta;
                                    cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                                    cpp_j = 0;
                                    for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                        E.push_back(cpp_floatvec[cpp_j++]);
                                        theta.push_back(cpp_floatvec[cpp_j++]);
                                    }

                                    cpp_current_dict["E"] = E;
                                    cpp_current_dict["theta"] = theta;
                                    }
                                    cpp_current_dict = cpp_parent_dict;
                                }
                            }
                        }
                    }
                }
                if (! cpp_found_match) {
                    if (! cpp_found_match) {
                        // if statement evaluation with lookahead
                        {
                            std::streampos cpp_old_streampos = cont.tellg();
                            {
                                // variable declarations
                                double& glob_var_U_0d = var_U_0d;
                                double var_U_0d = glob_var_U_0d;
                                bool& glob_aux_var_U_0d_read = aux_var_U_0d_read;
                                bool aux_var_U_0d_read = glob_aux_var_U_0d_read;
                                int& glob_var_LF_0d = var_LF_0d;
                                int var_LF_0d = glob_var_LF_0d;
                                bool& glob_aux_var_LF_0d_read = aux_var_LF_0d_read;
                                bool aux_var_LF_0d_read = glob_aux_var_LF_0d_read;
                                // read TAB1 record
                                cpp_line = cpp_read_line(cont);
                                // assign expression to variable U
                                var_U_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                aux_var_U_0d_read = true;
                                // assign expression to variable LF
                                var_LF_0d = cpp_read_int_field(cpp_line, 3);
                                aux_var_LF_0d_read = true;
                                if (((((((var_LF_0d)==(11))))))) {
                                    cpp_found_match = true;
                                }
                                cont.seekg(cpp_old_streampos);
                            }
                            if (cpp_found_match) {
                                // read TAB1 record
                                cpp_line = cpp_read_line(cont);
                                // assign expression to variable U
                                var_U_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                aux_var_U_0d_read = true;
                                // assign expression to variable LF
                                var_LF_0d = cpp_read_int_field(cpp_line, 3);
                                aux_var_LF_0d_read = true;
                                {

                                    int cpp_j;
                                    int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                    int cpp_np = cpp_read_int_field(cpp_line, 5);

                                    std::vector<int> NBT;
                                    std::vector<int> INT;
                                    cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                    cpp_j = 0;
                                    for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                        NBT.push_back(cpp_intvec[cpp_j++]);
                                        INT.push_back(cpp_intvec[cpp_j++]);
                                    }

                                    cpp_current_dict["NBT"] = NBT;
                                    cpp_current_dict["INT"] = INT;

                                std::vector<double> E;
                                std::vector<double> p;
                                cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                                cpp_j = 0;
                                for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                    E.push_back(cpp_floatvec[cpp_j++]);
                                    p.push_back(cpp_floatvec[cpp_j++]);
                                }

                                cpp_current_dict["E"] = E;
                                cpp_current_dict["p"] = p;
                                }
                            }
                        }
                    }
                }
                if (! cpp_found_match) {
                    if (! cpp_found_match) {
                        // if statement evaluation with lookahead
                        {
                            std::streampos cpp_old_streampos = cont.tellg();
                            {
                                // variable declarations
                                int& glob_var_LF_0d = var_LF_0d;
                                int var_LF_0d = glob_var_LF_0d;
                                bool& glob_aux_var_LF_0d_read = aux_var_LF_0d_read;
                                bool aux_var_LF_0d_read = glob_aux_var_LF_0d_read;
                                // read TAB1 record
                                cpp_line = cpp_read_line(cont);
                                // assign expression to variable LF
                                var_LF_0d = cpp_read_int_field(cpp_line, 3);
                                aux_var_LF_0d_read = true;
                                if (((((((var_LF_0d)==(12))))))) {
                                    cpp_found_match = true;
                                }
                                cont.seekg(cpp_old_streampos);
                            }
                            if (cpp_found_match) {
                                // read TAB1 record
                                cpp_line = cpp_read_line(cont);
                                // assign expression to variable LF
                                var_LF_0d = cpp_read_int_field(cpp_line, 3);
                                aux_var_LF_0d_read = true;
                                {

                                    int cpp_j;
                                    int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                    int cpp_np = cpp_read_int_field(cpp_line, 5);

                                    std::vector<int> NBT;
                                    std::vector<int> INT;
                                    cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                    cpp_j = 0;
                                    for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                        NBT.push_back(cpp_intvec[cpp_j++]);
                                        INT.push_back(cpp_intvec[cpp_j++]);
                                    }

                                    cpp_current_dict["NBT"] = NBT;
                                    cpp_current_dict["INT"] = INT;

                                std::vector<double> E;
                                std::vector<double> p;
                                cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                                cpp_j = 0;
                                for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                    E.push_back(cpp_floatvec[cpp_j++]);
                                    p.push_back(cpp_floatvec[cpp_j++]);
                                }

                                cpp_current_dict["E"] = E;
                                cpp_current_dict["p"] = p;
                                }
                            }
                        }
                    }
                }
            }
            // store data in Python dictionary
            if ((aux_var_LF_0d_read == true)) {
                cpp_current_dict["LF"] = var_LF_0d;
            }
            if ((aux_var_NE_0d_read == true)) {
                cpp_current_dict["NE"] = var_NE_0d;
            }
            if ((var_E_1d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_E_1d;
                    cpp_current_dict["E"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["E"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                    }
            }
            if ((aux_var_U_0d_read == true)) {
                cpp_current_dict["U"] = var_U_0d;
            }
            cpp_current_dict = cpp_parent_dict;
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_NK_0d_read == true)) {
        cpp_current_dict["NK"] = var_NK_0d;
    }
    return cpp_current_dict;
}

py::dict parse_mf6_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_JP_0d;
    bool aux_var_JP_0d_read = false;
    int var_LCT_0d;
    bool aux_var_LCT_0d_read = false;
    int var_NK_0d;
    bool aux_var_NK_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // assign expression to variable JP
    var_JP_0d = cpp_read_int_field(cpp_line, 2);
    aux_var_JP_0d_read = true;
    // assign expression to variable LCT
    var_LCT_0d = cpp_read_int_field(cpp_line, 3);
    aux_var_LCT_0d_read = true;
    // assign expression to variable NK
    var_NK_0d = cpp_read_int_field(cpp_line, 4);
    aux_var_NK_0d_read = true;

    for (int var_i_0d = 1;
         var_i_0d <= var_NK_0d; var_i_0d++) {
        bool aux_var_i_0d_read = true;
        // open section subsection

        {
            py::dict cpp_parent_dict = cpp_current_dict;
            if (! cpp_parent_dict.contains("subsection")) {
                cpp_parent_dict["subsection"] = py::dict();
            }
            py::dict cpp_current_dict = cpp_parent_dict["subsection"];

            if (! cpp_current_dict.contains(py::cast(var_i_0d))) {
                cpp_current_dict[py::cast(var_i_0d)] = py::dict();
            }
            cpp_current_dict = cpp_current_dict[py::cast(var_i_0d)];
            // variable declarations
            double var_ZAP_0d;
            bool aux_var_ZAP_0d_read = false;
            double var_AWP_0d;
            bool aux_var_AWP_0d_read = false;
            int var_LIP_0d;
            bool aux_var_LIP_0d_read = false;
            int var_LAW_0d;
            bool aux_var_LAW_0d_read = false;
            int var_LANG_0d;
            bool aux_var_LANG_0d_read = false;
            int var_LEP_0d;
            bool aux_var_LEP_0d_read = false;
            int var_NE_0d;
            bool aux_var_NE_0d_read = false;
            NestedVector<double> var_E_1d;
            NestedVector<int> var_ND_1d;
            NestedVector<int> var_NA_1d;
            int cpp_int_val;
            bool aux_cpp_int_val_read = false;
            NestedVector<int> var_NEP_1d;
            NestedVector<NestedVector<double>> var_Ep_2d;
            NestedVector<double>* ptr_Ep_2d_idx0;
            NestedVector<NestedVector<NestedVector<double>>> var_b_3d;
            NestedVector<double>* ptr_b_3d_idx1;
            NestedVector<NestedVector<double>>* ptr_b_3d_idx0;
            NestedVector<int> var_NLW_1d;
            NestedVector<int> var_NL_1d;
            NestedVector<NestedVector<double>> var_A_2d;
            NestedVector<double>* ptr_A_2d_idx0;
            double var_SPI_0d;
            bool aux_var_SPI_0d_read = false;
            int var_LIDP_0d;
            bool aux_var_LIDP_0d_read = false;
            NestedVector<int> var_LTP_1d;
            NestedVector<int> var_NW_1d;
            double var_APSX_0d;
            bool aux_var_APSX_0d_read = false;
            int var_NPSX_0d;
            bool aux_var_NPSX_0d_read = false;
            NestedVector<int> var_NMU_1d;
            NestedVector<NestedVector<double>> var_mu_2d;
            NestedVector<double>* ptr_mu_2d_idx0;
            // read TAB1 record
            cpp_line = cpp_read_line(cont);
            // assign expression to variable ZAP
            var_ZAP_0d = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_var_ZAP_0d_read = true;
            // assign expression to variable AWP
            var_AWP_0d = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_var_AWP_0d_read = true;
            // assign expression to variable LIP
            var_LIP_0d = cpp_read_int_field(cpp_line, 2);
            aux_var_LIP_0d_read = true;
            // assign expression to variable LAW
            var_LAW_0d = cpp_read_int_field(cpp_line, 3);
            aux_var_LAW_0d_read = true;

            {
                py::dict cpp_parent_dict = cpp_current_dict;
                if (! cpp_parent_dict.contains("yields")) {
                    cpp_parent_dict["yields"] = py::dict();
                }
                py::dict cpp_current_dict = cpp_parent_dict["yields"];
                {

                    int cpp_j;
                    int cpp_nr = cpp_read_int_field(cpp_line, 4);
                    int cpp_np = cpp_read_int_field(cpp_line, 5);

                    std::vector<int> NBT;
                    std::vector<int> INT;
                    cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                    cpp_j = 0;
                    for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                        NBT.push_back(cpp_intvec[cpp_j++]);
                        INT.push_back(cpp_intvec[cpp_j++]);
                    }

                    cpp_current_dict["NBT"] = NBT;
                    cpp_current_dict["INT"] = INT;

                std::vector<double> Eint;
                std::vector<double> yi;
                cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                cpp_j = 0;
                for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                    Eint.push_back(cpp_floatvec[cpp_j++]);
                    yi.push_back(cpp_floatvec[cpp_j++]);
                }

                cpp_current_dict["Eint"] = Eint;
                cpp_current_dict["yi"] = yi;
                }
                cpp_current_dict = cpp_parent_dict;
            }
            // evaluate if-elif-else clause
            {
                bool cpp_found_match = false;
                if (! cpp_found_match) {
                    if (((((((var_LAW_0d)==(1))))))) {
                        // if statement evaluation
                        cpp_found_match = true;
                        // read TAB2 record
                        cpp_line = cpp_read_line(cont);
                        // assign expression to variable LANG
                        var_LANG_0d = cpp_read_int_field(cpp_line, 2);
                        aux_var_LANG_0d_read = true;
                        // assign expression to variable LEP
                        var_LEP_0d = cpp_read_int_field(cpp_line, 3);
                        aux_var_LEP_0d_read = true;
                        // assign expression to variable NE
                        var_NE_0d = cpp_read_int_field(cpp_line, 5);
                        aux_var_NE_0d_read = true;
                        {

                            int cpp_j;
                            int cpp_nr = cpp_read_int_field(cpp_line, 4);
                            int cpp_np = cpp_read_int_field(cpp_line, 5);

                            std::vector<int> NBT;
                            std::vector<int> INT;
                            cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                            cpp_j = 0;
                            for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                NBT.push_back(cpp_intvec[cpp_j++]);
                                INT.push_back(cpp_intvec[cpp_j++]);
                            }

                            cpp_current_dict["NBT"] = NBT;
                            cpp_current_dict["INT"] = INT;
                        }

                        for (int var_j_0d = 1;
                             var_j_0d <= var_NE_0d; var_j_0d++) {
                            bool aux_var_j_0d_read = true;
                            cpp_line = cpp_read_line(cont);
                            // read LIST record
                            // assign expression to variable E
                            var_E_1d.set(var_j_0d, cpp_read_float_field(cpp_line.c_str(), 1));
                            // assign expression to variable ND
                            var_ND_1d.set(var_j_0d, cpp_read_int_field(cpp_line, 2));
                            // assign expression to variable NA
                            var_NA_1d.set(var_j_0d, cpp_read_int_field(cpp_line, 3));
                            // assign expression to variable cpp_int_val
                            cpp_int_val = cpp_read_int_field(cpp_line, 4);
                            aux_cpp_int_val_read = true;
                            // assign expression to variable NEP
                            var_NEP_1d.set(var_j_0d, (cpp_int_val/(var_NA_1d[var_j_0d]+2)));
                            if ((! var_NEP_1d.contains(var_j_0d))) {
                                // assign expression to variable NEP
                                var_NEP_1d.set(var_j_0d, cpp_read_int_field(cpp_line, 5));
                            }
                            {
                                int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                int cpp_j = 0;
                                // read LIST body
                                ptr_Ep_2d_idx0 = var_Ep_2d.prepare(var_j_0d);
                                ptr_b_3d_idx0 = var_b_3d.prepare(var_j_0d);

                                for (int var_k_0d = 1;
                                     var_k_0d <= var_NEP_1d[var_j_0d]; var_k_0d++) {
                                    bool aux_var_k_0d_read = true;
                                    // read LIST body
                                    // assign expression to variable Ep
                                    ptr_Ep_2d_idx0->set(var_k_0d, cpp_floatvec[cpp_j++]);
                                    ptr_b_3d_idx1 = ptr_b_3d_idx0->prepare(var_k_0d);

                                    for (int var_m_0d = 0;
                                         var_m_0d <= var_NA_1d[var_j_0d]; var_m_0d++) {
                                        bool aux_var_m_0d_read = true;
                                        // read LIST body
                                        // assign expression to variable b
                                        ptr_b_3d_idx1->set(var_m_0d, cpp_floatvec[cpp_j++]);
                                    }
                                }
                            }
                        }
                    }
                }
                if (! cpp_found_match) {
                    if (! cpp_found_match) {
                        if (((((((var_LAW_0d)==(2))))))) {
                            // if statement evaluation
                            cpp_found_match = true;
                            // read TAB2 record
                            cpp_line = cpp_read_line(cont);
                            // assign expression to variable NE
                            var_NE_0d = cpp_read_int_field(cpp_line, 5);
                            aux_var_NE_0d_read = true;
                            {

                                int cpp_j;
                                int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                int cpp_np = cpp_read_int_field(cpp_line, 5);

                                std::vector<int> NBT;
                                std::vector<int> INT;
                                cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                cpp_j = 0;
                                for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                    NBT.push_back(cpp_intvec[cpp_j++]);
                                    INT.push_back(cpp_intvec[cpp_j++]);
                                }

                                cpp_current_dict["NBT"] = NBT;
                                cpp_current_dict["INT"] = INT;
                            }

                            for (int var_j_0d = 1;
                                 var_j_0d <= var_NE_0d; var_j_0d++) {
                                bool aux_var_j_0d_read = true;
                                cpp_line = cpp_read_line(cont);
                                // read LIST record
                                // assign expression to variable E
                                var_E_1d.set(var_j_0d, cpp_read_float_field(cpp_line.c_str(), 1));
                                // assign expression to variable LANG
                                var_LANG_0d = cpp_read_int_field(cpp_line, 2);
                                aux_var_LANG_0d_read = true;
                                // assign expression to variable NLW
                                var_NLW_1d.set(var_j_0d, cpp_read_int_field(cpp_line, 4));
                                // assign expression to variable NL
                                var_NL_1d.set(var_j_0d, cpp_read_int_field(cpp_line, 5));
                                {
                                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                    int cpp_j = 0;
                                    // read LIST body
                                    ptr_A_2d_idx0 = var_A_2d.prepare(var_j_0d);

                                    for (int var_l_0d = 1;
                                         var_l_0d <= var_NLW_1d[var_j_0d]; var_l_0d++) {
                                        bool aux_var_l_0d_read = true;
                                        // read LIST body
                                        // assign expression to variable A
                                        ptr_A_2d_idx0->set(var_l_0d, cpp_floatvec[cpp_j++]);
                                    }
                                }
                            }
                        }
                    }
                }
                if (! cpp_found_match) {
                    if (! cpp_found_match) {
                        if (((((((var_LAW_0d)==(5))))))) {
                            // if statement evaluation
                            cpp_found_match = true;
                            // read TAB2 record
                            cpp_line = cpp_read_line(cont);
                            // assign expression to variable SPI
                            var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                            aux_var_SPI_0d_read = true;
                            // assign expression to variable LIDP
                            var_LIDP_0d = cpp_read_int_field(cpp_line, 2);
                            aux_var_LIDP_0d_read = true;
                            // assign expression to variable NE
                            var_NE_0d = cpp_read_int_field(cpp_line, 5);
                            aux_var_NE_0d_read = true;
                            {

                                int cpp_j;
                                int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                int cpp_np = cpp_read_int_field(cpp_line, 5);

                                std::vector<int> NBT;
                                std::vector<int> INT;
                                cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                cpp_j = 0;
                                for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                    NBT.push_back(cpp_intvec[cpp_j++]);
                                    INT.push_back(cpp_intvec[cpp_j++]);
                                }

                                cpp_current_dict["NBT"] = NBT;
                                cpp_current_dict["INT"] = INT;
                            }

                            for (int var_j_0d = 1;
                                 var_j_0d <= var_NE_0d; var_j_0d++) {
                                bool aux_var_j_0d_read = true;
                                cpp_line = cpp_read_line(cont);
                                // read LIST record
                                // assign expression to variable E
                                var_E_1d.set(var_j_0d, cpp_read_float_field(cpp_line.c_str(), 1));
                                // assign expression to variable LTP
                                var_LTP_1d.set(var_j_0d, cpp_read_int_field(cpp_line, 2));
                                // assign expression to variable NW
                                var_NW_1d.set(var_j_0d, cpp_read_int_field(cpp_line, 4));
                                // assign expression to variable NL
                                var_NL_1d.set(var_j_0d, cpp_read_int_field(cpp_line, 5));
                                {
                                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                    int cpp_j = 0;
                                    // read LIST body
                                    ptr_A_2d_idx0 = var_A_2d.prepare(var_j_0d);

                                    for (int var_k_0d = 1;
                                         var_k_0d <= var_NW_1d[var_j_0d]; var_k_0d++) {
                                        bool aux_var_k_0d_read = true;
                                        // read LIST body
                                        // assign expression to variable A
                                        ptr_A_2d_idx0->set(var_k_0d, cpp_floatvec[cpp_j++]);
                                    }
                                }
                            }
                        }
                    }
                }
                if (! cpp_found_match) {
                    if (! cpp_found_match) {
                        if (((((((var_LAW_0d)==(6))))))) {
                            // if statement evaluation
                            cpp_found_match = true;
                            cpp_line = cpp_read_line(cont);
                            // read CONT record
                            // assign expression to variable APSX
                            var_APSX_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                            aux_var_APSX_0d_read = true;
                            // assign expression to variable NPSX
                            var_NPSX_0d = cpp_read_int_field(cpp_line, 5);
                            aux_var_NPSX_0d_read = true;
                        }
                    }
                }
                if (! cpp_found_match) {
                    if (! cpp_found_match) {
                        if (((((((var_LAW_0d)==(7))))))) {
                            // if statement evaluation
                            cpp_found_match = true;
                            // read TAB2 record
                            cpp_line = cpp_read_line(cont);
                            // assign expression to variable NE
                            var_NE_0d = cpp_read_int_field(cpp_line, 5);
                            aux_var_NE_0d_read = true;

                            {
                                py::dict cpp_parent_dict = cpp_current_dict;
                                if (! cpp_parent_dict.contains("E_interpol")) {
                                    cpp_parent_dict["E_interpol"] = py::dict();
                                }
                                py::dict cpp_current_dict = cpp_parent_dict["E_interpol"];
                                {

                                    int cpp_j;
                                    int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                    int cpp_np = cpp_read_int_field(cpp_line, 5);

                                    std::vector<int> NBT;
                                    std::vector<int> INT;
                                    cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                    cpp_j = 0;
                                    for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                        NBT.push_back(cpp_intvec[cpp_j++]);
                                        INT.push_back(cpp_intvec[cpp_j++]);
                                    }

                                    cpp_current_dict["NBT"] = NBT;
                                    cpp_current_dict["INT"] = INT;
                                }
                                cpp_current_dict = cpp_parent_dict;
                            }

                            for (int var_j_0d = 1;
                                 var_j_0d <= var_NE_0d; var_j_0d++) {
                                bool aux_var_j_0d_read = true;
                                // read TAB2 record
                                cpp_line = cpp_read_line(cont);
                                // assign expression to variable E
                                var_E_1d.set(var_j_0d, cpp_read_float_field(cpp_line.c_str(), 1));
                                // assign expression to variable NMU
                                var_NMU_1d.set(var_j_0d, cpp_read_int_field(cpp_line, 5));

                                {
                                    py::dict cpp_parent_dict = cpp_current_dict;
                                    if (! cpp_parent_dict.contains("mu_interpol")) {
                                        cpp_parent_dict["mu_interpol"] = py::dict();
                                    }
                                    py::dict cpp_current_dict = cpp_parent_dict["mu_interpol"];

                                    if (! cpp_current_dict.contains(py::cast(var_j_0d))) {
                                        cpp_current_dict[py::cast(var_j_0d)] = py::dict();
                                    }
                                    cpp_current_dict = cpp_current_dict[py::cast(var_j_0d)];
                                    {

                                        int cpp_j;
                                        int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                        int cpp_np = cpp_read_int_field(cpp_line, 5);

                                        std::vector<int> NBT;
                                        std::vector<int> INT;
                                        cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                        cpp_j = 0;
                                        for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                            NBT.push_back(cpp_intvec[cpp_j++]);
                                            INT.push_back(cpp_intvec[cpp_j++]);
                                        }

                                        cpp_current_dict["NBT"] = NBT;
                                        cpp_current_dict["INT"] = INT;
                                    }
                                    cpp_current_dict = cpp_parent_dict;
                                }
                                ptr_mu_2d_idx0 = var_mu_2d.prepare(var_j_0d);

                                for (int var_k_0d = 1;
                                     var_k_0d <= var_NMU_1d[var_j_0d]; var_k_0d++) {
                                    bool aux_var_k_0d_read = true;
                                    // read TAB1 record
                                    cpp_line = cpp_read_line(cont);
                                    // assign expression to variable mu
                                    ptr_mu_2d_idx0->set(var_k_0d, cpp_read_float_field(cpp_line.c_str(), 1));

                                    {
                                        py::dict cpp_parent_dict = cpp_current_dict;
                                        if (! cpp_parent_dict.contains("table")) {
                                            cpp_parent_dict["table"] = py::dict();
                                        }
                                        py::dict cpp_current_dict = cpp_parent_dict["table"];

                                        if (! cpp_current_dict.contains(py::cast(var_j_0d))) {
                                            cpp_current_dict[py::cast(var_j_0d)] = py::dict();
                                        }
                                        cpp_current_dict = cpp_current_dict[py::cast(var_j_0d)];

                                        if (! cpp_current_dict.contains(py::cast(var_k_0d))) {
                                            cpp_current_dict[py::cast(var_k_0d)] = py::dict();
                                        }
                                        cpp_current_dict = cpp_current_dict[py::cast(var_k_0d)];
                                        {

                                            int cpp_j;
                                            int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                            int cpp_np = cpp_read_int_field(cpp_line, 5);

                                            std::vector<int> NBT;
                                            std::vector<int> INT;
                                            cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                            cpp_j = 0;
                                            for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                                NBT.push_back(cpp_intvec[cpp_j++]);
                                                INT.push_back(cpp_intvec[cpp_j++]);
                                            }

                                            cpp_current_dict["NBT"] = NBT;
                                            cpp_current_dict["INT"] = INT;

                                        std::vector<double> Ep;
                                        std::vector<double> f;
                                        cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                                        cpp_j = 0;
                                        for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                            Ep.push_back(cpp_floatvec[cpp_j++]);
                                            f.push_back(cpp_floatvec[cpp_j++]);
                                        }

                                        cpp_current_dict["Ep"] = Ep;
                                        cpp_current_dict["f"] = f;
                                        }
                                        cpp_current_dict = cpp_parent_dict;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            // store data in Python dictionary
            if ((aux_var_ZAP_0d_read == true)) {
                cpp_current_dict["ZAP"] = var_ZAP_0d;
            }
            if ((aux_var_AWP_0d_read == true)) {
                cpp_current_dict["AWP"] = var_AWP_0d;
            }
            if ((aux_var_LIP_0d_read == true)) {
                cpp_current_dict["LIP"] = var_LIP_0d;
            }
            if ((aux_var_LAW_0d_read == true)) {
                cpp_current_dict["LAW"] = var_LAW_0d;
            }
            if ((aux_var_LANG_0d_read == true)) {
                cpp_current_dict["LANG"] = var_LANG_0d;
            }
            if ((aux_var_LEP_0d_read == true)) {
                cpp_current_dict["LEP"] = var_LEP_0d;
            }
            if ((aux_var_NE_0d_read == true)) {
                cpp_current_dict["NE"] = var_NE_0d;
            }
            if ((var_E_1d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_E_1d;
                    cpp_current_dict["E"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["E"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                    }
            }
            if ((var_ND_1d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_ND_1d;
                    cpp_current_dict["ND"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["ND"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                    }
            }
            if ((var_NA_1d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_NA_1d;
                    cpp_current_dict["NA"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["NA"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                    }
            }
            if ((var_NEP_1d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_NEP_1d;
                    cpp_current_dict["NEP"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["NEP"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                    }
            }
            if ((var_Ep_2d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_Ep_2d;
                    cpp_current_dict["Ep"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["Ep"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
                        cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                        py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                        for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
                            cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
                        }
                    }
            }
            if ((var_b_3d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_b_3d;
                    cpp_current_dict["b"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["b"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
                        cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                        py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                        for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
                            auto& cpp_curvar2 = cpp_curvar1[cpp_i2];
                            cpp_curdict1[py::cast(cpp_i2)] = py::dict();
                            py::dict cpp_curdict2 = cpp_curdict1[py::cast(cpp_i2)];
                            for (int cpp_i3 = cpp_curvar2.get_start_index(); cpp_i3 <= cpp_curvar2.get_last_index(); cpp_i3++) {
                                cpp_curdict2[py::cast(cpp_i3)] = cpp_curvar2[cpp_i3];
                            }
                        }
                    }
            }
            if ((var_NLW_1d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_NLW_1d;
                    cpp_current_dict["NLW"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["NLW"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                    }
            }
            if ((var_NL_1d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_NL_1d;
                    cpp_current_dict["NL"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["NL"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                    }
            }
            if ((var_A_2d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_A_2d;
                    cpp_current_dict["A"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["A"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
                        cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                        py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                        for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
                            cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
                        }
                    }
            }
            if ((aux_var_SPI_0d_read == true)) {
                cpp_current_dict["SPI"] = var_SPI_0d;
            }
            if ((aux_var_LIDP_0d_read == true)) {
                cpp_current_dict["LIDP"] = var_LIDP_0d;
            }
            if ((var_LTP_1d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_LTP_1d;
                    cpp_current_dict["LTP"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["LTP"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                    }
            }
            if ((var_NW_1d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_NW_1d;
                    cpp_current_dict["NW"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["NW"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                    }
            }
            if ((aux_var_APSX_0d_read == true)) {
                cpp_current_dict["APSX"] = var_APSX_0d;
            }
            if ((aux_var_NPSX_0d_read == true)) {
                cpp_current_dict["NPSX"] = var_NPSX_0d;
            }
            if ((var_NMU_1d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_NMU_1d;
                    cpp_current_dict["NMU"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["NMU"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                    }
            }
            if ((var_mu_2d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_mu_2d;
                    cpp_current_dict["mu"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["mu"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
                        cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                        py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                        for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
                            cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
                        }
                    }
            }
            cpp_current_dict = cpp_parent_dict;
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_JP_0d_read == true)) {
        cpp_current_dict["JP"] = var_JP_0d;
    }
    if ((aux_var_LCT_0d_read == true)) {
        cpp_current_dict["LCT"] = var_LCT_0d;
    }
    if ((aux_var_NK_0d_read == true)) {
        cpp_current_dict["NK"] = var_NK_0d;
    }
    return cpp_current_dict;
}

py::dict parse_mf7mt2_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_LTHR_0d;
    bool aux_var_LTHR_0d_read = false;
    double var_T0_0d;
    bool aux_var_T0_0d_read = false;
    int var_LT_0d;
    bool aux_var_LT_0d_read = false;
    NestedVector<double> var_T_1d;
    int var_LI_0d;
    bool aux_var_LI_0d_read = false;
    int var_NP_0d;
    bool aux_var_NP_0d_read = false;
    Matrix2d<double> var_S_2d;
    double var_SB_0d;
    bool aux_var_SB_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // assign expression to variable LTHR
    var_LTHR_0d = cpp_read_int_field(cpp_line, 2);
    aux_var_LTHR_0d_read = true;
    // evaluate if-elif-else clause
    {
        bool cpp_found_match = false;
        if (! cpp_found_match) {
            if (((((((var_LTHR_0d)==(1))))))) {
                // if statement evaluation
                cpp_found_match = true;
                // read TAB1 record
                cpp_line = cpp_read_line(cont);
                // assign expression to variable T0
                var_T0_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                aux_var_T0_0d_read = true;
                // assign expression to variable LT
                var_LT_0d = cpp_read_int_field(cpp_line, 2);
                aux_var_LT_0d_read = true;

                {
                    py::dict cpp_parent_dict = cpp_current_dict;
                    if (! cpp_parent_dict.contains("S_T0_table")) {
                        cpp_parent_dict["S_T0_table"] = py::dict();
                    }
                    py::dict cpp_current_dict = cpp_parent_dict["S_T0_table"];
                    {

                        int cpp_j;
                        int cpp_nr = cpp_read_int_field(cpp_line, 4);
                        int cpp_np = cpp_read_int_field(cpp_line, 5);

                        std::vector<int> NBT;
                        std::vector<int> INT;
                        cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                        cpp_j = 0;
                        for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                            NBT.push_back(cpp_intvec[cpp_j++]);
                            INT.push_back(cpp_intvec[cpp_j++]);
                        }

                        cpp_current_dict["NBT"] = NBT;
                        cpp_current_dict["INT"] = INT;

                    std::vector<double> Eint;
                    std::vector<double> S;
                    cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                    cpp_j = 0;
                    for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                        Eint.push_back(cpp_floatvec[cpp_j++]);
                        S.push_back(cpp_floatvec[cpp_j++]);
                    }

                    cpp_current_dict["Eint"] = Eint;
                    cpp_current_dict["S"] = S;
                    }
                    cpp_current_dict = cpp_parent_dict;
                }
                var_S_2d.init(1, var_NP_0d, 1, var_LT_0d, false, false);

                for (int var_i_0d = 1;
                     var_i_0d <= var_LT_0d; var_i_0d++) {
                    bool aux_var_i_0d_read = true;
                    cpp_line = cpp_read_line(cont);
                    // read LIST record
                    // assign expression to variable T
                    var_T_1d.set(var_i_0d, cpp_read_float_field(cpp_line.c_str(), 0));
                    // assign expression to variable LI
                    var_LI_0d = cpp_read_int_field(cpp_line, 2);
                    aux_var_LI_0d_read = true;
                    // assign expression to variable NP
                    var_NP_0d = cpp_read_int_field(cpp_line, 4);
                    aux_var_NP_0d_read = true;
                    {
                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                        int cpp_j = 0;
                        // read LIST body

                        for (int var_q_0d = 1;
                             var_q_0d <= var_NP_0d; var_q_0d++) {
                            bool aux_var_q_0d_read = true;
                            // read LIST body
                            // assign expression to variable S
                            var_S_2d(var_q_0d, var_i_0d) = cpp_floatvec[cpp_j++];
                        }
                    }
                }
            }
        }
        if (! cpp_found_match) {
            if (! cpp_found_match) {
                if (((((((var_LTHR_0d)==(2))))))) {
                    // if statement evaluation
                    cpp_found_match = true;
                    // read TAB1 record
                    cpp_line = cpp_read_line(cont);
                    // assign expression to variable SB
                    var_SB_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_var_SB_0d_read = true;
                    {

                        int cpp_j;
                        int cpp_nr = cpp_read_int_field(cpp_line, 4);
                        int cpp_np = cpp_read_int_field(cpp_line, 5);

                        std::vector<int> NBT;
                        std::vector<int> INT;
                        cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                        cpp_j = 0;
                        for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                            NBT.push_back(cpp_intvec[cpp_j++]);
                            INT.push_back(cpp_intvec[cpp_j++]);
                        }

                        cpp_current_dict["NBT"] = NBT;
                        cpp_current_dict["INT"] = INT;

                    std::vector<double> Tint;
                    std::vector<double> Wp;
                    cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                    cpp_j = 0;
                    for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                        Tint.push_back(cpp_floatvec[cpp_j++]);
                        Wp.push_back(cpp_floatvec[cpp_j++]);
                    }

                    cpp_current_dict["Tint"] = Tint;
                    cpp_current_dict["Wp"] = Wp;
                    }
                }
            }
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_LTHR_0d_read == true)) {
        cpp_current_dict["LTHR"] = var_LTHR_0d;
    }
    if ((aux_var_T0_0d_read == true)) {
        cpp_current_dict["T0"] = var_T0_0d;
    }
    if ((aux_var_LT_0d_read == true)) {
        cpp_current_dict["LT"] = var_LT_0d;
    }
    if ((var_T_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_T_1d;
            cpp_current_dict["T"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["T"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((aux_var_LI_0d_read == true)) {
        cpp_current_dict["LI"] = var_LI_0d;
    }
    if ((aux_var_NP_0d_read == true)) {
        cpp_current_dict["NP"] = var_NP_0d;
    }
    if (var_S_2d.did_read()) {
            cpp_current_dict["S"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["S"];
            for (int cpp_i1 = var_S_2d.get_row_start_index(); cpp_i1 <= var_S_2d.get_row_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                for (int cpp_i2 = var_S_2d.get_col_start_index(cpp_i1); cpp_i2 <= var_S_2d.get_col_last_index(cpp_i1); cpp_i2++) {
                    cpp_curdict1[py::cast(cpp_i2)] = var_S_2d(cpp_i1, cpp_i2);
                }
            }
    }
    if ((aux_var_SB_0d_read == true)) {
        cpp_current_dict["SB"] = var_SB_0d;
    }
    return cpp_current_dict;
}

py::dict parse_mf7mt4_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_LAT_0d;
    bool aux_var_LAT_0d_read = false;
    int var_LASYM_0d;
    bool aux_var_LASYM_0d_read = false;
    int var_LLN_0d;
    bool aux_var_LLN_0d_read = false;
    int var_NI_0d;
    bool aux_var_NI_0d_read = false;
    int var_NS_0d;
    bool aux_var_NS_0d_read = false;
    NestedVector<double> var_B_1d;
    int var_NB_0d;
    bool aux_var_NB_0d_read = false;
    double var_T0_0d;
    bool aux_var_T0_0d_read = false;
    NestedVector<double> var_beta_1d;
    NestedVector<int> var_LT_1d;
    NestedVector<double> var_T_1d;
    NestedVector<int> var_LI_1d;
    int var_NP_0d;
    bool aux_var_NP_0d_read = false;
    NestedVector<NestedVector<NestedVector<double>>> var_S_3d;
    NestedVector<double>* ptr_S_3d_idx1;
    NestedVector<NestedVector<double>>* ptr_S_3d_idx0;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // assign expression to variable LAT
    var_LAT_0d = cpp_read_int_field(cpp_line, 3);
    aux_var_LAT_0d_read = true;
    // assign expression to variable LASYM
    var_LASYM_0d = cpp_read_int_field(cpp_line, 4);
    aux_var_LASYM_0d_read = true;
    cpp_line = cpp_read_line(cont);
    // read LIST record
    // assign expression to variable LLN
    var_LLN_0d = cpp_read_int_field(cpp_line, 2);
    aux_var_LLN_0d_read = true;
    // assign expression to variable NI
    var_NI_0d = cpp_read_int_field(cpp_line, 4);
    aux_var_NI_0d_read = true;
    // assign expression to variable NS
    var_NS_0d = cpp_read_int_field(cpp_line, 5);
    aux_var_NS_0d_read = true;
    {
        int cpp_npl = cpp_read_int_field(cpp_line, 4);
        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
        int cpp_j = 0;
        // read LIST body

        for (int var_n_0d = 1;
             var_n_0d <= var_NI_0d; var_n_0d++) {
            bool aux_var_n_0d_read = true;
            // read LIST body
            // assign expression to variable B
            var_B_1d.set(var_n_0d, cpp_floatvec[cpp_j++]);
        }
    }
    // read TAB2 record
    cpp_line = cpp_read_line(cont);
    // assign expression to variable NB
    var_NB_0d = cpp_read_int_field(cpp_line, 5);
    aux_var_NB_0d_read = true;

    {
        py::dict cpp_parent_dict = cpp_current_dict;
        if (! cpp_parent_dict.contains("beta_interp")) {
            cpp_parent_dict["beta_interp"] = py::dict();
        }
        py::dict cpp_current_dict = cpp_parent_dict["beta_interp"];
        {

            int cpp_j;
            int cpp_nr = cpp_read_int_field(cpp_line, 4);
            int cpp_np = cpp_read_int_field(cpp_line, 5);

            std::vector<int> NBT;
            std::vector<int> INT;
            cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
            cpp_j = 0;
            for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                NBT.push_back(cpp_intvec[cpp_j++]);
                INT.push_back(cpp_intvec[cpp_j++]);
            }

            cpp_current_dict["NBT"] = NBT;
            cpp_current_dict["INT"] = INT;
        }
        cpp_current_dict = cpp_parent_dict;
    }

    for (int var_i_0d = 1;
         var_i_0d <= var_NB_0d; var_i_0d++) {
        bool aux_var_i_0d_read = true;
        // read TAB1 record
        cpp_line = cpp_read_line(cont);
        // assign expression to variable T0
        var_T0_0d = cpp_read_float_field(cpp_line.c_str(), 0);
        aux_var_T0_0d_read = true;
        // assign expression to variable beta
        var_beta_1d.set(var_i_0d, cpp_read_float_field(cpp_line.c_str(), 1));
        // assign expression to variable LT
        var_LT_1d.set(var_i_0d, cpp_read_int_field(cpp_line, 2));

        {
            py::dict cpp_parent_dict = cpp_current_dict;
            if (! cpp_parent_dict.contains("S_table")) {
                cpp_parent_dict["S_table"] = py::dict();
            }
            py::dict cpp_current_dict = cpp_parent_dict["S_table"];

            if (! cpp_current_dict.contains(py::cast(var_i_0d))) {
                cpp_current_dict[py::cast(var_i_0d)] = py::dict();
            }
            cpp_current_dict = cpp_current_dict[py::cast(var_i_0d)];
            {

                int cpp_j;
                int cpp_nr = cpp_read_int_field(cpp_line, 4);
                int cpp_np = cpp_read_int_field(cpp_line, 5);

                std::vector<int> NBT;
                std::vector<int> INT;
                cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                cpp_j = 0;
                for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                    NBT.push_back(cpp_intvec[cpp_j++]);
                    INT.push_back(cpp_intvec[cpp_j++]);
                }

                cpp_current_dict["NBT"] = NBT;
                cpp_current_dict["INT"] = INT;

            std::vector<double> alpha;
            std::vector<double> S;
            cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
            cpp_j = 0;
            for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                alpha.push_back(cpp_floatvec[cpp_j++]);
                S.push_back(cpp_floatvec[cpp_j++]);
            }

            cpp_current_dict["alpha"] = alpha;
            cpp_current_dict["S"] = S;
            }
            cpp_current_dict = cpp_parent_dict;
        }
        ptr_S_3d_idx1 = ptr_S_3d_idx0->prepare(var_i_0d);

        for (int var_j_0d = 1;
             var_j_0d <= var_LT_1d[var_i_0d]; var_j_0d++) {
            bool aux_var_j_0d_read = true;
            cpp_line = cpp_read_line(cont);
            // read LIST record
            // assign expression to variable T
            var_T_1d.set(var_j_0d, cpp_read_float_field(cpp_line.c_str(), 0));
            if ((! var_beta_1d.contains(var_i_0d))) {
                // assign expression to variable beta
                var_beta_1d.set(var_i_0d, cpp_read_float_field(cpp_line.c_str(), 1));
            }
            // assign expression to variable LI
            var_LI_1d.set(var_j_0d, cpp_read_int_field(cpp_line, 2));
            // assign expression to variable NP
            var_NP_0d = cpp_read_int_field(cpp_line, 4);
            aux_var_NP_0d_read = true;
            {
                int cpp_npl = cpp_read_int_field(cpp_line, 4);
                cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                int cpp_j = 0;
                // read LIST body

                for (int var_q_0d = 1;
                     var_q_0d <= var_NP_0d; var_q_0d++) {
                    bool aux_var_q_0d_read = true;
                    // read LIST body
                    // assign expression to variable S
                    ptr_S_3d_idx0 = var_S_3d.prepare(var_q_0d);
                    ptr_S_3d_idx1->set(var_j_0d, cpp_floatvec[cpp_j++]);
                }
            }
        }
    }
    // read TAB1 record
    cpp_line = cpp_read_line(cont);

    {
        py::dict cpp_parent_dict = cpp_current_dict;
        if (! cpp_parent_dict.contains("teff0_table")) {
            cpp_parent_dict["teff0_table"] = py::dict();
        }
        py::dict cpp_current_dict = cpp_parent_dict["teff0_table"];
        {

            int cpp_j;
            int cpp_nr = cpp_read_int_field(cpp_line, 4);
            int cpp_np = cpp_read_int_field(cpp_line, 5);

            std::vector<int> NBT;
            std::vector<int> INT;
            cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
            cpp_j = 0;
            for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                NBT.push_back(cpp_intvec[cpp_j++]);
                INT.push_back(cpp_intvec[cpp_j++]);
            }

            cpp_current_dict["NBT"] = NBT;
            cpp_current_dict["INT"] = INT;

        std::vector<double> Tint;
        std::vector<double> Teff0;
        cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
        cpp_j = 0;
        for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
            Tint.push_back(cpp_floatvec[cpp_j++]);
            Teff0.push_back(cpp_floatvec[cpp_j++]);
        }

        cpp_current_dict["Tint"] = Tint;
        cpp_current_dict["Teff0"] = Teff0;
        }
        cpp_current_dict = cpp_parent_dict;
    }
    // evaluate if-elif-else clause
    {
        bool cpp_found_match = false;
        if (! cpp_found_match) {
            if ((((((((var_NI_0d)>=(7))))&&(((var_B_1d[7])==(0))))))) {
                // if statement evaluation
                cpp_found_match = true;
                // read TAB1 record
                cpp_line = cpp_read_line(cont);

                {
                    py::dict cpp_parent_dict = cpp_current_dict;
                    if (! cpp_parent_dict.contains("teff1_table")) {
                        cpp_parent_dict["teff1_table"] = py::dict();
                    }
                    py::dict cpp_current_dict = cpp_parent_dict["teff1_table"];
                    {

                        int cpp_j;
                        int cpp_nr = cpp_read_int_field(cpp_line, 4);
                        int cpp_np = cpp_read_int_field(cpp_line, 5);

                        std::vector<int> NBT;
                        std::vector<int> INT;
                        cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                        cpp_j = 0;
                        for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                            NBT.push_back(cpp_intvec[cpp_j++]);
                            INT.push_back(cpp_intvec[cpp_j++]);
                        }

                        cpp_current_dict["NBT"] = NBT;
                        cpp_current_dict["INT"] = INT;

                    std::vector<double> Tint;
                    std::vector<double> Teff1;
                    cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                    cpp_j = 0;
                    for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                        Tint.push_back(cpp_floatvec[cpp_j++]);
                        Teff1.push_back(cpp_floatvec[cpp_j++]);
                    }

                    cpp_current_dict["Tint"] = Tint;
                    cpp_current_dict["Teff1"] = Teff1;
                    }
                    cpp_current_dict = cpp_parent_dict;
                }
            }
        }
    }
    // evaluate if-elif-else clause
    {
        bool cpp_found_match = false;
        if (! cpp_found_match) {
            if ((((((((var_NI_0d)>=(13))))&&(((var_B_1d[13])==(0.0))))))) {
                // if statement evaluation
                cpp_found_match = true;
                // read TAB1 record
                cpp_line = cpp_read_line(cont);

                {
                    py::dict cpp_parent_dict = cpp_current_dict;
                    if (! cpp_parent_dict.contains("teff2_table")) {
                        cpp_parent_dict["teff2_table"] = py::dict();
                    }
                    py::dict cpp_current_dict = cpp_parent_dict["teff2_table"];
                    {

                        int cpp_j;
                        int cpp_nr = cpp_read_int_field(cpp_line, 4);
                        int cpp_np = cpp_read_int_field(cpp_line, 5);

                        std::vector<int> NBT;
                        std::vector<int> INT;
                        cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                        cpp_j = 0;
                        for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                            NBT.push_back(cpp_intvec[cpp_j++]);
                            INT.push_back(cpp_intvec[cpp_j++]);
                        }

                        cpp_current_dict["NBT"] = NBT;
                        cpp_current_dict["INT"] = INT;

                    std::vector<double> Tint;
                    std::vector<double> Teff2;
                    cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                    cpp_j = 0;
                    for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                        Tint.push_back(cpp_floatvec[cpp_j++]);
                        Teff2.push_back(cpp_floatvec[cpp_j++]);
                    }

                    cpp_current_dict["Tint"] = Tint;
                    cpp_current_dict["Teff2"] = Teff2;
                    }
                    cpp_current_dict = cpp_parent_dict;
                }
            }
        }
    }
    // evaluate if-elif-else clause
    {
        bool cpp_found_match = false;
        if (! cpp_found_match) {
            if ((((((((var_NI_0d)>=(19))))&&(((var_B_1d[19])==(0.0))))))) {
                // if statement evaluation
                cpp_found_match = true;
                // read TAB1 record
                cpp_line = cpp_read_line(cont);

                {
                    py::dict cpp_parent_dict = cpp_current_dict;
                    if (! cpp_parent_dict.contains("teff3_table")) {
                        cpp_parent_dict["teff3_table"] = py::dict();
                    }
                    py::dict cpp_current_dict = cpp_parent_dict["teff3_table"];
                    {

                        int cpp_j;
                        int cpp_nr = cpp_read_int_field(cpp_line, 4);
                        int cpp_np = cpp_read_int_field(cpp_line, 5);

                        std::vector<int> NBT;
                        std::vector<int> INT;
                        cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                        cpp_j = 0;
                        for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                            NBT.push_back(cpp_intvec[cpp_j++]);
                            INT.push_back(cpp_intvec[cpp_j++]);
                        }

                        cpp_current_dict["NBT"] = NBT;
                        cpp_current_dict["INT"] = INT;

                    std::vector<double> Tint;
                    std::vector<double> Teff3;
                    cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                    cpp_j = 0;
                    for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                        Tint.push_back(cpp_floatvec[cpp_j++]);
                        Teff3.push_back(cpp_floatvec[cpp_j++]);
                    }

                    cpp_current_dict["Tint"] = Tint;
                    cpp_current_dict["Teff3"] = Teff3;
                    }
                    cpp_current_dict = cpp_parent_dict;
                }
            }
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_LAT_0d_read == true)) {
        cpp_current_dict["LAT"] = var_LAT_0d;
    }
    if ((aux_var_LASYM_0d_read == true)) {
        cpp_current_dict["LASYM"] = var_LASYM_0d;
    }
    if ((aux_var_LLN_0d_read == true)) {
        cpp_current_dict["LLN"] = var_LLN_0d;
    }
    if ((aux_var_NI_0d_read == true)) {
        cpp_current_dict["NI"] = var_NI_0d;
    }
    if ((aux_var_NS_0d_read == true)) {
        cpp_current_dict["NS"] = var_NS_0d;
    }
    if ((var_B_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_B_1d;
            cpp_current_dict["B"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["B"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((aux_var_NB_0d_read == true)) {
        cpp_current_dict["NB"] = var_NB_0d;
    }
    if ((aux_var_T0_0d_read == true)) {
        cpp_current_dict["T0"] = var_T0_0d;
    }
    if ((var_beta_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_beta_1d;
            cpp_current_dict["beta"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["beta"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_LT_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_LT_1d;
            cpp_current_dict["LT"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["LT"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_T_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_T_1d;
            cpp_current_dict["T"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["T"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_LI_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_LI_1d;
            cpp_current_dict["LI"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["LI"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((aux_var_NP_0d_read == true)) {
        cpp_current_dict["NP"] = var_NP_0d;
    }
    if ((var_S_3d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_S_3d;
            cpp_current_dict["S"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["S"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
                cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
                    auto& cpp_curvar2 = cpp_curvar1[cpp_i2];
                    cpp_curdict1[py::cast(cpp_i2)] = py::dict();
                    py::dict cpp_curdict2 = cpp_curdict1[py::cast(cpp_i2)];
                    for (int cpp_i3 = cpp_curvar2.get_start_index(); cpp_i3 <= cpp_curvar2.get_last_index(); cpp_i3++) {
                        cpp_curdict2[py::cast(cpp_i3)] = cpp_curvar2[cpp_i3];
                    }
                }
            }
    }
    return cpp_current_dict;
}

py::dict parse_mf8_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_LIS_0d;
    bool aux_var_LIS_0d_read = false;
    int var_LISO_0d;
    bool aux_var_LISO_0d_read = false;
    int var_NS_0d;
    bool aux_var_NS_0d_read = false;
    int var_NO_0d;
    bool aux_var_NO_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // assign expression to variable LIS
    var_LIS_0d = cpp_read_int_field(cpp_line, 2);
    aux_var_LIS_0d_read = true;
    // assign expression to variable LISO
    var_LISO_0d = cpp_read_int_field(cpp_line, 3);
    aux_var_LISO_0d_read = true;
    // assign expression to variable NS
    var_NS_0d = cpp_read_int_field(cpp_line, 4);
    aux_var_NS_0d_read = true;
    // assign expression to variable NO
    var_NO_0d = cpp_read_int_field(cpp_line, 5);
    aux_var_NO_0d_read = true;
    // evaluate if-elif-else clause
    {
        bool cpp_found_match = false;
        if (! cpp_found_match) {
            if (((((((var_NO_0d)==(0))))))) {
                // if statement evaluation
                cpp_found_match = true;

                for (int var_k_0d = 1;
                     var_k_0d <= var_NS_0d; var_k_0d++) {
                    bool aux_var_k_0d_read = true;
                    // open section subsection

                    {
                        py::dict cpp_parent_dict = cpp_current_dict;
                        if (! cpp_parent_dict.contains("subsection")) {
                            cpp_parent_dict["subsection"] = py::dict();
                        }
                        py::dict cpp_current_dict = cpp_parent_dict["subsection"];

                        if (! cpp_current_dict.contains(py::cast(var_k_0d))) {
                            cpp_current_dict[py::cast(var_k_0d)] = py::dict();
                        }
                        cpp_current_dict = cpp_current_dict[py::cast(var_k_0d)];
                        // variable declarations
                        double var_ZAP_0d;
                        bool aux_var_ZAP_0d_read = false;
                        double var_ELFS_0d;
                        bool aux_var_ELFS_0d_read = false;
                        int var_LMF_0d;
                        bool aux_var_LMF_0d_read = false;
                        int var_LFS_0d;
                        bool aux_var_LFS_0d_read = false;
                        int cpp_int_val;
                        bool aux_cpp_int_val_read = false;
                        int var_ND_0d;
                        bool aux_var_ND_0d_read = false;
                        NestedVector<double> var_HL_1d;
                        NestedVector<double> var_RTYP_1d;
                        NestedVector<double> var_ZAN_1d;
                        NestedVector<double> var_BR_1d;
                        NestedVector<double> var_END_1d;
                        NestedVector<double> var_CT_1d;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        // assign expression to variable ZAP
                        var_ZAP_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                        aux_var_ZAP_0d_read = true;
                        // assign expression to variable ELFS
                        var_ELFS_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_var_ELFS_0d_read = true;
                        // assign expression to variable LMF
                        var_LMF_0d = cpp_read_int_field(cpp_line, 2);
                        aux_var_LMF_0d_read = true;
                        // assign expression to variable LFS
                        var_LFS_0d = cpp_read_int_field(cpp_line, 3);
                        aux_var_LFS_0d_read = true;
                        // assign expression to variable cpp_int_val
                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                        aux_cpp_int_val_read = true;
                        // assign expression to variable ND
                        var_ND_0d = (cpp_int_val/6);
                        aux_var_ND_0d_read = true;
                        {
                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                            int cpp_j = 0;
                            // read LIST body

                            for (int var_l_0d = 1;
                                 var_l_0d <= var_ND_0d; var_l_0d++) {
                                bool aux_var_l_0d_read = true;
                                // read LIST body
                                // assign expression to variable HL
                                var_HL_1d.set(var_l_0d, cpp_floatvec[cpp_j++]);
                                // assign expression to variable RTYP
                                var_RTYP_1d.set(var_l_0d, cpp_floatvec[cpp_j++]);
                                // assign expression to variable ZAN
                                var_ZAN_1d.set(var_l_0d, cpp_floatvec[cpp_j++]);
                                // assign expression to variable BR
                                var_BR_1d.set(var_l_0d, cpp_floatvec[cpp_j++]);
                                // assign expression to variable END
                                var_END_1d.set(var_l_0d, cpp_floatvec[cpp_j++]);
                                // assign expression to variable CT
                                var_CT_1d.set(var_l_0d, cpp_floatvec[cpp_j++]);
                            }
                        }
                        // store data in Python dictionary
                        if ((aux_var_ZAP_0d_read == true)) {
                            cpp_current_dict["ZAP"] = var_ZAP_0d;
                        }
                        if ((aux_var_ELFS_0d_read == true)) {
                            cpp_current_dict["ELFS"] = var_ELFS_0d;
                        }
                        if ((aux_var_LMF_0d_read == true)) {
                            cpp_current_dict["LMF"] = var_LMF_0d;
                        }
                        if ((aux_var_LFS_0d_read == true)) {
                            cpp_current_dict["LFS"] = var_LFS_0d;
                        }
                        if ((aux_var_ND_0d_read == true)) {
                            cpp_current_dict["ND"] = var_ND_0d;
                        }
                        if ((var_HL_1d.get_last_index() != -1)) {
                                auto& cpp_curvar0 = var_HL_1d;
                                cpp_current_dict["HL"] = py::dict();
                                py::dict cpp_curdict0 = cpp_current_dict["HL"];
                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                }
                        }
                        if ((var_RTYP_1d.get_last_index() != -1)) {
                                auto& cpp_curvar0 = var_RTYP_1d;
                                cpp_current_dict["RTYP"] = py::dict();
                                py::dict cpp_curdict0 = cpp_current_dict["RTYP"];
                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                }
                        }
                        if ((var_ZAN_1d.get_last_index() != -1)) {
                                auto& cpp_curvar0 = var_ZAN_1d;
                                cpp_current_dict["ZAN"] = py::dict();
                                py::dict cpp_curdict0 = cpp_current_dict["ZAN"];
                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                }
                        }
                        if ((var_BR_1d.get_last_index() != -1)) {
                                auto& cpp_curvar0 = var_BR_1d;
                                cpp_current_dict["BR"] = py::dict();
                                py::dict cpp_curdict0 = cpp_current_dict["BR"];
                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                }
                        }
                        if ((var_END_1d.get_last_index() != -1)) {
                                auto& cpp_curvar0 = var_END_1d;
                                cpp_current_dict["END"] = py::dict();
                                py::dict cpp_curdict0 = cpp_current_dict["END"];
                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                }
                        }
                        if ((var_CT_1d.get_last_index() != -1)) {
                                auto& cpp_curvar0 = var_CT_1d;
                                cpp_current_dict["CT"] = py::dict();
                                py::dict cpp_curdict0 = cpp_current_dict["CT"];
                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                }
                        }
                        cpp_current_dict = cpp_parent_dict;
                    }
                }
            }
        }
        if (! cpp_found_match) {
            if (! cpp_found_match) {
                if (((((((var_NO_0d)==(1))))))) {
                    // if statement evaluation
                    cpp_found_match = true;

                    for (int var_k_0d = 1;
                         var_k_0d <= var_NS_0d; var_k_0d++) {
                        bool aux_var_k_0d_read = true;
                        // open section subsection

                        {
                            py::dict cpp_parent_dict = cpp_current_dict;
                            if (! cpp_parent_dict.contains("subsection")) {
                                cpp_parent_dict["subsection"] = py::dict();
                            }
                            py::dict cpp_current_dict = cpp_parent_dict["subsection"];

                            if (! cpp_current_dict.contains(py::cast(var_k_0d))) {
                                cpp_current_dict[py::cast(var_k_0d)] = py::dict();
                            }
                            cpp_current_dict = cpp_current_dict[py::cast(var_k_0d)];
                            // variable declarations
                            double var_ZAP_0d;
                            bool aux_var_ZAP_0d_read = false;
                            double var_ELFS_0d;
                            bool aux_var_ELFS_0d_read = false;
                            int var_LMF_0d;
                            bool aux_var_LMF_0d_read = false;
                            int var_LFS_0d;
                            bool aux_var_LFS_0d_read = false;
                            cpp_line = cpp_read_line(cont);
                            // read CONT record
                            // assign expression to variable ZAP
                            var_ZAP_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                            aux_var_ZAP_0d_read = true;
                            // assign expression to variable ELFS
                            var_ELFS_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                            aux_var_ELFS_0d_read = true;
                            // assign expression to variable LMF
                            var_LMF_0d = cpp_read_int_field(cpp_line, 2);
                            aux_var_LMF_0d_read = true;
                            // assign expression to variable LFS
                            var_LFS_0d = cpp_read_int_field(cpp_line, 3);
                            aux_var_LFS_0d_read = true;
                            // store data in Python dictionary
                            if ((aux_var_ZAP_0d_read == true)) {
                                cpp_current_dict["ZAP"] = var_ZAP_0d;
                            }
                            if ((aux_var_ELFS_0d_read == true)) {
                                cpp_current_dict["ELFS"] = var_ELFS_0d;
                            }
                            if ((aux_var_LMF_0d_read == true)) {
                                cpp_current_dict["LMF"] = var_LMF_0d;
                            }
                            if ((aux_var_LFS_0d_read == true)) {
                                cpp_current_dict["LFS"] = var_LFS_0d;
                            }
                            cpp_current_dict = cpp_parent_dict;
                        }
                    }
                }
            }
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_LIS_0d_read == true)) {
        cpp_current_dict["LIS"] = var_LIS_0d;
    }
    if ((aux_var_LISO_0d_read == true)) {
        cpp_current_dict["LISO"] = var_LISO_0d;
    }
    if ((aux_var_NS_0d_read == true)) {
        cpp_current_dict["NS"] = var_NS_0d;
    }
    if ((aux_var_NO_0d_read == true)) {
        cpp_current_dict["NO"] = var_NO_0d;
    }
    return cpp_current_dict;
}

py::dict parse_mf8mt454_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int cpp_int_val;
    bool aux_cpp_int_val_read = false;
    int var_LE_0d;
    bool aux_var_LE_0d_read = false;
    NestedVector<double> var_E_1d;
    NestedVector<int> var_NN_1d;
    NestedVector<int> var_NFP_1d;
    NestedVector<NestedVector<double>> var_ZAFP_2d;
    NestedVector<double>* ptr_ZAFP_2d_idx0;
    NestedVector<NestedVector<double>> var_FPS_2d;
    NestedVector<double>* ptr_FPS_2d_idx0;
    NestedVector<NestedVector<double>> var_YI_2d;
    NestedVector<double>* ptr_YI_2d_idx0;
    NestedVector<NestedVector<double>> var_DYI_2d;
    NestedVector<double>* ptr_DYI_2d_idx0;
    NestedVector<int> var_I_1d;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // assign expression to variable cpp_int_val
    cpp_int_val = cpp_read_int_field(cpp_line, 2);
    aux_cpp_int_val_read = true;
    // assign expression to variable LE
    var_LE_0d = (cpp_int_val+(-1));
    aux_var_LE_0d_read = true;
    cpp_line = cpp_read_line(cont);
    // read LIST record
    // assign expression to variable E
    var_E_1d.set(0, cpp_read_float_field(cpp_line.c_str(), 0));
    if ((! (aux_var_LE_0d_read == true))) {
        // assign expression to variable LE
        var_LE_0d = cpp_read_int_field(cpp_line, 2);
        aux_var_LE_0d_read = true;
    }
    // assign expression to variable NN
    var_NN_1d.set(0, cpp_read_int_field(cpp_line, 4));
    // assign expression to variable NFP
    var_NFP_1d.set(0, cpp_read_int_field(cpp_line, 5));
    {
        int cpp_npl = cpp_read_int_field(cpp_line, 4);
        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
        int cpp_j = 0;
        // read LIST body
        ptr_ZAFP_2d_idx0 = var_ZAFP_2d.prepare(0);
        ptr_FPS_2d_idx0 = var_FPS_2d.prepare(0);
        ptr_YI_2d_idx0 = var_YI_2d.prepare(0);
        ptr_DYI_2d_idx0 = var_DYI_2d.prepare(0);

        for (int var_m_0d = 1;
             var_m_0d <= var_NFP_1d[0]; var_m_0d++) {
            bool aux_var_m_0d_read = true;
            // read LIST body
            // assign expression to variable ZAFP
            ptr_ZAFP_2d_idx0->set(var_m_0d, cpp_floatvec[cpp_j++]);
            // assign expression to variable FPS
            ptr_FPS_2d_idx0->set(var_m_0d, cpp_floatvec[cpp_j++]);
            // assign expression to variable YI
            ptr_YI_2d_idx0->set(var_m_0d, cpp_floatvec[cpp_j++]);
            // assign expression to variable DYI
            ptr_DYI_2d_idx0->set(var_m_0d, cpp_floatvec[cpp_j++]);
        }
    }

    for (int var_k_0d = 1;
         var_k_0d <= var_LE_0d; var_k_0d++) {
        bool aux_var_k_0d_read = true;
        cpp_line = cpp_read_line(cont);
        // read LIST record
        if ((! var_E_1d.contains(var_k_0d))) {
            // assign expression to variable E
            var_E_1d.set(var_k_0d, cpp_read_float_field(cpp_line.c_str(), 0));
        }
        // assign expression to variable I
        var_I_1d.set(var_k_0d, cpp_read_int_field(cpp_line, 2));
        if ((! var_NN_1d.contains(var_k_0d))) {
            // assign expression to variable NN
            var_NN_1d.set(var_k_0d, cpp_read_int_field(cpp_line, 4));
        }
        if ((! var_NFP_1d.contains(var_k_0d))) {
            // assign expression to variable NFP
            var_NFP_1d.set(var_k_0d, cpp_read_int_field(cpp_line, 5));
        }
        {
            int cpp_npl = cpp_read_int_field(cpp_line, 4);
            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
            int cpp_j = 0;
            // read LIST body
            ptr_ZAFP_2d_idx0 = var_ZAFP_2d.prepare(var_k_0d);
            ptr_FPS_2d_idx0 = var_FPS_2d.prepare(var_k_0d);
            ptr_YI_2d_idx0 = var_YI_2d.prepare(var_k_0d);
            ptr_DYI_2d_idx0 = var_DYI_2d.prepare(var_k_0d);

            for (int var_m_0d = 1;
                 var_m_0d <= var_NFP_1d[var_k_0d]; var_m_0d++) {
                bool aux_var_m_0d_read = true;
                // read LIST body
                if ((! (var_ZAFP_2d.contains(var_k_0d) && var_ZAFP_2d[var_k_0d].contains(var_m_0d)))) {
                    // assign expression to variable ZAFP
                    ptr_ZAFP_2d_idx0->set(var_m_0d, cpp_floatvec[cpp_j++]);
                }
                if ((! (var_FPS_2d.contains(var_k_0d) && var_FPS_2d[var_k_0d].contains(var_m_0d)))) {
                    // assign expression to variable FPS
                    ptr_FPS_2d_idx0->set(var_m_0d, cpp_floatvec[cpp_j++]);
                }
                if ((! (var_YI_2d.contains(var_k_0d) && var_YI_2d[var_k_0d].contains(var_m_0d)))) {
                    // assign expression to variable YI
                    ptr_YI_2d_idx0->set(var_m_0d, cpp_floatvec[cpp_j++]);
                }
                if ((! (var_DYI_2d.contains(var_k_0d) && var_DYI_2d[var_k_0d].contains(var_m_0d)))) {
                    // assign expression to variable DYI
                    ptr_DYI_2d_idx0->set(var_m_0d, cpp_floatvec[cpp_j++]);
                }
            }
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_LE_0d_read == true)) {
        cpp_current_dict["LE"] = var_LE_0d;
    }
    if ((var_E_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_E_1d;
            cpp_current_dict["E"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["E"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_NN_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_NN_1d;
            cpp_current_dict["NN"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["NN"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_NFP_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_NFP_1d;
            cpp_current_dict["NFP"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["NFP"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_ZAFP_2d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_ZAFP_2d;
            cpp_current_dict["ZAFP"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["ZAFP"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
                cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
                    cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
                }
            }
    }
    if ((var_FPS_2d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_FPS_2d;
            cpp_current_dict["FPS"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["FPS"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
                cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
                    cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
                }
            }
    }
    if ((var_YI_2d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_YI_2d;
            cpp_current_dict["YI"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["YI"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
                cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
                    cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
                }
            }
    }
    if ((var_DYI_2d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_DYI_2d;
            cpp_current_dict["DYI"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["DYI"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
                cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
                    cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
                }
            }
    }
    if ((var_I_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_I_1d;
            cpp_current_dict["I"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["I"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    return cpp_current_dict;
}

py::dict parse_mf8mt457_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_LIS_0d;
    bool aux_var_LIS_0d_read = false;
    int var_LISO_0d;
    bool aux_var_LISO_0d_read = false;
    int var_NST_0d;
    bool aux_var_NST_0d_read = false;
    int var_NSP_0d;
    bool aux_var_NSP_0d_read = false;
    double var_Thalf_0d;
    bool aux_var_Thalf_0d_read = false;
    double var_dThalf_0d;
    bool aux_var_dThalf_0d_read = false;
    int cpp_int_val;
    bool aux_cpp_int_val_read = false;
    int var_NC_0d;
    bool aux_var_NC_0d_read = false;
    NestedVector<double> var_Ebar_x_1d;
    NestedVector<double> var_dEbar_x_1d;
    double var_SPI_0d;
    bool aux_var_SPI_0d_read = false;
    double var_PAR_0d;
    bool aux_var_PAR_0d_read = false;
    int var_NDK_0d;
    bool aux_var_NDK_0d_read = false;
    NestedVector<double> var_RTYP_1d;
    NestedVector<double> var_RFS_1d;
    NestedVector<double> var_Q_1d;
    NestedVector<double> var_dQ_1d;
    NestedVector<double> var_BR_1d;
    NestedVector<double> var_dBR_1d;
    int var_JENDL_LIST_NPL_0d;
    bool aux_var_JENDL_LIST_NPL_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    // evaluate if-elif-else clause
    {
        bool cpp_found_match = false;
        if (! cpp_found_match) {
            // if statement evaluation with lookahead
            {
                std::streampos cpp_old_streampos = cont.tellg();
                {
                    // variable declarations
                    int& glob_var_MAT_0d = var_MAT_0d;
                    int var_MAT_0d = glob_var_MAT_0d;
                    bool& glob_aux_var_MAT_0d_read = aux_var_MAT_0d_read;
                    bool aux_var_MAT_0d_read = glob_aux_var_MAT_0d_read;
                    int& glob_var_MF_0d = var_MF_0d;
                    int var_MF_0d = glob_var_MF_0d;
                    bool& glob_aux_var_MF_0d_read = aux_var_MF_0d_read;
                    bool aux_var_MF_0d_read = glob_aux_var_MF_0d_read;
                    int& glob_var_MT_0d = var_MT_0d;
                    int var_MT_0d = glob_var_MT_0d;
                    bool& glob_aux_var_MT_0d_read = aux_var_MT_0d_read;
                    bool aux_var_MT_0d_read = glob_aux_var_MT_0d_read;
                    double& glob_var_ZA_0d = var_ZA_0d;
                    double var_ZA_0d = glob_var_ZA_0d;
                    bool& glob_aux_var_ZA_0d_read = aux_var_ZA_0d_read;
                    bool aux_var_ZA_0d_read = glob_aux_var_ZA_0d_read;
                    double& glob_var_AWR_0d = var_AWR_0d;
                    double var_AWR_0d = glob_var_AWR_0d;
                    bool& glob_aux_var_AWR_0d_read = aux_var_AWR_0d_read;
                    bool aux_var_AWR_0d_read = glob_aux_var_AWR_0d_read;
                    int& glob_var_LIS_0d = var_LIS_0d;
                    int var_LIS_0d = glob_var_LIS_0d;
                    bool& glob_aux_var_LIS_0d_read = aux_var_LIS_0d_read;
                    bool aux_var_LIS_0d_read = glob_aux_var_LIS_0d_read;
                    int& glob_var_LISO_0d = var_LISO_0d;
                    int var_LISO_0d = glob_var_LISO_0d;
                    bool& glob_aux_var_LISO_0d_read = aux_var_LISO_0d_read;
                    bool aux_var_LISO_0d_read = glob_aux_var_LISO_0d_read;
                    int& glob_var_NST_0d = var_NST_0d;
                    int var_NST_0d = glob_var_NST_0d;
                    bool& glob_aux_var_NST_0d_read = aux_var_NST_0d_read;
                    bool aux_var_NST_0d_read = glob_aux_var_NST_0d_read;
                    int& glob_var_NSP_0d = var_NSP_0d;
                    int var_NSP_0d = glob_var_NSP_0d;
                    bool& glob_aux_var_NSP_0d_read = aux_var_NSP_0d_read;
                    bool aux_var_NSP_0d_read = glob_aux_var_NSP_0d_read;
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable ZA
                    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_var_ZA_0d_read = true;
                    // assign expression to variable AWR
                    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_var_AWR_0d_read = true;
                    // assign expression to variable LIS
                    var_LIS_0d = cpp_read_int_field(cpp_line, 2);
                    aux_var_LIS_0d_read = true;
                    // assign expression to variable LISO
                    var_LISO_0d = cpp_read_int_field(cpp_line, 3);
                    aux_var_LISO_0d_read = true;
                    // assign expression to variable NST
                    var_NST_0d = cpp_read_int_field(cpp_line, 4);
                    aux_var_NST_0d_read = true;
                    // assign expression to variable NSP
                    var_NSP_0d = cpp_read_int_field(cpp_line, 5);
                    aux_var_NSP_0d_read = true;
                    if (((((((var_NST_0d)==(0))))))) {
                        cpp_found_match = true;
                    }
                    cont.seekg(cpp_old_streampos);
                }
                if (cpp_found_match) {
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable ZA
                    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_var_ZA_0d_read = true;
                    // assign expression to variable AWR
                    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_var_AWR_0d_read = true;
                    // assign expression to variable LIS
                    var_LIS_0d = cpp_read_int_field(cpp_line, 2);
                    aux_var_LIS_0d_read = true;
                    // assign expression to variable LISO
                    var_LISO_0d = cpp_read_int_field(cpp_line, 3);
                    aux_var_LISO_0d_read = true;
                    // assign expression to variable NST
                    var_NST_0d = cpp_read_int_field(cpp_line, 4);
                    aux_var_NST_0d_read = true;
                    // assign expression to variable NSP
                    var_NSP_0d = cpp_read_int_field(cpp_line, 5);
                    aux_var_NSP_0d_read = true;
                    cpp_line = cpp_read_line(cont);
                    // read LIST record
                    // assign expression to variable Thalf
                    var_Thalf_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_var_Thalf_0d_read = true;
                    // assign expression to variable dThalf
                    var_dThalf_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_var_dThalf_0d_read = true;
                    // assign expression to variable cpp_int_val
                    cpp_int_val = cpp_read_int_field(cpp_line, 4);
                    aux_cpp_int_val_read = true;
                    // assign expression to variable NC
                    var_NC_0d = (cpp_int_val/2);
                    aux_var_NC_0d_read = true;
                    {
                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                        int cpp_j = 0;
                        // read LIST body

                        for (int var_k_0d = 1;
                             var_k_0d <= var_NC_0d; var_k_0d++) {
                            bool aux_var_k_0d_read = true;
                            // read LIST body
                            // assign expression to variable Ebar_x
                            var_Ebar_x_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                            // assign expression to variable dEbar_x
                            var_dEbar_x_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                        }
                    }
                    cpp_line = cpp_read_line(cont);
                    // read LIST record
                    // assign expression to variable SPI
                    var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_var_SPI_0d_read = true;
                    // assign expression to variable PAR
                    var_PAR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_var_PAR_0d_read = true;
                    // assign expression to variable cpp_int_val
                    cpp_int_val = cpp_read_int_field(cpp_line, 4);
                    aux_cpp_int_val_read = true;
                    // assign expression to variable NDK
                    var_NDK_0d = (cpp_int_val/6);
                    aux_var_NDK_0d_read = true;
                    if ((! (aux_var_NDK_0d_read == true))) {
                        // assign expression to variable NDK
                        var_NDK_0d = cpp_read_int_field(cpp_line, 5);
                        aux_var_NDK_0d_read = true;
                    }
                    {
                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                        int cpp_j = 0;
                        // read LIST body

                        for (int var_k_0d = 1;
                             var_k_0d <= var_NDK_0d; var_k_0d++) {
                            bool aux_var_k_0d_read = true;
                            // read LIST body
                            // assign expression to variable RTYP
                            var_RTYP_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                            // assign expression to variable RFS
                            var_RFS_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                            // assign expression to variable Q
                            var_Q_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                            // assign expression to variable dQ
                            var_dQ_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                            // assign expression to variable BR
                            var_BR_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                            // assign expression to variable dBR
                            var_dBR_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                        }
                    }

                    for (int var_k_0d = 1;
                         var_k_0d <= var_NSP_0d; var_k_0d++) {
                        bool aux_var_k_0d_read = true;
                        // open section spectrum

                        {
                            py::dict cpp_parent_dict = cpp_current_dict;
                            if (! cpp_parent_dict.contains("spectrum")) {
                                cpp_parent_dict["spectrum"] = py::dict();
                            }
                            py::dict cpp_current_dict = cpp_parent_dict["spectrum"];

                            if (! cpp_current_dict.contains(py::cast(var_k_0d))) {
                                cpp_current_dict[py::cast(var_k_0d)] = py::dict();
                            }
                            cpp_current_dict = cpp_current_dict[py::cast(var_k_0d)];
                            // variable declarations
                            double var_STYP_0d;
                            bool aux_var_STYP_0d_read = false;
                            int var_LCON_0d;
                            bool aux_var_LCON_0d_read = false;
                            int var_LCOV_0d;
                            bool aux_var_LCOV_0d_read = false;
                            int var_NER_0d;
                            bool aux_var_NER_0d_read = false;
                            double var_FD_0d;
                            bool aux_var_FD_0d_read = false;
                            double var_dFD_0d;
                            bool aux_var_dFD_0d_read = false;
                            double var_ERAV_0d;
                            bool aux_var_ERAV_0d_read = false;
                            double var_dERAV_0d;
                            bool aux_var_dERAV_0d_read = false;
                            double var_FC_0d;
                            bool aux_var_FC_0d_read = false;
                            double var_dFC_0d;
                            bool aux_var_dFC_0d_read = false;
                            cpp_line = cpp_read_line(cont);
                            // read LIST record
                            // assign expression to variable STYP
                            var_STYP_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                            aux_var_STYP_0d_read = true;
                            // assign expression to variable LCON
                            var_LCON_0d = cpp_read_int_field(cpp_line, 2);
                            aux_var_LCON_0d_read = true;
                            // assign expression to variable LCOV
                            var_LCOV_0d = cpp_read_int_field(cpp_line, 3);
                            aux_var_LCOV_0d_read = true;
                            // assign expression to variable NER
                            var_NER_0d = cpp_read_int_field(cpp_line, 5);
                            aux_var_NER_0d_read = true;
                            {
                                int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                int cpp_j = 0;
                                // read LIST body
                                // assign expression to variable FD
                                var_FD_0d = cpp_floatvec[cpp_j++];
                                aux_var_FD_0d_read = true;
                                // assign expression to variable dFD
                                var_dFD_0d = cpp_floatvec[cpp_j++];
                                aux_var_dFD_0d_read = true;
                                // assign expression to variable ERAV
                                var_ERAV_0d = cpp_floatvec[cpp_j++];
                                aux_var_ERAV_0d_read = true;
                                // assign expression to variable dERAV
                                var_dERAV_0d = cpp_floatvec[cpp_j++];
                                aux_var_dERAV_0d_read = true;
                                // assign expression to variable FC
                                var_FC_0d = cpp_floatvec[cpp_j++];
                                aux_var_FC_0d_read = true;
                                // assign expression to variable dFC
                                var_dFC_0d = cpp_floatvec[cpp_j++];
                                aux_var_dFC_0d_read = true;
                            }
                            // evaluate if-elif-else clause
                            {
                                bool cpp_found_match = false;
                                if (! cpp_found_match) {
                                    if (((((((var_LCON_0d)!=(1))))))) {
                                        // if statement evaluation
                                        cpp_found_match = true;
                                        // open section discrete

                                        {
                                            py::dict cpp_parent_dict = cpp_current_dict;
                                            if (! cpp_parent_dict.contains("discrete")) {
                                                cpp_parent_dict["discrete"] = py::dict();
                                            }
                                            py::dict cpp_current_dict = cpp_parent_dict["discrete"];
                                            // variable declarations

                                            for (int var_i_0d = 1;
                                                 var_i_0d <= var_NER_0d; var_i_0d++) {
                                                bool aux_var_i_0d_read = true;
                                                // open section energysec

                                                {
                                                    py::dict cpp_parent_dict = cpp_current_dict;
                                                    if (! cpp_parent_dict.contains("energysec")) {
                                                        cpp_parent_dict["energysec"] = py::dict();
                                                    }
                                                    py::dict cpp_current_dict = cpp_parent_dict["energysec"];

                                                    if (! cpp_current_dict.contains(py::cast(var_i_0d))) {
                                                        cpp_current_dict[py::cast(var_i_0d)] = py::dict();
                                                    }
                                                    cpp_current_dict = cpp_current_dict[py::cast(var_i_0d)];
                                                    // variable declarations
                                                    double var_ER_0d;
                                                    bool aux_var_ER_0d_read = false;
                                                    double var_dER_0d;
                                                    bool aux_var_dER_0d_read = false;
                                                    int var_NT_0d;
                                                    bool aux_var_NT_0d_read = false;
                                                    double var_RTYP_0d;
                                                    bool aux_var_RTYP_0d_read = false;
                                                    double var_TYPE_0d;
                                                    bool aux_var_TYPE_0d_read = false;
                                                    double var_RI_0d;
                                                    bool aux_var_RI_0d_read = false;
                                                    double var_dRI_0d;
                                                    bool aux_var_dRI_0d_read = false;
                                                    double var_RIS_0d;
                                                    bool aux_var_RIS_0d_read = false;
                                                    double var_dRIS_0d;
                                                    bool aux_var_dRIS_0d_read = false;
                                                    double var_RICC_0d;
                                                    bool aux_var_RICC_0d_read = false;
                                                    double var_dRICC_0d;
                                                    bool aux_var_dRICC_0d_read = false;
                                                    double var_RICK_0d;
                                                    bool aux_var_RICK_0d_read = false;
                                                    double var_dRICK_0d;
                                                    bool aux_var_dRICK_0d_read = false;
                                                    double var_RICL_0d;
                                                    bool aux_var_RICL_0d_read = false;
                                                    double var_dRICL_0d;
                                                    bool aux_var_dRICL_0d_read = false;
                                                    // evaluate if-elif-else clause
                                                    {
                                                        bool cpp_found_match = false;
                                                        if (! cpp_found_match) {
                                                            // if statement evaluation with lookahead
                                                            {
                                                                std::streampos cpp_old_streampos = cont.tellg();
                                                                {
                                                                    // variable declarations
                                                                    double& glob_var_ER_0d = var_ER_0d;
                                                                    double var_ER_0d = glob_var_ER_0d;
                                                                    bool& glob_aux_var_ER_0d_read = aux_var_ER_0d_read;
                                                                    bool aux_var_ER_0d_read = glob_aux_var_ER_0d_read;
                                                                    double& glob_var_dER_0d = var_dER_0d;
                                                                    double var_dER_0d = glob_var_dER_0d;
                                                                    bool& glob_aux_var_dER_0d_read = aux_var_dER_0d_read;
                                                                    bool aux_var_dER_0d_read = glob_aux_var_dER_0d_read;
                                                                    int& glob_var_NT_0d = var_NT_0d;
                                                                    int var_NT_0d = glob_var_NT_0d;
                                                                    bool& glob_aux_var_NT_0d_read = aux_var_NT_0d_read;
                                                                    bool aux_var_NT_0d_read = glob_aux_var_NT_0d_read;
                                                                    cpp_line = cpp_read_line(cont);
                                                                    // read LIST record
                                                                    // assign expression to variable ER
                                                                    var_ER_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                                    aux_var_ER_0d_read = true;
                                                                    // assign expression to variable dER
                                                                    var_dER_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                                    aux_var_dER_0d_read = true;
                                                                    // assign expression to variable NT
                                                                    var_NT_0d = cpp_read_int_field(cpp_line, 4);
                                                                    aux_var_NT_0d_read = true;
                                                                    if (((((((var_NT_0d)==(4))))))) {
                                                                        cpp_found_match = true;
                                                                    }
                                                                    cont.seekg(cpp_old_streampos);
                                                                }
                                                                if (cpp_found_match) {
                                                                    cpp_line = cpp_read_line(cont);
                                                                    // read LIST record
                                                                    // assign expression to variable ER
                                                                    var_ER_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                                    aux_var_ER_0d_read = true;
                                                                    // assign expression to variable dER
                                                                    var_dER_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                                    aux_var_dER_0d_read = true;
                                                                    // assign expression to variable NT
                                                                    var_NT_0d = cpp_read_int_field(cpp_line, 4);
                                                                    aux_var_NT_0d_read = true;
                                                                    {
                                                                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                                        int cpp_j = 0;
                                                                        // read LIST body
                                                                        // assign expression to variable RTYP
                                                                        var_RTYP_0d = cpp_floatvec[cpp_j++];
                                                                        aux_var_RTYP_0d_read = true;
                                                                        // assign expression to variable TYPE
                                                                        var_TYPE_0d = cpp_floatvec[cpp_j++];
                                                                        aux_var_TYPE_0d_read = true;
                                                                        // assign expression to variable RI
                                                                        var_RI_0d = cpp_floatvec[cpp_j++];
                                                                        aux_var_RI_0d_read = true;
                                                                        // assign expression to variable dRI
                                                                        var_dRI_0d = cpp_floatvec[cpp_j++];
                                                                        aux_var_dRI_0d_read = true;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (! cpp_found_match) {
                                                            if (! cpp_found_match) {
                                                                // if statement evaluation with lookahead
                                                                {
                                                                    std::streampos cpp_old_streampos = cont.tellg();
                                                                    {
                                                                        // variable declarations
                                                                        double& glob_var_ER_0d = var_ER_0d;
                                                                        double var_ER_0d = glob_var_ER_0d;
                                                                        bool& glob_aux_var_ER_0d_read = aux_var_ER_0d_read;
                                                                        bool aux_var_ER_0d_read = glob_aux_var_ER_0d_read;
                                                                        double& glob_var_dER_0d = var_dER_0d;
                                                                        double var_dER_0d = glob_var_dER_0d;
                                                                        bool& glob_aux_var_dER_0d_read = aux_var_dER_0d_read;
                                                                        bool aux_var_dER_0d_read = glob_aux_var_dER_0d_read;
                                                                        int& glob_var_NT_0d = var_NT_0d;
                                                                        int var_NT_0d = glob_var_NT_0d;
                                                                        bool& glob_aux_var_NT_0d_read = aux_var_NT_0d_read;
                                                                        bool aux_var_NT_0d_read = glob_aux_var_NT_0d_read;
                                                                        cpp_line = cpp_read_line(cont);
                                                                        // read LIST record
                                                                        // assign expression to variable ER
                                                                        var_ER_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                                        aux_var_ER_0d_read = true;
                                                                        // assign expression to variable dER
                                                                        var_dER_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                                        aux_var_dER_0d_read = true;
                                                                        // assign expression to variable NT
                                                                        var_NT_0d = cpp_read_int_field(cpp_line, 4);
                                                                        aux_var_NT_0d_read = true;
                                                                        if (((((((var_NT_0d)==(6))))))) {
                                                                            cpp_found_match = true;
                                                                        }
                                                                        cont.seekg(cpp_old_streampos);
                                                                    }
                                                                    if (cpp_found_match) {
                                                                        cpp_line = cpp_read_line(cont);
                                                                        // read LIST record
                                                                        // assign expression to variable ER
                                                                        var_ER_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                                        aux_var_ER_0d_read = true;
                                                                        // assign expression to variable dER
                                                                        var_dER_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                                        aux_var_dER_0d_read = true;
                                                                        // assign expression to variable NT
                                                                        var_NT_0d = cpp_read_int_field(cpp_line, 4);
                                                                        aux_var_NT_0d_read = true;
                                                                        {
                                                                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                                            int cpp_j = 0;
                                                                            // read LIST body
                                                                            // assign expression to variable RTYP
                                                                            var_RTYP_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_RTYP_0d_read = true;
                                                                            // assign expression to variable TYPE
                                                                            var_TYPE_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_TYPE_0d_read = true;
                                                                            // assign expression to variable RI
                                                                            var_RI_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_RI_0d_read = true;
                                                                            // assign expression to variable dRI
                                                                            var_dRI_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_dRI_0d_read = true;
                                                                            // assign expression to variable RIS
                                                                            var_RIS_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_RIS_0d_read = true;
                                                                            // assign expression to variable dRIS
                                                                            var_dRIS_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_dRIS_0d_read = true;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (! cpp_found_match) {
                                                            if (! cpp_found_match) {
                                                                // if statement evaluation with lookahead
                                                                {
                                                                    std::streampos cpp_old_streampos = cont.tellg();
                                                                    {
                                                                        // variable declarations
                                                                        double& glob_var_ER_0d = var_ER_0d;
                                                                        double var_ER_0d = glob_var_ER_0d;
                                                                        bool& glob_aux_var_ER_0d_read = aux_var_ER_0d_read;
                                                                        bool aux_var_ER_0d_read = glob_aux_var_ER_0d_read;
                                                                        double& glob_var_dER_0d = var_dER_0d;
                                                                        double var_dER_0d = glob_var_dER_0d;
                                                                        bool& glob_aux_var_dER_0d_read = aux_var_dER_0d_read;
                                                                        bool aux_var_dER_0d_read = glob_aux_var_dER_0d_read;
                                                                        int& glob_var_NT_0d = var_NT_0d;
                                                                        int var_NT_0d = glob_var_NT_0d;
                                                                        bool& glob_aux_var_NT_0d_read = aux_var_NT_0d_read;
                                                                        bool aux_var_NT_0d_read = glob_aux_var_NT_0d_read;
                                                                        cpp_line = cpp_read_line(cont);
                                                                        // read LIST record
                                                                        // assign expression to variable ER
                                                                        var_ER_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                                        aux_var_ER_0d_read = true;
                                                                        // assign expression to variable dER
                                                                        var_dER_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                                        aux_var_dER_0d_read = true;
                                                                        // assign expression to variable NT
                                                                        var_NT_0d = cpp_read_int_field(cpp_line, 4);
                                                                        aux_var_NT_0d_read = true;
                                                                        if (((((((var_NT_0d)==(8))))))) {
                                                                            cpp_found_match = true;
                                                                        }
                                                                        cont.seekg(cpp_old_streampos);
                                                                    }
                                                                    if (cpp_found_match) {
                                                                        cpp_line = cpp_read_line(cont);
                                                                        // read LIST record
                                                                        // assign expression to variable ER
                                                                        var_ER_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                                        aux_var_ER_0d_read = true;
                                                                        // assign expression to variable dER
                                                                        var_dER_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                                        aux_var_dER_0d_read = true;
                                                                        // assign expression to variable NT
                                                                        var_NT_0d = cpp_read_int_field(cpp_line, 4);
                                                                        aux_var_NT_0d_read = true;
                                                                        {
                                                                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                                            int cpp_j = 0;
                                                                            // read LIST body
                                                                            // assign expression to variable RTYP
                                                                            var_RTYP_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_RTYP_0d_read = true;
                                                                            // assign expression to variable TYPE
                                                                            var_TYPE_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_TYPE_0d_read = true;
                                                                            // assign expression to variable RI
                                                                            var_RI_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_RI_0d_read = true;
                                                                            // assign expression to variable dRI
                                                                            var_dRI_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_dRI_0d_read = true;
                                                                            // assign expression to variable RIS
                                                                            var_RIS_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_RIS_0d_read = true;
                                                                            // assign expression to variable dRIS
                                                                            var_dRIS_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_dRIS_0d_read = true;
                                                                            // assign expression to variable RICC
                                                                            var_RICC_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_RICC_0d_read = true;
                                                                            // assign expression to variable dRICC
                                                                            var_dRICC_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_dRICC_0d_read = true;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (! cpp_found_match) {
                                                            if (! cpp_found_match) {
                                                                // if statement evaluation with lookahead
                                                                {
                                                                    std::streampos cpp_old_streampos = cont.tellg();
                                                                    {
                                                                        // variable declarations
                                                                        double& glob_var_ER_0d = var_ER_0d;
                                                                        double var_ER_0d = glob_var_ER_0d;
                                                                        bool& glob_aux_var_ER_0d_read = aux_var_ER_0d_read;
                                                                        bool aux_var_ER_0d_read = glob_aux_var_ER_0d_read;
                                                                        double& glob_var_dER_0d = var_dER_0d;
                                                                        double var_dER_0d = glob_var_dER_0d;
                                                                        bool& glob_aux_var_dER_0d_read = aux_var_dER_0d_read;
                                                                        bool aux_var_dER_0d_read = glob_aux_var_dER_0d_read;
                                                                        int& glob_var_NT_0d = var_NT_0d;
                                                                        int var_NT_0d = glob_var_NT_0d;
                                                                        bool& glob_aux_var_NT_0d_read = aux_var_NT_0d_read;
                                                                        bool aux_var_NT_0d_read = glob_aux_var_NT_0d_read;
                                                                        cpp_line = cpp_read_line(cont);
                                                                        // read LIST record
                                                                        // assign expression to variable ER
                                                                        var_ER_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                                        aux_var_ER_0d_read = true;
                                                                        // assign expression to variable dER
                                                                        var_dER_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                                        aux_var_dER_0d_read = true;
                                                                        // assign expression to variable NT
                                                                        var_NT_0d = cpp_read_int_field(cpp_line, 4);
                                                                        aux_var_NT_0d_read = true;
                                                                        if (((((((var_NT_0d)==(10))))))) {
                                                                            cpp_found_match = true;
                                                                        }
                                                                        cont.seekg(cpp_old_streampos);
                                                                    }
                                                                    if (cpp_found_match) {
                                                                        cpp_line = cpp_read_line(cont);
                                                                        // read LIST record
                                                                        // assign expression to variable ER
                                                                        var_ER_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                                        aux_var_ER_0d_read = true;
                                                                        // assign expression to variable dER
                                                                        var_dER_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                                        aux_var_dER_0d_read = true;
                                                                        // assign expression to variable NT
                                                                        var_NT_0d = cpp_read_int_field(cpp_line, 4);
                                                                        aux_var_NT_0d_read = true;
                                                                        {
                                                                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                                            int cpp_j = 0;
                                                                            // read LIST body
                                                                            // assign expression to variable RTYP
                                                                            var_RTYP_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_RTYP_0d_read = true;
                                                                            // assign expression to variable TYPE
                                                                            var_TYPE_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_TYPE_0d_read = true;
                                                                            // assign expression to variable RI
                                                                            var_RI_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_RI_0d_read = true;
                                                                            // assign expression to variable dRI
                                                                            var_dRI_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_dRI_0d_read = true;
                                                                            // assign expression to variable RIS
                                                                            var_RIS_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_RIS_0d_read = true;
                                                                            // assign expression to variable dRIS
                                                                            var_dRIS_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_dRIS_0d_read = true;
                                                                            // assign expression to variable RICC
                                                                            var_RICC_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_RICC_0d_read = true;
                                                                            // assign expression to variable dRICC
                                                                            var_dRICC_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_dRICC_0d_read = true;
                                                                            // assign expression to variable RICK
                                                                            var_RICK_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_RICK_0d_read = true;
                                                                            // assign expression to variable dRICK
                                                                            var_dRICK_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_dRICK_0d_read = true;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (! cpp_found_match) {
                                                            if (! cpp_found_match) {
                                                                // if statement evaluation with lookahead
                                                                {
                                                                    std::streampos cpp_old_streampos = cont.tellg();
                                                                    {
                                                                        // variable declarations
                                                                        double& glob_var_ER_0d = var_ER_0d;
                                                                        double var_ER_0d = glob_var_ER_0d;
                                                                        bool& glob_aux_var_ER_0d_read = aux_var_ER_0d_read;
                                                                        bool aux_var_ER_0d_read = glob_aux_var_ER_0d_read;
                                                                        double& glob_var_dER_0d = var_dER_0d;
                                                                        double var_dER_0d = glob_var_dER_0d;
                                                                        bool& glob_aux_var_dER_0d_read = aux_var_dER_0d_read;
                                                                        bool aux_var_dER_0d_read = glob_aux_var_dER_0d_read;
                                                                        int& glob_var_NT_0d = var_NT_0d;
                                                                        int var_NT_0d = glob_var_NT_0d;
                                                                        bool& glob_aux_var_NT_0d_read = aux_var_NT_0d_read;
                                                                        bool aux_var_NT_0d_read = glob_aux_var_NT_0d_read;
                                                                        cpp_line = cpp_read_line(cont);
                                                                        // read LIST record
                                                                        // assign expression to variable ER
                                                                        var_ER_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                                        aux_var_ER_0d_read = true;
                                                                        // assign expression to variable dER
                                                                        var_dER_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                                        aux_var_dER_0d_read = true;
                                                                        // assign expression to variable NT
                                                                        var_NT_0d = cpp_read_int_field(cpp_line, 4);
                                                                        aux_var_NT_0d_read = true;
                                                                        if (((((((var_NT_0d)==(12))))))) {
                                                                            cpp_found_match = true;
                                                                        }
                                                                        cont.seekg(cpp_old_streampos);
                                                                    }
                                                                    if (cpp_found_match) {
                                                                        cpp_line = cpp_read_line(cont);
                                                                        // read LIST record
                                                                        // assign expression to variable ER
                                                                        var_ER_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                                        aux_var_ER_0d_read = true;
                                                                        // assign expression to variable dER
                                                                        var_dER_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                                        aux_var_dER_0d_read = true;
                                                                        // assign expression to variable NT
                                                                        var_NT_0d = cpp_read_int_field(cpp_line, 4);
                                                                        aux_var_NT_0d_read = true;
                                                                        {
                                                                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                                            int cpp_j = 0;
                                                                            // read LIST body
                                                                            // assign expression to variable RTYP
                                                                            var_RTYP_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_RTYP_0d_read = true;
                                                                            // assign expression to variable TYPE
                                                                            var_TYPE_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_TYPE_0d_read = true;
                                                                            // assign expression to variable RI
                                                                            var_RI_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_RI_0d_read = true;
                                                                            // assign expression to variable dRI
                                                                            var_dRI_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_dRI_0d_read = true;
                                                                            // assign expression to variable RIS
                                                                            var_RIS_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_RIS_0d_read = true;
                                                                            // assign expression to variable dRIS
                                                                            var_dRIS_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_dRIS_0d_read = true;
                                                                            // assign expression to variable RICC
                                                                            var_RICC_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_RICC_0d_read = true;
                                                                            // assign expression to variable dRICC
                                                                            var_dRICC_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_dRICC_0d_read = true;
                                                                            // assign expression to variable RICK
                                                                            var_RICK_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_RICK_0d_read = true;
                                                                            // assign expression to variable dRICK
                                                                            var_dRICK_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_dRICK_0d_read = true;
                                                                            // assign expression to variable RICL
                                                                            var_RICL_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_RICL_0d_read = true;
                                                                            // assign expression to variable dRICL
                                                                            var_dRICL_0d = cpp_floatvec[cpp_j++];
                                                                            aux_var_dRICL_0d_read = true;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    // store data in Python dictionary
                                                    if ((aux_var_ER_0d_read == true)) {
                                                        cpp_current_dict["ER"] = var_ER_0d;
                                                    }
                                                    if ((aux_var_dER_0d_read == true)) {
                                                        cpp_current_dict["dER"] = var_dER_0d;
                                                    }
                                                    if ((aux_var_NT_0d_read == true)) {
                                                        cpp_current_dict["NT"] = var_NT_0d;
                                                    }
                                                    if ((aux_var_RTYP_0d_read == true)) {
                                                        cpp_current_dict["RTYP"] = var_RTYP_0d;
                                                    }
                                                    if ((aux_var_TYPE_0d_read == true)) {
                                                        cpp_current_dict["TYPE"] = var_TYPE_0d;
                                                    }
                                                    if ((aux_var_RI_0d_read == true)) {
                                                        cpp_current_dict["RI"] = var_RI_0d;
                                                    }
                                                    if ((aux_var_dRI_0d_read == true)) {
                                                        cpp_current_dict["dRI"] = var_dRI_0d;
                                                    }
                                                    if ((aux_var_RIS_0d_read == true)) {
                                                        cpp_current_dict["RIS"] = var_RIS_0d;
                                                    }
                                                    if ((aux_var_dRIS_0d_read == true)) {
                                                        cpp_current_dict["dRIS"] = var_dRIS_0d;
                                                    }
                                                    if ((aux_var_RICC_0d_read == true)) {
                                                        cpp_current_dict["RICC"] = var_RICC_0d;
                                                    }
                                                    if ((aux_var_dRICC_0d_read == true)) {
                                                        cpp_current_dict["dRICC"] = var_dRICC_0d;
                                                    }
                                                    if ((aux_var_RICK_0d_read == true)) {
                                                        cpp_current_dict["RICK"] = var_RICK_0d;
                                                    }
                                                    if ((aux_var_dRICK_0d_read == true)) {
                                                        cpp_current_dict["dRICK"] = var_dRICK_0d;
                                                    }
                                                    if ((aux_var_RICL_0d_read == true)) {
                                                        cpp_current_dict["RICL"] = var_RICL_0d;
                                                    }
                                                    if ((aux_var_dRICL_0d_read == true)) {
                                                        cpp_current_dict["dRICL"] = var_dRICL_0d;
                                                    }
                                                    cpp_current_dict = cpp_parent_dict;
                                                }
                                            }
                                            // store data in Python dictionary
                                            cpp_current_dict = cpp_parent_dict;
                                        }
                                    }
                                }
                            }
                            // evaluate if-elif-else clause
                            {
                                bool cpp_found_match = false;
                                if (! cpp_found_match) {
                                    if (((((((var_LCON_0d)!=(0))))))) {
                                        // if statement evaluation
                                        cpp_found_match = true;
                                        // open section continuous

                                        {
                                            py::dict cpp_parent_dict = cpp_current_dict;
                                            if (! cpp_parent_dict.contains("continuous")) {
                                                cpp_parent_dict["continuous"] = py::dict();
                                            }
                                            py::dict cpp_current_dict = cpp_parent_dict["continuous"];
                                            // variable declarations
                                            double var_RTYP_0d;
                                            bool aux_var_RTYP_0d_read = false;
                                            // read TAB1 record
                                            cpp_line = cpp_read_line(cont);
                                            // assign expression to variable RTYP
                                            var_RTYP_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                            aux_var_RTYP_0d_read = true;
                                            {

                                                int cpp_j;
                                                int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                                int cpp_np = cpp_read_int_field(cpp_line, 5);

                                                std::vector<int> NBT;
                                                std::vector<int> INT;
                                                cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                                cpp_j = 0;
                                                for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                                    NBT.push_back(cpp_intvec[cpp_j++]);
                                                    INT.push_back(cpp_intvec[cpp_j++]);
                                                }

                                                cpp_current_dict["NBT"] = NBT;
                                                cpp_current_dict["INT"] = INT;

                                            std::vector<double> Eint;
                                            std::vector<double> RP;
                                            cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                                            cpp_j = 0;
                                            for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                                Eint.push_back(cpp_floatvec[cpp_j++]);
                                                RP.push_back(cpp_floatvec[cpp_j++]);
                                            }

                                            cpp_current_dict["Eint"] = Eint;
                                            cpp_current_dict["RP"] = RP;
                                            }
                                            // store data in Python dictionary
                                            if ((aux_var_RTYP_0d_read == true)) {
                                                cpp_current_dict["RTYP"] = var_RTYP_0d;
                                            }
                                            cpp_current_dict = cpp_parent_dict;
                                        }
                                    }
                                }
                            }
                            // evaluate if-elif-else clause
                            {
                                bool cpp_found_match = false;
                                if (! cpp_found_match) {
                                    if (((((((((var_LCOV_0d)!=(0))))&&(((var_LCOV_0d)!=(2))))&&(((var_LCON_0d)!=(0))))))) {
                                        // if statement evaluation
                                        cpp_found_match = true;
                                        // open section continuous

                                        {
                                            py::dict cpp_parent_dict = cpp_current_dict;
                                            if (! cpp_parent_dict.contains("continuous")) {
                                                cpp_parent_dict["continuous"] = py::dict();
                                            }
                                            py::dict cpp_current_dict = cpp_parent_dict["continuous"];
                                            // variable declarations
                                            int cpp_int_val;
                                            bool aux_cpp_int_val_read = false;
                                            int var_NPP_0d;
                                            bool aux_var_NPP_0d_read = false;
                                            NestedVector<double> var_E_1d;
                                            NestedVector<double> var_F_1d;
                                            cpp_line = cpp_read_line(cont);
                                            // read LIST record
                                            // assign expression to variable cpp_int_val
                                            cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                            aux_cpp_int_val_read = true;
                                            // assign expression to variable NPP
                                            var_NPP_0d = (cpp_int_val/2);
                                            aux_var_NPP_0d_read = true;
                                            if ((! (aux_var_NPP_0d_read == true))) {
                                                // assign expression to variable NPP
                                                var_NPP_0d = cpp_read_int_field(cpp_line, 5);
                                                aux_var_NPP_0d_read = true;
                                            }
                                            {
                                                int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                int cpp_j = 0;
                                                // read LIST body

                                                for (int var_m_0d = 1;
                                                     var_m_0d <= var_NPP_0d; var_m_0d++) {
                                                    bool aux_var_m_0d_read = true;
                                                    // read LIST body
                                                    // assign expression to variable E
                                                    var_E_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable F
                                                    var_F_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                }
                                            }
                                            // store data in Python dictionary
                                            if ((aux_var_NPP_0d_read == true)) {
                                                cpp_current_dict["NPP"] = var_NPP_0d;
                                            }
                                            if ((var_E_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_E_1d;
                                                    cpp_current_dict["E"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["E"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            if ((var_F_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_F_1d;
                                                    cpp_current_dict["F"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["F"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            cpp_current_dict = cpp_parent_dict;
                                        }
                                    }
                                }
                            }
                            // evaluate if-elif-else clause
                            {
                                bool cpp_found_match = false;
                                if (! cpp_found_match) {
                                    if ((((((((var_LCOV_0d)!=(0))))&&(((var_LCOV_0d)!=(1))))))) {
                                        // if statement evaluation
                                        cpp_found_match = true;
                                        // open section discrete

                                        {
                                            py::dict cpp_parent_dict = cpp_current_dict;
                                            if (! cpp_parent_dict.contains("discrete")) {
                                                cpp_parent_dict["discrete"] = py::dict();
                                            }
                                            py::dict cpp_current_dict = cpp_parent_dict["discrete"];
                                            // variable declarations
                                            // open section cov

                                            {
                                                py::dict cpp_parent_dict = cpp_current_dict;
                                                if (! cpp_parent_dict.contains("cov")) {
                                                    cpp_parent_dict["cov"] = py::dict();
                                                }
                                                py::dict cpp_current_dict = cpp_parent_dict["cov"];
                                                // variable declarations
                                                int var_LS_0d;
                                                bool aux_var_LS_0d_read = false;
                                                int var_NE_0d;
                                                bool aux_var_NE_0d_read = false;
                                                int var_NERP_0d;
                                                bool aux_var_NERP_0d_read = false;
                                                NestedVector<double> var_E_1d;
                                                Matrix2d<double> var_F_2d;
                                                cpp_line = cpp_read_line(cont);
                                                // read LIST record
                                                // assign expression to variable LS
                                                var_LS_0d = cpp_read_int_field(cpp_line, 2);
                                                aux_var_LS_0d_read = true;
                                                // assign expression to variable NE
                                                var_NE_0d = cpp_read_int_field(cpp_line, 4);
                                                aux_var_NE_0d_read = true;
                                                // assign expression to variable NERP
                                                var_NERP_0d = cpp_read_int_field(cpp_line, 5);
                                                aux_var_NERP_0d_read = true;
                                                {
                                                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                    int cpp_j = 0;
                                                    // read LIST body

                                                    for (int var_m_0d = 1;
                                                         var_m_0d <= var_NERP_0d; var_m_0d++) {
                                                        bool aux_var_m_0d_read = true;
                                                        // read LIST body
                                                        // assign expression to variable E
                                                        var_E_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                    }
                                                    var_F_2d.init(1, (var_NERP_0d-2), 1, (var_NERP_0d-2), true, false);

                                                    for (int var_m_0d = 1;
                                                         var_m_0d <= (var_NERP_0d-2); var_m_0d++) {
                                                        bool aux_var_m_0d_read = true;
                                                        // read LIST body

                                                        for (int var_n_0d = var_m_0d;
                                                             var_n_0d <= (var_NERP_0d-2); var_n_0d++) {
                                                            bool aux_var_n_0d_read = true;
                                                            // read LIST body
                                                            // assign expression to variable F
                                                            var_F_2d(var_m_0d, var_n_0d) = cpp_floatvec[cpp_j++];
                                                        }
                                                    }
                                                }
                                                // store data in Python dictionary
                                                if ((aux_var_LS_0d_read == true)) {
                                                    cpp_current_dict["LS"] = var_LS_0d;
                                                }
                                                if ((aux_var_NE_0d_read == true)) {
                                                    cpp_current_dict["NE"] = var_NE_0d;
                                                }
                                                if ((aux_var_NERP_0d_read == true)) {
                                                    cpp_current_dict["NERP"] = var_NERP_0d;
                                                }
                                                if ((var_E_1d.get_last_index() != -1)) {
                                                        auto& cpp_curvar0 = var_E_1d;
                                                        cpp_current_dict["E"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["E"];
                                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                        }
                                                }
                                                if (var_F_2d.did_read()) {
                                                        cpp_current_dict["F"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["F"];
                                                        for (int cpp_i1 = var_F_2d.get_row_start_index(); cpp_i1 <= var_F_2d.get_row_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                                                            py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                                                            for (int cpp_i2 = var_F_2d.get_col_start_index(cpp_i1); cpp_i2 <= var_F_2d.get_col_last_index(cpp_i1); cpp_i2++) {
                                                                cpp_curdict1[py::cast(cpp_i2)] = var_F_2d(cpp_i1, cpp_i2);
                                                            }
                                                        }
                                                }
                                                cpp_current_dict = cpp_parent_dict;
                                            }
                                            // store data in Python dictionary
                                            cpp_current_dict = cpp_parent_dict;
                                        }
                                    }
                                }
                            }
                            // store data in Python dictionary
                            if ((aux_var_STYP_0d_read == true)) {
                                cpp_current_dict["STYP"] = var_STYP_0d;
                            }
                            if ((aux_var_LCON_0d_read == true)) {
                                cpp_current_dict["LCON"] = var_LCON_0d;
                            }
                            if ((aux_var_LCOV_0d_read == true)) {
                                cpp_current_dict["LCOV"] = var_LCOV_0d;
                            }
                            if ((aux_var_NER_0d_read == true)) {
                                cpp_current_dict["NER"] = var_NER_0d;
                            }
                            if ((aux_var_FD_0d_read == true)) {
                                cpp_current_dict["FD"] = var_FD_0d;
                            }
                            if ((aux_var_dFD_0d_read == true)) {
                                cpp_current_dict["dFD"] = var_dFD_0d;
                            }
                            if ((aux_var_ERAV_0d_read == true)) {
                                cpp_current_dict["ERAV"] = var_ERAV_0d;
                            }
                            if ((aux_var_dERAV_0d_read == true)) {
                                cpp_current_dict["dERAV"] = var_dERAV_0d;
                            }
                            if ((aux_var_FC_0d_read == true)) {
                                cpp_current_dict["FC"] = var_FC_0d;
                            }
                            if ((aux_var_dFC_0d_read == true)) {
                                cpp_current_dict["dFC"] = var_dFC_0d;
                            }
                            cpp_current_dict = cpp_parent_dict;
                        }
                    }
                }
            }
        }
        if (! cpp_found_match) {
            if (! cpp_found_match) {
                // if statement evaluation with lookahead
                {
                    std::streampos cpp_old_streampos = cont.tellg();
                    {
                        // variable declarations
                        int& glob_var_MAT_0d = var_MAT_0d;
                        int var_MAT_0d = glob_var_MAT_0d;
                        bool& glob_aux_var_MAT_0d_read = aux_var_MAT_0d_read;
                        bool aux_var_MAT_0d_read = glob_aux_var_MAT_0d_read;
                        int& glob_var_MF_0d = var_MF_0d;
                        int var_MF_0d = glob_var_MF_0d;
                        bool& glob_aux_var_MF_0d_read = aux_var_MF_0d_read;
                        bool aux_var_MF_0d_read = glob_aux_var_MF_0d_read;
                        int& glob_var_MT_0d = var_MT_0d;
                        int var_MT_0d = glob_var_MT_0d;
                        bool& glob_aux_var_MT_0d_read = aux_var_MT_0d_read;
                        bool aux_var_MT_0d_read = glob_aux_var_MT_0d_read;
                        double& glob_var_ZA_0d = var_ZA_0d;
                        double var_ZA_0d = glob_var_ZA_0d;
                        bool& glob_aux_var_ZA_0d_read = aux_var_ZA_0d_read;
                        bool aux_var_ZA_0d_read = glob_aux_var_ZA_0d_read;
                        double& glob_var_AWR_0d = var_AWR_0d;
                        double var_AWR_0d = glob_var_AWR_0d;
                        bool& glob_aux_var_AWR_0d_read = aux_var_AWR_0d_read;
                        bool aux_var_AWR_0d_read = glob_aux_var_AWR_0d_read;
                        int& glob_var_LIS_0d = var_LIS_0d;
                        int var_LIS_0d = glob_var_LIS_0d;
                        bool& glob_aux_var_LIS_0d_read = aux_var_LIS_0d_read;
                        bool aux_var_LIS_0d_read = glob_aux_var_LIS_0d_read;
                        int& glob_var_LISO_0d = var_LISO_0d;
                        int var_LISO_0d = glob_var_LISO_0d;
                        bool& glob_aux_var_LISO_0d_read = aux_var_LISO_0d_read;
                        bool aux_var_LISO_0d_read = glob_aux_var_LISO_0d_read;
                        int& glob_var_NST_0d = var_NST_0d;
                        int var_NST_0d = glob_var_NST_0d;
                        bool& glob_aux_var_NST_0d_read = aux_var_NST_0d_read;
                        bool aux_var_NST_0d_read = glob_aux_var_NST_0d_read;
                        cpp_line = cpp_read_line(cont);
                        // read CONT record
                        // assign expression to variable ZA
                        var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                        aux_var_ZA_0d_read = true;
                        // assign expression to variable AWR
                        var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_var_AWR_0d_read = true;
                        // assign expression to variable LIS
                        var_LIS_0d = cpp_read_int_field(cpp_line, 2);
                        aux_var_LIS_0d_read = true;
                        // assign expression to variable LISO
                        var_LISO_0d = cpp_read_int_field(cpp_line, 3);
                        aux_var_LISO_0d_read = true;
                        // assign expression to variable NST
                        var_NST_0d = cpp_read_int_field(cpp_line, 4);
                        aux_var_NST_0d_read = true;
                        if (((((((var_NST_0d)==(1))))))) {
                            cpp_found_match = true;
                        }
                        cont.seekg(cpp_old_streampos);
                    }
                    if (cpp_found_match) {
                        cpp_line = cpp_read_line(cont);
                        // read CONT record
                        // assign expression to variable ZA
                        var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                        aux_var_ZA_0d_read = true;
                        // assign expression to variable AWR
                        var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_var_AWR_0d_read = true;
                        // assign expression to variable LIS
                        var_LIS_0d = cpp_read_int_field(cpp_line, 2);
                        aux_var_LIS_0d_read = true;
                        // assign expression to variable LISO
                        var_LISO_0d = cpp_read_int_field(cpp_line, 3);
                        aux_var_LISO_0d_read = true;
                        // assign expression to variable NST
                        var_NST_0d = cpp_read_int_field(cpp_line, 4);
                        aux_var_NST_0d_read = true;
                        cpp_line = cpp_read_line(cont);
                        // read LIST record
                        {
                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                            int cpp_j = 0;
                            // read LIST body
                            cpp_j++;
                            cpp_j++;
                            cpp_j++;
                            cpp_j++;
                            cpp_j++;
                            cpp_j++;
                        }
                        // evaluate if-elif-else clause
                        {
                            bool cpp_found_match = false;
                            if (! cpp_found_match) {
                                // if statement evaluation with lookahead
                                {
                                    std::streampos cpp_old_streampos = cont.tellg();
                                    {
                                        // variable declarations
                                        int& glob_var_MAT_0d = var_MAT_0d;
                                        int var_MAT_0d = glob_var_MAT_0d;
                                        bool& glob_aux_var_MAT_0d_read = aux_var_MAT_0d_read;
                                        bool aux_var_MAT_0d_read = glob_aux_var_MAT_0d_read;
                                        int& glob_var_MF_0d = var_MF_0d;
                                        int var_MF_0d = glob_var_MF_0d;
                                        bool& glob_aux_var_MF_0d_read = aux_var_MF_0d_read;
                                        bool aux_var_MF_0d_read = glob_aux_var_MF_0d_read;
                                        int& glob_var_MT_0d = var_MT_0d;
                                        int var_MT_0d = glob_var_MT_0d;
                                        bool& glob_aux_var_MT_0d_read = aux_var_MT_0d_read;
                                        bool aux_var_MT_0d_read = glob_aux_var_MT_0d_read;
                                        double& glob_var_ZA_0d = var_ZA_0d;
                                        double var_ZA_0d = glob_var_ZA_0d;
                                        bool& glob_aux_var_ZA_0d_read = aux_var_ZA_0d_read;
                                        bool aux_var_ZA_0d_read = glob_aux_var_ZA_0d_read;
                                        double& glob_var_AWR_0d = var_AWR_0d;
                                        double var_AWR_0d = glob_var_AWR_0d;
                                        bool& glob_aux_var_AWR_0d_read = aux_var_AWR_0d_read;
                                        bool aux_var_AWR_0d_read = glob_aux_var_AWR_0d_read;
                                        int& glob_var_LIS_0d = var_LIS_0d;
                                        int var_LIS_0d = glob_var_LIS_0d;
                                        bool& glob_aux_var_LIS_0d_read = aux_var_LIS_0d_read;
                                        bool aux_var_LIS_0d_read = glob_aux_var_LIS_0d_read;
                                        int& glob_var_LISO_0d = var_LISO_0d;
                                        int var_LISO_0d = glob_var_LISO_0d;
                                        bool& glob_aux_var_LISO_0d_read = aux_var_LISO_0d_read;
                                        bool aux_var_LISO_0d_read = glob_aux_var_LISO_0d_read;
                                        int& glob_var_NST_0d = var_NST_0d;
                                        int var_NST_0d = glob_var_NST_0d;
                                        bool& glob_aux_var_NST_0d_read = aux_var_NST_0d_read;
                                        bool aux_var_NST_0d_read = glob_aux_var_NST_0d_read;
                                        double& glob_var_SPI_0d = var_SPI_0d;
                                        double var_SPI_0d = glob_var_SPI_0d;
                                        bool& glob_aux_var_SPI_0d_read = aux_var_SPI_0d_read;
                                        bool aux_var_SPI_0d_read = glob_aux_var_SPI_0d_read;
                                        double& glob_var_PAR_0d = var_PAR_0d;
                                        double var_PAR_0d = glob_var_PAR_0d;
                                        bool& glob_aux_var_PAR_0d_read = aux_var_PAR_0d_read;
                                        bool aux_var_PAR_0d_read = glob_aux_var_PAR_0d_read;
                                        int& glob_var_JENDL_LIST_NPL_0d = var_JENDL_LIST_NPL_0d;
                                        int var_JENDL_LIST_NPL_0d = glob_var_JENDL_LIST_NPL_0d;
                                        bool& glob_aux_var_JENDL_LIST_NPL_0d_read = aux_var_JENDL_LIST_NPL_0d_read;
                                        bool aux_var_JENDL_LIST_NPL_0d_read = glob_aux_var_JENDL_LIST_NPL_0d_read;
                                        cpp_line = cpp_read_line(cont);
                                        // read LIST record
                                        // assign expression to variable SPI
                                        var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                        aux_var_SPI_0d_read = true;
                                        // assign expression to variable PAR
                                        var_PAR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                        aux_var_PAR_0d_read = true;
                                        // assign expression to variable JENDL_LIST_NPL
                                        var_JENDL_LIST_NPL_0d = cpp_read_int_field(cpp_line, 4);
                                        aux_var_JENDL_LIST_NPL_0d_read = true;
                                        if (((((((var_JENDL_LIST_NPL_0d)!=(6))))))) {
                                            cpp_found_match = true;
                                        }
                                        cont.seekg(cpp_old_streampos);
                                    }
                                    if (cpp_found_match) {
                                        cpp_line = cpp_read_line(cont);
                                        // read LIST record
                                        // assign expression to variable SPI
                                        var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                        aux_var_SPI_0d_read = true;
                                        // assign expression to variable PAR
                                        var_PAR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                        aux_var_PAR_0d_read = true;
                                        // assign expression to variable JENDL_LIST_NPL
                                        var_JENDL_LIST_NPL_0d = cpp_read_int_field(cpp_line, 4);
                                        aux_var_JENDL_LIST_NPL_0d_read = true;
                                        {
                                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                            int cpp_j = 0;
                                            // read LIST body

                                            for (int var_k_0d = 1;
                                                 var_k_0d <= var_JENDL_LIST_NPL_0d; var_k_0d++) {
                                                bool aux_var_k_0d_read = true;
                                                // read LIST body
                                                cpp_j++;
                                            }
                                        }
                                    }
                                }
                            }
                            if (! cpp_found_match) {
                                cpp_line = cpp_read_line(cont);
                                // read LIST record
                                // assign expression to variable SPI
                                var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                aux_var_SPI_0d_read = true;
                                // assign expression to variable PAR
                                var_PAR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                aux_var_PAR_0d_read = true;
                                {
                                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                    int cpp_j = 0;
                                    // read LIST body
                                    cpp_j++;
                                    cpp_j++;
                                    cpp_j++;
                                    cpp_j++;
                                    cpp_j++;
                                    cpp_j++;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_LIS_0d_read == true)) {
        cpp_current_dict["LIS"] = var_LIS_0d;
    }
    if ((aux_var_LISO_0d_read == true)) {
        cpp_current_dict["LISO"] = var_LISO_0d;
    }
    if ((aux_var_NST_0d_read == true)) {
        cpp_current_dict["NST"] = var_NST_0d;
    }
    if ((aux_var_NSP_0d_read == true)) {
        cpp_current_dict["NSP"] = var_NSP_0d;
    }
    if ((aux_var_Thalf_0d_read == true)) {
        cpp_current_dict["Thalf"] = var_Thalf_0d;
    }
    if ((aux_var_dThalf_0d_read == true)) {
        cpp_current_dict["dThalf"] = var_dThalf_0d;
    }
    if ((aux_var_NC_0d_read == true)) {
        cpp_current_dict["NC"] = var_NC_0d;
    }
    if ((var_Ebar_x_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_Ebar_x_1d;
            cpp_current_dict["Ebar_x"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["Ebar_x"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_dEbar_x_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_dEbar_x_1d;
            cpp_current_dict["dEbar_x"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["dEbar_x"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((aux_var_SPI_0d_read == true)) {
        cpp_current_dict["SPI"] = var_SPI_0d;
    }
    if ((aux_var_PAR_0d_read == true)) {
        cpp_current_dict["PAR"] = var_PAR_0d;
    }
    if ((aux_var_NDK_0d_read == true)) {
        cpp_current_dict["NDK"] = var_NDK_0d;
    }
    if ((var_RTYP_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_RTYP_1d;
            cpp_current_dict["RTYP"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["RTYP"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_RFS_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_RFS_1d;
            cpp_current_dict["RFS"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["RFS"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_Q_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_Q_1d;
            cpp_current_dict["Q"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["Q"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_dQ_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_dQ_1d;
            cpp_current_dict["dQ"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["dQ"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_BR_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_BR_1d;
            cpp_current_dict["BR"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["BR"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_dBR_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_dBR_1d;
            cpp_current_dict["dBR"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["dBR"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((aux_var_JENDL_LIST_NPL_0d_read == true)) {
        cpp_current_dict["JENDL_LIST_NPL"] = var_JENDL_LIST_NPL_0d;
    }
    return cpp_current_dict;
}

py::dict parse_mf8mt459_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int cpp_int_val;
    bool aux_cpp_int_val_read = false;
    int var_LE_0d;
    bool aux_var_LE_0d_read = false;
    NestedVector<double> var_E_1d;
    NestedVector<int> var_NN_1d;
    NestedVector<int> var_NFP_1d;
    NestedVector<NestedVector<double>> var_ZAFP_2d;
    NestedVector<double>* ptr_ZAFP_2d_idx0;
    NestedVector<NestedVector<double>> var_FPS_2d;
    NestedVector<double>* ptr_FPS_2d_idx0;
    NestedVector<NestedVector<double>> var_YC_2d;
    NestedVector<double>* ptr_YC_2d_idx0;
    NestedVector<NestedVector<double>> var_DYC_2d;
    NestedVector<double>* ptr_DYC_2d_idx0;
    NestedVector<int> var_I_1d;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // assign expression to variable cpp_int_val
    cpp_int_val = cpp_read_int_field(cpp_line, 2);
    aux_cpp_int_val_read = true;
    // assign expression to variable LE
    var_LE_0d = (cpp_int_val+(-1));
    aux_var_LE_0d_read = true;
    cpp_line = cpp_read_line(cont);
    // read LIST record
    // assign expression to variable E
    var_E_1d.set(0, cpp_read_float_field(cpp_line.c_str(), 0));
    if ((! (aux_var_LE_0d_read == true))) {
        // assign expression to variable LE
        var_LE_0d = cpp_read_int_field(cpp_line, 2);
        aux_var_LE_0d_read = true;
    }
    // assign expression to variable NN
    var_NN_1d.set(0, cpp_read_int_field(cpp_line, 4));
    // assign expression to variable NFP
    var_NFP_1d.set(0, cpp_read_int_field(cpp_line, 5));
    {
        int cpp_npl = cpp_read_int_field(cpp_line, 4);
        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
        int cpp_j = 0;
        // read LIST body
        ptr_ZAFP_2d_idx0 = var_ZAFP_2d.prepare(0);
        ptr_FPS_2d_idx0 = var_FPS_2d.prepare(0);
        ptr_YC_2d_idx0 = var_YC_2d.prepare(0);
        ptr_DYC_2d_idx0 = var_DYC_2d.prepare(0);

        for (int var_m_0d = 1;
             var_m_0d <= var_NFP_1d[0]; var_m_0d++) {
            bool aux_var_m_0d_read = true;
            // read LIST body
            // assign expression to variable ZAFP
            ptr_ZAFP_2d_idx0->set(var_m_0d, cpp_floatvec[cpp_j++]);
            // assign expression to variable FPS
            ptr_FPS_2d_idx0->set(var_m_0d, cpp_floatvec[cpp_j++]);
            // assign expression to variable YC
            ptr_YC_2d_idx0->set(var_m_0d, cpp_floatvec[cpp_j++]);
            // assign expression to variable DYC
            ptr_DYC_2d_idx0->set(var_m_0d, cpp_floatvec[cpp_j++]);
        }
    }

    for (int var_k_0d = 1;
         var_k_0d <= var_LE_0d; var_k_0d++) {
        bool aux_var_k_0d_read = true;
        cpp_line = cpp_read_line(cont);
        // read LIST record
        if ((! var_E_1d.contains(var_k_0d))) {
            // assign expression to variable E
            var_E_1d.set(var_k_0d, cpp_read_float_field(cpp_line.c_str(), 0));
        }
        // assign expression to variable I
        var_I_1d.set(var_k_0d, cpp_read_int_field(cpp_line, 2));
        if ((! var_NN_1d.contains(var_k_0d))) {
            // assign expression to variable NN
            var_NN_1d.set(var_k_0d, cpp_read_int_field(cpp_line, 4));
        }
        if ((! var_NFP_1d.contains(var_k_0d))) {
            // assign expression to variable NFP
            var_NFP_1d.set(var_k_0d, cpp_read_int_field(cpp_line, 5));
        }
        {
            int cpp_npl = cpp_read_int_field(cpp_line, 4);
            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
            int cpp_j = 0;
            // read LIST body
            ptr_ZAFP_2d_idx0 = var_ZAFP_2d.prepare(var_k_0d);
            ptr_FPS_2d_idx0 = var_FPS_2d.prepare(var_k_0d);
            ptr_YC_2d_idx0 = var_YC_2d.prepare(var_k_0d);
            ptr_DYC_2d_idx0 = var_DYC_2d.prepare(var_k_0d);

            for (int var_m_0d = 1;
                 var_m_0d <= var_NFP_1d[var_k_0d]; var_m_0d++) {
                bool aux_var_m_0d_read = true;
                // read LIST body
                if ((! (var_ZAFP_2d.contains(var_k_0d) && var_ZAFP_2d[var_k_0d].contains(var_m_0d)))) {
                    // assign expression to variable ZAFP
                    ptr_ZAFP_2d_idx0->set(var_m_0d, cpp_floatvec[cpp_j++]);
                }
                if ((! (var_FPS_2d.contains(var_k_0d) && var_FPS_2d[var_k_0d].contains(var_m_0d)))) {
                    // assign expression to variable FPS
                    ptr_FPS_2d_idx0->set(var_m_0d, cpp_floatvec[cpp_j++]);
                }
                if ((! (var_YC_2d.contains(var_k_0d) && var_YC_2d[var_k_0d].contains(var_m_0d)))) {
                    // assign expression to variable YC
                    ptr_YC_2d_idx0->set(var_m_0d, cpp_floatvec[cpp_j++]);
                }
                if ((! (var_DYC_2d.contains(var_k_0d) && var_DYC_2d[var_k_0d].contains(var_m_0d)))) {
                    // assign expression to variable DYC
                    ptr_DYC_2d_idx0->set(var_m_0d, cpp_floatvec[cpp_j++]);
                }
            }
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_LE_0d_read == true)) {
        cpp_current_dict["LE"] = var_LE_0d;
    }
    if ((var_E_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_E_1d;
            cpp_current_dict["E"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["E"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_NN_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_NN_1d;
            cpp_current_dict["NN"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["NN"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_NFP_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_NFP_1d;
            cpp_current_dict["NFP"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["NFP"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_ZAFP_2d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_ZAFP_2d;
            cpp_current_dict["ZAFP"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["ZAFP"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
                cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
                    cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
                }
            }
    }
    if ((var_FPS_2d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_FPS_2d;
            cpp_current_dict["FPS"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["FPS"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
                cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
                    cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
                }
            }
    }
    if ((var_YC_2d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_YC_2d;
            cpp_current_dict["YC"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["YC"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
                cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
                    cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
                }
            }
    }
    if ((var_DYC_2d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_DYC_2d;
            cpp_current_dict["DYC"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["DYC"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
                cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
                    cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
                }
            }
    }
    if ((var_I_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_I_1d;
            cpp_current_dict["I"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["I"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    return cpp_current_dict;
}

py::dict parse_mf9_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_LIS_0d;
    bool aux_var_LIS_0d_read = false;
    int var_NS_0d;
    bool aux_var_NS_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // assign expression to variable LIS
    var_LIS_0d = cpp_read_int_field(cpp_line, 2);
    aux_var_LIS_0d_read = true;
    // assign expression to variable NS
    var_NS_0d = cpp_read_int_field(cpp_line, 4);
    aux_var_NS_0d_read = true;

    for (int var_k_0d = 1;
         var_k_0d <= var_NS_0d; var_k_0d++) {
        bool aux_var_k_0d_read = true;
        // open section subsection

        {
            py::dict cpp_parent_dict = cpp_current_dict;
            if (! cpp_parent_dict.contains("subsection")) {
                cpp_parent_dict["subsection"] = py::dict();
            }
            py::dict cpp_current_dict = cpp_parent_dict["subsection"];

            if (! cpp_current_dict.contains(py::cast(var_k_0d))) {
                cpp_current_dict[py::cast(var_k_0d)] = py::dict();
            }
            cpp_current_dict = cpp_current_dict[py::cast(var_k_0d)];
            // variable declarations
            double var_QM_0d;
            bool aux_var_QM_0d_read = false;
            double var_QI_0d;
            bool aux_var_QI_0d_read = false;
            int var_IZAP_0d;
            bool aux_var_IZAP_0d_read = false;
            int var_LFS_0d;
            bool aux_var_LFS_0d_read = false;
            // read TAB1 record
            cpp_line = cpp_read_line(cont);
            // assign expression to variable QM
            var_QM_0d = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_var_QM_0d_read = true;
            // assign expression to variable QI
            var_QI_0d = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_var_QI_0d_read = true;
            // assign expression to variable IZAP
            var_IZAP_0d = cpp_read_int_field(cpp_line, 2);
            aux_var_IZAP_0d_read = true;
            // assign expression to variable LFS
            var_LFS_0d = cpp_read_int_field(cpp_line, 3);
            aux_var_LFS_0d_read = true;
            {

                int cpp_j;
                int cpp_nr = cpp_read_int_field(cpp_line, 4);
                int cpp_np = cpp_read_int_field(cpp_line, 5);

                std::vector<int> NBT;
                std::vector<int> INT;
                cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                cpp_j = 0;
                for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                    NBT.push_back(cpp_intvec[cpp_j++]);
                    INT.push_back(cpp_intvec[cpp_j++]);
                }

                cpp_current_dict["NBT"] = NBT;
                cpp_current_dict["INT"] = INT;

            std::vector<double> E;
            std::vector<double> Y;
            cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
            cpp_j = 0;
            for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                E.push_back(cpp_floatvec[cpp_j++]);
                Y.push_back(cpp_floatvec[cpp_j++]);
            }

            cpp_current_dict["E"] = E;
            cpp_current_dict["Y"] = Y;
            }
            // store data in Python dictionary
            if ((aux_var_QM_0d_read == true)) {
                cpp_current_dict["QM"] = var_QM_0d;
            }
            if ((aux_var_QI_0d_read == true)) {
                cpp_current_dict["QI"] = var_QI_0d;
            }
            if ((aux_var_IZAP_0d_read == true)) {
                cpp_current_dict["IZAP"] = var_IZAP_0d;
            }
            if ((aux_var_LFS_0d_read == true)) {
                cpp_current_dict["LFS"] = var_LFS_0d;
            }
            cpp_current_dict = cpp_parent_dict;
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_LIS_0d_read == true)) {
        cpp_current_dict["LIS"] = var_LIS_0d;
    }
    if ((aux_var_NS_0d_read == true)) {
        cpp_current_dict["NS"] = var_NS_0d;
    }
    return cpp_current_dict;
}

py::dict parse_mf10_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_LIS_0d;
    bool aux_var_LIS_0d_read = false;
    int var_NS_0d;
    bool aux_var_NS_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // assign expression to variable LIS
    var_LIS_0d = cpp_read_int_field(cpp_line, 2);
    aux_var_LIS_0d_read = true;
    // assign expression to variable NS
    var_NS_0d = cpp_read_int_field(cpp_line, 4);
    aux_var_NS_0d_read = true;

    for (int var_k_0d = 1;
         var_k_0d <= var_NS_0d; var_k_0d++) {
        bool aux_var_k_0d_read = true;
        // open section subsection

        {
            py::dict cpp_parent_dict = cpp_current_dict;
            if (! cpp_parent_dict.contains("subsection")) {
                cpp_parent_dict["subsection"] = py::dict();
            }
            py::dict cpp_current_dict = cpp_parent_dict["subsection"];

            if (! cpp_current_dict.contains(py::cast(var_k_0d))) {
                cpp_current_dict[py::cast(var_k_0d)] = py::dict();
            }
            cpp_current_dict = cpp_current_dict[py::cast(var_k_0d)];
            // variable declarations
            double var_QM_0d;
            bool aux_var_QM_0d_read = false;
            double var_QI_0d;
            bool aux_var_QI_0d_read = false;
            int var_IZAP_0d;
            bool aux_var_IZAP_0d_read = false;
            int var_LFS_0d;
            bool aux_var_LFS_0d_read = false;
            // read TAB1 record
            cpp_line = cpp_read_line(cont);
            // assign expression to variable QM
            var_QM_0d = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_var_QM_0d_read = true;
            // assign expression to variable QI
            var_QI_0d = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_var_QI_0d_read = true;
            // assign expression to variable IZAP
            var_IZAP_0d = cpp_read_int_field(cpp_line, 2);
            aux_var_IZAP_0d_read = true;
            // assign expression to variable LFS
            var_LFS_0d = cpp_read_int_field(cpp_line, 3);
            aux_var_LFS_0d_read = true;
            {

                int cpp_j;
                int cpp_nr = cpp_read_int_field(cpp_line, 4);
                int cpp_np = cpp_read_int_field(cpp_line, 5);

                std::vector<int> NBT;
                std::vector<int> INT;
                cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                cpp_j = 0;
                for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                    NBT.push_back(cpp_intvec[cpp_j++]);
                    INT.push_back(cpp_intvec[cpp_j++]);
                }

                cpp_current_dict["NBT"] = NBT;
                cpp_current_dict["INT"] = INT;

            std::vector<double> E;
            std::vector<double> sigma;
            cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
            cpp_j = 0;
            for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                E.push_back(cpp_floatvec[cpp_j++]);
                sigma.push_back(cpp_floatvec[cpp_j++]);
            }

            cpp_current_dict["E"] = E;
            cpp_current_dict["sigma"] = sigma;
            }
            // store data in Python dictionary
            if ((aux_var_QM_0d_read == true)) {
                cpp_current_dict["QM"] = var_QM_0d;
            }
            if ((aux_var_QI_0d_read == true)) {
                cpp_current_dict["QI"] = var_QI_0d;
            }
            if ((aux_var_IZAP_0d_read == true)) {
                cpp_current_dict["IZAP"] = var_IZAP_0d;
            }
            if ((aux_var_LFS_0d_read == true)) {
                cpp_current_dict["LFS"] = var_LFS_0d;
            }
            cpp_current_dict = cpp_parent_dict;
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_LIS_0d_read == true)) {
        cpp_current_dict["LIS"] = var_LIS_0d;
    }
    if ((aux_var_NS_0d_read == true)) {
        cpp_current_dict["NS"] = var_NS_0d;
    }
    return cpp_current_dict;
}

py::dict parse_mf12_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_LO_0d;
    bool aux_var_LO_0d_read = false;
    int var_NK_0d;
    bool aux_var_NK_0d_read = false;
    NestedVector<double> var_Eg_1d;
    NestedVector<double> var_ES_1d;
    NestedVector<int> var_LP_1d;
    NestedVector<int> var_LF_1d;
    int var_LG_0d;
    bool aux_var_LG_0d_read = false;
    int var_NS_0d;
    bool aux_var_NS_0d_read = false;
    double var_ES_NS_0d;
    bool aux_var_ES_NS_0d_read = false;
    int var_LP_0d;
    bool aux_var_LP_0d_read = false;
    int cpp_int_val;
    bool aux_cpp_int_val_read = false;
    int var_NT_0d;
    bool aux_var_NT_0d_read = false;
    NestedVector<double> var_TP_1d;
    NestedVector<double> var_GP_1d;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    // evaluate if-elif-else clause
    {
        bool cpp_found_match = false;
        if (! cpp_found_match) {
            // if statement evaluation with lookahead
            {
                std::streampos cpp_old_streampos = cont.tellg();
                {
                    // variable declarations
                    int& glob_var_MAT_0d = var_MAT_0d;
                    int var_MAT_0d = glob_var_MAT_0d;
                    bool& glob_aux_var_MAT_0d_read = aux_var_MAT_0d_read;
                    bool aux_var_MAT_0d_read = glob_aux_var_MAT_0d_read;
                    int& glob_var_MF_0d = var_MF_0d;
                    int var_MF_0d = glob_var_MF_0d;
                    bool& glob_aux_var_MF_0d_read = aux_var_MF_0d_read;
                    bool aux_var_MF_0d_read = glob_aux_var_MF_0d_read;
                    int& glob_var_MT_0d = var_MT_0d;
                    int var_MT_0d = glob_var_MT_0d;
                    bool& glob_aux_var_MT_0d_read = aux_var_MT_0d_read;
                    bool aux_var_MT_0d_read = glob_aux_var_MT_0d_read;
                    double& glob_var_ZA_0d = var_ZA_0d;
                    double var_ZA_0d = glob_var_ZA_0d;
                    bool& glob_aux_var_ZA_0d_read = aux_var_ZA_0d_read;
                    bool aux_var_ZA_0d_read = glob_aux_var_ZA_0d_read;
                    double& glob_var_AWR_0d = var_AWR_0d;
                    double var_AWR_0d = glob_var_AWR_0d;
                    bool& glob_aux_var_AWR_0d_read = aux_var_AWR_0d_read;
                    bool aux_var_AWR_0d_read = glob_aux_var_AWR_0d_read;
                    int& glob_var_LO_0d = var_LO_0d;
                    int var_LO_0d = glob_var_LO_0d;
                    bool& glob_aux_var_LO_0d_read = aux_var_LO_0d_read;
                    bool aux_var_LO_0d_read = glob_aux_var_LO_0d_read;
                    int& glob_var_NK_0d = var_NK_0d;
                    int var_NK_0d = glob_var_NK_0d;
                    bool& glob_aux_var_NK_0d_read = aux_var_NK_0d_read;
                    bool aux_var_NK_0d_read = glob_aux_var_NK_0d_read;
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable ZA
                    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_var_ZA_0d_read = true;
                    // assign expression to variable AWR
                    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_var_AWR_0d_read = true;
                    // assign expression to variable LO
                    var_LO_0d = cpp_read_int_field(cpp_line, 2);
                    aux_var_LO_0d_read = true;
                    // assign expression to variable NK
                    var_NK_0d = cpp_read_int_field(cpp_line, 4);
                    aux_var_NK_0d_read = true;
                    if (((((((var_LO_0d)==(1))))))) {
                        cpp_found_match = true;
                    }
                    cont.seekg(cpp_old_streampos);
                }
                if (cpp_found_match) {
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable ZA
                    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_var_ZA_0d_read = true;
                    // assign expression to variable AWR
                    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_var_AWR_0d_read = true;
                    // assign expression to variable LO
                    var_LO_0d = cpp_read_int_field(cpp_line, 2);
                    aux_var_LO_0d_read = true;
                    // assign expression to variable NK
                    var_NK_0d = cpp_read_int_field(cpp_line, 4);
                    aux_var_NK_0d_read = true;
                    // evaluate if-elif-else clause
                    {
                        bool cpp_found_match = false;
                        if (! cpp_found_match) {
                            if (((((((var_NK_0d)>(1))))))) {
                                // if statement evaluation
                                cpp_found_match = true;
                                // read TAB1 record
                                cpp_line = cpp_read_line(cont);
                                {

                                    int cpp_j;
                                    int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                    int cpp_np = cpp_read_int_field(cpp_line, 5);

                                    std::vector<int> NBT;
                                    std::vector<int> INT;
                                    cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                    cpp_j = 0;
                                    for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                        NBT.push_back(cpp_intvec[cpp_j++]);
                                        INT.push_back(cpp_intvec[cpp_j++]);
                                    }

                                    cpp_current_dict["NBT"] = NBT;
                                    cpp_current_dict["INT"] = INT;

                                std::vector<double> Eint;
                                std::vector<double> Y;
                                cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                                cpp_j = 0;
                                for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                    Eint.push_back(cpp_floatvec[cpp_j++]);
                                    Y.push_back(cpp_floatvec[cpp_j++]);
                                }

                                cpp_current_dict["Eint"] = Eint;
                                cpp_current_dict["Y"] = Y;
                                }
                            }
                        }
                    }

                    for (int var_k_0d = 1;
                         var_k_0d <= var_NK_0d; var_k_0d++) {
                        bool aux_var_k_0d_read = true;
                        // read TAB1 record
                        cpp_line = cpp_read_line(cont);
                        // assign expression to variable Eg
                        var_Eg_1d.set(var_k_0d, cpp_read_float_field(cpp_line.c_str(), 0));
                        // assign expression to variable ES
                        var_ES_1d.set(var_k_0d, cpp_read_float_field(cpp_line.c_str(), 1));
                        // assign expression to variable LP
                        var_LP_1d.set(var_k_0d, cpp_read_int_field(cpp_line, 2));
                        // assign expression to variable LF
                        var_LF_1d.set(var_k_0d, cpp_read_int_field(cpp_line, 3));

                        {
                            py::dict cpp_parent_dict = cpp_current_dict;
                            if (! cpp_parent_dict.contains("table")) {
                                cpp_parent_dict["table"] = py::dict();
                            }
                            py::dict cpp_current_dict = cpp_parent_dict["table"];

                            if (! cpp_current_dict.contains(py::cast(var_k_0d))) {
                                cpp_current_dict[py::cast(var_k_0d)] = py::dict();
                            }
                            cpp_current_dict = cpp_current_dict[py::cast(var_k_0d)];
                            {

                                int cpp_j;
                                int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                int cpp_np = cpp_read_int_field(cpp_line, 5);

                                std::vector<int> NBT;
                                std::vector<int> INT;
                                cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                cpp_j = 0;
                                for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                    NBT.push_back(cpp_intvec[cpp_j++]);
                                    INT.push_back(cpp_intvec[cpp_j++]);
                                }

                                cpp_current_dict["NBT"] = NBT;
                                cpp_current_dict["INT"] = INT;

                            std::vector<double> Eint;
                            std::vector<double> y;
                            cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                            cpp_j = 0;
                            for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                Eint.push_back(cpp_floatvec[cpp_j++]);
                                y.push_back(cpp_floatvec[cpp_j++]);
                            }

                            cpp_current_dict["Eint"] = Eint;
                            cpp_current_dict["y"] = y;
                            }
                            cpp_current_dict = cpp_parent_dict;
                        }
                    }
                }
            }
        }
        if (! cpp_found_match) {
            if (! cpp_found_match) {
                // if statement evaluation with lookahead
                {
                    std::streampos cpp_old_streampos = cont.tellg();
                    {
                        // variable declarations
                        int& glob_var_MAT_0d = var_MAT_0d;
                        int var_MAT_0d = glob_var_MAT_0d;
                        bool& glob_aux_var_MAT_0d_read = aux_var_MAT_0d_read;
                        bool aux_var_MAT_0d_read = glob_aux_var_MAT_0d_read;
                        int& glob_var_MF_0d = var_MF_0d;
                        int var_MF_0d = glob_var_MF_0d;
                        bool& glob_aux_var_MF_0d_read = aux_var_MF_0d_read;
                        bool aux_var_MF_0d_read = glob_aux_var_MF_0d_read;
                        int& glob_var_MT_0d = var_MT_0d;
                        int var_MT_0d = glob_var_MT_0d;
                        bool& glob_aux_var_MT_0d_read = aux_var_MT_0d_read;
                        bool aux_var_MT_0d_read = glob_aux_var_MT_0d_read;
                        double& glob_var_ZA_0d = var_ZA_0d;
                        double var_ZA_0d = glob_var_ZA_0d;
                        bool& glob_aux_var_ZA_0d_read = aux_var_ZA_0d_read;
                        bool aux_var_ZA_0d_read = glob_aux_var_ZA_0d_read;
                        double& glob_var_AWR_0d = var_AWR_0d;
                        double var_AWR_0d = glob_var_AWR_0d;
                        bool& glob_aux_var_AWR_0d_read = aux_var_AWR_0d_read;
                        bool aux_var_AWR_0d_read = glob_aux_var_AWR_0d_read;
                        int& glob_var_LO_0d = var_LO_0d;
                        int var_LO_0d = glob_var_LO_0d;
                        bool& glob_aux_var_LO_0d_read = aux_var_LO_0d_read;
                        bool aux_var_LO_0d_read = glob_aux_var_LO_0d_read;
                        int& glob_var_LG_0d = var_LG_0d;
                        int var_LG_0d = glob_var_LG_0d;
                        bool& glob_aux_var_LG_0d_read = aux_var_LG_0d_read;
                        bool aux_var_LG_0d_read = glob_aux_var_LG_0d_read;
                        int& glob_var_NS_0d = var_NS_0d;
                        int var_NS_0d = glob_var_NS_0d;
                        bool& glob_aux_var_NS_0d_read = aux_var_NS_0d_read;
                        bool aux_var_NS_0d_read = glob_aux_var_NS_0d_read;
                        cpp_line = cpp_read_line(cont);
                        // read CONT record
                        // assign expression to variable ZA
                        var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                        aux_var_ZA_0d_read = true;
                        // assign expression to variable AWR
                        var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_var_AWR_0d_read = true;
                        // assign expression to variable LO
                        var_LO_0d = cpp_read_int_field(cpp_line, 2);
                        aux_var_LO_0d_read = true;
                        // assign expression to variable LG
                        var_LG_0d = cpp_read_int_field(cpp_line, 3);
                        aux_var_LG_0d_read = true;
                        // assign expression to variable NS
                        var_NS_0d = cpp_read_int_field(cpp_line, 4);
                        aux_var_NS_0d_read = true;
                        if (((((((var_LO_0d)==(2))))))) {
                            cpp_found_match = true;
                        }
                        cont.seekg(cpp_old_streampos);
                    }
                    if (cpp_found_match) {
                        cpp_line = cpp_read_line(cont);
                        // read CONT record
                        // assign expression to variable ZA
                        var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                        aux_var_ZA_0d_read = true;
                        // assign expression to variable AWR
                        var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_var_AWR_0d_read = true;
                        // assign expression to variable LO
                        var_LO_0d = cpp_read_int_field(cpp_line, 2);
                        aux_var_LO_0d_read = true;
                        // assign expression to variable LG
                        var_LG_0d = cpp_read_int_field(cpp_line, 3);
                        aux_var_LG_0d_read = true;
                        // assign expression to variable NS
                        var_NS_0d = cpp_read_int_field(cpp_line, 4);
                        aux_var_NS_0d_read = true;
                        // evaluate if-elif-else clause
                        {
                            bool cpp_found_match = false;
                            if (! cpp_found_match) {
                                if (((((((var_LG_0d)==(1))))))) {
                                    // if statement evaluation
                                    cpp_found_match = true;
                                    cpp_line = cpp_read_line(cont);
                                    // read LIST record
                                    // assign expression to variable ES_NS
                                    var_ES_NS_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                    aux_var_ES_NS_0d_read = true;
                                    // assign expression to variable LP
                                    var_LP_0d = cpp_read_int_field(cpp_line, 2);
                                    aux_var_LP_0d_read = true;
                                    // assign expression to variable cpp_int_val
                                    cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                    aux_cpp_int_val_read = true;
                                    // assign expression to variable NT
                                    var_NT_0d = (cpp_int_val/2);
                                    aux_var_NT_0d_read = true;
                                    if ((! (aux_var_NT_0d_read == true))) {
                                        // assign expression to variable NT
                                        var_NT_0d = cpp_read_int_field(cpp_line, 5);
                                        aux_var_NT_0d_read = true;
                                    }
                                    {
                                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                        int cpp_j = 0;
                                        // read LIST body

                                        for (int var_i_0d = 1;
                                             var_i_0d <= var_NT_0d; var_i_0d++) {
                                            bool aux_var_i_0d_read = true;
                                            // read LIST body
                                            // assign expression to variable ES
                                            var_ES_1d.set(var_i_0d, cpp_floatvec[cpp_j++]);
                                            // assign expression to variable TP
                                            var_TP_1d.set(var_i_0d, cpp_floatvec[cpp_j++]);
                                        }
                                    }
                                }
                            }
                            if (! cpp_found_match) {
                                if (! cpp_found_match) {
                                    if (((((((var_LG_0d)==(2))))))) {
                                        // if statement evaluation
                                        cpp_found_match = true;
                                        cpp_line = cpp_read_line(cont);
                                        // read LIST record
                                        // assign expression to variable ES_NS
                                        var_ES_NS_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                        aux_var_ES_NS_0d_read = true;
                                        // assign expression to variable LP
                                        var_LP_0d = cpp_read_int_field(cpp_line, 2);
                                        aux_var_LP_0d_read = true;
                                        // assign expression to variable cpp_int_val
                                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                        aux_cpp_int_val_read = true;
                                        // assign expression to variable NT
                                        var_NT_0d = (cpp_int_val/(var_LG_0d+1));
                                        aux_var_NT_0d_read = true;
                                        if ((! (aux_var_LG_0d_read == true))) {
                                            // assign expression to variable cpp_int_val
                                            cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                            aux_cpp_int_val_read = true;
                                            // assign expression to variable LG
                                            var_LG_0d = ((cpp_int_val+(var_NT_0d*(-1)))/var_NT_0d);
                                            aux_var_LG_0d_read = true;
                                        }
                                        if ((! (aux_var_NT_0d_read == true))) {
                                            // assign expression to variable NT
                                            var_NT_0d = cpp_read_int_field(cpp_line, 5);
                                            aux_var_NT_0d_read = true;
                                        }
                                        {
                                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                            int cpp_j = 0;
                                            // read LIST body

                                            for (int var_i_0d = 1;
                                                 var_i_0d <= var_NT_0d; var_i_0d++) {
                                                bool aux_var_i_0d_read = true;
                                                // read LIST body
                                                // assign expression to variable ES
                                                var_ES_1d.set(var_i_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable TP
                                                var_TP_1d.set(var_i_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable GP
                                                var_GP_1d.set(var_i_0d, cpp_floatvec[cpp_j++]);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_LO_0d_read == true)) {
        cpp_current_dict["LO"] = var_LO_0d;
    }
    if ((aux_var_NK_0d_read == true)) {
        cpp_current_dict["NK"] = var_NK_0d;
    }
    if ((var_Eg_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_Eg_1d;
            cpp_current_dict["Eg"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["Eg"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_ES_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_ES_1d;
            cpp_current_dict["ES"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["ES"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_LP_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_LP_1d;
            cpp_current_dict["LP"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["LP"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_LF_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_LF_1d;
            cpp_current_dict["LF"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["LF"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((aux_var_LG_0d_read == true)) {
        cpp_current_dict["LG"] = var_LG_0d;
    }
    if ((aux_var_NS_0d_read == true)) {
        cpp_current_dict["NS"] = var_NS_0d;
    }
    if ((aux_var_ES_NS_0d_read == true)) {
        cpp_current_dict["ES_NS"] = var_ES_NS_0d;
    }
    if ((aux_var_LP_0d_read == true)) {
        cpp_current_dict["LP"] = var_LP_0d;
    }
    if ((aux_var_NT_0d_read == true)) {
        cpp_current_dict["NT"] = var_NT_0d;
    }
    if ((var_TP_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_TP_1d;
            cpp_current_dict["TP"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["TP"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_GP_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_GP_1d;
            cpp_current_dict["GP"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["GP"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    return cpp_current_dict;
}

py::dict parse_mf13_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_NK_0d;
    bool aux_var_NK_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // assign expression to variable NK
    var_NK_0d = cpp_read_int_field(cpp_line, 4);
    aux_var_NK_0d_read = true;
    // evaluate if-elif-else clause
    {
        bool cpp_found_match = false;
        if (! cpp_found_match) {
            if (((((((var_NK_0d)>(1))))))) {
                // if statement evaluation
                cpp_found_match = true;
                // read TAB1 record
                cpp_line = cpp_read_line(cont);
                {

                    int cpp_j;
                    int cpp_nr = cpp_read_int_field(cpp_line, 4);
                    int cpp_np = cpp_read_int_field(cpp_line, 5);

                    std::vector<int> NBT;
                    std::vector<int> INT;
                    cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                    cpp_j = 0;
                    for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                        NBT.push_back(cpp_intvec[cpp_j++]);
                        INT.push_back(cpp_intvec[cpp_j++]);
                    }

                    cpp_current_dict["NBT"] = NBT;
                    cpp_current_dict["INT"] = INT;

                std::vector<double> E;
                std::vector<double> sigma_tot;
                cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                cpp_j = 0;
                for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                    E.push_back(cpp_floatvec[cpp_j++]);
                    sigma_tot.push_back(cpp_floatvec[cpp_j++]);
                }

                cpp_current_dict["E"] = E;
                cpp_current_dict["sigma_tot"] = sigma_tot;
                }
            }
        }
    }

    for (int var_k_0d = 1;
         var_k_0d <= var_NK_0d; var_k_0d++) {
        bool aux_var_k_0d_read = true;
        // open section subsection

        {
            py::dict cpp_parent_dict = cpp_current_dict;
            if (! cpp_parent_dict.contains("subsection")) {
                cpp_parent_dict["subsection"] = py::dict();
            }
            py::dict cpp_current_dict = cpp_parent_dict["subsection"];

            if (! cpp_current_dict.contains(py::cast(var_k_0d))) {
                cpp_current_dict[py::cast(var_k_0d)] = py::dict();
            }
            cpp_current_dict = cpp_current_dict[py::cast(var_k_0d)];
            // variable declarations
            double var_EG_0d;
            bool aux_var_EG_0d_read = false;
            double var_ES_0d;
            bool aux_var_ES_0d_read = false;
            int var_LP_0d;
            bool aux_var_LP_0d_read = false;
            int var_LF_0d;
            bool aux_var_LF_0d_read = false;
            // read TAB1 record
            cpp_line = cpp_read_line(cont);
            // assign expression to variable EG
            var_EG_0d = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_var_EG_0d_read = true;
            // assign expression to variable ES
            var_ES_0d = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_var_ES_0d_read = true;
            // assign expression to variable LP
            var_LP_0d = cpp_read_int_field(cpp_line, 2);
            aux_var_LP_0d_read = true;
            // assign expression to variable LF
            var_LF_0d = cpp_read_int_field(cpp_line, 3);
            aux_var_LF_0d_read = true;
            {

                int cpp_j;
                int cpp_nr = cpp_read_int_field(cpp_line, 4);
                int cpp_np = cpp_read_int_field(cpp_line, 5);

                std::vector<int> NBT;
                std::vector<int> INT;
                cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                cpp_j = 0;
                for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                    NBT.push_back(cpp_intvec[cpp_j++]);
                    INT.push_back(cpp_intvec[cpp_j++]);
                }

                cpp_current_dict["NBT"] = NBT;
                cpp_current_dict["INT"] = INT;

            std::vector<double> E;
            std::vector<double> sigma;
            cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
            cpp_j = 0;
            for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                E.push_back(cpp_floatvec[cpp_j++]);
                sigma.push_back(cpp_floatvec[cpp_j++]);
            }

            cpp_current_dict["E"] = E;
            cpp_current_dict["sigma"] = sigma;
            }
            // store data in Python dictionary
            if ((aux_var_EG_0d_read == true)) {
                cpp_current_dict["EG"] = var_EG_0d;
            }
            if ((aux_var_ES_0d_read == true)) {
                cpp_current_dict["ES"] = var_ES_0d;
            }
            if ((aux_var_LP_0d_read == true)) {
                cpp_current_dict["LP"] = var_LP_0d;
            }
            if ((aux_var_LF_0d_read == true)) {
                cpp_current_dict["LF"] = var_LF_0d;
            }
            cpp_current_dict = cpp_parent_dict;
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_NK_0d_read == true)) {
        cpp_current_dict["NK"] = var_NK_0d;
    }
    return cpp_current_dict;
}

py::dict parse_mf14_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_LI_0d;
    bool aux_var_LI_0d_read = false;
    int var_NK_0d;
    bool aux_var_NK_0d_read = false;
    int var_LTT_0d;
    bool aux_var_LTT_0d_read = false;
    int var_NI_0d;
    bool aux_var_NI_0d_read = false;
    NestedVector<double> var_EG_1d;
    NestedVector<double> var_ES_1d;
    NestedVector<int> var_NE_1d;
    NestedVector<NestedVector<double>> var_E_2d;
    NestedVector<double>* ptr_E_2d_idx0;
    NestedVector<NestedVector<int>> var_NL_2d;
    NestedVector<int>* ptr_NL_2d_idx0;
    NestedVector<NestedVector<NestedVector<double>>> var_a_3d;
    NestedVector<double>* ptr_a_3d_idx1;
    NestedVector<NestedVector<double>>* ptr_a_3d_idx0;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    // evaluate if-elif-else clause
    {
        bool cpp_found_match = false;
        if (! cpp_found_match) {
            // if statement evaluation with lookahead
            {
                std::streampos cpp_old_streampos = cont.tellg();
                {
                    // variable declarations
                    int& glob_var_MAT_0d = var_MAT_0d;
                    int var_MAT_0d = glob_var_MAT_0d;
                    bool& glob_aux_var_MAT_0d_read = aux_var_MAT_0d_read;
                    bool aux_var_MAT_0d_read = glob_aux_var_MAT_0d_read;
                    int& glob_var_MF_0d = var_MF_0d;
                    int var_MF_0d = glob_var_MF_0d;
                    bool& glob_aux_var_MF_0d_read = aux_var_MF_0d_read;
                    bool aux_var_MF_0d_read = glob_aux_var_MF_0d_read;
                    int& glob_var_MT_0d = var_MT_0d;
                    int var_MT_0d = glob_var_MT_0d;
                    bool& glob_aux_var_MT_0d_read = aux_var_MT_0d_read;
                    bool aux_var_MT_0d_read = glob_aux_var_MT_0d_read;
                    double& glob_var_ZA_0d = var_ZA_0d;
                    double var_ZA_0d = glob_var_ZA_0d;
                    bool& glob_aux_var_ZA_0d_read = aux_var_ZA_0d_read;
                    bool aux_var_ZA_0d_read = glob_aux_var_ZA_0d_read;
                    double& glob_var_AWR_0d = var_AWR_0d;
                    double var_AWR_0d = glob_var_AWR_0d;
                    bool& glob_aux_var_AWR_0d_read = aux_var_AWR_0d_read;
                    bool aux_var_AWR_0d_read = glob_aux_var_AWR_0d_read;
                    int& glob_var_LI_0d = var_LI_0d;
                    int var_LI_0d = glob_var_LI_0d;
                    bool& glob_aux_var_LI_0d_read = aux_var_LI_0d_read;
                    bool aux_var_LI_0d_read = glob_aux_var_LI_0d_read;
                    int& glob_var_NK_0d = var_NK_0d;
                    int var_NK_0d = glob_var_NK_0d;
                    bool& glob_aux_var_NK_0d_read = aux_var_NK_0d_read;
                    bool aux_var_NK_0d_read = glob_aux_var_NK_0d_read;
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable ZA
                    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_var_ZA_0d_read = true;
                    // assign expression to variable AWR
                    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_var_AWR_0d_read = true;
                    // assign expression to variable LI
                    var_LI_0d = cpp_read_int_field(cpp_line, 2);
                    aux_var_LI_0d_read = true;
                    // assign expression to variable NK
                    var_NK_0d = cpp_read_int_field(cpp_line, 4);
                    aux_var_NK_0d_read = true;
                    if (((((((var_LI_0d)==(1))))))) {
                        cpp_found_match = true;
                    }
                    cont.seekg(cpp_old_streampos);
                }
                if (cpp_found_match) {
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable ZA
                    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_var_ZA_0d_read = true;
                    // assign expression to variable AWR
                    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_var_AWR_0d_read = true;
                    // assign expression to variable LI
                    var_LI_0d = cpp_read_int_field(cpp_line, 2);
                    aux_var_LI_0d_read = true;
                    // assign expression to variable NK
                    var_NK_0d = cpp_read_int_field(cpp_line, 4);
                    aux_var_NK_0d_read = true;
                }
            }
        }
        if (! cpp_found_match) {
            if (! cpp_found_match) {
                // if statement evaluation with lookahead
                {
                    std::streampos cpp_old_streampos = cont.tellg();
                    {
                        // variable declarations
                        int& glob_var_MAT_0d = var_MAT_0d;
                        int var_MAT_0d = glob_var_MAT_0d;
                        bool& glob_aux_var_MAT_0d_read = aux_var_MAT_0d_read;
                        bool aux_var_MAT_0d_read = glob_aux_var_MAT_0d_read;
                        int& glob_var_MF_0d = var_MF_0d;
                        int var_MF_0d = glob_var_MF_0d;
                        bool& glob_aux_var_MF_0d_read = aux_var_MF_0d_read;
                        bool aux_var_MF_0d_read = glob_aux_var_MF_0d_read;
                        int& glob_var_MT_0d = var_MT_0d;
                        int var_MT_0d = glob_var_MT_0d;
                        bool& glob_aux_var_MT_0d_read = aux_var_MT_0d_read;
                        bool aux_var_MT_0d_read = glob_aux_var_MT_0d_read;
                        double& glob_var_ZA_0d = var_ZA_0d;
                        double var_ZA_0d = glob_var_ZA_0d;
                        bool& glob_aux_var_ZA_0d_read = aux_var_ZA_0d_read;
                        bool aux_var_ZA_0d_read = glob_aux_var_ZA_0d_read;
                        double& glob_var_AWR_0d = var_AWR_0d;
                        double var_AWR_0d = glob_var_AWR_0d;
                        bool& glob_aux_var_AWR_0d_read = aux_var_AWR_0d_read;
                        bool aux_var_AWR_0d_read = glob_aux_var_AWR_0d_read;
                        int& glob_var_LI_0d = var_LI_0d;
                        int var_LI_0d = glob_var_LI_0d;
                        bool& glob_aux_var_LI_0d_read = aux_var_LI_0d_read;
                        bool aux_var_LI_0d_read = glob_aux_var_LI_0d_read;
                        int& glob_var_LTT_0d = var_LTT_0d;
                        int var_LTT_0d = glob_var_LTT_0d;
                        bool& glob_aux_var_LTT_0d_read = aux_var_LTT_0d_read;
                        bool aux_var_LTT_0d_read = glob_aux_var_LTT_0d_read;
                        int& glob_var_NK_0d = var_NK_0d;
                        int var_NK_0d = glob_var_NK_0d;
                        bool& glob_aux_var_NK_0d_read = aux_var_NK_0d_read;
                        bool aux_var_NK_0d_read = glob_aux_var_NK_0d_read;
                        int& glob_var_NI_0d = var_NI_0d;
                        int var_NI_0d = glob_var_NI_0d;
                        bool& glob_aux_var_NI_0d_read = aux_var_NI_0d_read;
                        bool aux_var_NI_0d_read = glob_aux_var_NI_0d_read;
                        cpp_line = cpp_read_line(cont);
                        // read CONT record
                        // assign expression to variable ZA
                        var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                        aux_var_ZA_0d_read = true;
                        // assign expression to variable AWR
                        var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_var_AWR_0d_read = true;
                        // assign expression to variable LI
                        var_LI_0d = cpp_read_int_field(cpp_line, 2);
                        aux_var_LI_0d_read = true;
                        // assign expression to variable LTT
                        var_LTT_0d = cpp_read_int_field(cpp_line, 3);
                        aux_var_LTT_0d_read = true;
                        // assign expression to variable NK
                        var_NK_0d = cpp_read_int_field(cpp_line, 4);
                        aux_var_NK_0d_read = true;
                        // assign expression to variable NI
                        var_NI_0d = cpp_read_int_field(cpp_line, 5);
                        aux_var_NI_0d_read = true;
                        if ((((((((var_LI_0d)==(0))))&&(((var_LTT_0d)==(1))))))) {
                            cpp_found_match = true;
                        }
                        cont.seekg(cpp_old_streampos);
                    }
                    if (cpp_found_match) {
                        cpp_line = cpp_read_line(cont);
                        // read CONT record
                        // assign expression to variable ZA
                        var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                        aux_var_ZA_0d_read = true;
                        // assign expression to variable AWR
                        var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_var_AWR_0d_read = true;
                        // assign expression to variable LI
                        var_LI_0d = cpp_read_int_field(cpp_line, 2);
                        aux_var_LI_0d_read = true;
                        // assign expression to variable LTT
                        var_LTT_0d = cpp_read_int_field(cpp_line, 3);
                        aux_var_LTT_0d_read = true;
                        // assign expression to variable NK
                        var_NK_0d = cpp_read_int_field(cpp_line, 4);
                        aux_var_NK_0d_read = true;
                        // assign expression to variable NI
                        var_NI_0d = cpp_read_int_field(cpp_line, 5);
                        aux_var_NI_0d_read = true;

                        for (int var_k_0d = 1;
                             var_k_0d <= var_NI_0d; var_k_0d++) {
                            bool aux_var_k_0d_read = true;
                            cpp_line = cpp_read_line(cont);
                            // read CONT record
                            // assign expression to variable EG
                            var_EG_1d.set(var_k_0d, cpp_read_float_field(cpp_line.c_str(), 0));
                            // assign expression to variable ES
                            var_ES_1d.set(var_k_0d, cpp_read_float_field(cpp_line.c_str(), 1));
                        }

                        for (int var_k_0d = (var_NI_0d+1);
                             var_k_0d <= (var_NI_0d+(var_NK_0d-var_NI_0d)); var_k_0d++) {
                            bool aux_var_k_0d_read = true;
                            // read TAB2 record
                            cpp_line = cpp_read_line(cont);
                            if ((! var_EG_1d.contains(var_k_0d))) {
                                // assign expression to variable EG
                                var_EG_1d.set(var_k_0d, cpp_read_float_field(cpp_line.c_str(), 0));
                            }
                            if ((! var_ES_1d.contains(var_k_0d))) {
                                // assign expression to variable ES
                                var_ES_1d.set(var_k_0d, cpp_read_float_field(cpp_line.c_str(), 1));
                            }
                            // assign expression to variable NE
                            var_NE_1d.set(var_k_0d, cpp_read_int_field(cpp_line, 5));

                            {
                                py::dict cpp_parent_dict = cpp_current_dict;
                                if (! cpp_parent_dict.contains("E_interpol")) {
                                    cpp_parent_dict["E_interpol"] = py::dict();
                                }
                                py::dict cpp_current_dict = cpp_parent_dict["E_interpol"];

                                if (! cpp_current_dict.contains(py::cast(var_k_0d))) {
                                    cpp_current_dict[py::cast(var_k_0d)] = py::dict();
                                }
                                cpp_current_dict = cpp_current_dict[py::cast(var_k_0d)];
                                {

                                    int cpp_j;
                                    int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                    int cpp_np = cpp_read_int_field(cpp_line, 5);

                                    std::vector<int> NBT;
                                    std::vector<int> INT;
                                    cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                    cpp_j = 0;
                                    for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                        NBT.push_back(cpp_intvec[cpp_j++]);
                                        INT.push_back(cpp_intvec[cpp_j++]);
                                    }

                                    cpp_current_dict["NBT"] = NBT;
                                    cpp_current_dict["INT"] = INT;
                                }
                                cpp_current_dict = cpp_parent_dict;
                            }
                            ptr_E_2d_idx0 = var_E_2d.prepare(var_k_0d);
                            ptr_a_3d_idx0 = var_a_3d.prepare(var_k_0d);

                            for (int var_l_0d = 1;
                                 var_l_0d <= var_NE_1d[var_k_0d]; var_l_0d++) {
                                bool aux_var_l_0d_read = true;
                                cpp_line = cpp_read_line(cont);
                                // read LIST record
                                // assign expression to variable E
                                ptr_E_2d_idx0->set(var_l_0d, cpp_read_float_field(cpp_line.c_str(), 1));
                                // assign expression to variable NL
                                ptr_NL_2d_idx0 = var_NL_2d.prepare(var_k_0d);
                                ptr_NL_2d_idx0->set(var_l_0d, cpp_read_int_field(cpp_line, 4));
                                {
                                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                    int cpp_j = 0;
                                    // read LIST body
                                    ptr_a_3d_idx1 = ptr_a_3d_idx0->prepare(var_l_0d);

                                    for (int var_m_0d = 1;
                                         var_m_0d <= var_NL_2d[var_k_0d][var_l_0d]; var_m_0d++) {
                                        bool aux_var_m_0d_read = true;
                                        // read LIST body
                                        // assign expression to variable a
                                        ptr_a_3d_idx1->set(var_m_0d, cpp_floatvec[cpp_j++]);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (! cpp_found_match) {
            if (! cpp_found_match) {
                // if statement evaluation with lookahead
                {
                    std::streampos cpp_old_streampos = cont.tellg();
                    {
                        // variable declarations
                        int& glob_var_MAT_0d = var_MAT_0d;
                        int var_MAT_0d = glob_var_MAT_0d;
                        bool& glob_aux_var_MAT_0d_read = aux_var_MAT_0d_read;
                        bool aux_var_MAT_0d_read = glob_aux_var_MAT_0d_read;
                        int& glob_var_MF_0d = var_MF_0d;
                        int var_MF_0d = glob_var_MF_0d;
                        bool& glob_aux_var_MF_0d_read = aux_var_MF_0d_read;
                        bool aux_var_MF_0d_read = glob_aux_var_MF_0d_read;
                        int& glob_var_MT_0d = var_MT_0d;
                        int var_MT_0d = glob_var_MT_0d;
                        bool& glob_aux_var_MT_0d_read = aux_var_MT_0d_read;
                        bool aux_var_MT_0d_read = glob_aux_var_MT_0d_read;
                        double& glob_var_ZA_0d = var_ZA_0d;
                        double var_ZA_0d = glob_var_ZA_0d;
                        bool& glob_aux_var_ZA_0d_read = aux_var_ZA_0d_read;
                        bool aux_var_ZA_0d_read = glob_aux_var_ZA_0d_read;
                        double& glob_var_AWR_0d = var_AWR_0d;
                        double var_AWR_0d = glob_var_AWR_0d;
                        bool& glob_aux_var_AWR_0d_read = aux_var_AWR_0d_read;
                        bool aux_var_AWR_0d_read = glob_aux_var_AWR_0d_read;
                        int& glob_var_LI_0d = var_LI_0d;
                        int var_LI_0d = glob_var_LI_0d;
                        bool& glob_aux_var_LI_0d_read = aux_var_LI_0d_read;
                        bool aux_var_LI_0d_read = glob_aux_var_LI_0d_read;
                        int& glob_var_LTT_0d = var_LTT_0d;
                        int var_LTT_0d = glob_var_LTT_0d;
                        bool& glob_aux_var_LTT_0d_read = aux_var_LTT_0d_read;
                        bool aux_var_LTT_0d_read = glob_aux_var_LTT_0d_read;
                        int& glob_var_NK_0d = var_NK_0d;
                        int var_NK_0d = glob_var_NK_0d;
                        bool& glob_aux_var_NK_0d_read = aux_var_NK_0d_read;
                        bool aux_var_NK_0d_read = glob_aux_var_NK_0d_read;
                        int& glob_var_NI_0d = var_NI_0d;
                        int var_NI_0d = glob_var_NI_0d;
                        bool& glob_aux_var_NI_0d_read = aux_var_NI_0d_read;
                        bool aux_var_NI_0d_read = glob_aux_var_NI_0d_read;
                        cpp_line = cpp_read_line(cont);
                        // read CONT record
                        // assign expression to variable ZA
                        var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                        aux_var_ZA_0d_read = true;
                        // assign expression to variable AWR
                        var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_var_AWR_0d_read = true;
                        // assign expression to variable LI
                        var_LI_0d = cpp_read_int_field(cpp_line, 2);
                        aux_var_LI_0d_read = true;
                        // assign expression to variable LTT
                        var_LTT_0d = cpp_read_int_field(cpp_line, 3);
                        aux_var_LTT_0d_read = true;
                        // assign expression to variable NK
                        var_NK_0d = cpp_read_int_field(cpp_line, 4);
                        aux_var_NK_0d_read = true;
                        // assign expression to variable NI
                        var_NI_0d = cpp_read_int_field(cpp_line, 5);
                        aux_var_NI_0d_read = true;
                        if ((((((((var_LI_0d)==(0))))&&(((var_LTT_0d)==(2))))))) {
                            cpp_found_match = true;
                        }
                        cont.seekg(cpp_old_streampos);
                    }
                    if (cpp_found_match) {
                        cpp_line = cpp_read_line(cont);
                        // read CONT record
                        // assign expression to variable ZA
                        var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                        aux_var_ZA_0d_read = true;
                        // assign expression to variable AWR
                        var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_var_AWR_0d_read = true;
                        // assign expression to variable LI
                        var_LI_0d = cpp_read_int_field(cpp_line, 2);
                        aux_var_LI_0d_read = true;
                        // assign expression to variable LTT
                        var_LTT_0d = cpp_read_int_field(cpp_line, 3);
                        aux_var_LTT_0d_read = true;
                        // assign expression to variable NK
                        var_NK_0d = cpp_read_int_field(cpp_line, 4);
                        aux_var_NK_0d_read = true;
                        // assign expression to variable NI
                        var_NI_0d = cpp_read_int_field(cpp_line, 5);
                        aux_var_NI_0d_read = true;
                    }
                }
            }
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_LI_0d_read == true)) {
        cpp_current_dict["LI"] = var_LI_0d;
    }
    if ((aux_var_NK_0d_read == true)) {
        cpp_current_dict["NK"] = var_NK_0d;
    }
    if ((aux_var_LTT_0d_read == true)) {
        cpp_current_dict["LTT"] = var_LTT_0d;
    }
    if ((aux_var_NI_0d_read == true)) {
        cpp_current_dict["NI"] = var_NI_0d;
    }
    if ((var_EG_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_EG_1d;
            cpp_current_dict["EG"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["EG"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_ES_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_ES_1d;
            cpp_current_dict["ES"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["ES"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_NE_1d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_NE_1d;
            cpp_current_dict["NE"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["NE"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
            }
    }
    if ((var_E_2d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_E_2d;
            cpp_current_dict["E"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["E"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
                cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
                    cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
                }
            }
    }
    if ((var_NL_2d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_NL_2d;
            cpp_current_dict["NL"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["NL"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
                cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
                    cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
                }
            }
    }
    if ((var_a_3d.get_last_index() != -1)) {
            auto& cpp_curvar0 = var_a_3d;
            cpp_current_dict["a"] = py::dict();
            py::dict cpp_curdict0 = cpp_current_dict["a"];
            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
                cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
                    auto& cpp_curvar2 = cpp_curvar1[cpp_i2];
                    cpp_curdict1[py::cast(cpp_i2)] = py::dict();
                    py::dict cpp_curdict2 = cpp_curdict1[py::cast(cpp_i2)];
                    for (int cpp_i3 = cpp_curvar2.get_start_index(); cpp_i3 <= cpp_curvar2.get_last_index(); cpp_i3++) {
                        cpp_curdict2[py::cast(cpp_i3)] = cpp_curvar2[cpp_i3];
                    }
                }
            }
    }
    return cpp_current_dict;
}

py::dict parse_mf15_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_NC_0d;
    bool aux_var_NC_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // assign expression to variable NC
    var_NC_0d = cpp_read_int_field(cpp_line, 4);
    aux_var_NC_0d_read = true;

    for (int var_j_0d = 1;
         var_j_0d <= var_NC_0d; var_j_0d++) {
        bool aux_var_j_0d_read = true;
        // open section subsection

        {
            py::dict cpp_parent_dict = cpp_current_dict;
            if (! cpp_parent_dict.contains("subsection")) {
                cpp_parent_dict["subsection"] = py::dict();
            }
            py::dict cpp_current_dict = cpp_parent_dict["subsection"];

            if (! cpp_current_dict.contains(py::cast(var_j_0d))) {
                cpp_current_dict[py::cast(var_j_0d)] = py::dict();
            }
            cpp_current_dict = cpp_current_dict[py::cast(var_j_0d)];
            // variable declarations
            int var_LF_0d;
            bool aux_var_LF_0d_read = false;
            int var_NE_0d;
            bool aux_var_NE_0d_read = false;
            NestedVector<double> var_E_1d;
            // evaluate if-elif-else clause
            {
                bool cpp_found_match = false;
                if (! cpp_found_match) {
                    // if statement evaluation with lookahead
                    {
                        std::streampos cpp_old_streampos = cont.tellg();
                        {
                            // variable declarations
                            int& glob_var_LF_0d = var_LF_0d;
                            int var_LF_0d = glob_var_LF_0d;
                            bool& glob_aux_var_LF_0d_read = aux_var_LF_0d_read;
                            bool aux_var_LF_0d_read = glob_aux_var_LF_0d_read;
                            // read TAB1 record
                            cpp_line = cpp_read_line(cont);
                            // assign expression to variable LF
                            var_LF_0d = cpp_read_int_field(cpp_line, 3);
                            aux_var_LF_0d_read = true;
                            if (((((((var_LF_0d)==(1))))))) {
                                cpp_found_match = true;
                            }
                            cont.seekg(cpp_old_streampos);
                        }
                        if (cpp_found_match) {
                            // read TAB1 record
                            cpp_line = cpp_read_line(cont);
                            // assign expression to variable LF
                            var_LF_0d = cpp_read_int_field(cpp_line, 3);
                            aux_var_LF_0d_read = true;

                            {
                                py::dict cpp_parent_dict = cpp_current_dict;
                                if (! cpp_parent_dict.contains("rtfm_tab1")) {
                                    cpp_parent_dict["rtfm_tab1"] = py::dict();
                                }
                                py::dict cpp_current_dict = cpp_parent_dict["rtfm_tab1"];
                                {

                                    int cpp_j;
                                    int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                    int cpp_np = cpp_read_int_field(cpp_line, 5);

                                    std::vector<int> NBT;
                                    std::vector<int> INT;
                                    cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                    cpp_j = 0;
                                    for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                        NBT.push_back(cpp_intvec[cpp_j++]);
                                        INT.push_back(cpp_intvec[cpp_j++]);
                                    }

                                    cpp_current_dict["NBT"] = NBT;
                                    cpp_current_dict["INT"] = INT;

                                std::vector<double> Eint;
                                std::vector<double> p;
                                cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                                cpp_j = 0;
                                for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                    Eint.push_back(cpp_floatvec[cpp_j++]);
                                    p.push_back(cpp_floatvec[cpp_j++]);
                                }

                                cpp_current_dict["Eint"] = Eint;
                                cpp_current_dict["p"] = p;
                                }
                                cpp_current_dict = cpp_parent_dict;
                            }
                            // read TAB2 record
                            cpp_line = cpp_read_line(cont);
                            // assign expression to variable NE
                            var_NE_0d = cpp_read_int_field(cpp_line, 5);
                            aux_var_NE_0d_read = true;
                            {

                                int cpp_j;
                                int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                int cpp_np = cpp_read_int_field(cpp_line, 5);

                                std::vector<int> NBT;
                                std::vector<int> INT;
                                cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                cpp_j = 0;
                                for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                    NBT.push_back(cpp_intvec[cpp_j++]);
                                    INT.push_back(cpp_intvec[cpp_j++]);
                                }

                                cpp_current_dict["NBT"] = NBT;
                                cpp_current_dict["INT"] = INT;
                            }

                            for (int var_k_0d = 1;
                                 var_k_0d <= var_NE_0d; var_k_0d++) {
                                bool aux_var_k_0d_read = true;
                                // read TAB1 record
                                cpp_line = cpp_read_line(cont);
                                // assign expression to variable E
                                var_E_1d.set(var_k_0d, cpp_read_float_field(cpp_line.c_str(), 1));

                                {
                                    py::dict cpp_parent_dict = cpp_current_dict;
                                    if (! cpp_parent_dict.contains("rtfm1_tab")) {
                                        cpp_parent_dict["rtfm1_tab"] = py::dict();
                                    }
                                    py::dict cpp_current_dict = cpp_parent_dict["rtfm1_tab"];

                                    if (! cpp_current_dict.contains(py::cast(var_k_0d))) {
                                        cpp_current_dict[py::cast(var_k_0d)] = py::dict();
                                    }
                                    cpp_current_dict = cpp_current_dict[py::cast(var_k_0d)];
                                    {

                                        int cpp_j;
                                        int cpp_nr = cpp_read_int_field(cpp_line, 4);
                                        int cpp_np = cpp_read_int_field(cpp_line, 5);

                                        std::vector<int> NBT;
                                        std::vector<int> INT;
                                        cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
                                        cpp_j = 0;
                                        for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
                                            NBT.push_back(cpp_intvec[cpp_j++]);
                                            INT.push_back(cpp_intvec[cpp_j++]);
                                        }

                                        cpp_current_dict["NBT"] = NBT;
                                        cpp_current_dict["INT"] = INT;

                                    std::vector<double> Egamma;
                                    std::vector<double> g;
                                    cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
                                    cpp_j = 0;
                                    for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
                                        Egamma.push_back(cpp_floatvec[cpp_j++]);
                                        g.push_back(cpp_floatvec[cpp_j++]);
                                    }

                                    cpp_current_dict["Egamma"] = Egamma;
                                    cpp_current_dict["g"] = g;
                                    }
                                    cpp_current_dict = cpp_parent_dict;
                                }
                            }
                        }
                    }
                }
            }
            // store data in Python dictionary
            if ((aux_var_LF_0d_read == true)) {
                cpp_current_dict["LF"] = var_LF_0d;
            }
            if ((aux_var_NE_0d_read == true)) {
                cpp_current_dict["NE"] = var_NE_0d;
            }
            if ((var_E_1d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_E_1d;
                    cpp_current_dict["E"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["E"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                    }
            }
            cpp_current_dict = cpp_parent_dict;
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_NC_0d_read == true)) {
        cpp_current_dict["NC"] = var_NC_0d;
    }
    return cpp_current_dict;
}

py::dict parse_mf23_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    double var_EPE_0d;
    bool aux_var_EPE_0d_read = false;
    double var_EFL_0d;
    bool aux_var_EFL_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // read TAB1 record
    cpp_line = cpp_read_line(cont);
    // assign expression to variable EPE
    var_EPE_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_EPE_0d_read = true;
    // assign expression to variable EFL
    var_EFL_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_EFL_0d_read = true;
    {

        int cpp_j;
        int cpp_nr = cpp_read_int_field(cpp_line, 4);
        int cpp_np = cpp_read_int_field(cpp_line, 5);

        std::vector<int> NBT;
        std::vector<int> INT;
        cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
        cpp_j = 0;
        for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
            NBT.push_back(cpp_intvec[cpp_j++]);
            INT.push_back(cpp_intvec[cpp_j++]);
        }

        cpp_current_dict["NBT"] = NBT;
        cpp_current_dict["INT"] = INT;

    std::vector<double> Eint;
    std::vector<double> sigma;
    cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
    cpp_j = 0;
    for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
        Eint.push_back(cpp_floatvec[cpp_j++]);
        sigma.push_back(cpp_floatvec[cpp_j++]);
    }

    cpp_current_dict["Eint"] = Eint;
    cpp_current_dict["sigma"] = sigma;
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_EPE_0d_read == true)) {
        cpp_current_dict["EPE"] = var_EPE_0d;
    }
    if ((aux_var_EFL_0d_read == true)) {
        cpp_current_dict["EFL"] = var_EFL_0d;
    }
    return cpp_current_dict;
}

py::dict parse_mf26_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    return cpp_current_dict;
}

py::dict parse_mf27_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    double var_Z_0d;
    bool aux_var_Z_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // read TAB1 record
    cpp_line = cpp_read_line(cont);
    // assign expression to variable Z
    var_Z_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_Z_0d_read = true;
    {

        int cpp_j;
        int cpp_nr = cpp_read_int_field(cpp_line, 4);
        int cpp_np = cpp_read_int_field(cpp_line, 5);

        std::vector<int> NBT;
        std::vector<int> INT;
        cpp_intvec = cpp_read_int_vec(cont, 2*cpp_nr);
        cpp_j = 0;
        for (int cpp_i=0; cpp_i < cpp_nr; cpp_i++) {
            NBT.push_back(cpp_intvec[cpp_j++]);
            INT.push_back(cpp_intvec[cpp_j++]);
        }

        cpp_current_dict["NBT"] = NBT;
        cpp_current_dict["INT"] = INT;

    std::vector<double> xint;
    std::vector<double> H;
    cpp_floatvec = cpp_read_float_vec(cont, 2*cpp_np);
    cpp_j = 0;
    for (int cpp_i=0; cpp_i < cpp_np; cpp_i++) {
        xint.push_back(cpp_floatvec[cpp_j++]);
        H.push_back(cpp_floatvec[cpp_j++]);
    }

    cpp_current_dict["xint"] = xint;
    cpp_current_dict["H"] = H;
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_Z_0d_read == true)) {
        cpp_current_dict["Z"] = var_Z_0d;
    }
    return cpp_current_dict;
}

py::dict parse_mf28_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    return cpp_current_dict;
}

py::dict parse_mf31_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_MTL_0d;
    bool aux_var_MTL_0d_read = false;
    int var_NL_0d;
    bool aux_var_NL_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // assign expression to variable MTL
    var_MTL_0d = cpp_read_int_field(cpp_line, 3);
    aux_var_MTL_0d_read = true;
    // assign expression to variable NL
    var_NL_0d = cpp_read_int_field(cpp_line, 5);
    aux_var_NL_0d_read = true;
    // evaluate if-elif-else clause
    {
        bool cpp_found_match = false;
        if (! cpp_found_match) {
            if (((((((var_MTL_0d)==(0))))))) {
                // if statement evaluation
                cpp_found_match = true;

                for (int var_n_0d = 1;
                     var_n_0d <= var_NL_0d; var_n_0d++) {
                    bool aux_var_n_0d_read = true;
                    // open section subsection

                    {
                        py::dict cpp_parent_dict = cpp_current_dict;
                        if (! cpp_parent_dict.contains("subsection")) {
                            cpp_parent_dict["subsection"] = py::dict();
                        }
                        py::dict cpp_current_dict = cpp_parent_dict["subsection"];

                        if (! cpp_current_dict.contains(py::cast(var_n_0d))) {
                            cpp_current_dict[py::cast(var_n_0d)] = py::dict();
                        }
                        cpp_current_dict = cpp_current_dict[py::cast(var_n_0d)];
                        // variable declarations
                        double var_XMF1_0d;
                        bool aux_var_XMF1_0d_read = false;
                        double var_XLFS1_0d;
                        bool aux_var_XLFS1_0d_read = false;
                        int var_MAT1_0d;
                        bool aux_var_MAT1_0d_read = false;
                        int var_MT1_0d;
                        bool aux_var_MT1_0d_read = false;
                        int var_NC_0d;
                        bool aux_var_NC_0d_read = false;
                        int var_NI_0d;
                        bool aux_var_NI_0d_read = false;
                        cpp_line = cpp_read_line(cont);
                        // read CONT record
                        // assign expression to variable XMF1
                        var_XMF1_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                        aux_var_XMF1_0d_read = true;
                        // assign expression to variable XLFS1
                        var_XLFS1_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_var_XLFS1_0d_read = true;
                        // assign expression to variable MAT1
                        var_MAT1_0d = cpp_read_int_field(cpp_line, 2);
                        aux_var_MAT1_0d_read = true;
                        // assign expression to variable MT1
                        var_MT1_0d = cpp_read_int_field(cpp_line, 3);
                        aux_var_MT1_0d_read = true;
                        // assign expression to variable NC
                        var_NC_0d = cpp_read_int_field(cpp_line, 4);
                        aux_var_NC_0d_read = true;
                        // assign expression to variable NI
                        var_NI_0d = cpp_read_int_field(cpp_line, 5);
                        aux_var_NI_0d_read = true;

                        for (int var_m_0d = 1;
                             var_m_0d <= var_NC_0d; var_m_0d++) {
                            bool aux_var_m_0d_read = true;
                            // open section nc_subsection

                            {
                                py::dict cpp_parent_dict = cpp_current_dict;
                                if (! cpp_parent_dict.contains("nc_subsection")) {
                                    cpp_parent_dict["nc_subsection"] = py::dict();
                                }
                                py::dict cpp_current_dict = cpp_parent_dict["nc_subsection"];

                                if (! cpp_current_dict.contains(py::cast(var_m_0d))) {
                                    cpp_current_dict[py::cast(var_m_0d)] = py::dict();
                                }
                                cpp_current_dict = cpp_current_dict[py::cast(var_m_0d)];
                                // variable declarations
                                int var_LTY_0d;
                                bool aux_var_LTY_0d_read = false;
                                double var_E1_0d;
                                bool aux_var_E1_0d_read = false;
                                double var_E2_0d;
                                bool aux_var_E2_0d_read = false;
                                int cpp_int_val;
                                bool aux_cpp_int_val_read = false;
                                int var_NCI_0d;
                                bool aux_var_NCI_0d_read = false;
                                NestedVector<double> var_C_1d;
                                NestedVector<double> var_XMT_1d;
                                int var_MATS_0d;
                                bool aux_var_MATS_0d_read = false;
                                int var_MTS_0d;
                                bool aux_var_MTS_0d_read = false;
                                int var_NEI_0d;
                                bool aux_var_NEI_0d_read = false;
                                double var_XMFS_0d;
                                bool aux_var_XMFS_0d_read = false;
                                double var_XLFSS_0d;
                                bool aux_var_XLFSS_0d_read = false;
                                NestedVector<double> var_E_1d;
                                NestedVector<double> var_WE_1d;
                                cpp_line = cpp_read_line(cont);
                                // read CONT record
                                // assign expression to variable LTY
                                var_LTY_0d = cpp_read_int_field(cpp_line, 3);
                                aux_var_LTY_0d_read = true;
                                // evaluate if-elif-else clause
                                {
                                    bool cpp_found_match = false;
                                    if (! cpp_found_match) {
                                        if (((((((var_LTY_0d)==(0))))))) {
                                            // if statement evaluation
                                            cpp_found_match = true;
                                            cpp_line = cpp_read_line(cont);
                                            // read LIST record
                                            // assign expression to variable E1
                                            var_E1_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                            aux_var_E1_0d_read = true;
                                            // assign expression to variable E2
                                            var_E2_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                            aux_var_E2_0d_read = true;
                                            // assign expression to variable cpp_int_val
                                            cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                            aux_cpp_int_val_read = true;
                                            // assign expression to variable NCI
                                            var_NCI_0d = (cpp_int_val/2);
                                            aux_var_NCI_0d_read = true;
                                            if ((! (aux_var_NCI_0d_read == true))) {
                                                // assign expression to variable NCI
                                                var_NCI_0d = cpp_read_int_field(cpp_line, 5);
                                                aux_var_NCI_0d_read = true;
                                            }
                                            {
                                                int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                int cpp_j = 0;
                                                // read LIST body

                                                for (int var_i_0d = 1;
                                                     var_i_0d <= var_NCI_0d; var_i_0d++) {
                                                    bool aux_var_i_0d_read = true;
                                                    // read LIST body
                                                    // assign expression to variable C
                                                    var_C_1d.set(var_i_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable XMT
                                                    var_XMT_1d.set(var_i_0d, cpp_floatvec[cpp_j++]);
                                                }
                                            }
                                        }
                                    }
                                    if (! cpp_found_match) {
                                        if (! cpp_found_match) {
                                            if ((((((((var_LTY_0d)>=(1))))&&(((var_LTY_0d)<=(3))))))) {
                                                // if statement evaluation
                                                cpp_found_match = true;
                                                cpp_line = cpp_read_line(cont);
                                                // read LIST record
                                                // assign expression to variable E1
                                                var_E1_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                aux_var_E1_0d_read = true;
                                                // assign expression to variable E2
                                                var_E2_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                aux_var_E2_0d_read = true;
                                                // assign expression to variable MATS
                                                var_MATS_0d = cpp_read_int_field(cpp_line, 2);
                                                aux_var_MATS_0d_read = true;
                                                // assign expression to variable MTS
                                                var_MTS_0d = cpp_read_int_field(cpp_line, 3);
                                                aux_var_MTS_0d_read = true;
                                                // assign expression to variable cpp_int_val
                                                cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                aux_cpp_int_val_read = true;
                                                // assign expression to variable NEI
                                                var_NEI_0d = ((cpp_int_val+(-2))/2);
                                                aux_var_NEI_0d_read = true;
                                                if ((! (aux_var_NEI_0d_read == true))) {
                                                    // assign expression to variable NEI
                                                    var_NEI_0d = cpp_read_int_field(cpp_line, 5);
                                                    aux_var_NEI_0d_read = true;
                                                }
                                                {
                                                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                    int cpp_j = 0;
                                                    // read LIST body
                                                    // assign expression to variable XMFS
                                                    var_XMFS_0d = cpp_floatvec[cpp_j++];
                                                    aux_var_XMFS_0d_read = true;
                                                    // assign expression to variable XLFSS
                                                    var_XLFSS_0d = cpp_floatvec[cpp_j++];
                                                    aux_var_XLFSS_0d_read = true;

                                                    for (int var_i_0d = 1;
                                                         var_i_0d <= var_NEI_0d; var_i_0d++) {
                                                        bool aux_var_i_0d_read = true;
                                                        // read LIST body
                                                        // assign expression to variable E
                                                        var_E_1d.set(var_i_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable WE
                                                        var_WE_1d.set(var_i_0d, cpp_floatvec[cpp_j++]);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                // store data in Python dictionary
                                if ((aux_var_LTY_0d_read == true)) {
                                    cpp_current_dict["LTY"] = var_LTY_0d;
                                }
                                if ((aux_var_E1_0d_read == true)) {
                                    cpp_current_dict["E1"] = var_E1_0d;
                                }
                                if ((aux_var_E2_0d_read == true)) {
                                    cpp_current_dict["E2"] = var_E2_0d;
                                }
                                if ((aux_var_NCI_0d_read == true)) {
                                    cpp_current_dict["NCI"] = var_NCI_0d;
                                }
                                if ((var_C_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_C_1d;
                                        cpp_current_dict["C"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["C"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                if ((var_XMT_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_XMT_1d;
                                        cpp_current_dict["XMT"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["XMT"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                if ((aux_var_MATS_0d_read == true)) {
                                    cpp_current_dict["MATS"] = var_MATS_0d;
                                }
                                if ((aux_var_MTS_0d_read == true)) {
                                    cpp_current_dict["MTS"] = var_MTS_0d;
                                }
                                if ((aux_var_NEI_0d_read == true)) {
                                    cpp_current_dict["NEI"] = var_NEI_0d;
                                }
                                if ((aux_var_XMFS_0d_read == true)) {
                                    cpp_current_dict["XMFS"] = var_XMFS_0d;
                                }
                                if ((aux_var_XLFSS_0d_read == true)) {
                                    cpp_current_dict["XLFSS"] = var_XLFSS_0d;
                                }
                                if ((var_E_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_E_1d;
                                        cpp_current_dict["E"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["E"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                if ((var_WE_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_WE_1d;
                                        cpp_current_dict["WE"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["WE"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                cpp_current_dict = cpp_parent_dict;
                            }
                        }

                        for (int var_m_0d = 1;
                             var_m_0d <= var_NI_0d; var_m_0d++) {
                            bool aux_var_m_0d_read = true;
                            // open section ni_subsection

                            {
                                py::dict cpp_parent_dict = cpp_current_dict;
                                if (! cpp_parent_dict.contains("ni_subsection")) {
                                    cpp_parent_dict["ni_subsection"] = py::dict();
                                }
                                py::dict cpp_current_dict = cpp_parent_dict["ni_subsection"];

                                if (! cpp_current_dict.contains(py::cast(var_m_0d))) {
                                    cpp_current_dict[py::cast(var_m_0d)] = py::dict();
                                }
                                cpp_current_dict = cpp_current_dict[py::cast(var_m_0d)];
                                // variable declarations
                                int var_LT_0d;
                                bool aux_var_LT_0d_read = false;
                                int var_LB_0d;
                                bool aux_var_LB_0d_read = false;
                                int cpp_int_val;
                                bool aux_cpp_int_val_read = false;
                                int var_NP_0d;
                                bool aux_var_NP_0d_read = false;
                                NestedVector<double> var_Ek_1d;
                                NestedVector<double> var_Fk_1d;
                                NestedVector<double> var_El_1d;
                                NestedVector<double> var_Fl_1d;
                                int var_LS_0d;
                                bool aux_var_LS_0d_read = false;
                                int var_NE_0d;
                                bool aux_var_NE_0d_read = false;
                                NestedVector<double> var_E_1d;
                                Matrix2d<double> var_F_2d;
                                int var_NER_0d;
                                bool aux_var_NER_0d_read = false;
                                int var_NEC_0d;
                                bool aux_var_NEC_0d_read = false;
                                NestedVector<double> var_ER_1d;
                                NestedVector<double> var_EC_1d;
                                NestedVector<double> var_F_1d;
                                // evaluate if-elif-else clause
                                {
                                    bool cpp_found_match = false;
                                    if (! cpp_found_match) {
                                        // if statement evaluation with lookahead
                                        {
                                            std::streampos cpp_old_streampos = cont.tellg();
                                            {
                                                // variable declarations
                                                int& glob_var_LT_0d = var_LT_0d;
                                                int var_LT_0d = glob_var_LT_0d;
                                                bool& glob_aux_var_LT_0d_read = aux_var_LT_0d_read;
                                                bool aux_var_LT_0d_read = glob_aux_var_LT_0d_read;
                                                int& glob_var_LB_0d = var_LB_0d;
                                                int var_LB_0d = glob_var_LB_0d;
                                                bool& glob_aux_var_LB_0d_read = aux_var_LB_0d_read;
                                                bool aux_var_LB_0d_read = glob_aux_var_LB_0d_read;
                                                int& glob_cpp_int_val = cpp_int_val;
                                                int cpp_int_val = glob_cpp_int_val;
                                                bool& glob_aux_cpp_int_val_read = aux_cpp_int_val_read;
                                                bool aux_cpp_int_val_read = glob_aux_cpp_int_val_read;
                                                int& glob_var_NP_0d = var_NP_0d;
                                                int var_NP_0d = glob_var_NP_0d;
                                                bool& glob_aux_var_NP_0d_read = aux_var_NP_0d_read;
                                                bool aux_var_NP_0d_read = glob_aux_var_NP_0d_read;
                                                cpp_line = cpp_read_line(cont);
                                                // read LIST record
                                                // assign expression to variable LT
                                                var_LT_0d = cpp_read_int_field(cpp_line, 2);
                                                aux_var_LT_0d_read = true;
                                                // assign expression to variable LB
                                                var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                aux_var_LB_0d_read = true;
                                                // assign expression to variable cpp_int_val
                                                cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                aux_cpp_int_val_read = true;
                                                // assign expression to variable NP
                                                var_NP_0d = (cpp_int_val/2);
                                                aux_var_NP_0d_read = true;
                                                if ((! (aux_var_NP_0d_read == true))) {
                                                    // assign expression to variable NP
                                                    var_NP_0d = cpp_read_int_field(cpp_line, 5);
                                                    aux_var_NP_0d_read = true;
                                                }
                                                if ((((((((var_LB_0d)>=(0))))&&(((var_LB_0d)<=(4))))))) {
                                                    cpp_found_match = true;
                                                }
                                                cont.seekg(cpp_old_streampos);
                                            }
                                            if (cpp_found_match) {
                                                cpp_line = cpp_read_line(cont);
                                                // read LIST record
                                                // assign expression to variable LT
                                                var_LT_0d = cpp_read_int_field(cpp_line, 2);
                                                aux_var_LT_0d_read = true;
                                                // assign expression to variable LB
                                                var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                aux_var_LB_0d_read = true;
                                                // assign expression to variable cpp_int_val
                                                cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                aux_cpp_int_val_read = true;
                                                // assign expression to variable NP
                                                var_NP_0d = (cpp_int_val/2);
                                                aux_var_NP_0d_read = true;
                                                if ((! (aux_var_NP_0d_read == true))) {
                                                    // assign expression to variable NP
                                                    var_NP_0d = cpp_read_int_field(cpp_line, 5);
                                                    aux_var_NP_0d_read = true;
                                                }
                                                {
                                                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                    int cpp_j = 0;
                                                    // read LIST body

                                                    for (int var_k_0d = 1;
                                                         var_k_0d <= (var_NP_0d-var_LT_0d); var_k_0d++) {
                                                        bool aux_var_k_0d_read = true;
                                                        // read LIST body
                                                        // assign expression to variable Ek
                                                        var_Ek_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable Fk
                                                        var_Fk_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                    }

                                                    for (int var_k_0d = 1;
                                                         var_k_0d <= var_LT_0d; var_k_0d++) {
                                                        bool aux_var_k_0d_read = true;
                                                        // read LIST body
                                                        // assign expression to variable El
                                                        var_El_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable Fl
                                                        var_Fl_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (! cpp_found_match) {
                                        if (! cpp_found_match) {
                                            // if statement evaluation with lookahead
                                            {
                                                std::streampos cpp_old_streampos = cont.tellg();
                                                {
                                                    // variable declarations
                                                    int& glob_var_LS_0d = var_LS_0d;
                                                    int var_LS_0d = glob_var_LS_0d;
                                                    bool& glob_aux_var_LS_0d_read = aux_var_LS_0d_read;
                                                    bool aux_var_LS_0d_read = glob_aux_var_LS_0d_read;
                                                    int& glob_var_LB_0d = var_LB_0d;
                                                    int var_LB_0d = glob_var_LB_0d;
                                                    bool& glob_aux_var_LB_0d_read = aux_var_LB_0d_read;
                                                    bool aux_var_LB_0d_read = glob_aux_var_LB_0d_read;
                                                    int& glob_var_NE_0d = var_NE_0d;
                                                    int var_NE_0d = glob_var_NE_0d;
                                                    bool& glob_aux_var_NE_0d_read = aux_var_NE_0d_read;
                                                    bool aux_var_NE_0d_read = glob_aux_var_NE_0d_read;
                                                    cpp_line = cpp_read_line(cont);
                                                    // read LIST record
                                                    // assign expression to variable LS
                                                    var_LS_0d = cpp_read_int_field(cpp_line, 2);
                                                    aux_var_LS_0d_read = true;
                                                    // assign expression to variable LB
                                                    var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                    aux_var_LB_0d_read = true;
                                                    // assign expression to variable NE
                                                    var_NE_0d = cpp_read_int_field(cpp_line, 5);
                                                    aux_var_NE_0d_read = true;
                                                    if ((! (aux_var_NE_0d_read == true))) {
                                                        throw std::runtime_error("The equation ((NE*(NE-1))+1)==value cannot be solved for NE because this variable could not be isolated.");
                                                    }
                                                    if ((((((((var_LB_0d)==(5))))&&(((var_LS_0d)==(0))))))) {
                                                        cpp_found_match = true;
                                                    }
                                                    cont.seekg(cpp_old_streampos);
                                                }
                                                if (cpp_found_match) {
                                                    cpp_line = cpp_read_line(cont);
                                                    // read LIST record
                                                    // assign expression to variable LS
                                                    var_LS_0d = cpp_read_int_field(cpp_line, 2);
                                                    aux_var_LS_0d_read = true;
                                                    // assign expression to variable LB
                                                    var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                    aux_var_LB_0d_read = true;
                                                    // assign expression to variable NE
                                                    var_NE_0d = cpp_read_int_field(cpp_line, 5);
                                                    aux_var_NE_0d_read = true;
                                                    if ((! (aux_var_NE_0d_read == true))) {
                                                        throw std::runtime_error("The equation ((NE*(NE-1))+1)==value cannot be solved for NE because this variable could not be isolated.");
                                                    }
                                                    {
                                                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                        int cpp_j = 0;
                                                        // read LIST body

                                                        for (int var_k_0d = 1;
                                                             var_k_0d <= var_NE_0d; var_k_0d++) {
                                                            bool aux_var_k_0d_read = true;
                                                            // read LIST body
                                                            // assign expression to variable E
                                                            var_E_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        }
                                                        var_F_2d.init(1, (var_NE_0d-1), 1, (var_NE_0d-1), false, false);

                                                        for (int var_k_0d = 1;
                                                             var_k_0d <= (var_NE_0d-1); var_k_0d++) {
                                                            bool aux_var_k_0d_read = true;
                                                            // read LIST body

                                                            for (int var_kp_0d = 1;
                                                                 var_kp_0d <= (var_NE_0d-1); var_kp_0d++) {
                                                                bool aux_var_kp_0d_read = true;
                                                                // read LIST body
                                                                // assign expression to variable F
                                                                var_F_2d(var_k_0d, var_kp_0d) = cpp_floatvec[cpp_j++];
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (! cpp_found_match) {
                                        if (! cpp_found_match) {
                                            // if statement evaluation with lookahead
                                            {
                                                std::streampos cpp_old_streampos = cont.tellg();
                                                {
                                                    // variable declarations
                                                    int& glob_var_LS_0d = var_LS_0d;
                                                    int var_LS_0d = glob_var_LS_0d;
                                                    bool& glob_aux_var_LS_0d_read = aux_var_LS_0d_read;
                                                    bool aux_var_LS_0d_read = glob_aux_var_LS_0d_read;
                                                    int& glob_var_LB_0d = var_LB_0d;
                                                    int var_LB_0d = glob_var_LB_0d;
                                                    bool& glob_aux_var_LB_0d_read = aux_var_LB_0d_read;
                                                    bool aux_var_LB_0d_read = glob_aux_var_LB_0d_read;
                                                    int& glob_var_NE_0d = var_NE_0d;
                                                    int var_NE_0d = glob_var_NE_0d;
                                                    bool& glob_aux_var_NE_0d_read = aux_var_NE_0d_read;
                                                    bool aux_var_NE_0d_read = glob_aux_var_NE_0d_read;
                                                    cpp_line = cpp_read_line(cont);
                                                    // read LIST record
                                                    // assign expression to variable LS
                                                    var_LS_0d = cpp_read_int_field(cpp_line, 2);
                                                    aux_var_LS_0d_read = true;
                                                    // assign expression to variable LB
                                                    var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                    aux_var_LB_0d_read = true;
                                                    // assign expression to variable NE
                                                    var_NE_0d = cpp_read_int_field(cpp_line, 5);
                                                    aux_var_NE_0d_read = true;
                                                    if ((! (aux_var_NE_0d_read == true))) {
                                                        throw std::runtime_error("The equation ((NE*(NE+1))/2)==value cannot be solved for NE because this variable could not be isolated.");
                                                    }
                                                    if ((((((((var_LB_0d)==(5))))&&(((var_LS_0d)==(1))))))) {
                                                        cpp_found_match = true;
                                                    }
                                                    cont.seekg(cpp_old_streampos);
                                                }
                                                if (cpp_found_match) {
                                                    cpp_line = cpp_read_line(cont);
                                                    // read LIST record
                                                    // assign expression to variable LS
                                                    var_LS_0d = cpp_read_int_field(cpp_line, 2);
                                                    aux_var_LS_0d_read = true;
                                                    // assign expression to variable LB
                                                    var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                    aux_var_LB_0d_read = true;
                                                    // assign expression to variable NE
                                                    var_NE_0d = cpp_read_int_field(cpp_line, 5);
                                                    aux_var_NE_0d_read = true;
                                                    if ((! (aux_var_NE_0d_read == true))) {
                                                        throw std::runtime_error("The equation ((NE*(NE+1))/2)==value cannot be solved for NE because this variable could not be isolated.");
                                                    }
                                                    {
                                                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                        int cpp_j = 0;
                                                        // read LIST body

                                                        for (int var_k_0d = 1;
                                                             var_k_0d <= var_NE_0d; var_k_0d++) {
                                                            bool aux_var_k_0d_read = true;
                                                            // read LIST body
                                                            // assign expression to variable E
                                                            var_E_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        }
                                                        var_F_2d.init(1, (var_NE_0d-1), 1, (var_NE_0d-1), true, false);

                                                        for (int var_k_0d = 1;
                                                             var_k_0d <= (var_NE_0d-1); var_k_0d++) {
                                                            bool aux_var_k_0d_read = true;
                                                            // read LIST body

                                                            for (int var_kp_0d = var_k_0d;
                                                                 var_kp_0d <= (var_NE_0d-1); var_kp_0d++) {
                                                                bool aux_var_kp_0d_read = true;
                                                                // read LIST body
                                                                // assign expression to variable F
                                                                var_F_2d(var_k_0d, var_kp_0d) = cpp_floatvec[cpp_j++];
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (! cpp_found_match) {
                                        if (! cpp_found_match) {
                                            // if statement evaluation with lookahead
                                            {
                                                std::streampos cpp_old_streampos = cont.tellg();
                                                {
                                                    // variable declarations
                                                    int& glob_var_LB_0d = var_LB_0d;
                                                    int var_LB_0d = glob_var_LB_0d;
                                                    bool& glob_aux_var_LB_0d_read = aux_var_LB_0d_read;
                                                    bool aux_var_LB_0d_read = glob_aux_var_LB_0d_read;
                                                    int& glob_var_NER_0d = var_NER_0d;
                                                    int var_NER_0d = glob_var_NER_0d;
                                                    bool& glob_aux_var_NER_0d_read = aux_var_NER_0d_read;
                                                    bool aux_var_NER_0d_read = glob_aux_var_NER_0d_read;
                                                    int& glob_cpp_int_val = cpp_int_val;
                                                    int cpp_int_val = glob_cpp_int_val;
                                                    bool& glob_aux_cpp_int_val_read = aux_cpp_int_val_read;
                                                    bool aux_cpp_int_val_read = glob_aux_cpp_int_val_read;
                                                    int& glob_var_NEC_0d = var_NEC_0d;
                                                    int var_NEC_0d = glob_var_NEC_0d;
                                                    bool& glob_aux_var_NEC_0d_read = aux_var_NEC_0d_read;
                                                    bool aux_var_NEC_0d_read = glob_aux_var_NEC_0d_read;
                                                    cpp_line = cpp_read_line(cont);
                                                    // read LIST record
                                                    // assign expression to variable LB
                                                    var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                    aux_var_LB_0d_read = true;
                                                    // assign expression to variable NER
                                                    var_NER_0d = cpp_read_int_field(cpp_line, 5);
                                                    aux_var_NER_0d_read = true;
                                                    // assign expression to variable cpp_int_val
                                                    cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                    aux_cpp_int_val_read = true;
                                                    // assign expression to variable NEC
                                                    var_NEC_0d = ((cpp_int_val+(-1))/var_NER_0d);
                                                    aux_var_NEC_0d_read = true;
                                                    if ((! (aux_var_NER_0d_read == true))) {
                                                        // assign expression to variable cpp_int_val
                                                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                        aux_cpp_int_val_read = true;
                                                        // assign expression to variable NER
                                                        var_NER_0d = ((cpp_int_val+(-1))/var_NEC_0d);
                                                        aux_var_NER_0d_read = true;
                                                    }
                                                    if (((((((var_LB_0d)==(6))))))) {
                                                        cpp_found_match = true;
                                                    }
                                                    cont.seekg(cpp_old_streampos);
                                                }
                                                if (cpp_found_match) {
                                                    cpp_line = cpp_read_line(cont);
                                                    // read LIST record
                                                    // assign expression to variable LB
                                                    var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                    aux_var_LB_0d_read = true;
                                                    // assign expression to variable NER
                                                    var_NER_0d = cpp_read_int_field(cpp_line, 5);
                                                    aux_var_NER_0d_read = true;
                                                    // assign expression to variable cpp_int_val
                                                    cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                    aux_cpp_int_val_read = true;
                                                    // assign expression to variable NEC
                                                    var_NEC_0d = ((cpp_int_val+(-1))/var_NER_0d);
                                                    aux_var_NEC_0d_read = true;
                                                    if ((! (aux_var_NER_0d_read == true))) {
                                                        // assign expression to variable cpp_int_val
                                                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                        aux_cpp_int_val_read = true;
                                                        // assign expression to variable NER
                                                        var_NER_0d = ((cpp_int_val+(-1))/var_NEC_0d);
                                                        aux_var_NER_0d_read = true;
                                                    }
                                                    {
                                                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                        int cpp_j = 0;
                                                        // read LIST body

                                                        for (int var_k_0d = 1;
                                                             var_k_0d <= var_NER_0d; var_k_0d++) {
                                                            bool aux_var_k_0d_read = true;
                                                            // read LIST body
                                                            // assign expression to variable ER
                                                            var_ER_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        }

                                                        for (int var_k_0d = 1;
                                                             var_k_0d <= var_NEC_0d; var_k_0d++) {
                                                            bool aux_var_k_0d_read = true;
                                                            // read LIST body
                                                            // assign expression to variable EC
                                                            var_EC_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        }
                                                        var_F_2d.init(1, (var_NER_0d-1), 1, (var_NEC_0d-1), false, false);

                                                        for (int var_k_0d = 1;
                                                             var_k_0d <= (var_NER_0d-1); var_k_0d++) {
                                                            bool aux_var_k_0d_read = true;
                                                            // read LIST body

                                                            for (int var_l_0d = 1;
                                                                 var_l_0d <= (var_NEC_0d-1); var_l_0d++) {
                                                                bool aux_var_l_0d_read = true;
                                                                // read LIST body
                                                                // assign expression to variable F
                                                                var_F_2d(var_k_0d, var_l_0d) = cpp_floatvec[cpp_j++];
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (! cpp_found_match) {
                                        if (! cpp_found_match) {
                                            // if statement evaluation with lookahead
                                            {
                                                std::streampos cpp_old_streampos = cont.tellg();
                                                {
                                                    // variable declarations
                                                    int& glob_var_LT_0d = var_LT_0d;
                                                    int var_LT_0d = glob_var_LT_0d;
                                                    bool& glob_aux_var_LT_0d_read = aux_var_LT_0d_read;
                                                    bool aux_var_LT_0d_read = glob_aux_var_LT_0d_read;
                                                    int& glob_var_LB_0d = var_LB_0d;
                                                    int var_LB_0d = glob_var_LB_0d;
                                                    bool& glob_aux_var_LB_0d_read = aux_var_LB_0d_read;
                                                    bool aux_var_LB_0d_read = glob_aux_var_LB_0d_read;
                                                    int& glob_cpp_int_val = cpp_int_val;
                                                    int cpp_int_val = glob_cpp_int_val;
                                                    bool& glob_aux_cpp_int_val_read = aux_cpp_int_val_read;
                                                    bool aux_cpp_int_val_read = glob_aux_cpp_int_val_read;
                                                    int& glob_var_NP_0d = var_NP_0d;
                                                    int var_NP_0d = glob_var_NP_0d;
                                                    bool& glob_aux_var_NP_0d_read = aux_var_NP_0d_read;
                                                    bool aux_var_NP_0d_read = glob_aux_var_NP_0d_read;
                                                    cpp_line = cpp_read_line(cont);
                                                    // read LIST record
                                                    // assign expression to variable LT
                                                    var_LT_0d = cpp_read_int_field(cpp_line, 2);
                                                    aux_var_LT_0d_read = true;
                                                    // assign expression to variable LB
                                                    var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                    aux_var_LB_0d_read = true;
                                                    // assign expression to variable cpp_int_val
                                                    cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                    aux_cpp_int_val_read = true;
                                                    // assign expression to variable NP
                                                    var_NP_0d = (cpp_int_val/2);
                                                    aux_var_NP_0d_read = true;
                                                    if ((! (aux_var_NP_0d_read == true))) {
                                                        // assign expression to variable NP
                                                        var_NP_0d = cpp_read_int_field(cpp_line, 5);
                                                        aux_var_NP_0d_read = true;
                                                    }
                                                    if (((((((((((((var_LB_0d)==(8)))))||((((var_LB_0d)==(9))))))))&&(((var_LT_0d)==(0))))))) {
                                                        cpp_found_match = true;
                                                    }
                                                    cont.seekg(cpp_old_streampos);
                                                }
                                                if (cpp_found_match) {
                                                    cpp_line = cpp_read_line(cont);
                                                    // read LIST record
                                                    // assign expression to variable LT
                                                    var_LT_0d = cpp_read_int_field(cpp_line, 2);
                                                    aux_var_LT_0d_read = true;
                                                    // assign expression to variable LB
                                                    var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                    aux_var_LB_0d_read = true;
                                                    // assign expression to variable cpp_int_val
                                                    cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                    aux_cpp_int_val_read = true;
                                                    // assign expression to variable NP
                                                    var_NP_0d = (cpp_int_val/2);
                                                    aux_var_NP_0d_read = true;
                                                    if ((! (aux_var_NP_0d_read == true))) {
                                                        // assign expression to variable NP
                                                        var_NP_0d = cpp_read_int_field(cpp_line, 5);
                                                        aux_var_NP_0d_read = true;
                                                    }
                                                    {
                                                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                        int cpp_j = 0;
                                                        // read LIST body

                                                        for (int var_k_0d = 1;
                                                             var_k_0d <= var_NP_0d; var_k_0d++) {
                                                            bool aux_var_k_0d_read = true;
                                                            // read LIST body
                                                            // assign expression to variable E
                                                            var_E_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                            // assign expression to variable F
                                                            var_F_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                // store data in Python dictionary
                                if ((aux_var_LT_0d_read == true)) {
                                    cpp_current_dict["LT"] = var_LT_0d;
                                }
                                if ((aux_var_LB_0d_read == true)) {
                                    cpp_current_dict["LB"] = var_LB_0d;
                                }
                                if ((aux_var_NP_0d_read == true)) {
                                    cpp_current_dict["NP"] = var_NP_0d;
                                }
                                if ((var_Ek_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_Ek_1d;
                                        cpp_current_dict["Ek"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["Ek"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                if ((var_Fk_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_Fk_1d;
                                        cpp_current_dict["Fk"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["Fk"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                if ((var_El_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_El_1d;
                                        cpp_current_dict["El"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["El"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                if ((var_Fl_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_Fl_1d;
                                        cpp_current_dict["Fl"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["Fl"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                if ((aux_var_LS_0d_read == true)) {
                                    cpp_current_dict["LS"] = var_LS_0d;
                                }
                                if ((aux_var_NE_0d_read == true)) {
                                    cpp_current_dict["NE"] = var_NE_0d;
                                }
                                if ((var_E_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_E_1d;
                                        cpp_current_dict["E"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["E"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                if (var_F_2d.did_read()) {
                                        cpp_current_dict["F"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["F"];
                                        for (int cpp_i1 = var_F_2d.get_row_start_index(); cpp_i1 <= var_F_2d.get_row_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                                            py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                                            for (int cpp_i2 = var_F_2d.get_col_start_index(cpp_i1); cpp_i2 <= var_F_2d.get_col_last_index(cpp_i1); cpp_i2++) {
                                                cpp_curdict1[py::cast(cpp_i2)] = var_F_2d(cpp_i1, cpp_i2);
                                            }
                                        }
                                }
                                if ((aux_var_NER_0d_read == true)) {
                                    cpp_current_dict["NER"] = var_NER_0d;
                                }
                                if ((aux_var_NEC_0d_read == true)) {
                                    cpp_current_dict["NEC"] = var_NEC_0d;
                                }
                                if ((var_ER_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_ER_1d;
                                        cpp_current_dict["ER"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["ER"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                if ((var_EC_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_EC_1d;
                                        cpp_current_dict["EC"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["EC"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                if ((var_F_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_F_1d;
                                        cpp_current_dict["F"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["F"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                cpp_current_dict = cpp_parent_dict;
                            }
                        }
                        // store data in Python dictionary
                        if ((aux_var_XMF1_0d_read == true)) {
                            cpp_current_dict["XMF1"] = var_XMF1_0d;
                        }
                        if ((aux_var_XLFS1_0d_read == true)) {
                            cpp_current_dict["XLFS1"] = var_XLFS1_0d;
                        }
                        if ((aux_var_MAT1_0d_read == true)) {
                            cpp_current_dict["MAT1"] = var_MAT1_0d;
                        }
                        if ((aux_var_MT1_0d_read == true)) {
                            cpp_current_dict["MT1"] = var_MT1_0d;
                        }
                        if ((aux_var_NC_0d_read == true)) {
                            cpp_current_dict["NC"] = var_NC_0d;
                        }
                        if ((aux_var_NI_0d_read == true)) {
                            cpp_current_dict["NI"] = var_NI_0d;
                        }
                        cpp_current_dict = cpp_parent_dict;
                    }
                }
            }
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_MTL_0d_read == true)) {
        cpp_current_dict["MTL"] = var_MTL_0d;
    }
    if ((aux_var_NL_0d_read == true)) {
        cpp_current_dict["NL"] = var_NL_0d;
    }
    return cpp_current_dict;
}

py::dict parse_mf32_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_NIS_0d;
    bool aux_var_NIS_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // assign expression to variable NIS
    var_NIS_0d = cpp_read_int_field(cpp_line, 4);
    aux_var_NIS_0d_read = true;

    for (int var_i_0d = 1;
         var_i_0d <= var_NIS_0d; var_i_0d++) {
        bool aux_var_i_0d_read = true;
        // open section isotope

        {
            py::dict cpp_parent_dict = cpp_current_dict;
            if (! cpp_parent_dict.contains("isotope")) {
                cpp_parent_dict["isotope"] = py::dict();
            }
            py::dict cpp_current_dict = cpp_parent_dict["isotope"];

            if (! cpp_current_dict.contains(py::cast(var_i_0d))) {
                cpp_current_dict[py::cast(var_i_0d)] = py::dict();
            }
            cpp_current_dict = cpp_current_dict[py::cast(var_i_0d)];
            // variable declarations
            double var_ZAI_0d;
            bool aux_var_ZAI_0d_read = false;
            double var_ABN_0d;
            bool aux_var_ABN_0d_read = false;
            int var_LFW_0d;
            bool aux_var_LFW_0d_read = false;
            int var_NER_0d;
            bool aux_var_NER_0d_read = false;
            cpp_line = cpp_read_line(cont);
            // read CONT record
            // assign expression to variable ZAI
            var_ZAI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_var_ZAI_0d_read = true;
            // assign expression to variable ABN
            var_ABN_0d = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_var_ABN_0d_read = true;
            // assign expression to variable LFW
            var_LFW_0d = cpp_read_int_field(cpp_line, 3);
            aux_var_LFW_0d_read = true;
            // assign expression to variable NER
            var_NER_0d = cpp_read_int_field(cpp_line, 4);
            aux_var_NER_0d_read = true;

            for (int var_j_0d = 1;
                 var_j_0d <= var_NER_0d; var_j_0d++) {
                bool aux_var_j_0d_read = true;
                // open section range

                {
                    py::dict cpp_parent_dict = cpp_current_dict;
                    if (! cpp_parent_dict.contains("range")) {
                        cpp_parent_dict["range"] = py::dict();
                    }
                    py::dict cpp_current_dict = cpp_parent_dict["range"];

                    if (! cpp_current_dict.contains(py::cast(var_j_0d))) {
                        cpp_current_dict[py::cast(var_j_0d)] = py::dict();
                    }
                    cpp_current_dict = cpp_current_dict[py::cast(var_j_0d)];
                    // variable declarations
                    double var_EL_0d;
                    bool aux_var_EL_0d_read = false;
                    double var_EH_0d;
                    bool aux_var_EH_0d_read = false;
                    int var_LRU_0d;
                    bool aux_var_LRU_0d_read = false;
                    int var_LRF_0d;
                    bool aux_var_LRF_0d_read = false;
                    int var_NRO_0d;
                    bool aux_var_NRO_0d_read = false;
                    int var_NAPS_0d;
                    bool aux_var_NAPS_0d_read = false;
                    int var_NI_0d;
                    bool aux_var_NI_0d_read = false;
                    double var_SPI_0d;
                    bool aux_var_SPI_0d_read = false;
                    double var_AP_0d;
                    bool aux_var_AP_0d_read = false;
                    int var_LCOMP_0d;
                    bool aux_var_LCOMP_0d_read = false;
                    int var_NLS_0d;
                    bool aux_var_NLS_0d_read = false;
                    int var_ISR_0d;
                    bool aux_var_ISR_0d_read = false;
                    double var_DAP_0d;
                    bool aux_var_DAP_0d_read = false;
                    double var_AWRI_0d;
                    bool aux_var_AWRI_0d_read = false;
                    int var_NSRS_0d;
                    bool aux_var_NSRS_0d_read = false;
                    int var_NLRS_0d;
                    bool aux_var_NLRS_0d_read = false;
                    int var_MLS_0d;
                    bool aux_var_MLS_0d_read = false;
                    NestedVector<double> var_DAP_1d;
                    int var_JCH_0d;
                    bool aux_var_JCH_0d_read = false;
                    int cpp_int_val;
                    bool aux_cpp_int_val_read = false;
                    int var_NCH_0d;
                    bool aux_var_NCH_0d_read = false;
                    Matrix2d<double> var_DAP_2d;
                    double var_QX_0d;
                    bool aux_var_QX_0d_read = false;
                    int var_LRX_0d;
                    bool aux_var_LRX_0d_read = false;
                    int var_NRSA_0d;
                    bool aux_var_NRSA_0d_read = false;
                    NestedVector<double> var_ER_1d;
                    NestedVector<double> var_AJ_1d;
                    NestedVector<double> var_GT_1d;
                    NestedVector<double> var_GN_1d;
                    NestedVector<double> var_GG_1d;
                    NestedVector<double> var_GF_1d;
                    NestedVector<double> var_DER_1d;
                    NestedVector<double> var_DGN_1d;
                    NestedVector<double> var_DGG_1d;
                    NestedVector<double> var_DGF_1d;
                    int var_NDIGIT_0d;
                    bool aux_var_NDIGIT_0d_read = false;
                    int var_NNN_0d;
                    bool aux_var_NNN_0d_read = false;
                    int var_NM_0d;
                    bool aux_var_NM_0d_read = false;
                    NestedVector<int> var_II_1d;
                    NestedVector<int> var_JJ_1d;
                    NestedVector<std::vector<int>> var_KIJ_1d;
                    int var_LAD_0d;
                    bool aux_var_LAD_0d_read = false;
                    double var_APL_0d;
                    bool aux_var_APL_0d_read = false;
                    NestedVector<double> var_GFA_1d;
                    NestedVector<double> var_GFB_1d;
                    NestedVector<double> var_DGFA_1d;
                    NestedVector<double> var_DGFB_1d;
                    int var_IFG_0d;
                    bool aux_var_IFG_0d_read = false;
                    int var_NJS_0d;
                    bool aux_var_NJS_0d_read = false;
                    int var_NJCH_0d;
                    bool aux_var_NJCH_0d_read = false;
                    int var_NPP_0d;
                    bool aux_var_NPP_0d_read = false;
                    int var_NJSX_0d;
                    bool aux_var_NJSX_0d_read = false;
                    NestedVector<double> var_MA_1d;
                    NestedVector<double> var_MB_1d;
                    NestedVector<double> var_ZA_1d;
                    NestedVector<double> var_ZB_1d;
                    NestedVector<double> var_IA_1d;
                    NestedVector<double> var_IB_1d;
                    NestedVector<double> var_Q_1d;
                    NestedVector<double> var_PNT_1d;
                    NestedVector<double> var_SHF_1d;
                    NestedVector<double> var_MT_1d;
                    NestedVector<double> var_PA_1d;
                    NestedVector<double> var_PB_1d;
                    int var_MPAR_0d;
                    bool aux_var_MPAR_0d_read = false;
                    int var_NPAR_0d;
                    bool aux_var_NPAR_0d_read = false;
                    Matrix2d<double> var_RV_2d;
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable EL
                    var_EL_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_var_EL_0d_read = true;
                    // assign expression to variable EH
                    var_EH_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_var_EH_0d_read = true;
                    // assign expression to variable LRU
                    var_LRU_0d = cpp_read_int_field(cpp_line, 2);
                    aux_var_LRU_0d_read = true;
                    // assign expression to variable LRF
                    var_LRF_0d = cpp_read_int_field(cpp_line, 3);
                    aux_var_LRF_0d_read = true;
                    // assign expression to variable NRO
                    var_NRO_0d = cpp_read_int_field(cpp_line, 4);
                    aux_var_NRO_0d_read = true;
                    // assign expression to variable NAPS
                    var_NAPS_0d = cpp_read_int_field(cpp_line, 5);
                    aux_var_NAPS_0d_read = true;
                    // evaluate if-elif-else clause
                    {
                        bool cpp_found_match = false;
                        if (! cpp_found_match) {
                            if (((((((var_NRO_0d)!=(0))))))) {
                                // if statement evaluation
                                cpp_found_match = true;
                                cpp_line = cpp_read_line(cont);
                                // read CONT record
                                // assign expression to variable NI
                                var_NI_0d = cpp_read_int_field(cpp_line, 5);
                                aux_var_NI_0d_read = true;
                            }
                        }
                    }
                    // evaluate if-elif-else clause
                    {
                        bool cpp_found_match = false;
                        if (! cpp_found_match) {
                            // if statement evaluation with lookahead
                            {
                                std::streampos cpp_old_streampos = cont.tellg();
                                {
                                    // variable declarations
                                    double& glob_var_EL_0d = var_EL_0d;
                                    double var_EL_0d = glob_var_EL_0d;
                                    bool& glob_aux_var_EL_0d_read = aux_var_EL_0d_read;
                                    bool aux_var_EL_0d_read = glob_aux_var_EL_0d_read;
                                    double& glob_var_EH_0d = var_EH_0d;
                                    double var_EH_0d = glob_var_EH_0d;
                                    bool& glob_aux_var_EH_0d_read = aux_var_EH_0d_read;
                                    bool aux_var_EH_0d_read = glob_aux_var_EH_0d_read;
                                    int& glob_var_LRU_0d = var_LRU_0d;
                                    int var_LRU_0d = glob_var_LRU_0d;
                                    bool& glob_aux_var_LRU_0d_read = aux_var_LRU_0d_read;
                                    bool aux_var_LRU_0d_read = glob_aux_var_LRU_0d_read;
                                    int& glob_var_LRF_0d = var_LRF_0d;
                                    int var_LRF_0d = glob_var_LRF_0d;
                                    bool& glob_aux_var_LRF_0d_read = aux_var_LRF_0d_read;
                                    bool aux_var_LRF_0d_read = glob_aux_var_LRF_0d_read;
                                    int& glob_var_NRO_0d = var_NRO_0d;
                                    int var_NRO_0d = glob_var_NRO_0d;
                                    bool& glob_aux_var_NRO_0d_read = aux_var_NRO_0d_read;
                                    bool aux_var_NRO_0d_read = glob_aux_var_NRO_0d_read;
                                    int& glob_var_NAPS_0d = var_NAPS_0d;
                                    int var_NAPS_0d = glob_var_NAPS_0d;
                                    bool& glob_aux_var_NAPS_0d_read = aux_var_NAPS_0d_read;
                                    bool aux_var_NAPS_0d_read = glob_aux_var_NAPS_0d_read;
                                    int& glob_var_NI_0d = var_NI_0d;
                                    int var_NI_0d = glob_var_NI_0d;
                                    bool& glob_aux_var_NI_0d_read = aux_var_NI_0d_read;
                                    bool aux_var_NI_0d_read = glob_aux_var_NI_0d_read;
                                    double& glob_var_SPI_0d = var_SPI_0d;
                                    double var_SPI_0d = glob_var_SPI_0d;
                                    bool& glob_aux_var_SPI_0d_read = aux_var_SPI_0d_read;
                                    bool aux_var_SPI_0d_read = glob_aux_var_SPI_0d_read;
                                    double& glob_var_AP_0d = var_AP_0d;
                                    double var_AP_0d = glob_var_AP_0d;
                                    bool& glob_aux_var_AP_0d_read = aux_var_AP_0d_read;
                                    bool aux_var_AP_0d_read = glob_aux_var_AP_0d_read;
                                    int& glob_var_LCOMP_0d = var_LCOMP_0d;
                                    int var_LCOMP_0d = glob_var_LCOMP_0d;
                                    bool& glob_aux_var_LCOMP_0d_read = aux_var_LCOMP_0d_read;
                                    bool aux_var_LCOMP_0d_read = glob_aux_var_LCOMP_0d_read;
                                    int& glob_var_NLS_0d = var_NLS_0d;
                                    int var_NLS_0d = glob_var_NLS_0d;
                                    bool& glob_aux_var_NLS_0d_read = aux_var_NLS_0d_read;
                                    bool aux_var_NLS_0d_read = glob_aux_var_NLS_0d_read;
                                    int& glob_var_ISR_0d = var_ISR_0d;
                                    int var_ISR_0d = glob_var_ISR_0d;
                                    bool& glob_aux_var_ISR_0d_read = aux_var_ISR_0d_read;
                                    bool aux_var_ISR_0d_read = glob_aux_var_ISR_0d_read;
                                    cpp_line = cpp_read_line(cont);
                                    // read CONT record
                                    // assign expression to variable SPI
                                    var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                    aux_var_SPI_0d_read = true;
                                    // assign expression to variable AP
                                    var_AP_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                    aux_var_AP_0d_read = true;
                                    // assign expression to variable LCOMP
                                    var_LCOMP_0d = cpp_read_int_field(cpp_line, 3);
                                    aux_var_LCOMP_0d_read = true;
                                    // assign expression to variable NLS
                                    var_NLS_0d = cpp_read_int_field(cpp_line, 4);
                                    aux_var_NLS_0d_read = true;
                                    // assign expression to variable ISR
                                    var_ISR_0d = cpp_read_int_field(cpp_line, 5);
                                    aux_var_ISR_0d_read = true;
                                    if (((((((((var_LCOMP_0d)==(0))))&&(((var_LRU_0d)==(1))))&&((((((((var_LRF_0d)==(1)))))||((((var_LRF_0d)==(2))))))))))) {
                                        cpp_found_match = true;
                                    }
                                    cont.seekg(cpp_old_streampos);
                                }
                                if (cpp_found_match) {
                                    cpp_line = cpp_read_line(cont);
                                    // read CONT record
                                    // assign expression to variable SPI
                                    var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                    aux_var_SPI_0d_read = true;
                                    // assign expression to variable AP
                                    var_AP_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                    aux_var_AP_0d_read = true;
                                    // assign expression to variable LCOMP
                                    var_LCOMP_0d = cpp_read_int_field(cpp_line, 3);
                                    aux_var_LCOMP_0d_read = true;
                                    // assign expression to variable NLS
                                    var_NLS_0d = cpp_read_int_field(cpp_line, 4);
                                    aux_var_NLS_0d_read = true;
                                    // assign expression to variable ISR
                                    var_ISR_0d = cpp_read_int_field(cpp_line, 5);
                                    aux_var_ISR_0d_read = true;
                                    // evaluate if-elif-else clause
                                    {
                                        bool cpp_found_match = false;
                                        if (! cpp_found_match) {
                                            if (((((((var_ISR_0d)!=(0))))))) {
                                                // if statement evaluation
                                                cpp_found_match = true;
                                                cpp_line = cpp_read_line(cont);
                                                // read CONT record
                                                // assign expression to variable DAP
                                                var_DAP_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                aux_var_DAP_0d_read = true;
                                            }
                                        }
                                    }

                                    for (int var_k_0d = 1;
                                         var_k_0d <= var_NLS_0d; var_k_0d++) {
                                        bool aux_var_k_0d_read = true;
                                        // open section somesec

                                        {
                                            py::dict cpp_parent_dict = cpp_current_dict;
                                            if (! cpp_parent_dict.contains("somesec")) {
                                                cpp_parent_dict["somesec"] = py::dict();
                                            }
                                            py::dict cpp_current_dict = cpp_parent_dict["somesec"];

                                            if (! cpp_current_dict.contains(py::cast(var_k_0d))) {
                                                cpp_current_dict[py::cast(var_k_0d)] = py::dict();
                                            }
                                            cpp_current_dict = cpp_current_dict[py::cast(var_k_0d)];
                                            // variable declarations
                                            double var_AWRI_0d;
                                            bool aux_var_AWRI_0d_read = false;
                                            int var_L_0d;
                                            bool aux_var_L_0d_read = false;
                                            int cpp_int_val;
                                            bool aux_cpp_int_val_read = false;
                                            int var_NRS_0d;
                                            bool aux_var_NRS_0d_read = false;
                                            NestedVector<double> var_ER_1d;
                                            NestedVector<double> var_AJ_1d;
                                            NestedVector<double> var_GT_1d;
                                            NestedVector<double> var_GN_1d;
                                            NestedVector<double> var_GG_1d;
                                            NestedVector<double> var_GF_1d;
                                            NestedVector<double> var_DE2_1d;
                                            NestedVector<double> var_DN2_1d;
                                            NestedVector<double> var_DNDG_1d;
                                            NestedVector<double> var_DG2_1d;
                                            NestedVector<double> var_DNDF_1d;
                                            NestedVector<double> var_DGDF_1d;
                                            NestedVector<double> var_DF2_1d;
                                            NestedVector<double> var_DJDN_1d;
                                            NestedVector<double> var_DJDG_1d;
                                            NestedVector<double> var_DJDF_1d;
                                            NestedVector<double> var_DJ2_1d;
                                            cpp_line = cpp_read_line(cont);
                                            // read LIST record
                                            // assign expression to variable AWRI
                                            var_AWRI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                            aux_var_AWRI_0d_read = true;
                                            // assign expression to variable L
                                            var_L_0d = cpp_read_int_field(cpp_line, 2);
                                            aux_var_L_0d_read = true;
                                            // assign expression to variable cpp_int_val
                                            cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                            aux_cpp_int_val_read = true;
                                            // assign expression to variable NRS
                                            var_NRS_0d = (cpp_int_val/18);
                                            aux_var_NRS_0d_read = true;
                                            if ((! (aux_var_NRS_0d_read == true))) {
                                                // assign expression to variable NRS
                                                var_NRS_0d = cpp_read_int_field(cpp_line, 5);
                                                aux_var_NRS_0d_read = true;
                                            }
                                            {
                                                int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                int cpp_j = 0;
                                                // read LIST body

                                                for (int var_m_0d = 1;
                                                     var_m_0d <= var_NRS_0d; var_m_0d++) {
                                                    bool aux_var_m_0d_read = true;
                                                    // read LIST body
                                                    // assign expression to variable ER
                                                    var_ER_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable AJ
                                                    var_AJ_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable GT
                                                    var_GT_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable GN
                                                    var_GN_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable GG
                                                    var_GG_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable GF
                                                    var_GF_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable DE2
                                                    var_DE2_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable DN2
                                                    var_DN2_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable DNDG
                                                    var_DNDG_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable DG2
                                                    var_DG2_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable DNDF
                                                    var_DNDF_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable DGDF
                                                    var_DGDF_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable DF2
                                                    var_DF2_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable DJDN
                                                    var_DJDN_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable DJDG
                                                    var_DJDG_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable DJDF
                                                    var_DJDF_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable DJ2
                                                    var_DJ2_1d.set(var_m_0d, cpp_floatvec[cpp_j++]);
                                                    cpp_j++;
                                                }
                                            }
                                            // store data in Python dictionary
                                            if ((aux_var_AWRI_0d_read == true)) {
                                                cpp_current_dict["AWRI"] = var_AWRI_0d;
                                            }
                                            if ((aux_var_L_0d_read == true)) {
                                                cpp_current_dict["L"] = var_L_0d;
                                            }
                                            if ((aux_var_NRS_0d_read == true)) {
                                                cpp_current_dict["NRS"] = var_NRS_0d;
                                            }
                                            if ((var_ER_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_ER_1d;
                                                    cpp_current_dict["ER"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["ER"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            if ((var_AJ_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_AJ_1d;
                                                    cpp_current_dict["AJ"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["AJ"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            if ((var_GT_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_GT_1d;
                                                    cpp_current_dict["GT"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["GT"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            if ((var_GN_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_GN_1d;
                                                    cpp_current_dict["GN"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["GN"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            if ((var_GG_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_GG_1d;
                                                    cpp_current_dict["GG"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["GG"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            if ((var_GF_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_GF_1d;
                                                    cpp_current_dict["GF"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["GF"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            if ((var_DE2_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_DE2_1d;
                                                    cpp_current_dict["DE2"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["DE2"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            if ((var_DN2_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_DN2_1d;
                                                    cpp_current_dict["DN2"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["DN2"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            if ((var_DNDG_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_DNDG_1d;
                                                    cpp_current_dict["DNDG"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["DNDG"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            if ((var_DG2_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_DG2_1d;
                                                    cpp_current_dict["DG2"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["DG2"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            if ((var_DNDF_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_DNDF_1d;
                                                    cpp_current_dict["DNDF"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["DNDF"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            if ((var_DGDF_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_DGDF_1d;
                                                    cpp_current_dict["DGDF"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["DGDF"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            if ((var_DF2_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_DF2_1d;
                                                    cpp_current_dict["DF2"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["DF2"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            if ((var_DJDN_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_DJDN_1d;
                                                    cpp_current_dict["DJDN"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["DJDN"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            if ((var_DJDG_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_DJDG_1d;
                                                    cpp_current_dict["DJDG"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["DJDG"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            if ((var_DJDF_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_DJDF_1d;
                                                    cpp_current_dict["DJDF"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["DJDF"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            if ((var_DJ2_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_DJ2_1d;
                                                    cpp_current_dict["DJ2"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["DJ2"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            cpp_current_dict = cpp_parent_dict;
                                        }
                                    }
                                }
                            }
                        }
                        if (! cpp_found_match) {
                            if (! cpp_found_match) {
                                // if statement evaluation with lookahead
                                {
                                    std::streampos cpp_old_streampos = cont.tellg();
                                    {
                                        // variable declarations
                                        double& glob_var_EL_0d = var_EL_0d;
                                        double var_EL_0d = glob_var_EL_0d;
                                        bool& glob_aux_var_EL_0d_read = aux_var_EL_0d_read;
                                        bool aux_var_EL_0d_read = glob_aux_var_EL_0d_read;
                                        double& glob_var_EH_0d = var_EH_0d;
                                        double var_EH_0d = glob_var_EH_0d;
                                        bool& glob_aux_var_EH_0d_read = aux_var_EH_0d_read;
                                        bool aux_var_EH_0d_read = glob_aux_var_EH_0d_read;
                                        int& glob_var_LRU_0d = var_LRU_0d;
                                        int var_LRU_0d = glob_var_LRU_0d;
                                        bool& glob_aux_var_LRU_0d_read = aux_var_LRU_0d_read;
                                        bool aux_var_LRU_0d_read = glob_aux_var_LRU_0d_read;
                                        int& glob_var_LRF_0d = var_LRF_0d;
                                        int var_LRF_0d = glob_var_LRF_0d;
                                        bool& glob_aux_var_LRF_0d_read = aux_var_LRF_0d_read;
                                        bool aux_var_LRF_0d_read = glob_aux_var_LRF_0d_read;
                                        int& glob_var_NRO_0d = var_NRO_0d;
                                        int var_NRO_0d = glob_var_NRO_0d;
                                        bool& glob_aux_var_NRO_0d_read = aux_var_NRO_0d_read;
                                        bool aux_var_NRO_0d_read = glob_aux_var_NRO_0d_read;
                                        int& glob_var_NAPS_0d = var_NAPS_0d;
                                        int var_NAPS_0d = glob_var_NAPS_0d;
                                        bool& glob_aux_var_NAPS_0d_read = aux_var_NAPS_0d_read;
                                        bool aux_var_NAPS_0d_read = glob_aux_var_NAPS_0d_read;
                                        int& glob_var_NI_0d = var_NI_0d;
                                        int var_NI_0d = glob_var_NI_0d;
                                        bool& glob_aux_var_NI_0d_read = aux_var_NI_0d_read;
                                        bool aux_var_NI_0d_read = glob_aux_var_NI_0d_read;
                                        double& glob_var_SPI_0d = var_SPI_0d;
                                        double var_SPI_0d = glob_var_SPI_0d;
                                        bool& glob_aux_var_SPI_0d_read = aux_var_SPI_0d_read;
                                        bool aux_var_SPI_0d_read = glob_aux_var_SPI_0d_read;
                                        double& glob_var_AP_0d = var_AP_0d;
                                        double var_AP_0d = glob_var_AP_0d;
                                        bool& glob_aux_var_AP_0d_read = aux_var_AP_0d_read;
                                        bool aux_var_AP_0d_read = glob_aux_var_AP_0d_read;
                                        int& glob_var_LCOMP_0d = var_LCOMP_0d;
                                        int var_LCOMP_0d = glob_var_LCOMP_0d;
                                        bool& glob_aux_var_LCOMP_0d_read = aux_var_LCOMP_0d_read;
                                        bool aux_var_LCOMP_0d_read = glob_aux_var_LCOMP_0d_read;
                                        int& glob_var_NLS_0d = var_NLS_0d;
                                        int var_NLS_0d = glob_var_NLS_0d;
                                        bool& glob_aux_var_NLS_0d_read = aux_var_NLS_0d_read;
                                        bool aux_var_NLS_0d_read = glob_aux_var_NLS_0d_read;
                                        int& glob_var_ISR_0d = var_ISR_0d;
                                        int var_ISR_0d = glob_var_ISR_0d;
                                        bool& glob_aux_var_ISR_0d_read = aux_var_ISR_0d_read;
                                        bool aux_var_ISR_0d_read = glob_aux_var_ISR_0d_read;
                                        cpp_line = cpp_read_line(cont);
                                        // read CONT record
                                        // assign expression to variable SPI
                                        var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                        aux_var_SPI_0d_read = true;
                                        // assign expression to variable AP
                                        var_AP_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                        aux_var_AP_0d_read = true;
                                        // assign expression to variable LCOMP
                                        var_LCOMP_0d = cpp_read_int_field(cpp_line, 3);
                                        aux_var_LCOMP_0d_read = true;
                                        // assign expression to variable NLS
                                        var_NLS_0d = cpp_read_int_field(cpp_line, 4);
                                        aux_var_NLS_0d_read = true;
                                        // assign expression to variable ISR
                                        var_ISR_0d = cpp_read_int_field(cpp_line, 5);
                                        aux_var_ISR_0d_read = true;
                                        if (((((((((var_LCOMP_0d)==(1))))&&(((var_LRU_0d)==(1))))&&((((((((var_LRF_0d)==(1)))))||((((var_LRF_0d)==(2))))))))))) {
                                            cpp_found_match = true;
                                        }
                                        cont.seekg(cpp_old_streampos);
                                    }
                                    if (cpp_found_match) {
                                        cpp_line = cpp_read_line(cont);
                                        // read CONT record
                                        // assign expression to variable SPI
                                        var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                        aux_var_SPI_0d_read = true;
                                        // assign expression to variable AP
                                        var_AP_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                        aux_var_AP_0d_read = true;
                                        // assign expression to variable LCOMP
                                        var_LCOMP_0d = cpp_read_int_field(cpp_line, 3);
                                        aux_var_LCOMP_0d_read = true;
                                        // assign expression to variable NLS
                                        var_NLS_0d = cpp_read_int_field(cpp_line, 4);
                                        aux_var_NLS_0d_read = true;
                                        // assign expression to variable ISR
                                        var_ISR_0d = cpp_read_int_field(cpp_line, 5);
                                        aux_var_ISR_0d_read = true;
                                        // evaluate if-elif-else clause
                                        {
                                            bool cpp_found_match = false;
                                            if (! cpp_found_match) {
                                                if (((((((var_ISR_0d)>(0))))))) {
                                                    // if statement evaluation
                                                    cpp_found_match = true;
                                                    cpp_line = cpp_read_line(cont);
                                                    // read CONT record
                                                    // assign expression to variable DAP
                                                    var_DAP_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                    aux_var_DAP_0d_read = true;
                                                }
                                            }
                                        }
                                        cpp_line = cpp_read_line(cont);
                                        // read CONT record
                                        // assign expression to variable AWRI
                                        var_AWRI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                        aux_var_AWRI_0d_read = true;
                                        // assign expression to variable NSRS
                                        var_NSRS_0d = cpp_read_int_field(cpp_line, 4);
                                        aux_var_NSRS_0d_read = true;
                                        // assign expression to variable NLRS
                                        var_NLRS_0d = cpp_read_int_field(cpp_line, 5);
                                        aux_var_NLRS_0d_read = true;

                                        for (int var_p_0d = 1;
                                             var_p_0d <= var_NSRS_0d; var_p_0d++) {
                                            bool aux_var_p_0d_read = true;
                                            // open section nsrs_subsec

                                            {
                                                py::dict cpp_parent_dict = cpp_current_dict;
                                                if (! cpp_parent_dict.contains("nsrs_subsec")) {
                                                    cpp_parent_dict["nsrs_subsec"] = py::dict();
                                                }
                                                py::dict cpp_current_dict = cpp_parent_dict["nsrs_subsec"];

                                                if (! cpp_current_dict.contains(py::cast(var_p_0d))) {
                                                    cpp_current_dict[py::cast(var_p_0d)] = py::dict();
                                                }
                                                cpp_current_dict = cpp_current_dict[py::cast(var_p_0d)];
                                                // variable declarations
                                                int var_MPAR_0d;
                                                bool aux_var_MPAR_0d_read = false;
                                                int var_NRB_0d;
                                                bool aux_var_NRB_0d_read = false;
                                                NestedVector<double> var_ER_1d;
                                                NestedVector<double> var_AJ_1d;
                                                NestedVector<double> var_GT_1d;
                                                NestedVector<double> var_GN_1d;
                                                NestedVector<double> var_GG_1d;
                                                NestedVector<double> var_GF_1d;
                                                Matrix2d<double> var_V_2d;
                                                cpp_line = cpp_read_line(cont);
                                                // read LIST record
                                                // assign expression to variable MPAR
                                                var_MPAR_0d = cpp_read_int_field(cpp_line, 2);
                                                aux_var_MPAR_0d_read = true;
                                                // assign expression to variable NRB
                                                var_NRB_0d = cpp_read_int_field(cpp_line, 5);
                                                aux_var_NRB_0d_read = true;
                                                if ((! (aux_var_NRB_0d_read == true))) {
                                                    throw std::runtime_error("The equation ((6*NRB)+(((MPAR*NRB)*((MPAR*NRB)+1))/2))==value cannot be solved for NRB because this variable could not be isolated.");
                                                }
                                                if ((! (aux_var_MPAR_0d_read == true))) {
                                                    throw std::runtime_error("The equation ((6*NRB)+(((MPAR*NRB)*((MPAR*NRB)+1))/2))==value cannot be solved for MPAR because this variable could not be isolated.");
                                                }
                                                {
                                                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                    int cpp_j = 0;
                                                    // read LIST body

                                                    for (int var_k_0d = 1;
                                                         var_k_0d <= var_NRB_0d; var_k_0d++) {
                                                        bool aux_var_k_0d_read = true;
                                                        // read LIST body
                                                        // assign expression to variable ER
                                                        var_ER_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable AJ
                                                        var_AJ_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable GT
                                                        var_GT_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable GN
                                                        var_GN_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable GG
                                                        var_GG_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable GF
                                                        var_GF_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                    }
                                                    var_V_2d.init(1, (var_MPAR_0d*var_NRB_0d), 1, (var_MPAR_0d*var_NRB_0d), true, false);

                                                    for (int var_m_0d = 1;
                                                         var_m_0d <= (var_MPAR_0d*var_NRB_0d); var_m_0d++) {
                                                        bool aux_var_m_0d_read = true;
                                                        // read LIST body

                                                        for (int var_n_0d = var_m_0d;
                                                             var_n_0d <= (var_MPAR_0d*var_NRB_0d); var_n_0d++) {
                                                            bool aux_var_n_0d_read = true;
                                                            // read LIST body
                                                            // assign expression to variable V
                                                            var_V_2d(var_m_0d, var_n_0d) = cpp_floatvec[cpp_j++];
                                                        }
                                                    }
                                                }
                                                // store data in Python dictionary
                                                if ((aux_var_MPAR_0d_read == true)) {
                                                    cpp_current_dict["MPAR"] = var_MPAR_0d;
                                                }
                                                if ((aux_var_NRB_0d_read == true)) {
                                                    cpp_current_dict["NRB"] = var_NRB_0d;
                                                }
                                                if ((var_ER_1d.get_last_index() != -1)) {
                                                        auto& cpp_curvar0 = var_ER_1d;
                                                        cpp_current_dict["ER"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["ER"];
                                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                        }
                                                }
                                                if ((var_AJ_1d.get_last_index() != -1)) {
                                                        auto& cpp_curvar0 = var_AJ_1d;
                                                        cpp_current_dict["AJ"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["AJ"];
                                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                        }
                                                }
                                                if ((var_GT_1d.get_last_index() != -1)) {
                                                        auto& cpp_curvar0 = var_GT_1d;
                                                        cpp_current_dict["GT"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["GT"];
                                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                        }
                                                }
                                                if ((var_GN_1d.get_last_index() != -1)) {
                                                        auto& cpp_curvar0 = var_GN_1d;
                                                        cpp_current_dict["GN"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["GN"];
                                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                        }
                                                }
                                                if ((var_GG_1d.get_last_index() != -1)) {
                                                        auto& cpp_curvar0 = var_GG_1d;
                                                        cpp_current_dict["GG"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["GG"];
                                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                        }
                                                }
                                                if ((var_GF_1d.get_last_index() != -1)) {
                                                        auto& cpp_curvar0 = var_GF_1d;
                                                        cpp_current_dict["GF"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["GF"];
                                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                        }
                                                }
                                                if (var_V_2d.did_read()) {
                                                        cpp_current_dict["V"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["V"];
                                                        for (int cpp_i1 = var_V_2d.get_row_start_index(); cpp_i1 <= var_V_2d.get_row_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                                                            py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                                                            for (int cpp_i2 = var_V_2d.get_col_start_index(cpp_i1); cpp_i2 <= var_V_2d.get_col_last_index(cpp_i1); cpp_i2++) {
                                                                cpp_curdict1[py::cast(cpp_i2)] = var_V_2d(cpp_i1, cpp_i2);
                                                            }
                                                        }
                                                }
                                                cpp_current_dict = cpp_parent_dict;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (! cpp_found_match) {
                            if (! cpp_found_match) {
                                // if statement evaluation with lookahead
                                {
                                    std::streampos cpp_old_streampos = cont.tellg();
                                    {
                                        // variable declarations
                                        double& glob_var_EL_0d = var_EL_0d;
                                        double var_EL_0d = glob_var_EL_0d;
                                        bool& glob_aux_var_EL_0d_read = aux_var_EL_0d_read;
                                        bool aux_var_EL_0d_read = glob_aux_var_EL_0d_read;
                                        double& glob_var_EH_0d = var_EH_0d;
                                        double var_EH_0d = glob_var_EH_0d;
                                        bool& glob_aux_var_EH_0d_read = aux_var_EH_0d_read;
                                        bool aux_var_EH_0d_read = glob_aux_var_EH_0d_read;
                                        int& glob_var_LRU_0d = var_LRU_0d;
                                        int var_LRU_0d = glob_var_LRU_0d;
                                        bool& glob_aux_var_LRU_0d_read = aux_var_LRU_0d_read;
                                        bool aux_var_LRU_0d_read = glob_aux_var_LRU_0d_read;
                                        int& glob_var_LRF_0d = var_LRF_0d;
                                        int var_LRF_0d = glob_var_LRF_0d;
                                        bool& glob_aux_var_LRF_0d_read = aux_var_LRF_0d_read;
                                        bool aux_var_LRF_0d_read = glob_aux_var_LRF_0d_read;
                                        int& glob_var_NRO_0d = var_NRO_0d;
                                        int var_NRO_0d = glob_var_NRO_0d;
                                        bool& glob_aux_var_NRO_0d_read = aux_var_NRO_0d_read;
                                        bool aux_var_NRO_0d_read = glob_aux_var_NRO_0d_read;
                                        int& glob_var_NAPS_0d = var_NAPS_0d;
                                        int var_NAPS_0d = glob_var_NAPS_0d;
                                        bool& glob_aux_var_NAPS_0d_read = aux_var_NAPS_0d_read;
                                        bool aux_var_NAPS_0d_read = glob_aux_var_NAPS_0d_read;
                                        int& glob_var_NI_0d = var_NI_0d;
                                        int var_NI_0d = glob_var_NI_0d;
                                        bool& glob_aux_var_NI_0d_read = aux_var_NI_0d_read;
                                        bool aux_var_NI_0d_read = glob_aux_var_NI_0d_read;
                                        double& glob_var_SPI_0d = var_SPI_0d;
                                        double var_SPI_0d = glob_var_SPI_0d;
                                        bool& glob_aux_var_SPI_0d_read = aux_var_SPI_0d_read;
                                        bool aux_var_SPI_0d_read = glob_aux_var_SPI_0d_read;
                                        double& glob_var_AP_0d = var_AP_0d;
                                        double var_AP_0d = glob_var_AP_0d;
                                        bool& glob_aux_var_AP_0d_read = aux_var_AP_0d_read;
                                        bool aux_var_AP_0d_read = glob_aux_var_AP_0d_read;
                                        int& glob_var_LCOMP_0d = var_LCOMP_0d;
                                        int var_LCOMP_0d = glob_var_LCOMP_0d;
                                        bool& glob_aux_var_LCOMP_0d_read = aux_var_LCOMP_0d_read;
                                        bool aux_var_LCOMP_0d_read = glob_aux_var_LCOMP_0d_read;
                                        int& glob_var_NLS_0d = var_NLS_0d;
                                        int var_NLS_0d = glob_var_NLS_0d;
                                        bool& glob_aux_var_NLS_0d_read = aux_var_NLS_0d_read;
                                        bool aux_var_NLS_0d_read = glob_aux_var_NLS_0d_read;
                                        int& glob_var_ISR_0d = var_ISR_0d;
                                        int var_ISR_0d = glob_var_ISR_0d;
                                        bool& glob_aux_var_ISR_0d_read = aux_var_ISR_0d_read;
                                        bool aux_var_ISR_0d_read = glob_aux_var_ISR_0d_read;
                                        cpp_line = cpp_read_line(cont);
                                        // read CONT record
                                        // assign expression to variable SPI
                                        var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                        aux_var_SPI_0d_read = true;
                                        // assign expression to variable AP
                                        var_AP_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                        aux_var_AP_0d_read = true;
                                        // assign expression to variable LCOMP
                                        var_LCOMP_0d = cpp_read_int_field(cpp_line, 3);
                                        aux_var_LCOMP_0d_read = true;
                                        // assign expression to variable NLS
                                        var_NLS_0d = cpp_read_int_field(cpp_line, 4);
                                        aux_var_NLS_0d_read = true;
                                        // assign expression to variable ISR
                                        var_ISR_0d = cpp_read_int_field(cpp_line, 5);
                                        aux_var_ISR_0d_read = true;
                                        if (((((((((var_LCOMP_0d)==(1))))&&(((var_LRU_0d)==(1))))&&(((var_LRF_0d)==(3))))))) {
                                            cpp_found_match = true;
                                        }
                                        cont.seekg(cpp_old_streampos);
                                    }
                                    if (cpp_found_match) {
                                        cpp_line = cpp_read_line(cont);
                                        // read CONT record
                                        // assign expression to variable SPI
                                        var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                        aux_var_SPI_0d_read = true;
                                        // assign expression to variable AP
                                        var_AP_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                        aux_var_AP_0d_read = true;
                                        // assign expression to variable LCOMP
                                        var_LCOMP_0d = cpp_read_int_field(cpp_line, 3);
                                        aux_var_LCOMP_0d_read = true;
                                        // assign expression to variable NLS
                                        var_NLS_0d = cpp_read_int_field(cpp_line, 4);
                                        aux_var_NLS_0d_read = true;
                                        // assign expression to variable ISR
                                        var_ISR_0d = cpp_read_int_field(cpp_line, 5);
                                        aux_var_ISR_0d_read = true;
                                        // evaluate if-elif-else clause
                                        {
                                            bool cpp_found_match = false;
                                            if (! cpp_found_match) {
                                                if (((((((var_ISR_0d)>(0))))))) {
                                                    // if statement evaluation
                                                    cpp_found_match = true;
                                                    cpp_line = cpp_read_line(cont);
                                                    // read LIST record
                                                    // assign expression to variable MLS
                                                    var_MLS_0d = cpp_read_int_field(cpp_line, 4);
                                                    aux_var_MLS_0d_read = true;
                                                    {
                                                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                        int cpp_j = 0;
                                                        // read LIST body

                                                        for (int var_k_0d = 1;
                                                             var_k_0d <= var_MLS_0d; var_k_0d++) {
                                                            bool aux_var_k_0d_read = true;
                                                            // read LIST body
                                                            // assign expression to variable DAP
                                                            var_DAP_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        cpp_line = cpp_read_line(cont);
                                        // read CONT record
                                        // assign expression to variable AWRI
                                        var_AWRI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                        aux_var_AWRI_0d_read = true;
                                        // assign expression to variable NSRS
                                        var_NSRS_0d = cpp_read_int_field(cpp_line, 4);
                                        aux_var_NSRS_0d_read = true;
                                        // assign expression to variable NLRS
                                        var_NLRS_0d = cpp_read_int_field(cpp_line, 5);
                                        aux_var_NLRS_0d_read = true;

                                        for (int var_p_0d = 1;
                                             var_p_0d <= var_NSRS_0d; var_p_0d++) {
                                            bool aux_var_p_0d_read = true;
                                            // open section nsrs_subsec

                                            {
                                                py::dict cpp_parent_dict = cpp_current_dict;
                                                if (! cpp_parent_dict.contains("nsrs_subsec")) {
                                                    cpp_parent_dict["nsrs_subsec"] = py::dict();
                                                }
                                                py::dict cpp_current_dict = cpp_parent_dict["nsrs_subsec"];

                                                if (! cpp_current_dict.contains(py::cast(var_p_0d))) {
                                                    cpp_current_dict[py::cast(var_p_0d)] = py::dict();
                                                }
                                                cpp_current_dict = cpp_current_dict[py::cast(var_p_0d)];
                                                // variable declarations
                                                int var_MPAR_0d;
                                                bool aux_var_MPAR_0d_read = false;
                                                int var_NRB_0d;
                                                bool aux_var_NRB_0d_read = false;
                                                NestedVector<double> var_ER_1d;
                                                NestedVector<double> var_AJ_1d;
                                                NestedVector<double> var_GN_1d;
                                                NestedVector<double> var_GG_1d;
                                                NestedVector<double> var_GFA_1d;
                                                NestedVector<double> var_GFB_1d;
                                                Matrix2d<double> var_V_2d;
                                                cpp_line = cpp_read_line(cont);
                                                // read LIST record
                                                // assign expression to variable MPAR
                                                var_MPAR_0d = cpp_read_int_field(cpp_line, 2);
                                                aux_var_MPAR_0d_read = true;
                                                // assign expression to variable NRB
                                                var_NRB_0d = cpp_read_int_field(cpp_line, 5);
                                                aux_var_NRB_0d_read = true;
                                                if ((! (aux_var_NRB_0d_read == true))) {
                                                    throw std::runtime_error("The equation ((6*NRB)+(((MPAR*NRB)*((MPAR*NRB)+1))/2))==value cannot be solved for NRB because this variable could not be isolated.");
                                                }
                                                if ((! (aux_var_MPAR_0d_read == true))) {
                                                    throw std::runtime_error("The equation ((6*NRB)+(((MPAR*NRB)*((MPAR*NRB)+1))/2))==value cannot be solved for MPAR because this variable could not be isolated.");
                                                }
                                                {
                                                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                    int cpp_j = 0;
                                                    // read LIST body

                                                    for (int var_k_0d = 1;
                                                         var_k_0d <= var_NRB_0d; var_k_0d++) {
                                                        bool aux_var_k_0d_read = true;
                                                        // read LIST body
                                                        // assign expression to variable ER
                                                        var_ER_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable AJ
                                                        var_AJ_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable GN
                                                        var_GN_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable GG
                                                        var_GG_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable GFA
                                                        var_GFA_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable GFB
                                                        var_GFB_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                    }
                                                    var_V_2d.init(1, (var_MPAR_0d*var_NRB_0d), 1, (var_MPAR_0d*var_NRB_0d), true, false);

                                                    for (int var_m_0d = 1;
                                                         var_m_0d <= (var_MPAR_0d*var_NRB_0d); var_m_0d++) {
                                                        bool aux_var_m_0d_read = true;
                                                        // read LIST body

                                                        for (int var_n_0d = var_m_0d;
                                                             var_n_0d <= (var_MPAR_0d*var_NRB_0d); var_n_0d++) {
                                                            bool aux_var_n_0d_read = true;
                                                            // read LIST body
                                                            // assign expression to variable V
                                                            var_V_2d(var_m_0d, var_n_0d) = cpp_floatvec[cpp_j++];
                                                        }
                                                    }
                                                }
                                                // store data in Python dictionary
                                                if ((aux_var_MPAR_0d_read == true)) {
                                                    cpp_current_dict["MPAR"] = var_MPAR_0d;
                                                }
                                                if ((aux_var_NRB_0d_read == true)) {
                                                    cpp_current_dict["NRB"] = var_NRB_0d;
                                                }
                                                if ((var_ER_1d.get_last_index() != -1)) {
                                                        auto& cpp_curvar0 = var_ER_1d;
                                                        cpp_current_dict["ER"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["ER"];
                                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                        }
                                                }
                                                if ((var_AJ_1d.get_last_index() != -1)) {
                                                        auto& cpp_curvar0 = var_AJ_1d;
                                                        cpp_current_dict["AJ"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["AJ"];
                                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                        }
                                                }
                                                if ((var_GN_1d.get_last_index() != -1)) {
                                                        auto& cpp_curvar0 = var_GN_1d;
                                                        cpp_current_dict["GN"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["GN"];
                                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                        }
                                                }
                                                if ((var_GG_1d.get_last_index() != -1)) {
                                                        auto& cpp_curvar0 = var_GG_1d;
                                                        cpp_current_dict["GG"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["GG"];
                                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                        }
                                                }
                                                if ((var_GFA_1d.get_last_index() != -1)) {
                                                        auto& cpp_curvar0 = var_GFA_1d;
                                                        cpp_current_dict["GFA"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["GFA"];
                                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                        }
                                                }
                                                if ((var_GFB_1d.get_last_index() != -1)) {
                                                        auto& cpp_curvar0 = var_GFB_1d;
                                                        cpp_current_dict["GFB"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["GFB"];
                                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                        }
                                                }
                                                if (var_V_2d.did_read()) {
                                                        cpp_current_dict["V"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["V"];
                                                        for (int cpp_i1 = var_V_2d.get_row_start_index(); cpp_i1 <= var_V_2d.get_row_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                                                            py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                                                            for (int cpp_i2 = var_V_2d.get_col_start_index(cpp_i1); cpp_i2 <= var_V_2d.get_col_last_index(cpp_i1); cpp_i2++) {
                                                                cpp_curdict1[py::cast(cpp_i2)] = var_V_2d(cpp_i1, cpp_i2);
                                                            }
                                                        }
                                                }
                                                cpp_current_dict = cpp_parent_dict;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (! cpp_found_match) {
                            if (! cpp_found_match) {
                                // if statement evaluation with lookahead
                                {
                                    std::streampos cpp_old_streampos = cont.tellg();
                                    {
                                        // variable declarations
                                        double& glob_var_EL_0d = var_EL_0d;
                                        double var_EL_0d = glob_var_EL_0d;
                                        bool& glob_aux_var_EL_0d_read = aux_var_EL_0d_read;
                                        bool aux_var_EL_0d_read = glob_aux_var_EL_0d_read;
                                        double& glob_var_EH_0d = var_EH_0d;
                                        double var_EH_0d = glob_var_EH_0d;
                                        bool& glob_aux_var_EH_0d_read = aux_var_EH_0d_read;
                                        bool aux_var_EH_0d_read = glob_aux_var_EH_0d_read;
                                        int& glob_var_LRU_0d = var_LRU_0d;
                                        int var_LRU_0d = glob_var_LRU_0d;
                                        bool& glob_aux_var_LRU_0d_read = aux_var_LRU_0d_read;
                                        bool aux_var_LRU_0d_read = glob_aux_var_LRU_0d_read;
                                        int& glob_var_LRF_0d = var_LRF_0d;
                                        int var_LRF_0d = glob_var_LRF_0d;
                                        bool& glob_aux_var_LRF_0d_read = aux_var_LRF_0d_read;
                                        bool aux_var_LRF_0d_read = glob_aux_var_LRF_0d_read;
                                        int& glob_var_NRO_0d = var_NRO_0d;
                                        int var_NRO_0d = glob_var_NRO_0d;
                                        bool& glob_aux_var_NRO_0d_read = aux_var_NRO_0d_read;
                                        bool aux_var_NRO_0d_read = glob_aux_var_NRO_0d_read;
                                        int& glob_var_NAPS_0d = var_NAPS_0d;
                                        int var_NAPS_0d = glob_var_NAPS_0d;
                                        bool& glob_aux_var_NAPS_0d_read = aux_var_NAPS_0d_read;
                                        bool aux_var_NAPS_0d_read = glob_aux_var_NAPS_0d_read;
                                        int& glob_var_NI_0d = var_NI_0d;
                                        int var_NI_0d = glob_var_NI_0d;
                                        bool& glob_aux_var_NI_0d_read = aux_var_NI_0d_read;
                                        bool aux_var_NI_0d_read = glob_aux_var_NI_0d_read;
                                        int& glob_var_LCOMP_0d = var_LCOMP_0d;
                                        int var_LCOMP_0d = glob_var_LCOMP_0d;
                                        bool& glob_aux_var_LCOMP_0d_read = aux_var_LCOMP_0d_read;
                                        bool aux_var_LCOMP_0d_read = glob_aux_var_LCOMP_0d_read;
                                        int& glob_var_ISR_0d = var_ISR_0d;
                                        int var_ISR_0d = glob_var_ISR_0d;
                                        bool& glob_aux_var_ISR_0d_read = aux_var_ISR_0d_read;
                                        bool aux_var_ISR_0d_read = glob_aux_var_ISR_0d_read;
                                        cpp_line = cpp_read_line(cont);
                                        // read CONT record
                                        // assign expression to variable LCOMP
                                        var_LCOMP_0d = cpp_read_int_field(cpp_line, 3);
                                        aux_var_LCOMP_0d_read = true;
                                        // assign expression to variable ISR
                                        var_ISR_0d = cpp_read_int_field(cpp_line, 5);
                                        aux_var_ISR_0d_read = true;
                                        if (((((((((var_LCOMP_0d)==(1))))&&(((var_LRU_0d)==(1))))&&(((var_LRF_0d)==(7))))))) {
                                            cpp_found_match = true;
                                        }
                                        cont.seekg(cpp_old_streampos);
                                    }
                                    if (cpp_found_match) {
                                        cpp_line = cpp_read_line(cont);
                                        // read CONT record
                                        // assign expression to variable LCOMP
                                        var_LCOMP_0d = cpp_read_int_field(cpp_line, 3);
                                        aux_var_LCOMP_0d_read = true;
                                        // assign expression to variable ISR
                                        var_ISR_0d = cpp_read_int_field(cpp_line, 5);
                                        aux_var_ISR_0d_read = true;
                                        // evaluate if-elif-else clause
                                        {
                                            bool cpp_found_match = false;
                                            if (! cpp_found_match) {
                                                if (((((((var_ISR_0d)>(0))))))) {
                                                    // if statement evaluation
                                                    cpp_found_match = true;
                                                    cpp_line = cpp_read_line(cont);
                                                    // read LIST record
                                                    // assign expression to variable JCH
                                                    var_JCH_0d = cpp_read_int_field(cpp_line, 4);
                                                    aux_var_JCH_0d_read = true;
                                                    // assign expression to variable cpp_int_val
                                                    cpp_int_val = cpp_read_int_field(cpp_line, 5);
                                                    aux_cpp_int_val_read = true;
                                                    // assign expression to variable NCH
                                                    var_NCH_0d = ((((1/6)+(-1))+cpp_int_val)/(1/6));
                                                    aux_var_NCH_0d_read = true;
                                                    {
                                                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                        int cpp_j = 0;
                                                        // read LIST body
                                                        var_DAP_2d.init(1, (var_JCH_0d/var_NCH_0d), 1, var_NCH_0d, false, false);

                                                        for (int var_m_0d = 1;
                                                             var_m_0d <= (var_JCH_0d/var_NCH_0d); var_m_0d++) {
                                                            bool aux_var_m_0d_read = true;
                                                            // read LIST body

                                                            for (int var_n_0d = 1;
                                                                 var_n_0d <= var_NCH_0d; var_n_0d++) {
                                                                bool aux_var_n_0d_read = true;
                                                                // read LIST body
                                                                // assign expression to variable DAP
                                                                var_DAP_2d(var_m_0d, var_n_0d) = cpp_floatvec[cpp_j++];
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        cpp_line = cpp_read_line(cont);
                                        // read CONT record
                                        // assign expression to variable AWRI
                                        var_AWRI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                        aux_var_AWRI_0d_read = true;
                                        // assign expression to variable NSRS
                                        var_NSRS_0d = cpp_read_int_field(cpp_line, 4);
                                        aux_var_NSRS_0d_read = true;

                                        for (int var_k_0d = 1;
                                             var_k_0d <= var_NSRS_0d; var_k_0d++) {
                                            bool aux_var_k_0d_read = true;
                                            // open section nsrs_subsec

                                            {
                                                py::dict cpp_parent_dict = cpp_current_dict;
                                                if (! cpp_parent_dict.contains("nsrs_subsec")) {
                                                    cpp_parent_dict["nsrs_subsec"] = py::dict();
                                                }
                                                py::dict cpp_current_dict = cpp_parent_dict["nsrs_subsec"];

                                                if (! cpp_current_dict.contains(py::cast(var_k_0d))) {
                                                    cpp_current_dict[py::cast(var_k_0d)] = py::dict();
                                                }
                                                cpp_current_dict = cpp_current_dict[py::cast(var_k_0d)];
                                                // variable declarations
                                                int var_NJSX_0d;
                                                bool aux_var_NJSX_0d_read = false;
                                                int var_N_0d;
                                                bool aux_var_N_0d_read = false;
                                                int var_NPARB_0d;
                                                bool aux_var_NPARB_0d_read = false;
                                                Matrix2d<double> var_V_2d;
                                                cpp_line = cpp_read_line(cont);
                                                // read CONT record
                                                // assign expression to variable NJSX
                                                var_NJSX_0d = cpp_read_int_field(cpp_line, 2);
                                                aux_var_NJSX_0d_read = true;

                                                for (int var_m_0d = 1;
                                                     var_m_0d <= var_NJSX_0d; var_m_0d++) {
                                                    bool aux_var_m_0d_read = true;
                                                    // open section J_pi_group

                                                    {
                                                        py::dict cpp_parent_dict = cpp_current_dict;
                                                        if (! cpp_parent_dict.contains("J_pi_group")) {
                                                            cpp_parent_dict["J_pi_group"] = py::dict();
                                                        }
                                                        py::dict cpp_current_dict = cpp_parent_dict["J_pi_group"];

                                                        if (! cpp_current_dict.contains(py::cast(var_m_0d))) {
                                                            cpp_current_dict[py::cast(var_m_0d)] = py::dict();
                                                        }
                                                        cpp_current_dict = cpp_current_dict[py::cast(var_m_0d)];
                                                        // variable declarations
                                                        int var_NCH_0d;
                                                        bool aux_var_NCH_0d_read = false;
                                                        int var_NRB_0d;
                                                        bool aux_var_NRB_0d_read = false;
                                                        NestedVector<double> var_ER_1d;
                                                        Matrix2d<double> var_GAM_2d;
                                                        cpp_line = cpp_read_line(cont);
                                                        // read LIST record
                                                        if ((! (aux_var_NCH_0d_read == true))) {
                                                            // assign expression to variable NCH
                                                            var_NCH_0d = cpp_read_int_field(cpp_line, 2);
                                                            aux_var_NCH_0d_read = true;
                                                        }
                                                        // assign expression to variable NRB
                                                        var_NRB_0d = cpp_read_int_field(cpp_line, 3);
                                                        aux_var_NRB_0d_read = true;
                                                        if ((! (aux_var_NRB_0d_read == true))) {
                                                            throw std::runtime_error("The equation (6*((((1+NCH)+((5-NCH)%6))*NRB)/6))==value cannot be solved for NRB because the modulo operator is not supported.");
                                                        }
                                                        if ((! (aux_var_NCH_0d_read == true))) {
                                                            throw std::runtime_error("The equation (6*((((1+NCH)+((5-NCH)%6))*NRB)/6))==value cannot be solved for NCH because the modulo operator is not supported.");
                                                        }
                                                        if ((! (aux_var_NRB_0d_read == true))) {
                                                            throw std::runtime_error("The equation ((((1+NCH)+((5-NCH)%6))*NRB)/6)==value cannot be solved for NRB because the modulo operator is not supported.");
                                                        }
                                                        if ((! (aux_var_NCH_0d_read == true))) {
                                                            throw std::runtime_error("The equation ((((1+NCH)+((5-NCH)%6))*NRB)/6)==value cannot be solved for NCH because the modulo operator is not supported.");
                                                        }
                                                        {
                                                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                            int cpp_j = 0;
                                                            // read LIST body
                                                            var_GAM_2d.init(1, var_NCH_0d, 1, var_NRB_0d, false, false);

                                                            for (int var_p_0d = 1;
                                                                 var_p_0d <= var_NRB_0d; var_p_0d++) {
                                                                bool aux_var_p_0d_read = true;
                                                                // read LIST body
                                                                // assign expression to variable ER
                                                                var_ER_1d.set(var_p_0d, cpp_floatvec[cpp_j++]);

                                                                for (int var_q_0d = 1;
                                                                     var_q_0d <= var_NCH_0d; var_q_0d++) {
                                                                    bool aux_var_q_0d_read = true;
                                                                    // read LIST body
                                                                    // assign expression to variable GAM
                                                                    var_GAM_2d(var_q_0d, var_p_0d) = cpp_floatvec[cpp_j++];
                                                                }

                                                                for (int var_r_0d = 1;
                                                                     var_r_0d <= ((5-var_NCH_0d)%6); var_r_0d++) {
                                                                    bool aux_var_r_0d_read = true;
                                                                    // read LIST body
                                                                    cpp_j++;
                                                                }
                                                            }
                                                        }
                                                        // store data in Python dictionary
                                                        if ((aux_var_NCH_0d_read == true)) {
                                                            cpp_current_dict["NCH"] = var_NCH_0d;
                                                        }
                                                        if ((aux_var_NRB_0d_read == true)) {
                                                            cpp_current_dict["NRB"] = var_NRB_0d;
                                                        }
                                                        if ((var_ER_1d.get_last_index() != -1)) {
                                                                auto& cpp_curvar0 = var_ER_1d;
                                                                cpp_current_dict["ER"] = py::dict();
                                                                py::dict cpp_curdict0 = cpp_current_dict["ER"];
                                                                for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                                    cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                                }
                                                        }
                                                        if (var_GAM_2d.did_read()) {
                                                                cpp_current_dict["GAM"] = py::dict();
                                                                py::dict cpp_curdict0 = cpp_current_dict["GAM"];
                                                                for (int cpp_i1 = var_GAM_2d.get_row_start_index(); cpp_i1 <= var_GAM_2d.get_row_last_index(); cpp_i1++) {
                                                                    cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                                                                    py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                                                                    for (int cpp_i2 = var_GAM_2d.get_col_start_index(cpp_i1); cpp_i2 <= var_GAM_2d.get_col_last_index(cpp_i1); cpp_i2++) {
                                                                        cpp_curdict1[py::cast(cpp_i2)] = var_GAM_2d(cpp_i1, cpp_i2);
                                                                    }
                                                                }
                                                        }
                                                        cpp_current_dict = cpp_parent_dict;
                                                    }
                                                }
                                                cpp_line = cpp_read_line(cont);
                                                // read LIST record
                                                // assign expression to variable N
                                                var_N_0d = cpp_read_int_field(cpp_line, 4);
                                                aux_var_N_0d_read = true;
                                                // assign expression to variable NPARB
                                                var_NPARB_0d = cpp_read_int_field(cpp_line, 5);
                                                aux_var_NPARB_0d_read = true;
                                                {
                                                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                    int cpp_j = 0;
                                                    // read LIST body
                                                    var_V_2d.init(1, var_NPARB_0d, 1, var_NPARB_0d, true, false);

                                                    for (int var_p_0d = 1;
                                                         var_p_0d <= var_NPARB_0d; var_p_0d++) {
                                                        bool aux_var_p_0d_read = true;
                                                        // read LIST body

                                                        for (int var_q_0d = var_p_0d;
                                                             var_q_0d <= var_NPARB_0d; var_q_0d++) {
                                                            bool aux_var_q_0d_read = true;
                                                            // read LIST body
                                                            // assign expression to variable V
                                                            var_V_2d(var_p_0d, var_q_0d) = cpp_floatvec[cpp_j++];
                                                        }
                                                    }
                                                }
                                                // store data in Python dictionary
                                                if ((aux_var_NJSX_0d_read == true)) {
                                                    cpp_current_dict["NJSX"] = var_NJSX_0d;
                                                }
                                                if ((aux_var_N_0d_read == true)) {
                                                    cpp_current_dict["N"] = var_N_0d;
                                                }
                                                if ((aux_var_NPARB_0d_read == true)) {
                                                    cpp_current_dict["NPARB"] = var_NPARB_0d;
                                                }
                                                if (var_V_2d.did_read()) {
                                                        cpp_current_dict["V"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["V"];
                                                        for (int cpp_i1 = var_V_2d.get_row_start_index(); cpp_i1 <= var_V_2d.get_row_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                                                            py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                                                            for (int cpp_i2 = var_V_2d.get_col_start_index(cpp_i1); cpp_i2 <= var_V_2d.get_col_last_index(cpp_i1); cpp_i2++) {
                                                                cpp_curdict1[py::cast(cpp_i2)] = var_V_2d(cpp_i1, cpp_i2);
                                                            }
                                                        }
                                                }
                                                cpp_current_dict = cpp_parent_dict;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (! cpp_found_match) {
                            if (! cpp_found_match) {
                                // if statement evaluation with lookahead
                                {
                                    std::streampos cpp_old_streampos = cont.tellg();
                                    {
                                        // variable declarations
                                        double& glob_var_EL_0d = var_EL_0d;
                                        double var_EL_0d = glob_var_EL_0d;
                                        bool& glob_aux_var_EL_0d_read = aux_var_EL_0d_read;
                                        bool aux_var_EL_0d_read = glob_aux_var_EL_0d_read;
                                        double& glob_var_EH_0d = var_EH_0d;
                                        double var_EH_0d = glob_var_EH_0d;
                                        bool& glob_aux_var_EH_0d_read = aux_var_EH_0d_read;
                                        bool aux_var_EH_0d_read = glob_aux_var_EH_0d_read;
                                        int& glob_var_LRU_0d = var_LRU_0d;
                                        int var_LRU_0d = glob_var_LRU_0d;
                                        bool& glob_aux_var_LRU_0d_read = aux_var_LRU_0d_read;
                                        bool aux_var_LRU_0d_read = glob_aux_var_LRU_0d_read;
                                        int& glob_var_LRF_0d = var_LRF_0d;
                                        int var_LRF_0d = glob_var_LRF_0d;
                                        bool& glob_aux_var_LRF_0d_read = aux_var_LRF_0d_read;
                                        bool aux_var_LRF_0d_read = glob_aux_var_LRF_0d_read;
                                        int& glob_var_NRO_0d = var_NRO_0d;
                                        int var_NRO_0d = glob_var_NRO_0d;
                                        bool& glob_aux_var_NRO_0d_read = aux_var_NRO_0d_read;
                                        bool aux_var_NRO_0d_read = glob_aux_var_NRO_0d_read;
                                        int& glob_var_NAPS_0d = var_NAPS_0d;
                                        int var_NAPS_0d = glob_var_NAPS_0d;
                                        bool& glob_aux_var_NAPS_0d_read = aux_var_NAPS_0d_read;
                                        bool aux_var_NAPS_0d_read = glob_aux_var_NAPS_0d_read;
                                        int& glob_var_NI_0d = var_NI_0d;
                                        int var_NI_0d = glob_var_NI_0d;
                                        bool& glob_aux_var_NI_0d_read = aux_var_NI_0d_read;
                                        bool aux_var_NI_0d_read = glob_aux_var_NI_0d_read;
                                        double& glob_var_SPI_0d = var_SPI_0d;
                                        double var_SPI_0d = glob_var_SPI_0d;
                                        bool& glob_aux_var_SPI_0d_read = aux_var_SPI_0d_read;
                                        bool aux_var_SPI_0d_read = glob_aux_var_SPI_0d_read;
                                        double& glob_var_AP_0d = var_AP_0d;
                                        double var_AP_0d = glob_var_AP_0d;
                                        bool& glob_aux_var_AP_0d_read = aux_var_AP_0d_read;
                                        bool aux_var_AP_0d_read = glob_aux_var_AP_0d_read;
                                        int& glob_var_LCOMP_0d = var_LCOMP_0d;
                                        int var_LCOMP_0d = glob_var_LCOMP_0d;
                                        bool& glob_aux_var_LCOMP_0d_read = aux_var_LCOMP_0d_read;
                                        bool aux_var_LCOMP_0d_read = glob_aux_var_LCOMP_0d_read;
                                        int& glob_var_ISR_0d = var_ISR_0d;
                                        int var_ISR_0d = glob_var_ISR_0d;
                                        bool& glob_aux_var_ISR_0d_read = aux_var_ISR_0d_read;
                                        bool aux_var_ISR_0d_read = glob_aux_var_ISR_0d_read;
                                        cpp_line = cpp_read_line(cont);
                                        // read CONT record
                                        // assign expression to variable SPI
                                        var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                        aux_var_SPI_0d_read = true;
                                        // assign expression to variable AP
                                        var_AP_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                        aux_var_AP_0d_read = true;
                                        // assign expression to variable LCOMP
                                        var_LCOMP_0d = cpp_read_int_field(cpp_line, 3);
                                        aux_var_LCOMP_0d_read = true;
                                        // assign expression to variable ISR
                                        var_ISR_0d = cpp_read_int_field(cpp_line, 5);
                                        aux_var_ISR_0d_read = true;
                                        if (((((((((var_LCOMP_0d)==(2))))&&(((var_LRU_0d)==(1))))&&((((((((var_LRF_0d)==(1)))))||((((var_LRF_0d)==(2))))))))))) {
                                            cpp_found_match = true;
                                        }
                                        cont.seekg(cpp_old_streampos);
                                    }
                                    if (cpp_found_match) {
                                        cpp_line = cpp_read_line(cont);
                                        // read CONT record
                                        // assign expression to variable SPI
                                        var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                        aux_var_SPI_0d_read = true;
                                        // assign expression to variable AP
                                        var_AP_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                        aux_var_AP_0d_read = true;
                                        // assign expression to variable LCOMP
                                        var_LCOMP_0d = cpp_read_int_field(cpp_line, 3);
                                        aux_var_LCOMP_0d_read = true;
                                        // assign expression to variable ISR
                                        var_ISR_0d = cpp_read_int_field(cpp_line, 5);
                                        aux_var_ISR_0d_read = true;
                                        // evaluate if-elif-else clause
                                        {
                                            bool cpp_found_match = false;
                                            if (! cpp_found_match) {
                                                if (((((((var_ISR_0d)>(0))))))) {
                                                    // if statement evaluation
                                                    cpp_found_match = true;
                                                    cpp_line = cpp_read_line(cont);
                                                    // read CONT record
                                                    // assign expression to variable DAP
                                                    var_DAP_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                    aux_var_DAP_0d_read = true;
                                                }
                                            }
                                        }
                                        cpp_line = cpp_read_line(cont);
                                        // read LIST record
                                        // assign expression to variable AWRI
                                        var_AWRI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                        aux_var_AWRI_0d_read = true;
                                        // assign expression to variable QX
                                        var_QX_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                        aux_var_QX_0d_read = true;
                                        // assign expression to variable LRX
                                        var_LRX_0d = cpp_read_int_field(cpp_line, 3);
                                        aux_var_LRX_0d_read = true;
                                        // assign expression to variable cpp_int_val
                                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                        aux_cpp_int_val_read = true;
                                        // assign expression to variable NRSA
                                        var_NRSA_0d = (cpp_int_val/12);
                                        aux_var_NRSA_0d_read = true;
                                        if ((! (aux_var_NRSA_0d_read == true))) {
                                            // assign expression to variable NRSA
                                            var_NRSA_0d = cpp_read_int_field(cpp_line, 5);
                                            aux_var_NRSA_0d_read = true;
                                        }
                                        {
                                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                            int cpp_j = 0;
                                            // read LIST body

                                            for (int var_k_0d = 1;
                                                 var_k_0d <= var_NRSA_0d; var_k_0d++) {
                                                bool aux_var_k_0d_read = true;
                                                // read LIST body
                                                // assign expression to variable ER
                                                var_ER_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable AJ
                                                var_AJ_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable GT
                                                var_GT_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable GN
                                                var_GN_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable GG
                                                var_GG_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable GF
                                                var_GF_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable DER
                                                var_DER_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                cpp_j++;
                                                cpp_j++;
                                                // assign expression to variable DGN
                                                var_DGN_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable DGG
                                                var_DGG_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable DGF
                                                var_DGF_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                            }
                                        }
                                        cpp_line = cpp_read_line(cont);
                                        // read CONT record
                                        // assign expression to variable NDIGIT
                                        var_NDIGIT_0d = cpp_read_int_field(cpp_line, 2);
                                        aux_var_NDIGIT_0d_read = true;
                                        // assign expression to variable NNN
                                        var_NNN_0d = cpp_read_int_field(cpp_line, 3);
                                        aux_var_NNN_0d_read = true;
                                        // assign expression to variable NM
                                        var_NM_0d = cpp_read_int_field(cpp_line, 4);
                                        aux_var_NM_0d_read = true;

                                        for (int var_k_0d = 1;
                                             var_k_0d <= var_NM_0d; var_k_0d++) {
                                            bool aux_var_k_0d_read = true;
                                            {
                                                cpp_line = cpp_read_line(cont);
                                                int cpp_ndigit = var_NDIGIT_0d;
                                                if ((cpp_ndigit < 2 || cpp_ndigit > 6)) {
                                                    throw std::runtime_error("invalid NDIGIT (must be between 2 and 6)");
                                                }
                                                // assign expression to variable II
                                                var_II_1d.set(var_k_0d, cpp_read_custom_int_field(cpp_line, 0, 5));
                                                // assign expression to variable JJ
                                                var_JJ_1d.set(var_k_0d, cpp_read_custom_int_field(cpp_line, 5, 5));
                                                int cpp_step = cpp_ndigit + 1;
                                                int cpp_end = 65;
                                                int cpp_start;
                                                if (cpp_ndigit <= 5) {
                                                    cpp_start = 11;

                                                } else {
                                                    cpp_start = 10;
                                                }
                                                std::vector<int> cpp_intvec;
                                                for (int cpp_i = cpp_start; cpp_i < cpp_end; cpp_i += cpp_step) {
                                                    cpp_intvec.push_back(cpp_read_custom_int_field(cpp_line, cpp_i, cpp_step));
                                                }
                                                // assign expression to variable KIJ
                                                var_KIJ_1d.set(var_k_0d, cpp_intvec);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (! cpp_found_match) {
                            if (! cpp_found_match) {
                                // if statement evaluation with lookahead
                                {
                                    std::streampos cpp_old_streampos = cont.tellg();
                                    {
                                        // variable declarations
                                        double& glob_var_EL_0d = var_EL_0d;
                                        double var_EL_0d = glob_var_EL_0d;
                                        bool& glob_aux_var_EL_0d_read = aux_var_EL_0d_read;
                                        bool aux_var_EL_0d_read = glob_aux_var_EL_0d_read;
                                        double& glob_var_EH_0d = var_EH_0d;
                                        double var_EH_0d = glob_var_EH_0d;
                                        bool& glob_aux_var_EH_0d_read = aux_var_EH_0d_read;
                                        bool aux_var_EH_0d_read = glob_aux_var_EH_0d_read;
                                        int& glob_var_LRU_0d = var_LRU_0d;
                                        int var_LRU_0d = glob_var_LRU_0d;
                                        bool& glob_aux_var_LRU_0d_read = aux_var_LRU_0d_read;
                                        bool aux_var_LRU_0d_read = glob_aux_var_LRU_0d_read;
                                        int& glob_var_LRF_0d = var_LRF_0d;
                                        int var_LRF_0d = glob_var_LRF_0d;
                                        bool& glob_aux_var_LRF_0d_read = aux_var_LRF_0d_read;
                                        bool aux_var_LRF_0d_read = glob_aux_var_LRF_0d_read;
                                        int& glob_var_NRO_0d = var_NRO_0d;
                                        int var_NRO_0d = glob_var_NRO_0d;
                                        bool& glob_aux_var_NRO_0d_read = aux_var_NRO_0d_read;
                                        bool aux_var_NRO_0d_read = glob_aux_var_NRO_0d_read;
                                        int& glob_var_NAPS_0d = var_NAPS_0d;
                                        int var_NAPS_0d = glob_var_NAPS_0d;
                                        bool& glob_aux_var_NAPS_0d_read = aux_var_NAPS_0d_read;
                                        bool aux_var_NAPS_0d_read = glob_aux_var_NAPS_0d_read;
                                        int& glob_var_NI_0d = var_NI_0d;
                                        int var_NI_0d = glob_var_NI_0d;
                                        bool& glob_aux_var_NI_0d_read = aux_var_NI_0d_read;
                                        bool aux_var_NI_0d_read = glob_aux_var_NI_0d_read;
                                        double& glob_var_SPI_0d = var_SPI_0d;
                                        double var_SPI_0d = glob_var_SPI_0d;
                                        bool& glob_aux_var_SPI_0d_read = aux_var_SPI_0d_read;
                                        bool aux_var_SPI_0d_read = glob_aux_var_SPI_0d_read;
                                        double& glob_var_AP_0d = var_AP_0d;
                                        double var_AP_0d = glob_var_AP_0d;
                                        bool& glob_aux_var_AP_0d_read = aux_var_AP_0d_read;
                                        bool aux_var_AP_0d_read = glob_aux_var_AP_0d_read;
                                        int& glob_var_LAD_0d = var_LAD_0d;
                                        int var_LAD_0d = glob_var_LAD_0d;
                                        bool& glob_aux_var_LAD_0d_read = aux_var_LAD_0d_read;
                                        bool aux_var_LAD_0d_read = glob_aux_var_LAD_0d_read;
                                        int& glob_var_LCOMP_0d = var_LCOMP_0d;
                                        int var_LCOMP_0d = glob_var_LCOMP_0d;
                                        bool& glob_aux_var_LCOMP_0d_read = aux_var_LCOMP_0d_read;
                                        bool aux_var_LCOMP_0d_read = glob_aux_var_LCOMP_0d_read;
                                        int& glob_var_ISR_0d = var_ISR_0d;
                                        int var_ISR_0d = glob_var_ISR_0d;
                                        bool& glob_aux_var_ISR_0d_read = aux_var_ISR_0d_read;
                                        bool aux_var_ISR_0d_read = glob_aux_var_ISR_0d_read;
                                        cpp_line = cpp_read_line(cont);
                                        // read CONT record
                                        // assign expression to variable SPI
                                        var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                        aux_var_SPI_0d_read = true;
                                        // assign expression to variable AP
                                        var_AP_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                        aux_var_AP_0d_read = true;
                                        // assign expression to variable LAD
                                        var_LAD_0d = cpp_read_int_field(cpp_line, 2);
                                        aux_var_LAD_0d_read = true;
                                        // assign expression to variable LCOMP
                                        var_LCOMP_0d = cpp_read_int_field(cpp_line, 3);
                                        aux_var_LCOMP_0d_read = true;
                                        // assign expression to variable ISR
                                        var_ISR_0d = cpp_read_int_field(cpp_line, 5);
                                        aux_var_ISR_0d_read = true;
                                        if (((((((((var_LCOMP_0d)==(2))))&&(((var_LRU_0d)==(1))))&&(((var_LRF_0d)==(3))))))) {
                                            cpp_found_match = true;
                                        }
                                        cont.seekg(cpp_old_streampos);
                                    }
                                    if (cpp_found_match) {
                                        cpp_line = cpp_read_line(cont);
                                        // read CONT record
                                        // assign expression to variable SPI
                                        var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                        aux_var_SPI_0d_read = true;
                                        // assign expression to variable AP
                                        var_AP_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                        aux_var_AP_0d_read = true;
                                        // assign expression to variable LAD
                                        var_LAD_0d = cpp_read_int_field(cpp_line, 2);
                                        aux_var_LAD_0d_read = true;
                                        // assign expression to variable LCOMP
                                        var_LCOMP_0d = cpp_read_int_field(cpp_line, 3);
                                        aux_var_LCOMP_0d_read = true;
                                        // assign expression to variable ISR
                                        var_ISR_0d = cpp_read_int_field(cpp_line, 5);
                                        aux_var_ISR_0d_read = true;
                                        // evaluate if-elif-else clause
                                        {
                                            bool cpp_found_match = false;
                                            if (! cpp_found_match) {
                                                if (((((((var_ISR_0d)>(0))))))) {
                                                    // if statement evaluation
                                                    cpp_found_match = true;
                                                    cpp_line = cpp_read_line(cont);
                                                    // read LIST record
                                                    // assign expression to variable MLS
                                                    var_MLS_0d = cpp_read_int_field(cpp_line, 4);
                                                    aux_var_MLS_0d_read = true;
                                                    {
                                                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                        int cpp_j = 0;
                                                        // read LIST body

                                                        for (int var_k_0d = 1;
                                                             var_k_0d <= var_MLS_0d; var_k_0d++) {
                                                            bool aux_var_k_0d_read = true;
                                                            // read LIST body
                                                            // assign expression to variable DAP
                                                            var_DAP_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        cpp_line = cpp_read_line(cont);
                                        // read LIST record
                                        // assign expression to variable AWRI
                                        var_AWRI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                        aux_var_AWRI_0d_read = true;
                                        // assign expression to variable APL
                                        var_APL_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                        aux_var_APL_0d_read = true;
                                        // assign expression to variable cpp_int_val
                                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                        aux_cpp_int_val_read = true;
                                        // assign expression to variable NRSA
                                        var_NRSA_0d = (cpp_int_val/12);
                                        aux_var_NRSA_0d_read = true;
                                        if ((! (aux_var_NRSA_0d_read == true))) {
                                            // assign expression to variable NRSA
                                            var_NRSA_0d = cpp_read_int_field(cpp_line, 5);
                                            aux_var_NRSA_0d_read = true;
                                        }
                                        {
                                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                            int cpp_j = 0;
                                            // read LIST body

                                            for (int var_k_0d = 1;
                                                 var_k_0d <= var_NRSA_0d; var_k_0d++) {
                                                bool aux_var_k_0d_read = true;
                                                // read LIST body
                                                // assign expression to variable ER
                                                var_ER_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable AJ
                                                var_AJ_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable GN
                                                var_GN_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable GG
                                                var_GG_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable GFA
                                                var_GFA_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable GFB
                                                var_GFB_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable DER
                                                var_DER_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                cpp_j++;
                                                // assign expression to variable DGN
                                                var_DGN_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable DGG
                                                var_DGG_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable DGFA
                                                var_DGFA_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable DGFB
                                                var_DGFB_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                            }
                                        }
                                        cpp_line = cpp_read_line(cont);
                                        // read CONT record
                                        // assign expression to variable NDIGIT
                                        var_NDIGIT_0d = cpp_read_int_field(cpp_line, 2);
                                        aux_var_NDIGIT_0d_read = true;
                                        // assign expression to variable NNN
                                        var_NNN_0d = cpp_read_int_field(cpp_line, 3);
                                        aux_var_NNN_0d_read = true;
                                        // assign expression to variable NM
                                        var_NM_0d = cpp_read_int_field(cpp_line, 4);
                                        aux_var_NM_0d_read = true;

                                        for (int var_k_0d = 1;
                                             var_k_0d <= var_NM_0d; var_k_0d++) {
                                            bool aux_var_k_0d_read = true;
                                            {
                                                cpp_line = cpp_read_line(cont);
                                                int cpp_ndigit = var_NDIGIT_0d;
                                                if ((cpp_ndigit < 2 || cpp_ndigit > 6)) {
                                                    throw std::runtime_error("invalid NDIGIT (must be between 2 and 6)");
                                                }
                                                // assign expression to variable II
                                                var_II_1d.set(var_k_0d, cpp_read_custom_int_field(cpp_line, 0, 5));
                                                // assign expression to variable JJ
                                                var_JJ_1d.set(var_k_0d, cpp_read_custom_int_field(cpp_line, 5, 5));
                                                int cpp_step = cpp_ndigit + 1;
                                                int cpp_end = 65;
                                                int cpp_start;
                                                if (cpp_ndigit <= 5) {
                                                    cpp_start = 11;

                                                } else {
                                                    cpp_start = 10;
                                                }
                                                std::vector<int> cpp_intvec;
                                                for (int cpp_i = cpp_start; cpp_i < cpp_end; cpp_i += cpp_step) {
                                                    cpp_intvec.push_back(cpp_read_custom_int_field(cpp_line, cpp_i, cpp_step));
                                                }
                                                // assign expression to variable KIJ
                                                var_KIJ_1d.set(var_k_0d, cpp_intvec);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (! cpp_found_match) {
                            if (! cpp_found_match) {
                                // if statement evaluation with lookahead
                                {
                                    std::streampos cpp_old_streampos = cont.tellg();
                                    {
                                        // variable declarations
                                        double& glob_var_EL_0d = var_EL_0d;
                                        double var_EL_0d = glob_var_EL_0d;
                                        bool& glob_aux_var_EL_0d_read = aux_var_EL_0d_read;
                                        bool aux_var_EL_0d_read = glob_aux_var_EL_0d_read;
                                        double& glob_var_EH_0d = var_EH_0d;
                                        double var_EH_0d = glob_var_EH_0d;
                                        bool& glob_aux_var_EH_0d_read = aux_var_EH_0d_read;
                                        bool aux_var_EH_0d_read = glob_aux_var_EH_0d_read;
                                        int& glob_var_LRU_0d = var_LRU_0d;
                                        int var_LRU_0d = glob_var_LRU_0d;
                                        bool& glob_aux_var_LRU_0d_read = aux_var_LRU_0d_read;
                                        bool aux_var_LRU_0d_read = glob_aux_var_LRU_0d_read;
                                        int& glob_var_LRF_0d = var_LRF_0d;
                                        int var_LRF_0d = glob_var_LRF_0d;
                                        bool& glob_aux_var_LRF_0d_read = aux_var_LRF_0d_read;
                                        bool aux_var_LRF_0d_read = glob_aux_var_LRF_0d_read;
                                        int& glob_var_NRO_0d = var_NRO_0d;
                                        int var_NRO_0d = glob_var_NRO_0d;
                                        bool& glob_aux_var_NRO_0d_read = aux_var_NRO_0d_read;
                                        bool aux_var_NRO_0d_read = glob_aux_var_NRO_0d_read;
                                        int& glob_var_NAPS_0d = var_NAPS_0d;
                                        int var_NAPS_0d = glob_var_NAPS_0d;
                                        bool& glob_aux_var_NAPS_0d_read = aux_var_NAPS_0d_read;
                                        bool aux_var_NAPS_0d_read = glob_aux_var_NAPS_0d_read;
                                        int& glob_var_NI_0d = var_NI_0d;
                                        int var_NI_0d = glob_var_NI_0d;
                                        bool& glob_aux_var_NI_0d_read = aux_var_NI_0d_read;
                                        bool aux_var_NI_0d_read = glob_aux_var_NI_0d_read;
                                        int& glob_var_IFG_0d = var_IFG_0d;
                                        int var_IFG_0d = glob_var_IFG_0d;
                                        bool& glob_aux_var_IFG_0d_read = aux_var_IFG_0d_read;
                                        bool aux_var_IFG_0d_read = glob_aux_var_IFG_0d_read;
                                        int& glob_var_LCOMP_0d = var_LCOMP_0d;
                                        int var_LCOMP_0d = glob_var_LCOMP_0d;
                                        bool& glob_aux_var_LCOMP_0d_read = aux_var_LCOMP_0d_read;
                                        bool aux_var_LCOMP_0d_read = glob_aux_var_LCOMP_0d_read;
                                        int& glob_var_NJS_0d = var_NJS_0d;
                                        int var_NJS_0d = glob_var_NJS_0d;
                                        bool& glob_aux_var_NJS_0d_read = aux_var_NJS_0d_read;
                                        bool aux_var_NJS_0d_read = glob_aux_var_NJS_0d_read;
                                        int& glob_var_ISR_0d = var_ISR_0d;
                                        int var_ISR_0d = glob_var_ISR_0d;
                                        bool& glob_aux_var_ISR_0d_read = aux_var_ISR_0d_read;
                                        bool aux_var_ISR_0d_read = glob_aux_var_ISR_0d_read;
                                        cpp_line = cpp_read_line(cont);
                                        // read CONT record
                                        // assign expression to variable IFG
                                        var_IFG_0d = cpp_read_int_field(cpp_line, 2);
                                        aux_var_IFG_0d_read = true;
                                        // assign expression to variable LCOMP
                                        var_LCOMP_0d = cpp_read_int_field(cpp_line, 3);
                                        aux_var_LCOMP_0d_read = true;
                                        // assign expression to variable NJS
                                        var_NJS_0d = cpp_read_int_field(cpp_line, 4);
                                        aux_var_NJS_0d_read = true;
                                        // assign expression to variable ISR
                                        var_ISR_0d = cpp_read_int_field(cpp_line, 5);
                                        aux_var_ISR_0d_read = true;
                                        if (((((((((var_LCOMP_0d)==(2))))&&(((var_LRU_0d)==(1))))&&(((var_LRF_0d)==(7))))))) {
                                            cpp_found_match = true;
                                        }
                                        cont.seekg(cpp_old_streampos);
                                    }
                                    if (cpp_found_match) {
                                        cpp_line = cpp_read_line(cont);
                                        // read CONT record
                                        // assign expression to variable IFG
                                        var_IFG_0d = cpp_read_int_field(cpp_line, 2);
                                        aux_var_IFG_0d_read = true;
                                        // assign expression to variable LCOMP
                                        var_LCOMP_0d = cpp_read_int_field(cpp_line, 3);
                                        aux_var_LCOMP_0d_read = true;
                                        // assign expression to variable NJS
                                        var_NJS_0d = cpp_read_int_field(cpp_line, 4);
                                        aux_var_NJS_0d_read = true;
                                        // assign expression to variable ISR
                                        var_ISR_0d = cpp_read_int_field(cpp_line, 5);
                                        aux_var_ISR_0d_read = true;
                                        // evaluate if-elif-else clause
                                        {
                                            bool cpp_found_match = false;
                                            if (! cpp_found_match) {
                                                if (((((((var_ISR_0d)>(0))))))) {
                                                    // if statement evaluation
                                                    cpp_found_match = true;
                                                    cpp_line = cpp_read_line(cont);
                                                    // read LIST record
                                                    // assign expression to variable NJCH
                                                    var_NJCH_0d = cpp_read_int_field(cpp_line, 4);
                                                    aux_var_NJCH_0d_read = true;
                                                    if ((! (aux_var_NJCH_0d_read == true))) {
                                                        // assign expression to variable cpp_int_val
                                                        cpp_int_val = cpp_read_int_field(cpp_line, 5);
                                                        aux_cpp_int_val_read = true;
                                                        // assign expression to variable NJCH
                                                        var_NJCH_0d = ((((1/6)+(-1))+cpp_int_val)/(1/6));
                                                        aux_var_NJCH_0d_read = true;
                                                    }
                                                    {
                                                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                        int cpp_j = 0;
                                                        // read LIST body
                                                        var_DAP_2d.init(1, (var_NJCH_0d/var_NJS_0d), 1, (var_NJCH_0d/var_NJS_0d), false, false);

                                                        for (int var_m_0d = 1;
                                                             var_m_0d <= (var_NJCH_0d/var_NJS_0d); var_m_0d++) {
                                                            bool aux_var_m_0d_read = true;
                                                            // read LIST body

                                                            for (int var_n_0d = 1;
                                                                 var_n_0d <= (var_NJCH_0d/var_NJS_0d); var_n_0d++) {
                                                                bool aux_var_n_0d_read = true;
                                                                // read LIST body
                                                                // assign expression to variable DAP
                                                                var_DAP_2d(var_m_0d, var_n_0d) = cpp_floatvec[cpp_j++];
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        cpp_line = cpp_read_line(cont);
                                        // read LIST record
                                        // assign expression to variable NPP
                                        var_NPP_0d = cpp_read_int_field(cpp_line, 2);
                                        aux_var_NPP_0d_read = true;
                                        // assign expression to variable NJSX
                                        var_NJSX_0d = cpp_read_int_field(cpp_line, 3);
                                        aux_var_NJSX_0d_read = true;
                                        if ((! (aux_var_NPP_0d_read == true))) {
                                            // assign expression to variable cpp_int_val
                                            cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                            aux_cpp_int_val_read = true;
                                            // assign expression to variable NPP
                                            var_NPP_0d = (cpp_int_val/12);
                                            aux_var_NPP_0d_read = true;
                                        }
                                        if ((! (aux_var_NPP_0d_read == true))) {
                                            // assign expression to variable cpp_int_val
                                            cpp_int_val = cpp_read_int_field(cpp_line, 5);
                                            aux_cpp_int_val_read = true;
                                            // assign expression to variable NPP
                                            var_NPP_0d = (cpp_int_val/2);
                                            aux_var_NPP_0d_read = true;
                                        }
                                        {
                                            int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                            cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                            int cpp_j = 0;
                                            // read LIST body

                                            for (int var_k_0d = 1;
                                                 var_k_0d <= var_NPP_0d; var_k_0d++) {
                                                bool aux_var_k_0d_read = true;
                                                // read LIST body
                                                // assign expression to variable MA
                                                var_MA_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable MB
                                                var_MB_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable ZA
                                                var_ZA_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable ZB
                                                var_ZB_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable IA
                                                var_IA_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable IB
                                                var_IB_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable Q
                                                var_Q_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable PNT
                                                var_PNT_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable SHF
                                                var_SHF_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable MT
                                                var_MT_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable PA
                                                var_PA_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                // assign expression to variable PB
                                                var_PB_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                            }
                                        }

                                        for (int var_q_0d = 1;
                                             var_q_0d <= var_NJS_0d; var_q_0d++) {
                                            bool aux_var_q_0d_read = true;
                                            // open section somesec

                                            {
                                                py::dict cpp_parent_dict = cpp_current_dict;
                                                if (! cpp_parent_dict.contains("somesec")) {
                                                    cpp_parent_dict["somesec"] = py::dict();
                                                }
                                                py::dict cpp_current_dict = cpp_parent_dict["somesec"];

                                                if (! cpp_current_dict.contains(py::cast(var_q_0d))) {
                                                    cpp_current_dict[py::cast(var_q_0d)] = py::dict();
                                                }
                                                cpp_current_dict = cpp_current_dict[py::cast(var_q_0d)];
                                                // variable declarations
                                                double var_AJ_0d;
                                                bool aux_var_AJ_0d_read = false;
                                                double var_PJ_0d;
                                                bool aux_var_PJ_0d_read = false;
                                                int cpp_int_val;
                                                bool aux_cpp_int_val_read = false;
                                                int var_NCH_0d;
                                                bool aux_var_NCH_0d_read = false;
                                                NestedVector<double> var_PPI_1d;
                                                NestedVector<double> var_L_1d;
                                                NestedVector<double> var_SCH_1d;
                                                NestedVector<double> var_BND_1d;
                                                NestedVector<double> var_APE_1d;
                                                NestedVector<double> var_APT_1d;
                                                int var_NRSA_0d;
                                                bool aux_var_NRSA_0d_read = false;
                                                NestedVector<double> var_ER_1d;
                                                Matrix2d<double> var_GAM_2d;
                                                NestedVector<double> var_DER_1d;
                                                Matrix2d<double> var_DGAM_2d;
                                                cpp_line = cpp_read_line(cont);
                                                // read LIST record
                                                // assign expression to variable AJ
                                                var_AJ_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                aux_var_AJ_0d_read = true;
                                                // assign expression to variable PJ
                                                var_PJ_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                aux_var_PJ_0d_read = true;
                                                // assign expression to variable cpp_int_val
                                                cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                aux_cpp_int_val_read = true;
                                                // assign expression to variable NCH
                                                var_NCH_0d = (cpp_int_val/6);
                                                aux_var_NCH_0d_read = true;
                                                if ((! (aux_var_NCH_0d_read == true))) {
                                                    // assign expression to variable NCH
                                                    var_NCH_0d = cpp_read_int_field(cpp_line, 5);
                                                    aux_var_NCH_0d_read = true;
                                                }
                                                {
                                                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                    int cpp_j = 0;
                                                    // read LIST body

                                                    for (int var_k_0d = 1;
                                                         var_k_0d <= var_NCH_0d; var_k_0d++) {
                                                        bool aux_var_k_0d_read = true;
                                                        // read LIST body
                                                        // assign expression to variable PPI
                                                        var_PPI_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable L
                                                        var_L_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable SCH
                                                        var_SCH_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable BND
                                                        var_BND_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable APE
                                                        var_APE_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable APT
                                                        var_APT_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                    }
                                                }
                                                cpp_line = cpp_read_line(cont);
                                                // read LIST record
                                                // assign expression to variable NRSA
                                                var_NRSA_0d = cpp_read_int_field(cpp_line, 3);
                                                aux_var_NRSA_0d_read = true;
                                                if ((! (aux_var_NCH_0d_read == true))) {
                                                    throw std::runtime_error("The equation (12*((((2*(NCH+1))+(2*((5-NCH)%6)))*NRSA)/12))==value cannot be solved for NCH because the modulo operator is not supported.");
                                                }
                                                if ((! (aux_var_NRSA_0d_read == true))) {
                                                    throw std::runtime_error("The equation (12*((((2*(NCH+1))+(2*((5-NCH)%6)))*NRSA)/12))==value cannot be solved for NRSA because the modulo operator is not supported.");
                                                }
                                                if ((! (aux_var_NCH_0d_read == true))) {
                                                    throw std::runtime_error("The equation ((((2*(NCH+1))+(2*((5-NCH)%6)))*NRSA)/12)==value cannot be solved for NCH because the modulo operator is not supported.");
                                                }
                                                if ((! (aux_var_NRSA_0d_read == true))) {
                                                    throw std::runtime_error("The equation ((((2*(NCH+1))+(2*((5-NCH)%6)))*NRSA)/12)==value cannot be solved for NRSA because the modulo operator is not supported.");
                                                }
                                                {
                                                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                    int cpp_j = 0;
                                                    // read LIST body
                                                    var_GAM_2d.init(1, var_NCH_0d, 1, var_NRSA_0d, false, false);
                                                    var_DGAM_2d.init(1, var_NCH_0d, 1, var_NRSA_0d, false, false);

                                                    for (int var_k_0d = 1;
                                                         var_k_0d <= var_NRSA_0d; var_k_0d++) {
                                                        bool aux_var_k_0d_read = true;
                                                        // read LIST body
                                                        // assign expression to variable ER
                                                        var_ER_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);

                                                        for (int var_p_0d = 1;
                                                             var_p_0d <= var_NCH_0d; var_p_0d++) {
                                                            bool aux_var_p_0d_read = true;
                                                            // read LIST body
                                                            // assign expression to variable GAM
                                                            var_GAM_2d(var_p_0d, var_k_0d) = cpp_floatvec[cpp_j++];
                                                        }

                                                        for (int var_r_0d = 1;
                                                             var_r_0d <= ((5-var_NCH_0d)%6); var_r_0d++) {
                                                            bool aux_var_r_0d_read = true;
                                                            // read LIST body
                                                            cpp_j++;
                                                        }
                                                        // assign expression to variable DER
                                                        var_DER_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);

                                                        for (int var_p_0d = 1;
                                                             var_p_0d <= var_NCH_0d; var_p_0d++) {
                                                            bool aux_var_p_0d_read = true;
                                                            // read LIST body
                                                            // assign expression to variable DGAM
                                                            var_DGAM_2d(var_p_0d, var_k_0d) = cpp_floatvec[cpp_j++];
                                                        }

                                                        for (int var_r_0d = 1;
                                                             var_r_0d <= ((5-var_NCH_0d)%6); var_r_0d++) {
                                                            bool aux_var_r_0d_read = true;
                                                            // read LIST body
                                                            cpp_j++;
                                                        }
                                                    }
                                                }
                                                // store data in Python dictionary
                                                if ((aux_var_AJ_0d_read == true)) {
                                                    cpp_current_dict["AJ"] = var_AJ_0d;
                                                }
                                                if ((aux_var_PJ_0d_read == true)) {
                                                    cpp_current_dict["PJ"] = var_PJ_0d;
                                                }
                                                if ((aux_var_NCH_0d_read == true)) {
                                                    cpp_current_dict["NCH"] = var_NCH_0d;
                                                }
                                                if ((var_PPI_1d.get_last_index() != -1)) {
                                                        auto& cpp_curvar0 = var_PPI_1d;
                                                        cpp_current_dict["PPI"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["PPI"];
                                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                        }
                                                }
                                                if ((var_L_1d.get_last_index() != -1)) {
                                                        auto& cpp_curvar0 = var_L_1d;
                                                        cpp_current_dict["L"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["L"];
                                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                        }
                                                }
                                                if ((var_SCH_1d.get_last_index() != -1)) {
                                                        auto& cpp_curvar0 = var_SCH_1d;
                                                        cpp_current_dict["SCH"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["SCH"];
                                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                        }
                                                }
                                                if ((var_BND_1d.get_last_index() != -1)) {
                                                        auto& cpp_curvar0 = var_BND_1d;
                                                        cpp_current_dict["BND"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["BND"];
                                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                        }
                                                }
                                                if ((var_APE_1d.get_last_index() != -1)) {
                                                        auto& cpp_curvar0 = var_APE_1d;
                                                        cpp_current_dict["APE"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["APE"];
                                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                        }
                                                }
                                                if ((var_APT_1d.get_last_index() != -1)) {
                                                        auto& cpp_curvar0 = var_APT_1d;
                                                        cpp_current_dict["APT"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["APT"];
                                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                        }
                                                }
                                                if ((aux_var_NRSA_0d_read == true)) {
                                                    cpp_current_dict["NRSA"] = var_NRSA_0d;
                                                }
                                                if ((var_ER_1d.get_last_index() != -1)) {
                                                        auto& cpp_curvar0 = var_ER_1d;
                                                        cpp_current_dict["ER"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["ER"];
                                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                        }
                                                }
                                                if (var_GAM_2d.did_read()) {
                                                        cpp_current_dict["GAM"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["GAM"];
                                                        for (int cpp_i1 = var_GAM_2d.get_row_start_index(); cpp_i1 <= var_GAM_2d.get_row_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                                                            py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                                                            for (int cpp_i2 = var_GAM_2d.get_col_start_index(cpp_i1); cpp_i2 <= var_GAM_2d.get_col_last_index(cpp_i1); cpp_i2++) {
                                                                cpp_curdict1[py::cast(cpp_i2)] = var_GAM_2d(cpp_i1, cpp_i2);
                                                            }
                                                        }
                                                }
                                                if ((var_DER_1d.get_last_index() != -1)) {
                                                        auto& cpp_curvar0 = var_DER_1d;
                                                        cpp_current_dict["DER"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["DER"];
                                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                        }
                                                }
                                                if (var_DGAM_2d.did_read()) {
                                                        cpp_current_dict["DGAM"] = py::dict();
                                                        py::dict cpp_curdict0 = cpp_current_dict["DGAM"];
                                                        for (int cpp_i1 = var_DGAM_2d.get_row_start_index(); cpp_i1 <= var_DGAM_2d.get_row_last_index(); cpp_i1++) {
                                                            cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                                                            py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                                                            for (int cpp_i2 = var_DGAM_2d.get_col_start_index(cpp_i1); cpp_i2 <= var_DGAM_2d.get_col_last_index(cpp_i1); cpp_i2++) {
                                                                cpp_curdict1[py::cast(cpp_i2)] = var_DGAM_2d(cpp_i1, cpp_i2);
                                                            }
                                                        }
                                                }
                                                cpp_current_dict = cpp_parent_dict;
                                            }
                                        }
                                        cpp_line = cpp_read_line(cont);
                                        // read CONT record
                                        // assign expression to variable NDIGIT
                                        var_NDIGIT_0d = cpp_read_int_field(cpp_line, 2);
                                        aux_var_NDIGIT_0d_read = true;
                                        // assign expression to variable NNN
                                        var_NNN_0d = cpp_read_int_field(cpp_line, 3);
                                        aux_var_NNN_0d_read = true;
                                        // assign expression to variable NM
                                        var_NM_0d = cpp_read_int_field(cpp_line, 4);
                                        aux_var_NM_0d_read = true;

                                        for (int var_q_0d = 1;
                                             var_q_0d <= var_NM_0d; var_q_0d++) {
                                            bool aux_var_q_0d_read = true;
                                            {
                                                cpp_line = cpp_read_line(cont);
                                                int cpp_ndigit = var_NDIGIT_0d;
                                                if ((cpp_ndigit < 2 || cpp_ndigit > 6)) {
                                                    throw std::runtime_error("invalid NDIGIT (must be between 2 and 6)");
                                                }
                                                // assign expression to variable II
                                                var_II_1d.set(var_q_0d, cpp_read_custom_int_field(cpp_line, 0, 5));
                                                // assign expression to variable JJ
                                                var_JJ_1d.set(var_q_0d, cpp_read_custom_int_field(cpp_line, 5, 5));
                                                int cpp_step = cpp_ndigit + 1;
                                                int cpp_end = 65;
                                                int cpp_start;
                                                if (cpp_ndigit <= 5) {
                                                    cpp_start = 11;

                                                } else {
                                                    cpp_start = 10;
                                                }
                                                std::vector<int> cpp_intvec;
                                                for (int cpp_i = cpp_start; cpp_i < cpp_end; cpp_i += cpp_step) {
                                                    cpp_intvec.push_back(cpp_read_custom_int_field(cpp_line, cpp_i, cpp_step));
                                                }
                                                // assign expression to variable KIJ
                                                var_KIJ_1d.set(var_q_0d, cpp_intvec);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (! cpp_found_match) {
                            if (! cpp_found_match) {
                                if (((((((var_LRU_0d)==(2))))))) {
                                    // if statement evaluation
                                    cpp_found_match = true;
                                    cpp_line = cpp_read_line(cont);
                                    // read CONT record
                                    // assign expression to variable SPI
                                    var_SPI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                    aux_var_SPI_0d_read = true;
                                    // assign expression to variable AP
                                    var_AP_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                    aux_var_AP_0d_read = true;
                                    // assign expression to variable NLS
                                    var_NLS_0d = cpp_read_int_field(cpp_line, 4);
                                    aux_var_NLS_0d_read = true;

                                    for (int var_q_0d = 1;
                                         var_q_0d <= var_NLS_0d; var_q_0d++) {
                                        bool aux_var_q_0d_read = true;
                                        // open section l_group

                                        {
                                            py::dict cpp_parent_dict = cpp_current_dict;
                                            if (! cpp_parent_dict.contains("l_group")) {
                                                cpp_parent_dict["l_group"] = py::dict();
                                            }
                                            py::dict cpp_current_dict = cpp_parent_dict["l_group"];

                                            if (! cpp_current_dict.contains(py::cast(var_q_0d))) {
                                                cpp_current_dict[py::cast(var_q_0d)] = py::dict();
                                            }
                                            cpp_current_dict = cpp_current_dict[py::cast(var_q_0d)];
                                            // variable declarations
                                            double var_AWRI_0d;
                                            bool aux_var_AWRI_0d_read = false;
                                            int var_L_0d;
                                            bool aux_var_L_0d_read = false;
                                            int cpp_int_val;
                                            bool aux_cpp_int_val_read = false;
                                            int var_NJS_0d;
                                            bool aux_var_NJS_0d_read = false;
                                            NestedVector<double> var_D_1d;
                                            NestedVector<double> var_AJ_1d;
                                            NestedVector<double> var_GNO_1d;
                                            NestedVector<double> var_GG_1d;
                                            NestedVector<double> var_GF_1d;
                                            NestedVector<double> var_GX_1d;
                                            cpp_line = cpp_read_line(cont);
                                            // read LIST record
                                            // assign expression to variable AWRI
                                            var_AWRI_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                            aux_var_AWRI_0d_read = true;
                                            // assign expression to variable L
                                            var_L_0d = cpp_read_int_field(cpp_line, 2);
                                            aux_var_L_0d_read = true;
                                            // assign expression to variable cpp_int_val
                                            cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                            aux_cpp_int_val_read = true;
                                            // assign expression to variable NJS
                                            var_NJS_0d = (cpp_int_val/6);
                                            aux_var_NJS_0d_read = true;
                                            if ((! (aux_var_NJS_0d_read == true))) {
                                                // assign expression to variable NJS
                                                var_NJS_0d = cpp_read_int_field(cpp_line, 5);
                                                aux_var_NJS_0d_read = true;
                                            }
                                            {
                                                int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                int cpp_j = 0;
                                                // read LIST body

                                                for (int var_k_0d = 1;
                                                     var_k_0d <= var_NJS_0d; var_k_0d++) {
                                                    bool aux_var_k_0d_read = true;
                                                    // read LIST body
                                                    // assign expression to variable D
                                                    var_D_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable AJ
                                                    var_AJ_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable GNO
                                                    var_GNO_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable GG
                                                    var_GG_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable GF
                                                    var_GF_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable GX
                                                    var_GX_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                }
                                            }
                                            // store data in Python dictionary
                                            if ((aux_var_AWRI_0d_read == true)) {
                                                cpp_current_dict["AWRI"] = var_AWRI_0d;
                                            }
                                            if ((aux_var_L_0d_read == true)) {
                                                cpp_current_dict["L"] = var_L_0d;
                                            }
                                            if ((aux_var_NJS_0d_read == true)) {
                                                cpp_current_dict["NJS"] = var_NJS_0d;
                                            }
                                            if ((var_D_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_D_1d;
                                                    cpp_current_dict["D"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["D"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            if ((var_AJ_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_AJ_1d;
                                                    cpp_current_dict["AJ"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["AJ"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            if ((var_GNO_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_GNO_1d;
                                                    cpp_current_dict["GNO"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["GNO"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            if ((var_GG_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_GG_1d;
                                                    cpp_current_dict["GG"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["GG"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            if ((var_GF_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_GF_1d;
                                                    cpp_current_dict["GF"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["GF"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            if ((var_GX_1d.get_last_index() != -1)) {
                                                    auto& cpp_curvar0 = var_GX_1d;
                                                    cpp_current_dict["GX"] = py::dict();
                                                    py::dict cpp_curdict0 = cpp_current_dict["GX"];
                                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                                    }
                                            }
                                            cpp_current_dict = cpp_parent_dict;
                                        }
                                    }
                                    cpp_line = cpp_read_line(cont);
                                    // read LIST record
                                    // assign expression to variable MPAR
                                    var_MPAR_0d = cpp_read_int_field(cpp_line, 2);
                                    aux_var_MPAR_0d_read = true;
                                    // assign expression to variable NPAR
                                    var_NPAR_0d = cpp_read_int_field(cpp_line, 5);
                                    aux_var_NPAR_0d_read = true;
                                    if ((! (aux_var_NPAR_0d_read == true))) {
                                        throw std::runtime_error("The equation ((NPAR*(NPAR+1))/2)==value cannot be solved for NPAR because this variable could not be isolated.");
                                    }
                                    {
                                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                        int cpp_j = 0;
                                        // read LIST body
                                        var_RV_2d.init(1, var_NPAR_0d, 1, var_NPAR_0d, true, false);

                                        for (int var_p_0d = 1;
                                             var_p_0d <= var_NPAR_0d; var_p_0d++) {
                                            bool aux_var_p_0d_read = true;
                                            // read LIST body

                                            for (int var_q_0d = var_p_0d;
                                                 var_q_0d <= var_NPAR_0d; var_q_0d++) {
                                                bool aux_var_q_0d_read = true;
                                                // read LIST body
                                                // assign expression to variable RV
                                                var_RV_2d(var_p_0d, var_q_0d) = cpp_floatvec[cpp_j++];
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    // store data in Python dictionary
                    if ((aux_var_EL_0d_read == true)) {
                        cpp_current_dict["EL"] = var_EL_0d;
                    }
                    if ((aux_var_EH_0d_read == true)) {
                        cpp_current_dict["EH"] = var_EH_0d;
                    }
                    if ((aux_var_LRU_0d_read == true)) {
                        cpp_current_dict["LRU"] = var_LRU_0d;
                    }
                    if ((aux_var_LRF_0d_read == true)) {
                        cpp_current_dict["LRF"] = var_LRF_0d;
                    }
                    if ((aux_var_NRO_0d_read == true)) {
                        cpp_current_dict["NRO"] = var_NRO_0d;
                    }
                    if ((aux_var_NAPS_0d_read == true)) {
                        cpp_current_dict["NAPS"] = var_NAPS_0d;
                    }
                    if ((aux_var_NI_0d_read == true)) {
                        cpp_current_dict["NI"] = var_NI_0d;
                    }
                    if ((aux_var_SPI_0d_read == true)) {
                        cpp_current_dict["SPI"] = var_SPI_0d;
                    }
                    if ((aux_var_AP_0d_read == true)) {
                        cpp_current_dict["AP"] = var_AP_0d;
                    }
                    if ((aux_var_LCOMP_0d_read == true)) {
                        cpp_current_dict["LCOMP"] = var_LCOMP_0d;
                    }
                    if ((aux_var_NLS_0d_read == true)) {
                        cpp_current_dict["NLS"] = var_NLS_0d;
                    }
                    if ((aux_var_ISR_0d_read == true)) {
                        cpp_current_dict["ISR"] = var_ISR_0d;
                    }
                    if ((aux_var_DAP_0d_read == true)) {
                        cpp_current_dict["DAP"] = var_DAP_0d;
                    }
                    if ((aux_var_AWRI_0d_read == true)) {
                        cpp_current_dict["AWRI"] = var_AWRI_0d;
                    }
                    if ((aux_var_NSRS_0d_read == true)) {
                        cpp_current_dict["NSRS"] = var_NSRS_0d;
                    }
                    if ((aux_var_NLRS_0d_read == true)) {
                        cpp_current_dict["NLRS"] = var_NLRS_0d;
                    }
                    if ((aux_var_MLS_0d_read == true)) {
                        cpp_current_dict["MLS"] = var_MLS_0d;
                    }
                    if ((var_DAP_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_DAP_1d;
                            cpp_current_dict["DAP"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["DAP"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((aux_var_JCH_0d_read == true)) {
                        cpp_current_dict["JCH"] = var_JCH_0d;
                    }
                    if ((aux_var_NCH_0d_read == true)) {
                        cpp_current_dict["NCH"] = var_NCH_0d;
                    }
                    if (var_DAP_2d.did_read()) {
                            cpp_current_dict["DAP"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["DAP"];
                            for (int cpp_i1 = var_DAP_2d.get_row_start_index(); cpp_i1 <= var_DAP_2d.get_row_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                                py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                                for (int cpp_i2 = var_DAP_2d.get_col_start_index(cpp_i1); cpp_i2 <= var_DAP_2d.get_col_last_index(cpp_i1); cpp_i2++) {
                                    cpp_curdict1[py::cast(cpp_i2)] = var_DAP_2d(cpp_i1, cpp_i2);
                                }
                            }
                    }
                    if ((aux_var_QX_0d_read == true)) {
                        cpp_current_dict["QX"] = var_QX_0d;
                    }
                    if ((aux_var_LRX_0d_read == true)) {
                        cpp_current_dict["LRX"] = var_LRX_0d;
                    }
                    if ((aux_var_NRSA_0d_read == true)) {
                        cpp_current_dict["NRSA"] = var_NRSA_0d;
                    }
                    if ((var_ER_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_ER_1d;
                            cpp_current_dict["ER"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["ER"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_AJ_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_AJ_1d;
                            cpp_current_dict["AJ"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["AJ"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_GT_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_GT_1d;
                            cpp_current_dict["GT"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["GT"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_GN_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_GN_1d;
                            cpp_current_dict["GN"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["GN"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_GG_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_GG_1d;
                            cpp_current_dict["GG"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["GG"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_GF_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_GF_1d;
                            cpp_current_dict["GF"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["GF"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_DER_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_DER_1d;
                            cpp_current_dict["DER"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["DER"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_DGN_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_DGN_1d;
                            cpp_current_dict["DGN"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["DGN"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_DGG_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_DGG_1d;
                            cpp_current_dict["DGG"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["DGG"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_DGF_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_DGF_1d;
                            cpp_current_dict["DGF"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["DGF"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((aux_var_NDIGIT_0d_read == true)) {
                        cpp_current_dict["NDIGIT"] = var_NDIGIT_0d;
                    }
                    if ((aux_var_NNN_0d_read == true)) {
                        cpp_current_dict["NNN"] = var_NNN_0d;
                    }
                    if ((aux_var_NM_0d_read == true)) {
                        cpp_current_dict["NM"] = var_NM_0d;
                    }
                    if ((var_II_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_II_1d;
                            cpp_current_dict["II"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["II"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_JJ_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_JJ_1d;
                            cpp_current_dict["JJ"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["JJ"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_KIJ_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_KIJ_1d;
                            cpp_current_dict["KIJ"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["KIJ"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((aux_var_LAD_0d_read == true)) {
                        cpp_current_dict["LAD"] = var_LAD_0d;
                    }
                    if ((aux_var_APL_0d_read == true)) {
                        cpp_current_dict["APL"] = var_APL_0d;
                    }
                    if ((var_GFA_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_GFA_1d;
                            cpp_current_dict["GFA"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["GFA"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_GFB_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_GFB_1d;
                            cpp_current_dict["GFB"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["GFB"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_DGFA_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_DGFA_1d;
                            cpp_current_dict["DGFA"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["DGFA"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_DGFB_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_DGFB_1d;
                            cpp_current_dict["DGFB"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["DGFB"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((aux_var_IFG_0d_read == true)) {
                        cpp_current_dict["IFG"] = var_IFG_0d;
                    }
                    if ((aux_var_NJS_0d_read == true)) {
                        cpp_current_dict["NJS"] = var_NJS_0d;
                    }
                    if ((aux_var_NJCH_0d_read == true)) {
                        cpp_current_dict["NJCH"] = var_NJCH_0d;
                    }
                    if ((aux_var_NPP_0d_read == true)) {
                        cpp_current_dict["NPP"] = var_NPP_0d;
                    }
                    if ((aux_var_NJSX_0d_read == true)) {
                        cpp_current_dict["NJSX"] = var_NJSX_0d;
                    }
                    if ((var_MA_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_MA_1d;
                            cpp_current_dict["MA"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["MA"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_MB_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_MB_1d;
                            cpp_current_dict["MB"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["MB"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_ZA_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_ZA_1d;
                            cpp_current_dict["ZA"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["ZA"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_ZB_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_ZB_1d;
                            cpp_current_dict["ZB"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["ZB"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_IA_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_IA_1d;
                            cpp_current_dict["IA"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["IA"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_IB_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_IB_1d;
                            cpp_current_dict["IB"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["IB"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_Q_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_Q_1d;
                            cpp_current_dict["Q"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["Q"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_PNT_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_PNT_1d;
                            cpp_current_dict["PNT"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["PNT"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_SHF_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_SHF_1d;
                            cpp_current_dict["SHF"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["SHF"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_MT_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_MT_1d;
                            cpp_current_dict["MT"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["MT"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_PA_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_PA_1d;
                            cpp_current_dict["PA"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["PA"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((var_PB_1d.get_last_index() != -1)) {
                            auto& cpp_curvar0 = var_PB_1d;
                            cpp_current_dict["PB"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["PB"];
                            for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                            }
                    }
                    if ((aux_var_MPAR_0d_read == true)) {
                        cpp_current_dict["MPAR"] = var_MPAR_0d;
                    }
                    if ((aux_var_NPAR_0d_read == true)) {
                        cpp_current_dict["NPAR"] = var_NPAR_0d;
                    }
                    if (var_RV_2d.did_read()) {
                            cpp_current_dict["RV"] = py::dict();
                            py::dict cpp_curdict0 = cpp_current_dict["RV"];
                            for (int cpp_i1 = var_RV_2d.get_row_start_index(); cpp_i1 <= var_RV_2d.get_row_last_index(); cpp_i1++) {
                                cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                                py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                                for (int cpp_i2 = var_RV_2d.get_col_start_index(cpp_i1); cpp_i2 <= var_RV_2d.get_col_last_index(cpp_i1); cpp_i2++) {
                                    cpp_curdict1[py::cast(cpp_i2)] = var_RV_2d(cpp_i1, cpp_i2);
                                }
                            }
                    }
                    cpp_current_dict = cpp_parent_dict;
                }
            }
            // store data in Python dictionary
            if ((aux_var_ZAI_0d_read == true)) {
                cpp_current_dict["ZAI"] = var_ZAI_0d;
            }
            if ((aux_var_ABN_0d_read == true)) {
                cpp_current_dict["ABN"] = var_ABN_0d;
            }
            if ((aux_var_LFW_0d_read == true)) {
                cpp_current_dict["LFW"] = var_LFW_0d;
            }
            if ((aux_var_NER_0d_read == true)) {
                cpp_current_dict["NER"] = var_NER_0d;
            }
            cpp_current_dict = cpp_parent_dict;
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_NIS_0d_read == true)) {
        cpp_current_dict["NIS"] = var_NIS_0d;
    }
    return cpp_current_dict;
}

py::dict parse_mf33_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_MTL_0d;
    bool aux_var_MTL_0d_read = false;
    int var_NL_0d;
    bool aux_var_NL_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // assign expression to variable MTL
    var_MTL_0d = cpp_read_int_field(cpp_line, 3);
    aux_var_MTL_0d_read = true;
    // assign expression to variable NL
    var_NL_0d = cpp_read_int_field(cpp_line, 5);
    aux_var_NL_0d_read = true;
    // evaluate if-elif-else clause
    {
        bool cpp_found_match = false;
        if (! cpp_found_match) {
            if (((((((var_MTL_0d)==(0))))))) {
                // if statement evaluation
                cpp_found_match = true;

                for (int var_n_0d = 1;
                     var_n_0d <= var_NL_0d; var_n_0d++) {
                    bool aux_var_n_0d_read = true;
                    // open section subsection

                    {
                        py::dict cpp_parent_dict = cpp_current_dict;
                        if (! cpp_parent_dict.contains("subsection")) {
                            cpp_parent_dict["subsection"] = py::dict();
                        }
                        py::dict cpp_current_dict = cpp_parent_dict["subsection"];

                        if (! cpp_current_dict.contains(py::cast(var_n_0d))) {
                            cpp_current_dict[py::cast(var_n_0d)] = py::dict();
                        }
                        cpp_current_dict = cpp_current_dict[py::cast(var_n_0d)];
                        // variable declarations
                        double var_XMF1_0d;
                        bool aux_var_XMF1_0d_read = false;
                        double var_XLFS1_0d;
                        bool aux_var_XLFS1_0d_read = false;
                        int var_MAT1_0d;
                        bool aux_var_MAT1_0d_read = false;
                        int var_MT1_0d;
                        bool aux_var_MT1_0d_read = false;
                        int var_NC_0d;
                        bool aux_var_NC_0d_read = false;
                        int var_NI_0d;
                        bool aux_var_NI_0d_read = false;
                        cpp_line = cpp_read_line(cont);
                        // read CONT record
                        // assign expression to variable XMF1
                        var_XMF1_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                        aux_var_XMF1_0d_read = true;
                        // assign expression to variable XLFS1
                        var_XLFS1_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                        aux_var_XLFS1_0d_read = true;
                        // assign expression to variable MAT1
                        var_MAT1_0d = cpp_read_int_field(cpp_line, 2);
                        aux_var_MAT1_0d_read = true;
                        // assign expression to variable MT1
                        var_MT1_0d = cpp_read_int_field(cpp_line, 3);
                        aux_var_MT1_0d_read = true;
                        // assign expression to variable NC
                        var_NC_0d = cpp_read_int_field(cpp_line, 4);
                        aux_var_NC_0d_read = true;
                        // assign expression to variable NI
                        var_NI_0d = cpp_read_int_field(cpp_line, 5);
                        aux_var_NI_0d_read = true;

                        for (int var_m_0d = 1;
                             var_m_0d <= var_NC_0d; var_m_0d++) {
                            bool aux_var_m_0d_read = true;
                            // open section nc_subsection

                            {
                                py::dict cpp_parent_dict = cpp_current_dict;
                                if (! cpp_parent_dict.contains("nc_subsection")) {
                                    cpp_parent_dict["nc_subsection"] = py::dict();
                                }
                                py::dict cpp_current_dict = cpp_parent_dict["nc_subsection"];

                                if (! cpp_current_dict.contains(py::cast(var_m_0d))) {
                                    cpp_current_dict[py::cast(var_m_0d)] = py::dict();
                                }
                                cpp_current_dict = cpp_current_dict[py::cast(var_m_0d)];
                                // variable declarations
                                int var_LTY_0d;
                                bool aux_var_LTY_0d_read = false;
                                double var_E1_0d;
                                bool aux_var_E1_0d_read = false;
                                double var_E2_0d;
                                bool aux_var_E2_0d_read = false;
                                int cpp_int_val;
                                bool aux_cpp_int_val_read = false;
                                int var_NCI_0d;
                                bool aux_var_NCI_0d_read = false;
                                NestedVector<double> var_C_1d;
                                NestedVector<double> var_XMT_1d;
                                int var_MATS_0d;
                                bool aux_var_MATS_0d_read = false;
                                int var_MTS_0d;
                                bool aux_var_MTS_0d_read = false;
                                int var_NEI_0d;
                                bool aux_var_NEI_0d_read = false;
                                double var_XMFS_0d;
                                bool aux_var_XMFS_0d_read = false;
                                double var_XLFSS_0d;
                                bool aux_var_XLFSS_0d_read = false;
                                NestedVector<double> var_E_1d;
                                NestedVector<double> var_WE_1d;
                                cpp_line = cpp_read_line(cont);
                                // read CONT record
                                // assign expression to variable LTY
                                var_LTY_0d = cpp_read_int_field(cpp_line, 3);
                                aux_var_LTY_0d_read = true;
                                // evaluate if-elif-else clause
                                {
                                    bool cpp_found_match = false;
                                    if (! cpp_found_match) {
                                        if (((((((var_LTY_0d)==(0))))))) {
                                            // if statement evaluation
                                            cpp_found_match = true;
                                            cpp_line = cpp_read_line(cont);
                                            // read LIST record
                                            // assign expression to variable E1
                                            var_E1_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                            aux_var_E1_0d_read = true;
                                            // assign expression to variable E2
                                            var_E2_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                            aux_var_E2_0d_read = true;
                                            // assign expression to variable cpp_int_val
                                            cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                            aux_cpp_int_val_read = true;
                                            // assign expression to variable NCI
                                            var_NCI_0d = (cpp_int_val/2);
                                            aux_var_NCI_0d_read = true;
                                            if ((! (aux_var_NCI_0d_read == true))) {
                                                // assign expression to variable NCI
                                                var_NCI_0d = cpp_read_int_field(cpp_line, 5);
                                                aux_var_NCI_0d_read = true;
                                            }
                                            {
                                                int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                int cpp_j = 0;
                                                // read LIST body

                                                for (int var_i_0d = 1;
                                                     var_i_0d <= var_NCI_0d; var_i_0d++) {
                                                    bool aux_var_i_0d_read = true;
                                                    // read LIST body
                                                    // assign expression to variable C
                                                    var_C_1d.set(var_i_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable XMT
                                                    var_XMT_1d.set(var_i_0d, cpp_floatvec[cpp_j++]);
                                                }
                                            }
                                        }
                                    }
                                    if (! cpp_found_match) {
                                        if (! cpp_found_match) {
                                            if ((((((((var_LTY_0d)>=(1))))&&(((var_LTY_0d)<=(3))))))) {
                                                // if statement evaluation
                                                cpp_found_match = true;
                                                cpp_line = cpp_read_line(cont);
                                                // read LIST record
                                                // assign expression to variable E1
                                                var_E1_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                aux_var_E1_0d_read = true;
                                                // assign expression to variable E2
                                                var_E2_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                aux_var_E2_0d_read = true;
                                                // assign expression to variable MATS
                                                var_MATS_0d = cpp_read_int_field(cpp_line, 2);
                                                aux_var_MATS_0d_read = true;
                                                // assign expression to variable MTS
                                                var_MTS_0d = cpp_read_int_field(cpp_line, 3);
                                                aux_var_MTS_0d_read = true;
                                                // assign expression to variable cpp_int_val
                                                cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                aux_cpp_int_val_read = true;
                                                // assign expression to variable NEI
                                                var_NEI_0d = ((cpp_int_val+(-2))/2);
                                                aux_var_NEI_0d_read = true;
                                                if ((! (aux_var_NEI_0d_read == true))) {
                                                    // assign expression to variable NEI
                                                    var_NEI_0d = cpp_read_int_field(cpp_line, 5);
                                                    aux_var_NEI_0d_read = true;
                                                }
                                                {
                                                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                    int cpp_j = 0;
                                                    // read LIST body
                                                    // assign expression to variable XMFS
                                                    var_XMFS_0d = cpp_floatvec[cpp_j++];
                                                    aux_var_XMFS_0d_read = true;
                                                    // assign expression to variable XLFSS
                                                    var_XLFSS_0d = cpp_floatvec[cpp_j++];
                                                    aux_var_XLFSS_0d_read = true;

                                                    for (int var_i_0d = 1;
                                                         var_i_0d <= var_NEI_0d; var_i_0d++) {
                                                        bool aux_var_i_0d_read = true;
                                                        // read LIST body
                                                        // assign expression to variable E
                                                        var_E_1d.set(var_i_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable WE
                                                        var_WE_1d.set(var_i_0d, cpp_floatvec[cpp_j++]);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                // store data in Python dictionary
                                if ((aux_var_LTY_0d_read == true)) {
                                    cpp_current_dict["LTY"] = var_LTY_0d;
                                }
                                if ((aux_var_E1_0d_read == true)) {
                                    cpp_current_dict["E1"] = var_E1_0d;
                                }
                                if ((aux_var_E2_0d_read == true)) {
                                    cpp_current_dict["E2"] = var_E2_0d;
                                }
                                if ((aux_var_NCI_0d_read == true)) {
                                    cpp_current_dict["NCI"] = var_NCI_0d;
                                }
                                if ((var_C_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_C_1d;
                                        cpp_current_dict["C"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["C"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                if ((var_XMT_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_XMT_1d;
                                        cpp_current_dict["XMT"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["XMT"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                if ((aux_var_MATS_0d_read == true)) {
                                    cpp_current_dict["MATS"] = var_MATS_0d;
                                }
                                if ((aux_var_MTS_0d_read == true)) {
                                    cpp_current_dict["MTS"] = var_MTS_0d;
                                }
                                if ((aux_var_NEI_0d_read == true)) {
                                    cpp_current_dict["NEI"] = var_NEI_0d;
                                }
                                if ((aux_var_XMFS_0d_read == true)) {
                                    cpp_current_dict["XMFS"] = var_XMFS_0d;
                                }
                                if ((aux_var_XLFSS_0d_read == true)) {
                                    cpp_current_dict["XLFSS"] = var_XLFSS_0d;
                                }
                                if ((var_E_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_E_1d;
                                        cpp_current_dict["E"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["E"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                if ((var_WE_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_WE_1d;
                                        cpp_current_dict["WE"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["WE"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                cpp_current_dict = cpp_parent_dict;
                            }
                        }

                        for (int var_m_0d = 1;
                             var_m_0d <= var_NI_0d; var_m_0d++) {
                            bool aux_var_m_0d_read = true;
                            // open section ni_subsection

                            {
                                py::dict cpp_parent_dict = cpp_current_dict;
                                if (! cpp_parent_dict.contains("ni_subsection")) {
                                    cpp_parent_dict["ni_subsection"] = py::dict();
                                }
                                py::dict cpp_current_dict = cpp_parent_dict["ni_subsection"];

                                if (! cpp_current_dict.contains(py::cast(var_m_0d))) {
                                    cpp_current_dict[py::cast(var_m_0d)] = py::dict();
                                }
                                cpp_current_dict = cpp_current_dict[py::cast(var_m_0d)];
                                // variable declarations
                                int var_LT_0d;
                                bool aux_var_LT_0d_read = false;
                                int var_LB_0d;
                                bool aux_var_LB_0d_read = false;
                                int cpp_int_val;
                                bool aux_cpp_int_val_read = false;
                                int var_NP_0d;
                                bool aux_var_NP_0d_read = false;
                                NestedVector<double> var_Ek_1d;
                                NestedVector<double> var_Fk_1d;
                                NestedVector<double> var_El_1d;
                                NestedVector<double> var_Fl_1d;
                                int var_LS_0d;
                                bool aux_var_LS_0d_read = false;
                                int var_NE_0d;
                                bool aux_var_NE_0d_read = false;
                                NestedVector<double> var_E_1d;
                                Matrix2d<double> var_F_2d;
                                int var_NER_0d;
                                bool aux_var_NER_0d_read = false;
                                int var_NEC_0d;
                                bool aux_var_NEC_0d_read = false;
                                NestedVector<double> var_ER_1d;
                                NestedVector<double> var_EC_1d;
                                NestedVector<double> var_F_1d;
                                // evaluate if-elif-else clause
                                {
                                    bool cpp_found_match = false;
                                    if (! cpp_found_match) {
                                        // if statement evaluation with lookahead
                                        {
                                            std::streampos cpp_old_streampos = cont.tellg();
                                            {
                                                // variable declarations
                                                int& glob_var_LT_0d = var_LT_0d;
                                                int var_LT_0d = glob_var_LT_0d;
                                                bool& glob_aux_var_LT_0d_read = aux_var_LT_0d_read;
                                                bool aux_var_LT_0d_read = glob_aux_var_LT_0d_read;
                                                int& glob_var_LB_0d = var_LB_0d;
                                                int var_LB_0d = glob_var_LB_0d;
                                                bool& glob_aux_var_LB_0d_read = aux_var_LB_0d_read;
                                                bool aux_var_LB_0d_read = glob_aux_var_LB_0d_read;
                                                int& glob_cpp_int_val = cpp_int_val;
                                                int cpp_int_val = glob_cpp_int_val;
                                                bool& glob_aux_cpp_int_val_read = aux_cpp_int_val_read;
                                                bool aux_cpp_int_val_read = glob_aux_cpp_int_val_read;
                                                int& glob_var_NP_0d = var_NP_0d;
                                                int var_NP_0d = glob_var_NP_0d;
                                                bool& glob_aux_var_NP_0d_read = aux_var_NP_0d_read;
                                                bool aux_var_NP_0d_read = glob_aux_var_NP_0d_read;
                                                cpp_line = cpp_read_line(cont);
                                                // read LIST record
                                                // assign expression to variable LT
                                                var_LT_0d = cpp_read_int_field(cpp_line, 2);
                                                aux_var_LT_0d_read = true;
                                                // assign expression to variable LB
                                                var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                aux_var_LB_0d_read = true;
                                                // assign expression to variable cpp_int_val
                                                cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                aux_cpp_int_val_read = true;
                                                // assign expression to variable NP
                                                var_NP_0d = (cpp_int_val/2);
                                                aux_var_NP_0d_read = true;
                                                if ((! (aux_var_NP_0d_read == true))) {
                                                    // assign expression to variable NP
                                                    var_NP_0d = cpp_read_int_field(cpp_line, 5);
                                                    aux_var_NP_0d_read = true;
                                                }
                                                if ((((((((var_LB_0d)>=(0))))&&(((var_LB_0d)<=(4))))))) {
                                                    cpp_found_match = true;
                                                }
                                                cont.seekg(cpp_old_streampos);
                                            }
                                            if (cpp_found_match) {
                                                cpp_line = cpp_read_line(cont);
                                                // read LIST record
                                                // assign expression to variable LT
                                                var_LT_0d = cpp_read_int_field(cpp_line, 2);
                                                aux_var_LT_0d_read = true;
                                                // assign expression to variable LB
                                                var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                aux_var_LB_0d_read = true;
                                                // assign expression to variable cpp_int_val
                                                cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                aux_cpp_int_val_read = true;
                                                // assign expression to variable NP
                                                var_NP_0d = (cpp_int_val/2);
                                                aux_var_NP_0d_read = true;
                                                if ((! (aux_var_NP_0d_read == true))) {
                                                    // assign expression to variable NP
                                                    var_NP_0d = cpp_read_int_field(cpp_line, 5);
                                                    aux_var_NP_0d_read = true;
                                                }
                                                {
                                                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                    int cpp_j = 0;
                                                    // read LIST body

                                                    for (int var_k_0d = 1;
                                                         var_k_0d <= (var_NP_0d-var_LT_0d); var_k_0d++) {
                                                        bool aux_var_k_0d_read = true;
                                                        // read LIST body
                                                        // assign expression to variable Ek
                                                        var_Ek_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable Fk
                                                        var_Fk_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                    }

                                                    for (int var_k_0d = 1;
                                                         var_k_0d <= var_LT_0d; var_k_0d++) {
                                                        bool aux_var_k_0d_read = true;
                                                        // read LIST body
                                                        // assign expression to variable El
                                                        var_El_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable Fl
                                                        var_Fl_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (! cpp_found_match) {
                                        if (! cpp_found_match) {
                                            // if statement evaluation with lookahead
                                            {
                                                std::streampos cpp_old_streampos = cont.tellg();
                                                {
                                                    // variable declarations
                                                    int& glob_var_LS_0d = var_LS_0d;
                                                    int var_LS_0d = glob_var_LS_0d;
                                                    bool& glob_aux_var_LS_0d_read = aux_var_LS_0d_read;
                                                    bool aux_var_LS_0d_read = glob_aux_var_LS_0d_read;
                                                    int& glob_var_LB_0d = var_LB_0d;
                                                    int var_LB_0d = glob_var_LB_0d;
                                                    bool& glob_aux_var_LB_0d_read = aux_var_LB_0d_read;
                                                    bool aux_var_LB_0d_read = glob_aux_var_LB_0d_read;
                                                    int& glob_var_NE_0d = var_NE_0d;
                                                    int var_NE_0d = glob_var_NE_0d;
                                                    bool& glob_aux_var_NE_0d_read = aux_var_NE_0d_read;
                                                    bool aux_var_NE_0d_read = glob_aux_var_NE_0d_read;
                                                    cpp_line = cpp_read_line(cont);
                                                    // read LIST record
                                                    // assign expression to variable LS
                                                    var_LS_0d = cpp_read_int_field(cpp_line, 2);
                                                    aux_var_LS_0d_read = true;
                                                    // assign expression to variable LB
                                                    var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                    aux_var_LB_0d_read = true;
                                                    // assign expression to variable NE
                                                    var_NE_0d = cpp_read_int_field(cpp_line, 5);
                                                    aux_var_NE_0d_read = true;
                                                    if ((! (aux_var_NE_0d_read == true))) {
                                                        throw std::runtime_error("The equation ((NE*(NE-1))+1)==value cannot be solved for NE because this variable could not be isolated.");
                                                    }
                                                    if ((((((((var_LB_0d)==(5))))&&(((var_LS_0d)==(0))))))) {
                                                        cpp_found_match = true;
                                                    }
                                                    cont.seekg(cpp_old_streampos);
                                                }
                                                if (cpp_found_match) {
                                                    cpp_line = cpp_read_line(cont);
                                                    // read LIST record
                                                    // assign expression to variable LS
                                                    var_LS_0d = cpp_read_int_field(cpp_line, 2);
                                                    aux_var_LS_0d_read = true;
                                                    // assign expression to variable LB
                                                    var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                    aux_var_LB_0d_read = true;
                                                    // assign expression to variable NE
                                                    var_NE_0d = cpp_read_int_field(cpp_line, 5);
                                                    aux_var_NE_0d_read = true;
                                                    if ((! (aux_var_NE_0d_read == true))) {
                                                        throw std::runtime_error("The equation ((NE*(NE-1))+1)==value cannot be solved for NE because this variable could not be isolated.");
                                                    }
                                                    {
                                                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                        int cpp_j = 0;
                                                        // read LIST body

                                                        for (int var_k_0d = 1;
                                                             var_k_0d <= var_NE_0d; var_k_0d++) {
                                                            bool aux_var_k_0d_read = true;
                                                            // read LIST body
                                                            // assign expression to variable E
                                                            var_E_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        }
                                                        var_F_2d.init(1, (var_NE_0d-1), 1, (var_NE_0d-1), false, false);

                                                        for (int var_k_0d = 1;
                                                             var_k_0d <= (var_NE_0d-1); var_k_0d++) {
                                                            bool aux_var_k_0d_read = true;
                                                            // read LIST body

                                                            for (int var_kp_0d = 1;
                                                                 var_kp_0d <= (var_NE_0d-1); var_kp_0d++) {
                                                                bool aux_var_kp_0d_read = true;
                                                                // read LIST body
                                                                // assign expression to variable F
                                                                var_F_2d(var_k_0d, var_kp_0d) = cpp_floatvec[cpp_j++];
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (! cpp_found_match) {
                                        if (! cpp_found_match) {
                                            // if statement evaluation with lookahead
                                            {
                                                std::streampos cpp_old_streampos = cont.tellg();
                                                {
                                                    // variable declarations
                                                    int& glob_var_LS_0d = var_LS_0d;
                                                    int var_LS_0d = glob_var_LS_0d;
                                                    bool& glob_aux_var_LS_0d_read = aux_var_LS_0d_read;
                                                    bool aux_var_LS_0d_read = glob_aux_var_LS_0d_read;
                                                    int& glob_var_LB_0d = var_LB_0d;
                                                    int var_LB_0d = glob_var_LB_0d;
                                                    bool& glob_aux_var_LB_0d_read = aux_var_LB_0d_read;
                                                    bool aux_var_LB_0d_read = glob_aux_var_LB_0d_read;
                                                    int& glob_var_NE_0d = var_NE_0d;
                                                    int var_NE_0d = glob_var_NE_0d;
                                                    bool& glob_aux_var_NE_0d_read = aux_var_NE_0d_read;
                                                    bool aux_var_NE_0d_read = glob_aux_var_NE_0d_read;
                                                    cpp_line = cpp_read_line(cont);
                                                    // read LIST record
                                                    // assign expression to variable LS
                                                    var_LS_0d = cpp_read_int_field(cpp_line, 2);
                                                    aux_var_LS_0d_read = true;
                                                    // assign expression to variable LB
                                                    var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                    aux_var_LB_0d_read = true;
                                                    // assign expression to variable NE
                                                    var_NE_0d = cpp_read_int_field(cpp_line, 5);
                                                    aux_var_NE_0d_read = true;
                                                    if ((! (aux_var_NE_0d_read == true))) {
                                                        throw std::runtime_error("The equation ((NE*(NE+1))/2)==value cannot be solved for NE because this variable could not be isolated.");
                                                    }
                                                    if ((((((((var_LB_0d)==(5))))&&(((var_LS_0d)==(1))))))) {
                                                        cpp_found_match = true;
                                                    }
                                                    cont.seekg(cpp_old_streampos);
                                                }
                                                if (cpp_found_match) {
                                                    cpp_line = cpp_read_line(cont);
                                                    // read LIST record
                                                    // assign expression to variable LS
                                                    var_LS_0d = cpp_read_int_field(cpp_line, 2);
                                                    aux_var_LS_0d_read = true;
                                                    // assign expression to variable LB
                                                    var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                    aux_var_LB_0d_read = true;
                                                    // assign expression to variable NE
                                                    var_NE_0d = cpp_read_int_field(cpp_line, 5);
                                                    aux_var_NE_0d_read = true;
                                                    if ((! (aux_var_NE_0d_read == true))) {
                                                        throw std::runtime_error("The equation ((NE*(NE+1))/2)==value cannot be solved for NE because this variable could not be isolated.");
                                                    }
                                                    {
                                                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                        int cpp_j = 0;
                                                        // read LIST body

                                                        for (int var_k_0d = 1;
                                                             var_k_0d <= var_NE_0d; var_k_0d++) {
                                                            bool aux_var_k_0d_read = true;
                                                            // read LIST body
                                                            // assign expression to variable E
                                                            var_E_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        }
                                                        var_F_2d.init(1, (var_NE_0d-1), 1, (var_NE_0d-1), true, false);

                                                        for (int var_k_0d = 1;
                                                             var_k_0d <= (var_NE_0d-1); var_k_0d++) {
                                                            bool aux_var_k_0d_read = true;
                                                            // read LIST body

                                                            for (int var_kp_0d = var_k_0d;
                                                                 var_kp_0d <= (var_NE_0d-1); var_kp_0d++) {
                                                                bool aux_var_kp_0d_read = true;
                                                                // read LIST body
                                                                // assign expression to variable F
                                                                var_F_2d(var_k_0d, var_kp_0d) = cpp_floatvec[cpp_j++];
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (! cpp_found_match) {
                                        if (! cpp_found_match) {
                                            // if statement evaluation with lookahead
                                            {
                                                std::streampos cpp_old_streampos = cont.tellg();
                                                {
                                                    // variable declarations
                                                    int& glob_var_LB_0d = var_LB_0d;
                                                    int var_LB_0d = glob_var_LB_0d;
                                                    bool& glob_aux_var_LB_0d_read = aux_var_LB_0d_read;
                                                    bool aux_var_LB_0d_read = glob_aux_var_LB_0d_read;
                                                    int& glob_var_NER_0d = var_NER_0d;
                                                    int var_NER_0d = glob_var_NER_0d;
                                                    bool& glob_aux_var_NER_0d_read = aux_var_NER_0d_read;
                                                    bool aux_var_NER_0d_read = glob_aux_var_NER_0d_read;
                                                    int& glob_cpp_int_val = cpp_int_val;
                                                    int cpp_int_val = glob_cpp_int_val;
                                                    bool& glob_aux_cpp_int_val_read = aux_cpp_int_val_read;
                                                    bool aux_cpp_int_val_read = glob_aux_cpp_int_val_read;
                                                    int& glob_var_NEC_0d = var_NEC_0d;
                                                    int var_NEC_0d = glob_var_NEC_0d;
                                                    bool& glob_aux_var_NEC_0d_read = aux_var_NEC_0d_read;
                                                    bool aux_var_NEC_0d_read = glob_aux_var_NEC_0d_read;
                                                    cpp_line = cpp_read_line(cont);
                                                    // read LIST record
                                                    // assign expression to variable LB
                                                    var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                    aux_var_LB_0d_read = true;
                                                    // assign expression to variable NER
                                                    var_NER_0d = cpp_read_int_field(cpp_line, 5);
                                                    aux_var_NER_0d_read = true;
                                                    // assign expression to variable cpp_int_val
                                                    cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                    aux_cpp_int_val_read = true;
                                                    // assign expression to variable NEC
                                                    var_NEC_0d = ((cpp_int_val+(-1))/var_NER_0d);
                                                    aux_var_NEC_0d_read = true;
                                                    if ((! (aux_var_NER_0d_read == true))) {
                                                        // assign expression to variable cpp_int_val
                                                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                        aux_cpp_int_val_read = true;
                                                        // assign expression to variable NER
                                                        var_NER_0d = ((cpp_int_val+(-1))/var_NEC_0d);
                                                        aux_var_NER_0d_read = true;
                                                    }
                                                    if (((((((var_LB_0d)==(6))))))) {
                                                        cpp_found_match = true;
                                                    }
                                                    cont.seekg(cpp_old_streampos);
                                                }
                                                if (cpp_found_match) {
                                                    cpp_line = cpp_read_line(cont);
                                                    // read LIST record
                                                    // assign expression to variable LB
                                                    var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                    aux_var_LB_0d_read = true;
                                                    // assign expression to variable NER
                                                    var_NER_0d = cpp_read_int_field(cpp_line, 5);
                                                    aux_var_NER_0d_read = true;
                                                    // assign expression to variable cpp_int_val
                                                    cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                    aux_cpp_int_val_read = true;
                                                    // assign expression to variable NEC
                                                    var_NEC_0d = ((cpp_int_val+(-1))/var_NER_0d);
                                                    aux_var_NEC_0d_read = true;
                                                    if ((! (aux_var_NER_0d_read == true))) {
                                                        // assign expression to variable cpp_int_val
                                                        cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                        aux_cpp_int_val_read = true;
                                                        // assign expression to variable NER
                                                        var_NER_0d = ((cpp_int_val+(-1))/var_NEC_0d);
                                                        aux_var_NER_0d_read = true;
                                                    }
                                                    {
                                                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                        int cpp_j = 0;
                                                        // read LIST body

                                                        for (int var_k_0d = 1;
                                                             var_k_0d <= var_NER_0d; var_k_0d++) {
                                                            bool aux_var_k_0d_read = true;
                                                            // read LIST body
                                                            // assign expression to variable ER
                                                            var_ER_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        }

                                                        for (int var_k_0d = 1;
                                                             var_k_0d <= var_NEC_0d; var_k_0d++) {
                                                            bool aux_var_k_0d_read = true;
                                                            // read LIST body
                                                            // assign expression to variable EC
                                                            var_EC_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        }
                                                        var_F_2d.init(1, (var_NER_0d-1), 1, (var_NEC_0d-1), false, false);

                                                        for (int var_k_0d = 1;
                                                             var_k_0d <= (var_NER_0d-1); var_k_0d++) {
                                                            bool aux_var_k_0d_read = true;
                                                            // read LIST body

                                                            for (int var_l_0d = 1;
                                                                 var_l_0d <= (var_NEC_0d-1); var_l_0d++) {
                                                                bool aux_var_l_0d_read = true;
                                                                // read LIST body
                                                                // assign expression to variable F
                                                                var_F_2d(var_k_0d, var_l_0d) = cpp_floatvec[cpp_j++];
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (! cpp_found_match) {
                                        if (! cpp_found_match) {
                                            // if statement evaluation with lookahead
                                            {
                                                std::streampos cpp_old_streampos = cont.tellg();
                                                {
                                                    // variable declarations
                                                    int& glob_var_LT_0d = var_LT_0d;
                                                    int var_LT_0d = glob_var_LT_0d;
                                                    bool& glob_aux_var_LT_0d_read = aux_var_LT_0d_read;
                                                    bool aux_var_LT_0d_read = glob_aux_var_LT_0d_read;
                                                    int& glob_var_LB_0d = var_LB_0d;
                                                    int var_LB_0d = glob_var_LB_0d;
                                                    bool& glob_aux_var_LB_0d_read = aux_var_LB_0d_read;
                                                    bool aux_var_LB_0d_read = glob_aux_var_LB_0d_read;
                                                    int& glob_cpp_int_val = cpp_int_val;
                                                    int cpp_int_val = glob_cpp_int_val;
                                                    bool& glob_aux_cpp_int_val_read = aux_cpp_int_val_read;
                                                    bool aux_cpp_int_val_read = glob_aux_cpp_int_val_read;
                                                    int& glob_var_NP_0d = var_NP_0d;
                                                    int var_NP_0d = glob_var_NP_0d;
                                                    bool& glob_aux_var_NP_0d_read = aux_var_NP_0d_read;
                                                    bool aux_var_NP_0d_read = glob_aux_var_NP_0d_read;
                                                    cpp_line = cpp_read_line(cont);
                                                    // read LIST record
                                                    // assign expression to variable LT
                                                    var_LT_0d = cpp_read_int_field(cpp_line, 2);
                                                    aux_var_LT_0d_read = true;
                                                    // assign expression to variable LB
                                                    var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                    aux_var_LB_0d_read = true;
                                                    // assign expression to variable cpp_int_val
                                                    cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                    aux_cpp_int_val_read = true;
                                                    // assign expression to variable NP
                                                    var_NP_0d = (cpp_int_val/2);
                                                    aux_var_NP_0d_read = true;
                                                    if ((! (aux_var_NP_0d_read == true))) {
                                                        // assign expression to variable NP
                                                        var_NP_0d = cpp_read_int_field(cpp_line, 5);
                                                        aux_var_NP_0d_read = true;
                                                    }
                                                    if (((((((((((((var_LB_0d)==(8)))))||((((var_LB_0d)==(9))))))))&&(((var_LT_0d)==(0))))))) {
                                                        cpp_found_match = true;
                                                    }
                                                    cont.seekg(cpp_old_streampos);
                                                }
                                                if (cpp_found_match) {
                                                    cpp_line = cpp_read_line(cont);
                                                    // read LIST record
                                                    // assign expression to variable LT
                                                    var_LT_0d = cpp_read_int_field(cpp_line, 2);
                                                    aux_var_LT_0d_read = true;
                                                    // assign expression to variable LB
                                                    var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                    aux_var_LB_0d_read = true;
                                                    // assign expression to variable cpp_int_val
                                                    cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                    aux_cpp_int_val_read = true;
                                                    // assign expression to variable NP
                                                    var_NP_0d = (cpp_int_val/2);
                                                    aux_var_NP_0d_read = true;
                                                    if ((! (aux_var_NP_0d_read == true))) {
                                                        // assign expression to variable NP
                                                        var_NP_0d = cpp_read_int_field(cpp_line, 5);
                                                        aux_var_NP_0d_read = true;
                                                    }
                                                    {
                                                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                        int cpp_j = 0;
                                                        // read LIST body

                                                        for (int var_k_0d = 1;
                                                             var_k_0d <= var_NP_0d; var_k_0d++) {
                                                            bool aux_var_k_0d_read = true;
                                                            // read LIST body
                                                            // assign expression to variable E
                                                            var_E_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                            // assign expression to variable F
                                                            var_F_1d.set(var_k_0d, cpp_floatvec[cpp_j++]);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                // store data in Python dictionary
                                if ((aux_var_LT_0d_read == true)) {
                                    cpp_current_dict["LT"] = var_LT_0d;
                                }
                                if ((aux_var_LB_0d_read == true)) {
                                    cpp_current_dict["LB"] = var_LB_0d;
                                }
                                if ((aux_var_NP_0d_read == true)) {
                                    cpp_current_dict["NP"] = var_NP_0d;
                                }
                                if ((var_Ek_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_Ek_1d;
                                        cpp_current_dict["Ek"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["Ek"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                if ((var_Fk_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_Fk_1d;
                                        cpp_current_dict["Fk"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["Fk"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                if ((var_El_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_El_1d;
                                        cpp_current_dict["El"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["El"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                if ((var_Fl_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_Fl_1d;
                                        cpp_current_dict["Fl"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["Fl"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                if ((aux_var_LS_0d_read == true)) {
                                    cpp_current_dict["LS"] = var_LS_0d;
                                }
                                if ((aux_var_NE_0d_read == true)) {
                                    cpp_current_dict["NE"] = var_NE_0d;
                                }
                                if ((var_E_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_E_1d;
                                        cpp_current_dict["E"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["E"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                if (var_F_2d.did_read()) {
                                        cpp_current_dict["F"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["F"];
                                        for (int cpp_i1 = var_F_2d.get_row_start_index(); cpp_i1 <= var_F_2d.get_row_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                                            py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                                            for (int cpp_i2 = var_F_2d.get_col_start_index(cpp_i1); cpp_i2 <= var_F_2d.get_col_last_index(cpp_i1); cpp_i2++) {
                                                cpp_curdict1[py::cast(cpp_i2)] = var_F_2d(cpp_i1, cpp_i2);
                                            }
                                        }
                                }
                                if ((aux_var_NER_0d_read == true)) {
                                    cpp_current_dict["NER"] = var_NER_0d;
                                }
                                if ((aux_var_NEC_0d_read == true)) {
                                    cpp_current_dict["NEC"] = var_NEC_0d;
                                }
                                if ((var_ER_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_ER_1d;
                                        cpp_current_dict["ER"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["ER"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                if ((var_EC_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_EC_1d;
                                        cpp_current_dict["EC"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["EC"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                if ((var_F_1d.get_last_index() != -1)) {
                                        auto& cpp_curvar0 = var_F_1d;
                                        cpp_current_dict["F"] = py::dict();
                                        py::dict cpp_curdict0 = cpp_current_dict["F"];
                                        for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                            cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                        }
                                }
                                cpp_current_dict = cpp_parent_dict;
                            }
                        }
                        // store data in Python dictionary
                        if ((aux_var_XMF1_0d_read == true)) {
                            cpp_current_dict["XMF1"] = var_XMF1_0d;
                        }
                        if ((aux_var_XLFS1_0d_read == true)) {
                            cpp_current_dict["XLFS1"] = var_XLFS1_0d;
                        }
                        if ((aux_var_MAT1_0d_read == true)) {
                            cpp_current_dict["MAT1"] = var_MAT1_0d;
                        }
                        if ((aux_var_MT1_0d_read == true)) {
                            cpp_current_dict["MT1"] = var_MT1_0d;
                        }
                        if ((aux_var_NC_0d_read == true)) {
                            cpp_current_dict["NC"] = var_NC_0d;
                        }
                        if ((aux_var_NI_0d_read == true)) {
                            cpp_current_dict["NI"] = var_NI_0d;
                        }
                        cpp_current_dict = cpp_parent_dict;
                    }
                }
            }
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_MTL_0d_read == true)) {
        cpp_current_dict["MTL"] = var_MTL_0d;
    }
    if ((aux_var_NL_0d_read == true)) {
        cpp_current_dict["NL"] = var_NL_0d;
    }
    return cpp_current_dict;
}

py::dict parse_mf34_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_LTT_0d;
    bool aux_var_LTT_0d_read = false;
    int var_NMT1_0d;
    bool aux_var_NMT1_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // assign expression to variable LTT
    var_LTT_0d = cpp_read_int_field(cpp_line, 3);
    aux_var_LTT_0d_read = true;
    // assign expression to variable NMT1
    var_NMT1_0d = cpp_read_int_field(cpp_line, 5);
    aux_var_NMT1_0d_read = true;

    for (int var_k_0d = 1;
         var_k_0d <= var_NMT1_0d; var_k_0d++) {
        bool aux_var_k_0d_read = true;
        // open section subsection

        {
            py::dict cpp_parent_dict = cpp_current_dict;
            if (! cpp_parent_dict.contains("subsection")) {
                cpp_parent_dict["subsection"] = py::dict();
            }
            py::dict cpp_current_dict = cpp_parent_dict["subsection"];

            if (! cpp_current_dict.contains(py::cast(var_k_0d))) {
                cpp_current_dict[py::cast(var_k_0d)] = py::dict();
            }
            cpp_current_dict = cpp_current_dict[py::cast(var_k_0d)];
            // variable declarations
            int var_MAT1_0d;
            bool aux_var_MAT1_0d_read = false;
            int var_MT1_0d;
            bool aux_var_MT1_0d_read = false;
            int var_NL_0d;
            bool aux_var_NL_0d_read = false;
            NestedVector<int> var_L_1d;
            NestedVector<int> var_L1_1d;
            int var_LCT_0d;
            bool aux_var_LCT_0d_read = false;
            NestedVector<int> var_NI_1d;
            NestedVector<NestedVector<int>> var_LS_2d;
            NestedVector<int>* ptr_LS_2d_idx0;
            NestedVector<NestedVector<int>> var_LB_2d;
            NestedVector<int>* ptr_LB_2d_idx0;
            NestedVector<NestedVector<int>> var_NT_2d;
            NestedVector<int>* ptr_NT_2d_idx0;
            NestedVector<NestedVector<int>> var_NE_2d;
            NestedVector<int>* ptr_NE_2d_idx0;
            NestedVector<NestedVector<NestedVector<double>>> var_Data_3d;
            NestedVector<double>* ptr_Data_3d_idx1;
            NestedVector<NestedVector<double>>* ptr_Data_3d_idx0;
            int var_NL1_0d;
            bool aux_var_NL1_0d_read = false;
            // evaluate if-elif-else clause
            {
                bool cpp_found_match = false;
                if (! cpp_found_match) {
                    // if statement evaluation with lookahead
                    {
                        std::streampos cpp_old_streampos = cont.tellg();
                        {
                            // variable declarations
                            int& glob_var_MAT1_0d = var_MAT1_0d;
                            int var_MAT1_0d = glob_var_MAT1_0d;
                            bool& glob_aux_var_MAT1_0d_read = aux_var_MAT1_0d_read;
                            bool aux_var_MAT1_0d_read = glob_aux_var_MAT1_0d_read;
                            int& glob_var_MT1_0d = var_MT1_0d;
                            int var_MT1_0d = glob_var_MT1_0d;
                            bool& glob_aux_var_MT1_0d_read = aux_var_MT1_0d_read;
                            bool aux_var_MT1_0d_read = glob_aux_var_MT1_0d_read;
                            int& glob_var_NL_0d = var_NL_0d;
                            int var_NL_0d = glob_var_NL_0d;
                            bool& glob_aux_var_NL_0d_read = aux_var_NL_0d_read;
                            bool aux_var_NL_0d_read = glob_aux_var_NL_0d_read;
                            cpp_line = cpp_read_line(cont);
                            // read CONT record
                            // assign expression to variable MAT1
                            var_MAT1_0d = cpp_read_int_field(cpp_line, 2);
                            aux_var_MAT1_0d_read = true;
                            // assign expression to variable MT1
                            var_MT1_0d = cpp_read_int_field(cpp_line, 3);
                            aux_var_MT1_0d_read = true;
                            // assign expression to variable NL
                            var_NL_0d = cpp_read_int_field(cpp_line, 4);
                            aux_var_NL_0d_read = true;
                            if ((! (aux_var_NL_0d_read == true))) {
                                // assign expression to variable NL
                                var_NL_0d = cpp_read_int_field(cpp_line, 5);
                                aux_var_NL_0d_read = true;
                            }
                            if ((((((((var_MT1_0d)==(0)))))||((((var_MT_0d)==(var_MT1_0d))))))) {
                                cpp_found_match = true;
                            }
                            cont.seekg(cpp_old_streampos);
                        }
                        if (cpp_found_match) {
                            cpp_line = cpp_read_line(cont);
                            // read CONT record
                            // assign expression to variable MAT1
                            var_MAT1_0d = cpp_read_int_field(cpp_line, 2);
                            aux_var_MAT1_0d_read = true;
                            // assign expression to variable MT1
                            var_MT1_0d = cpp_read_int_field(cpp_line, 3);
                            aux_var_MT1_0d_read = true;
                            // assign expression to variable NL
                            var_NL_0d = cpp_read_int_field(cpp_line, 4);
                            aux_var_NL_0d_read = true;
                            if ((! (aux_var_NL_0d_read == true))) {
                                // assign expression to variable NL
                                var_NL_0d = cpp_read_int_field(cpp_line, 5);
                                aux_var_NL_0d_read = true;
                            }

                            for (int var_n_0d = 1;
                                 var_n_0d <= ((var_NL_0d*(var_NL_0d+1))/2); var_n_0d++) {
                                bool aux_var_n_0d_read = true;
                                // evaluate if-elif-else clause
                                {
                                    bool cpp_found_match = false;
                                    if (! cpp_found_match) {
                                        if (((((((var_n_0d)==(1))))))) {
                                            // if statement evaluation
                                            cpp_found_match = true;
                                            cpp_line = cpp_read_line(cont);
                                            // read CONT record
                                            // assign expression to variable L
                                            var_L_1d.set(var_n_0d, cpp_read_int_field(cpp_line, 2));
                                            // assign expression to variable L1
                                            var_L1_1d.set(var_n_0d, cpp_read_int_field(cpp_line, 3));
                                            // assign expression to variable LCT
                                            var_LCT_0d = cpp_read_int_field(cpp_line, 4);
                                            aux_var_LCT_0d_read = true;
                                            // assign expression to variable NI
                                            var_NI_1d.set(var_n_0d, cpp_read_int_field(cpp_line, 5));
                                        }
                                    }
                                    if (! cpp_found_match) {
                                        cpp_line = cpp_read_line(cont);
                                        // read CONT record
                                        // assign expression to variable L
                                        var_L_1d.set(var_n_0d, cpp_read_int_field(cpp_line, 2));
                                        // assign expression to variable L1
                                        var_L1_1d.set(var_n_0d, cpp_read_int_field(cpp_line, 3));
                                        // assign expression to variable NI
                                        var_NI_1d.set(var_n_0d, cpp_read_int_field(cpp_line, 5));
                                    }
                                }
                                ptr_LS_2d_idx0 = var_LS_2d.prepare(var_n_0d);
                                ptr_LB_2d_idx0 = var_LB_2d.prepare(var_n_0d);
                                ptr_NE_2d_idx0 = var_NE_2d.prepare(var_n_0d);
                                ptr_Data_3d_idx0 = var_Data_3d.prepare(var_n_0d);

                                for (int var_m_0d = 1;
                                     var_m_0d <= var_NI_1d[var_n_0d]; var_m_0d++) {
                                    bool aux_var_m_0d_read = true;
                                    cpp_line = cpp_read_line(cont);
                                    // read LIST record
                                    // assign expression to variable LS
                                    ptr_LS_2d_idx0->set(var_m_0d, cpp_read_int_field(cpp_line, 2));
                                    // assign expression to variable LB
                                    ptr_LB_2d_idx0->set(var_m_0d, cpp_read_int_field(cpp_line, 3));
                                    // assign expression to variable NT
                                    ptr_NT_2d_idx0 = var_NT_2d.prepare(var_n_0d);
                                    ptr_NT_2d_idx0->set(var_m_0d, cpp_read_int_field(cpp_line, 4));
                                    // assign expression to variable NE
                                    ptr_NE_2d_idx0->set(var_m_0d, cpp_read_int_field(cpp_line, 5));
                                    {
                                        int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                        cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                        int cpp_j = 0;
                                        // read LIST body
                                        ptr_Data_3d_idx1 = ptr_Data_3d_idx0->prepare(var_m_0d);

                                        for (int var_q_0d = 1;
                                             var_q_0d <= var_NT_2d[var_n_0d][var_m_0d]; var_q_0d++) {
                                            bool aux_var_q_0d_read = true;
                                            // read LIST body
                                            // assign expression to variable Data
                                            ptr_Data_3d_idx1->set(var_q_0d, cpp_floatvec[cpp_j++]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (! cpp_found_match) {
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable MAT1
                    var_MAT1_0d = cpp_read_int_field(cpp_line, 2);
                    aux_var_MAT1_0d_read = true;
                    // assign expression to variable MT1
                    var_MT1_0d = cpp_read_int_field(cpp_line, 3);
                    aux_var_MT1_0d_read = true;
                    // assign expression to variable NL
                    var_NL_0d = cpp_read_int_field(cpp_line, 4);
                    aux_var_NL_0d_read = true;
                    // assign expression to variable NL1
                    var_NL1_0d = cpp_read_int_field(cpp_line, 5);
                    aux_var_NL1_0d_read = true;

                    for (int var_n_0d = 1;
                         var_n_0d <= (var_NL_0d*var_NL1_0d); var_n_0d++) {
                        bool aux_var_n_0d_read = true;
                        // evaluate if-elif-else clause
                        {
                            bool cpp_found_match = false;
                            if (! cpp_found_match) {
                                if (((((((var_n_0d)==(1))))))) {
                                    // if statement evaluation
                                    cpp_found_match = true;
                                    cpp_line = cpp_read_line(cont);
                                    // read CONT record
                                    // assign expression to variable L
                                    var_L_1d.set(var_n_0d, cpp_read_int_field(cpp_line, 2));
                                    // assign expression to variable L1
                                    var_L1_1d.set(var_n_0d, cpp_read_int_field(cpp_line, 3));
                                    // assign expression to variable LCT
                                    var_LCT_0d = cpp_read_int_field(cpp_line, 4);
                                    aux_var_LCT_0d_read = true;
                                    // assign expression to variable NI
                                    var_NI_1d.set(var_n_0d, cpp_read_int_field(cpp_line, 5));
                                }
                            }
                            if (! cpp_found_match) {
                                cpp_line = cpp_read_line(cont);
                                // read CONT record
                                // assign expression to variable L
                                var_L_1d.set(var_n_0d, cpp_read_int_field(cpp_line, 2));
                                // assign expression to variable L1
                                var_L1_1d.set(var_n_0d, cpp_read_int_field(cpp_line, 3));
                                // assign expression to variable NI
                                var_NI_1d.set(var_n_0d, cpp_read_int_field(cpp_line, 5));
                            }
                        }
                        ptr_LS_2d_idx0 = var_LS_2d.prepare(var_n_0d);
                        ptr_LB_2d_idx0 = var_LB_2d.prepare(var_n_0d);
                        ptr_NE_2d_idx0 = var_NE_2d.prepare(var_n_0d);
                        ptr_Data_3d_idx0 = var_Data_3d.prepare(var_n_0d);

                        for (int var_m_0d = 1;
                             var_m_0d <= var_NI_1d[var_n_0d]; var_m_0d++) {
                            bool aux_var_m_0d_read = true;
                            cpp_line = cpp_read_line(cont);
                            // read LIST record
                            // assign expression to variable LS
                            ptr_LS_2d_idx0->set(var_m_0d, cpp_read_int_field(cpp_line, 2));
                            // assign expression to variable LB
                            ptr_LB_2d_idx0->set(var_m_0d, cpp_read_int_field(cpp_line, 3));
                            // assign expression to variable NT
                            ptr_NT_2d_idx0 = var_NT_2d.prepare(var_n_0d);
                            ptr_NT_2d_idx0->set(var_m_0d, cpp_read_int_field(cpp_line, 4));
                            // assign expression to variable NE
                            ptr_NE_2d_idx0->set(var_m_0d, cpp_read_int_field(cpp_line, 5));
                            {
                                int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                int cpp_j = 0;
                                // read LIST body
                                ptr_Data_3d_idx1 = ptr_Data_3d_idx0->prepare(var_m_0d);

                                for (int var_q_0d = 1;
                                     var_q_0d <= var_NT_2d[var_n_0d][var_m_0d]; var_q_0d++) {
                                    bool aux_var_q_0d_read = true;
                                    // read LIST body
                                    // assign expression to variable Data
                                    ptr_Data_3d_idx1->set(var_q_0d, cpp_floatvec[cpp_j++]);
                                }
                            }
                        }
                    }
                }
            }
            // store data in Python dictionary
            if ((aux_var_MAT1_0d_read == true)) {
                cpp_current_dict["MAT1"] = var_MAT1_0d;
            }
            if ((aux_var_MT1_0d_read == true)) {
                cpp_current_dict["MT1"] = var_MT1_0d;
            }
            if ((aux_var_NL_0d_read == true)) {
                cpp_current_dict["NL"] = var_NL_0d;
            }
            if ((var_L_1d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_L_1d;
                    cpp_current_dict["L"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["L"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                    }
            }
            if ((var_L1_1d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_L1_1d;
                    cpp_current_dict["L1"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["L1"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                    }
            }
            if ((aux_var_LCT_0d_read == true)) {
                cpp_current_dict["LCT"] = var_LCT_0d;
            }
            if ((var_NI_1d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_NI_1d;
                    cpp_current_dict["NI"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["NI"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                    }
            }
            if ((var_LS_2d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_LS_2d;
                    cpp_current_dict["LS"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["LS"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
                        cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                        py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                        for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
                            cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
                        }
                    }
            }
            if ((var_LB_2d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_LB_2d;
                    cpp_current_dict["LB"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["LB"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
                        cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                        py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                        for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
                            cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
                        }
                    }
            }
            if ((var_NT_2d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_NT_2d;
                    cpp_current_dict["NT"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["NT"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
                        cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                        py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                        for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
                            cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
                        }
                    }
            }
            if ((var_NE_2d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_NE_2d;
                    cpp_current_dict["NE"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["NE"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
                        cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                        py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                        for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
                            cpp_curdict1[py::cast(cpp_i2)] = cpp_curvar1[cpp_i2];
                        }
                    }
            }
            if ((var_Data_3d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_Data_3d;
                    cpp_current_dict["Data"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["Data"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        auto& cpp_curvar1 = cpp_curvar0[cpp_i1];
                        cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                        py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                        for (int cpp_i2 = cpp_curvar1.get_start_index(); cpp_i2 <= cpp_curvar1.get_last_index(); cpp_i2++) {
                            auto& cpp_curvar2 = cpp_curvar1[cpp_i2];
                            cpp_curdict1[py::cast(cpp_i2)] = py::dict();
                            py::dict cpp_curdict2 = cpp_curdict1[py::cast(cpp_i2)];
                            for (int cpp_i3 = cpp_curvar2.get_start_index(); cpp_i3 <= cpp_curvar2.get_last_index(); cpp_i3++) {
                                cpp_curdict2[py::cast(cpp_i3)] = cpp_curvar2[cpp_i3];
                            }
                        }
                    }
            }
            if ((aux_var_NL1_0d_read == true)) {
                cpp_current_dict["NL1"] = var_NL1_0d;
            }
            cpp_current_dict = cpp_parent_dict;
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_LTT_0d_read == true)) {
        cpp_current_dict["LTT"] = var_LTT_0d;
    }
    if ((aux_var_NMT1_0d_read == true)) {
        cpp_current_dict["NMT1"] = var_NMT1_0d;
    }
    return cpp_current_dict;
}

py::dict parse_mf35_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_NK_0d;
    bool aux_var_NK_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // assign expression to variable NK
    var_NK_0d = cpp_read_int_field(cpp_line, 4);
    aux_var_NK_0d_read = true;

    for (int var_k_0d = 1;
         var_k_0d <= var_NK_0d; var_k_0d++) {
        bool aux_var_k_0d_read = true;
        // open section subsection

        {
            py::dict cpp_parent_dict = cpp_current_dict;
            if (! cpp_parent_dict.contains("subsection")) {
                cpp_parent_dict["subsection"] = py::dict();
            }
            py::dict cpp_current_dict = cpp_parent_dict["subsection"];

            if (! cpp_current_dict.contains(py::cast(var_k_0d))) {
                cpp_current_dict[py::cast(var_k_0d)] = py::dict();
            }
            cpp_current_dict = cpp_current_dict[py::cast(var_k_0d)];
            // variable declarations
            double var_E1_0d;
            bool aux_var_E1_0d_read = false;
            double var_E2_0d;
            bool aux_var_E2_0d_read = false;
            int var_LS_0d;
            bool aux_var_LS_0d_read = false;
            int var_LB_0d;
            bool aux_var_LB_0d_read = false;
            int var_NT_0d;
            bool aux_var_NT_0d_read = false;
            int var_NE_0d;
            bool aux_var_NE_0d_read = false;
            NestedVector<double> var_E_1d;
            Matrix2d<double> var_F_2d;
            // evaluate if-elif-else clause
            {
                bool cpp_found_match = false;
                if (! cpp_found_match) {
                    // if statement evaluation with lookahead
                    {
                        std::streampos cpp_old_streampos = cont.tellg();
                        {
                            // variable declarations
                            double& glob_var_E1_0d = var_E1_0d;
                            double var_E1_0d = glob_var_E1_0d;
                            bool& glob_aux_var_E1_0d_read = aux_var_E1_0d_read;
                            bool aux_var_E1_0d_read = glob_aux_var_E1_0d_read;
                            double& glob_var_E2_0d = var_E2_0d;
                            double var_E2_0d = glob_var_E2_0d;
                            bool& glob_aux_var_E2_0d_read = aux_var_E2_0d_read;
                            bool aux_var_E2_0d_read = glob_aux_var_E2_0d_read;
                            int& glob_var_LS_0d = var_LS_0d;
                            int var_LS_0d = glob_var_LS_0d;
                            bool& glob_aux_var_LS_0d_read = aux_var_LS_0d_read;
                            bool aux_var_LS_0d_read = glob_aux_var_LS_0d_read;
                            int& glob_var_LB_0d = var_LB_0d;
                            int var_LB_0d = glob_var_LB_0d;
                            bool& glob_aux_var_LB_0d_read = aux_var_LB_0d_read;
                            bool aux_var_LB_0d_read = glob_aux_var_LB_0d_read;
                            int& glob_var_NT_0d = var_NT_0d;
                            int var_NT_0d = glob_var_NT_0d;
                            bool& glob_aux_var_NT_0d_read = aux_var_NT_0d_read;
                            bool aux_var_NT_0d_read = glob_aux_var_NT_0d_read;
                            int& glob_var_NE_0d = var_NE_0d;
                            int var_NE_0d = glob_var_NE_0d;
                            bool& glob_aux_var_NE_0d_read = aux_var_NE_0d_read;
                            bool aux_var_NE_0d_read = glob_aux_var_NE_0d_read;
                            cpp_line = cpp_read_line(cont);
                            // read LIST record
                            // assign expression to variable E1
                            var_E1_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                            aux_var_E1_0d_read = true;
                            // assign expression to variable E2
                            var_E2_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                            aux_var_E2_0d_read = true;
                            // assign expression to variable LS
                            var_LS_0d = cpp_read_int_field(cpp_line, 2);
                            aux_var_LS_0d_read = true;
                            // assign expression to variable LB
                            var_LB_0d = cpp_read_int_field(cpp_line, 3);
                            aux_var_LB_0d_read = true;
                            // assign expression to variable NT
                            var_NT_0d = cpp_read_int_field(cpp_line, 4);
                            aux_var_NT_0d_read = true;
                            // assign expression to variable NE
                            var_NE_0d = cpp_read_int_field(cpp_line, 5);
                            aux_var_NE_0d_read = true;
                            if ((((((((var_LS_0d)==(1))))&&(((var_LB_0d)==(7))))))) {
                                cpp_found_match = true;
                            }
                            cont.seekg(cpp_old_streampos);
                        }
                        if (cpp_found_match) {
                            cpp_line = cpp_read_line(cont);
                            // read LIST record
                            // assign expression to variable E1
                            var_E1_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                            aux_var_E1_0d_read = true;
                            // assign expression to variable E2
                            var_E2_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                            aux_var_E2_0d_read = true;
                            // assign expression to variable LS
                            var_LS_0d = cpp_read_int_field(cpp_line, 2);
                            aux_var_LS_0d_read = true;
                            // assign expression to variable LB
                            var_LB_0d = cpp_read_int_field(cpp_line, 3);
                            aux_var_LB_0d_read = true;
                            // assign expression to variable NT
                            var_NT_0d = cpp_read_int_field(cpp_line, 4);
                            aux_var_NT_0d_read = true;
                            // assign expression to variable NE
                            var_NE_0d = cpp_read_int_field(cpp_line, 5);
                            aux_var_NE_0d_read = true;
                            {
                                int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                int cpp_j = 0;
                                // read LIST body

                                for (int var_i_0d = 1;
                                     var_i_0d <= var_NE_0d; var_i_0d++) {
                                    bool aux_var_i_0d_read = true;
                                    // read LIST body
                                    // assign expression to variable E
                                    var_E_1d.set(var_i_0d, cpp_floatvec[cpp_j++]);
                                }
                                var_F_2d.init(1, (var_NE_0d-1), 1, (var_NE_0d-1), true, false);

                                for (int var_i_0d = 1;
                                     var_i_0d <= (var_NE_0d-1); var_i_0d++) {
                                    bool aux_var_i_0d_read = true;
                                    // read LIST body

                                    for (int var_j_0d = var_i_0d;
                                         var_j_0d <= (var_NE_0d-1); var_j_0d++) {
                                        bool aux_var_j_0d_read = true;
                                        // read LIST body
                                        // assign expression to variable F
                                        var_F_2d(var_i_0d, var_j_0d) = cpp_floatvec[cpp_j++];
                                    }
                                }
                            }
                        }
                    }
                }
            }
            // store data in Python dictionary
            if ((aux_var_E1_0d_read == true)) {
                cpp_current_dict["E1"] = var_E1_0d;
            }
            if ((aux_var_E2_0d_read == true)) {
                cpp_current_dict["E2"] = var_E2_0d;
            }
            if ((aux_var_LS_0d_read == true)) {
                cpp_current_dict["LS"] = var_LS_0d;
            }
            if ((aux_var_LB_0d_read == true)) {
                cpp_current_dict["LB"] = var_LB_0d;
            }
            if ((aux_var_NT_0d_read == true)) {
                cpp_current_dict["NT"] = var_NT_0d;
            }
            if ((aux_var_NE_0d_read == true)) {
                cpp_current_dict["NE"] = var_NE_0d;
            }
            if ((var_E_1d.get_last_index() != -1)) {
                    auto& cpp_curvar0 = var_E_1d;
                    cpp_current_dict["E"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["E"];
                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                    }
            }
            if (var_F_2d.did_read()) {
                    cpp_current_dict["F"] = py::dict();
                    py::dict cpp_curdict0 = cpp_current_dict["F"];
                    for (int cpp_i1 = var_F_2d.get_row_start_index(); cpp_i1 <= var_F_2d.get_row_last_index(); cpp_i1++) {
                        cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                        py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                        for (int cpp_i2 = var_F_2d.get_col_start_index(cpp_i1); cpp_i2 <= var_F_2d.get_col_last_index(cpp_i1); cpp_i2++) {
                            cpp_curdict1[py::cast(cpp_i2)] = var_F_2d(cpp_i1, cpp_i2);
                        }
                    }
            }
            cpp_current_dict = cpp_parent_dict;
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_NK_0d_read == true)) {
        cpp_current_dict["NK"] = var_NK_0d;
    }
    return cpp_current_dict;
}

py::dict parse_mf40_istream(std::istream& cont) {
    std::vector<int> cpp_intvec;
    std::vector<double> cpp_floatvec;
    py::dict cpp_parent_dict;
    py::dict cpp_current_dict;
    py::dict cpp_workdict;
    int cpp_idxnum;
    std::string cpp_line;
    double cpp_float_val;
    // variable declarations
    int var_MAT_0d;
    bool aux_var_MAT_0d_read = false;
    int var_MF_0d;
    bool aux_var_MF_0d_read = false;
    int var_MT_0d;
    bool aux_var_MT_0d_read = false;
    double var_ZA_0d;
    bool aux_var_ZA_0d_read = false;
    double var_AWR_0d;
    bool aux_var_AWR_0d_read = false;
    int var_LIS_0d;
    bool aux_var_LIS_0d_read = false;
    int var_NS_0d;
    bool aux_var_NS_0d_read = false;
    std::streampos cpp_startpos = cont.tellg();
    cpp_line = cpp_read_line(cont);
    // assign expression to variable MAT
    var_MAT_0d = std::stoi(cpp_line.substr(66, 4));
    aux_var_MAT_0d_read = true;
    // assign expression to variable MF
    var_MF_0d = std::stoi(cpp_line.substr(70, 2));
    aux_var_MF_0d_read = true;
    // assign expression to variable MT
    var_MT_0d = std::stoi(cpp_line.substr(72, 3));
    aux_var_MT_0d_read = true;
    // store variable MAT in endf dictionary
    cpp_current_dict[py::cast("MAT")] = var_MAT_0d;
    // store variable MF in endf dictionary
    cpp_current_dict[py::cast("MF")] = var_MF_0d;
    // store variable MT in endf dictionary
    cpp_current_dict[py::cast("MT")] = var_MT_0d;
    cont.seekg(cpp_startpos);
    cpp_line = cpp_read_line(cont);
    // read CONT record
    // assign expression to variable ZA
    var_ZA_0d = cpp_read_float_field(cpp_line.c_str(), 0);
    aux_var_ZA_0d_read = true;
    // assign expression to variable AWR
    var_AWR_0d = cpp_read_float_field(cpp_line.c_str(), 1);
    aux_var_AWR_0d_read = true;
    // assign expression to variable LIS
    var_LIS_0d = cpp_read_int_field(cpp_line, 2);
    aux_var_LIS_0d_read = true;
    // assign expression to variable NS
    var_NS_0d = cpp_read_int_field(cpp_line, 4);
    aux_var_NS_0d_read = true;

    for (int var_k_0d = 1;
         var_k_0d <= var_NS_0d; var_k_0d++) {
        bool aux_var_k_0d_read = true;
        // open section subsection

        {
            py::dict cpp_parent_dict = cpp_current_dict;
            if (! cpp_parent_dict.contains("subsection")) {
                cpp_parent_dict["subsection"] = py::dict();
            }
            py::dict cpp_current_dict = cpp_parent_dict["subsection"];

            if (! cpp_current_dict.contains(py::cast(var_k_0d))) {
                cpp_current_dict[py::cast(var_k_0d)] = py::dict();
            }
            cpp_current_dict = cpp_current_dict[py::cast(var_k_0d)];
            // variable declarations
            double var_QM_0d;
            bool aux_var_QM_0d_read = false;
            double var_QI_0d;
            bool aux_var_QI_0d_read = false;
            int var_IZAP_0d;
            bool aux_var_IZAP_0d_read = false;
            int var_LFS_0d;
            bool aux_var_LFS_0d_read = false;
            int var_NL_0d;
            bool aux_var_NL_0d_read = false;
            cpp_line = cpp_read_line(cont);
            // read CONT record
            // assign expression to variable QM
            var_QM_0d = cpp_read_float_field(cpp_line.c_str(), 0);
            aux_var_QM_0d_read = true;
            // assign expression to variable QI
            var_QI_0d = cpp_read_float_field(cpp_line.c_str(), 1);
            aux_var_QI_0d_read = true;
            // assign expression to variable IZAP
            var_IZAP_0d = cpp_read_int_field(cpp_line, 2);
            aux_var_IZAP_0d_read = true;
            // assign expression to variable LFS
            var_LFS_0d = cpp_read_int_field(cpp_line, 3);
            aux_var_LFS_0d_read = true;
            // assign expression to variable NL
            var_NL_0d = cpp_read_int_field(cpp_line, 5);
            aux_var_NL_0d_read = true;

            for (int var_i_0d = 1;
                 var_i_0d <= var_NL_0d; var_i_0d++) {
                bool aux_var_i_0d_read = true;
                // open section subsubsec

                {
                    py::dict cpp_parent_dict = cpp_current_dict;
                    if (! cpp_parent_dict.contains("subsubsec")) {
                        cpp_parent_dict["subsubsec"] = py::dict();
                    }
                    py::dict cpp_current_dict = cpp_parent_dict["subsubsec"];

                    if (! cpp_current_dict.contains(py::cast(var_i_0d))) {
                        cpp_current_dict[py::cast(var_i_0d)] = py::dict();
                    }
                    cpp_current_dict = cpp_current_dict[py::cast(var_i_0d)];
                    // variable declarations
                    double var_XMF1_0d;
                    bool aux_var_XMF1_0d_read = false;
                    double var_XLFS1_0d;
                    bool aux_var_XLFS1_0d_read = false;
                    int var_MAT1_0d;
                    bool aux_var_MAT1_0d_read = false;
                    int var_MT1_0d;
                    bool aux_var_MT1_0d_read = false;
                    int var_NC_0d;
                    bool aux_var_NC_0d_read = false;
                    int var_NI_0d;
                    bool aux_var_NI_0d_read = false;
                    cpp_line = cpp_read_line(cont);
                    // read CONT record
                    // assign expression to variable XMF1
                    var_XMF1_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                    aux_var_XMF1_0d_read = true;
                    // assign expression to variable XLFS1
                    var_XLFS1_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                    aux_var_XLFS1_0d_read = true;
                    // assign expression to variable MAT1
                    var_MAT1_0d = cpp_read_int_field(cpp_line, 2);
                    aux_var_MAT1_0d_read = true;
                    // assign expression to variable MT1
                    var_MT1_0d = cpp_read_int_field(cpp_line, 3);
                    aux_var_MT1_0d_read = true;
                    // assign expression to variable NC
                    var_NC_0d = cpp_read_int_field(cpp_line, 4);
                    aux_var_NC_0d_read = true;
                    // assign expression to variable NI
                    var_NI_0d = cpp_read_int_field(cpp_line, 5);
                    aux_var_NI_0d_read = true;

                    for (int var_j_0d = 1;
                         var_j_0d <= var_NC_0d; var_j_0d++) {
                        bool aux_var_j_0d_read = true;
                        // open section nc_subsubsubsec

                        {
                            py::dict cpp_parent_dict = cpp_current_dict;
                            if (! cpp_parent_dict.contains("nc_subsubsubsec")) {
                                cpp_parent_dict["nc_subsubsubsec"] = py::dict();
                            }
                            py::dict cpp_current_dict = cpp_parent_dict["nc_subsubsubsec"];

                            if (! cpp_current_dict.contains(py::cast(var_j_0d))) {
                                cpp_current_dict[py::cast(var_j_0d)] = py::dict();
                            }
                            cpp_current_dict = cpp_current_dict[py::cast(var_j_0d)];
                            // variable declarations
                            int var_LTY_0d;
                            bool aux_var_LTY_0d_read = false;
                            double var_E1_0d;
                            bool aux_var_E1_0d_read = false;
                            double var_E2_0d;
                            bool aux_var_E2_0d_read = false;
                            int cpp_int_val;
                            bool aux_cpp_int_val_read = false;
                            int var_NCI_0d;
                            bool aux_var_NCI_0d_read = false;
                            NestedVector<double> var_C_1d;
                            NestedVector<double> var_XMT_1d;
                            int var_MATS_0d;
                            bool aux_var_MATS_0d_read = false;
                            int var_MTS_0d;
                            bool aux_var_MTS_0d_read = false;
                            int var_NEI_0d;
                            bool aux_var_NEI_0d_read = false;
                            double var_XMFS_0d;
                            bool aux_var_XMFS_0d_read = false;
                            double var_XLFSS_0d;
                            bool aux_var_XLFSS_0d_read = false;
                            NestedVector<double> var_E_1d;
                            NestedVector<double> var_WE_1d;
                            // evaluate if-elif-else clause
                            {
                                bool cpp_found_match = false;
                                if (! cpp_found_match) {
                                    // if statement evaluation with lookahead
                                    {
                                        std::streampos cpp_old_streampos = cont.tellg();
                                        {
                                            // variable declarations
                                            int& glob_var_LTY_0d = var_LTY_0d;
                                            int var_LTY_0d = glob_var_LTY_0d;
                                            bool& glob_aux_var_LTY_0d_read = aux_var_LTY_0d_read;
                                            bool aux_var_LTY_0d_read = glob_aux_var_LTY_0d_read;
                                            cpp_line = cpp_read_line(cont);
                                            // read CONT record
                                            // assign expression to variable LTY
                                            var_LTY_0d = cpp_read_int_field(cpp_line, 3);
                                            aux_var_LTY_0d_read = true;
                                            if (((((((var_LTY_0d)==(0))))))) {
                                                cpp_found_match = true;
                                            }
                                            cont.seekg(cpp_old_streampos);
                                        }
                                        if (cpp_found_match) {
                                            cpp_line = cpp_read_line(cont);
                                            // read CONT record
                                            // assign expression to variable LTY
                                            var_LTY_0d = cpp_read_int_field(cpp_line, 3);
                                            aux_var_LTY_0d_read = true;
                                            cpp_line = cpp_read_line(cont);
                                            // read LIST record
                                            // assign expression to variable E1
                                            var_E1_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                            aux_var_E1_0d_read = true;
                                            // assign expression to variable E2
                                            var_E2_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                            aux_var_E2_0d_read = true;
                                            // assign expression to variable cpp_int_val
                                            cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                            aux_cpp_int_val_read = true;
                                            // assign expression to variable NCI
                                            var_NCI_0d = (cpp_int_val/2);
                                            aux_var_NCI_0d_read = true;
                                            if ((! (aux_var_NCI_0d_read == true))) {
                                                // assign expression to variable NCI
                                                var_NCI_0d = cpp_read_int_field(cpp_line, 5);
                                                aux_var_NCI_0d_read = true;
                                            }
                                            {
                                                int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                int cpp_j = 0;
                                                // read LIST body

                                                for (int var_i_0d = 1;
                                                     var_i_0d <= var_NCI_0d; var_i_0d++) {
                                                    bool aux_var_i_0d_read = true;
                                                    // read LIST body
                                                    // assign expression to variable C
                                                    var_C_1d.set(var_i_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable XMT
                                                    var_XMT_1d.set(var_i_0d, cpp_floatvec[cpp_j++]);
                                                }
                                            }
                                        }
                                    }
                                }
                                if (! cpp_found_match) {
                                    if (! cpp_found_match) {
                                        // if statement evaluation with lookahead
                                        {
                                            std::streampos cpp_old_streampos = cont.tellg();
                                            {
                                                // variable declarations
                                                int& glob_var_LTY_0d = var_LTY_0d;
                                                int var_LTY_0d = glob_var_LTY_0d;
                                                bool& glob_aux_var_LTY_0d_read = aux_var_LTY_0d_read;
                                                bool aux_var_LTY_0d_read = glob_aux_var_LTY_0d_read;
                                                cpp_line = cpp_read_line(cont);
                                                // read CONT record
                                                // assign expression to variable LTY
                                                var_LTY_0d = cpp_read_int_field(cpp_line, 3);
                                                aux_var_LTY_0d_read = true;
                                                if (((((((((var_LTY_0d)==(1)))))||((((var_LTY_0d)==(2)))))||((((var_LTY_0d)==(3))))))) {
                                                    cpp_found_match = true;
                                                }
                                                cont.seekg(cpp_old_streampos);
                                            }
                                            if (cpp_found_match) {
                                                cpp_line = cpp_read_line(cont);
                                                // read CONT record
                                                // assign expression to variable LTY
                                                var_LTY_0d = cpp_read_int_field(cpp_line, 3);
                                                aux_var_LTY_0d_read = true;
                                                cpp_line = cpp_read_line(cont);
                                                // read LIST record
                                                // assign expression to variable E1
                                                var_E1_0d = cpp_read_float_field(cpp_line.c_str(), 0);
                                                aux_var_E1_0d_read = true;
                                                // assign expression to variable E2
                                                var_E2_0d = cpp_read_float_field(cpp_line.c_str(), 1);
                                                aux_var_E2_0d_read = true;
                                                // assign expression to variable MATS
                                                var_MATS_0d = cpp_read_int_field(cpp_line, 2);
                                                aux_var_MATS_0d_read = true;
                                                // assign expression to variable MTS
                                                var_MTS_0d = cpp_read_int_field(cpp_line, 3);
                                                aux_var_MTS_0d_read = true;
                                                // assign expression to variable cpp_int_val
                                                cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                aux_cpp_int_val_read = true;
                                                // assign expression to variable NEI
                                                var_NEI_0d = ((cpp_int_val+(-2))/2);
                                                aux_var_NEI_0d_read = true;
                                                if ((! (aux_var_NEI_0d_read == true))) {
                                                    // assign expression to variable NEI
                                                    var_NEI_0d = cpp_read_int_field(cpp_line, 5);
                                                    aux_var_NEI_0d_read = true;
                                                }
                                                {
                                                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                    int cpp_j = 0;
                                                    // read LIST body
                                                    // assign expression to variable XMFS
                                                    var_XMFS_0d = cpp_floatvec[cpp_j++];
                                                    aux_var_XMFS_0d_read = true;
                                                    // assign expression to variable XLFSS
                                                    var_XLFSS_0d = cpp_floatvec[cpp_j++];
                                                    aux_var_XLFSS_0d_read = true;

                                                    for (int var_i_0d = 1;
                                                         var_i_0d <= var_NEI_0d; var_i_0d++) {
                                                        bool aux_var_i_0d_read = true;
                                                        // read LIST body
                                                        // assign expression to variable E
                                                        var_E_1d.set(var_i_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable WE
                                                        var_WE_1d.set(var_i_0d, cpp_floatvec[cpp_j++]);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            // store data in Python dictionary
                            if ((aux_var_LTY_0d_read == true)) {
                                cpp_current_dict["LTY"] = var_LTY_0d;
                            }
                            if ((aux_var_E1_0d_read == true)) {
                                cpp_current_dict["E1"] = var_E1_0d;
                            }
                            if ((aux_var_E2_0d_read == true)) {
                                cpp_current_dict["E2"] = var_E2_0d;
                            }
                            if ((aux_var_NCI_0d_read == true)) {
                                cpp_current_dict["NCI"] = var_NCI_0d;
                            }
                            if ((var_C_1d.get_last_index() != -1)) {
                                    auto& cpp_curvar0 = var_C_1d;
                                    cpp_current_dict["C"] = py::dict();
                                    py::dict cpp_curdict0 = cpp_current_dict["C"];
                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                    }
                            }
                            if ((var_XMT_1d.get_last_index() != -1)) {
                                    auto& cpp_curvar0 = var_XMT_1d;
                                    cpp_current_dict["XMT"] = py::dict();
                                    py::dict cpp_curdict0 = cpp_current_dict["XMT"];
                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                    }
                            }
                            if ((aux_var_MATS_0d_read == true)) {
                                cpp_current_dict["MATS"] = var_MATS_0d;
                            }
                            if ((aux_var_MTS_0d_read == true)) {
                                cpp_current_dict["MTS"] = var_MTS_0d;
                            }
                            if ((aux_var_NEI_0d_read == true)) {
                                cpp_current_dict["NEI"] = var_NEI_0d;
                            }
                            if ((aux_var_XMFS_0d_read == true)) {
                                cpp_current_dict["XMFS"] = var_XMFS_0d;
                            }
                            if ((aux_var_XLFSS_0d_read == true)) {
                                cpp_current_dict["XLFSS"] = var_XLFSS_0d;
                            }
                            if ((var_E_1d.get_last_index() != -1)) {
                                    auto& cpp_curvar0 = var_E_1d;
                                    cpp_current_dict["E"] = py::dict();
                                    py::dict cpp_curdict0 = cpp_current_dict["E"];
                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                    }
                            }
                            if ((var_WE_1d.get_last_index() != -1)) {
                                    auto& cpp_curvar0 = var_WE_1d;
                                    cpp_current_dict["WE"] = py::dict();
                                    py::dict cpp_curdict0 = cpp_current_dict["WE"];
                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                    }
                            }
                            cpp_current_dict = cpp_parent_dict;
                        }
                    }

                    for (int var_j_0d = 1;
                         var_j_0d <= var_NI_0d; var_j_0d++) {
                        bool aux_var_j_0d_read = true;
                        // open section ni_subsubsubsec

                        {
                            py::dict cpp_parent_dict = cpp_current_dict;
                            if (! cpp_parent_dict.contains("ni_subsubsubsec")) {
                                cpp_parent_dict["ni_subsubsubsec"] = py::dict();
                            }
                            py::dict cpp_current_dict = cpp_parent_dict["ni_subsubsubsec"];

                            if (! cpp_current_dict.contains(py::cast(var_j_0d))) {
                                cpp_current_dict[py::cast(var_j_0d)] = py::dict();
                            }
                            cpp_current_dict = cpp_current_dict[py::cast(var_j_0d)];
                            // variable declarations
                            int var_LT_0d;
                            bool aux_var_LT_0d_read = false;
                            int var_LB_0d;
                            bool aux_var_LB_0d_read = false;
                            int cpp_int_val;
                            bool aux_cpp_int_val_read = false;
                            int var_NP_0d;
                            bool aux_var_NP_0d_read = false;
                            NestedVector<double> var_Ek_1d;
                            NestedVector<double> var_Fk_1d;
                            NestedVector<double> var_El_1d;
                            NestedVector<double> var_Fl_1d;
                            int var_LS_0d;
                            bool aux_var_LS_0d_read = false;
                            int var_NT_0d;
                            bool aux_var_NT_0d_read = false;
                            int var_NE_0d;
                            bool aux_var_NE_0d_read = false;
                            NestedVector<double> var_E_1d;
                            Matrix2d<double> var_F_2d;
                            int var_NER_0d;
                            bool aux_var_NER_0d_read = false;
                            NestedVector<double> var_ER_1d;
                            NestedVector<double> var_EC_1d;
                            NestedVector<double> var_F_1d;
                            // evaluate if-elif-else clause
                            {
                                bool cpp_found_match = false;
                                if (! cpp_found_match) {
                                    // if statement evaluation with lookahead
                                    {
                                        std::streampos cpp_old_streampos = cont.tellg();
                                        {
                                            // variable declarations
                                            int& glob_var_LT_0d = var_LT_0d;
                                            int var_LT_0d = glob_var_LT_0d;
                                            bool& glob_aux_var_LT_0d_read = aux_var_LT_0d_read;
                                            bool aux_var_LT_0d_read = glob_aux_var_LT_0d_read;
                                            int& glob_var_LB_0d = var_LB_0d;
                                            int var_LB_0d = glob_var_LB_0d;
                                            bool& glob_aux_var_LB_0d_read = aux_var_LB_0d_read;
                                            bool aux_var_LB_0d_read = glob_aux_var_LB_0d_read;
                                            int& glob_cpp_int_val = cpp_int_val;
                                            int cpp_int_val = glob_cpp_int_val;
                                            bool& glob_aux_cpp_int_val_read = aux_cpp_int_val_read;
                                            bool aux_cpp_int_val_read = glob_aux_cpp_int_val_read;
                                            int& glob_var_NP_0d = var_NP_0d;
                                            int var_NP_0d = glob_var_NP_0d;
                                            bool& glob_aux_var_NP_0d_read = aux_var_NP_0d_read;
                                            bool aux_var_NP_0d_read = glob_aux_var_NP_0d_read;
                                            cpp_line = cpp_read_line(cont);
                                            // read LIST record
                                            // assign expression to variable LT
                                            var_LT_0d = cpp_read_int_field(cpp_line, 2);
                                            aux_var_LT_0d_read = true;
                                            // assign expression to variable LB
                                            var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                            aux_var_LB_0d_read = true;
                                            // assign expression to variable cpp_int_val
                                            cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                            aux_cpp_int_val_read = true;
                                            // assign expression to variable NP
                                            var_NP_0d = (cpp_int_val/2);
                                            aux_var_NP_0d_read = true;
                                            if ((! (aux_var_NP_0d_read == true))) {
                                                // assign expression to variable NP
                                                var_NP_0d = cpp_read_int_field(cpp_line, 5);
                                                aux_var_NP_0d_read = true;
                                            }
                                            if ((((((((var_LB_0d)>=(0))))&&(((var_LB_0d)<=(4))))))) {
                                                cpp_found_match = true;
                                            }
                                            cont.seekg(cpp_old_streampos);
                                        }
                                        if (cpp_found_match) {
                                            cpp_line = cpp_read_line(cont);
                                            // read LIST record
                                            // assign expression to variable LT
                                            var_LT_0d = cpp_read_int_field(cpp_line, 2);
                                            aux_var_LT_0d_read = true;
                                            // assign expression to variable LB
                                            var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                            aux_var_LB_0d_read = true;
                                            // assign expression to variable cpp_int_val
                                            cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                            aux_cpp_int_val_read = true;
                                            // assign expression to variable NP
                                            var_NP_0d = (cpp_int_val/2);
                                            aux_var_NP_0d_read = true;
                                            if ((! (aux_var_NP_0d_read == true))) {
                                                // assign expression to variable NP
                                                var_NP_0d = cpp_read_int_field(cpp_line, 5);
                                                aux_var_NP_0d_read = true;
                                            }
                                            {
                                                int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                int cpp_j = 0;
                                                // read LIST body

                                                for (int var_q_0d = 1;
                                                     var_q_0d <= (var_NP_0d-var_LT_0d); var_q_0d++) {
                                                    bool aux_var_q_0d_read = true;
                                                    // read LIST body
                                                    // assign expression to variable Ek
                                                    var_Ek_1d.set(var_q_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable Fk
                                                    var_Fk_1d.set(var_q_0d, cpp_floatvec[cpp_j++]);
                                                }

                                                for (int var_q_0d = 1;
                                                     var_q_0d <= var_LT_0d; var_q_0d++) {
                                                    bool aux_var_q_0d_read = true;
                                                    // read LIST body
                                                    // assign expression to variable El
                                                    var_El_1d.set(var_q_0d, cpp_floatvec[cpp_j++]);
                                                    // assign expression to variable Fl
                                                    var_Fl_1d.set(var_q_0d, cpp_floatvec[cpp_j++]);
                                                }
                                            }
                                        }
                                    }
                                }
                                if (! cpp_found_match) {
                                    if (! cpp_found_match) {
                                        // if statement evaluation with lookahead
                                        {
                                            std::streampos cpp_old_streampos = cont.tellg();
                                            {
                                                // variable declarations
                                                int& glob_var_LS_0d = var_LS_0d;
                                                int var_LS_0d = glob_var_LS_0d;
                                                bool& glob_aux_var_LS_0d_read = aux_var_LS_0d_read;
                                                bool aux_var_LS_0d_read = glob_aux_var_LS_0d_read;
                                                int& glob_var_LB_0d = var_LB_0d;
                                                int var_LB_0d = glob_var_LB_0d;
                                                bool& glob_aux_var_LB_0d_read = aux_var_LB_0d_read;
                                                bool aux_var_LB_0d_read = glob_aux_var_LB_0d_read;
                                                int& glob_var_NT_0d = var_NT_0d;
                                                int var_NT_0d = glob_var_NT_0d;
                                                bool& glob_aux_var_NT_0d_read = aux_var_NT_0d_read;
                                                bool aux_var_NT_0d_read = glob_aux_var_NT_0d_read;
                                                int& glob_var_NE_0d = var_NE_0d;
                                                int var_NE_0d = glob_var_NE_0d;
                                                bool& glob_aux_var_NE_0d_read = aux_var_NE_0d_read;
                                                bool aux_var_NE_0d_read = glob_aux_var_NE_0d_read;
                                                cpp_line = cpp_read_line(cont);
                                                // read LIST record
                                                // assign expression to variable LS
                                                var_LS_0d = cpp_read_int_field(cpp_line, 2);
                                                aux_var_LS_0d_read = true;
                                                // assign expression to variable LB
                                                var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                aux_var_LB_0d_read = true;
                                                // assign expression to variable NT
                                                var_NT_0d = cpp_read_int_field(cpp_line, 4);
                                                aux_var_NT_0d_read = true;
                                                // assign expression to variable NE
                                                var_NE_0d = cpp_read_int_field(cpp_line, 5);
                                                aux_var_NE_0d_read = true;
                                                if ((((((((var_LB_0d)==(5))))&&(((var_LS_0d)==(0))))))) {
                                                    cpp_found_match = true;
                                                }
                                                cont.seekg(cpp_old_streampos);
                                            }
                                            if (cpp_found_match) {
                                                cpp_line = cpp_read_line(cont);
                                                // read LIST record
                                                // assign expression to variable LS
                                                var_LS_0d = cpp_read_int_field(cpp_line, 2);
                                                aux_var_LS_0d_read = true;
                                                // assign expression to variable LB
                                                var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                aux_var_LB_0d_read = true;
                                                // assign expression to variable NT
                                                var_NT_0d = cpp_read_int_field(cpp_line, 4);
                                                aux_var_NT_0d_read = true;
                                                // assign expression to variable NE
                                                var_NE_0d = cpp_read_int_field(cpp_line, 5);
                                                aux_var_NE_0d_read = true;
                                                {
                                                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                    int cpp_j = 0;
                                                    // read LIST body

                                                    for (int var_q_0d = 1;
                                                         var_q_0d <= var_NE_0d; var_q_0d++) {
                                                        bool aux_var_q_0d_read = true;
                                                        // read LIST body
                                                        // assign expression to variable E
                                                        var_E_1d.set(var_q_0d, cpp_floatvec[cpp_j++]);
                                                    }
                                                    var_F_2d.init(1, (var_NE_0d-1), 1, (var_NE_0d-1), false, false);

                                                    for (int var_q_0d = 1;
                                                         var_q_0d <= (var_NE_0d-1); var_q_0d++) {
                                                        bool aux_var_q_0d_read = true;
                                                        // read LIST body

                                                        for (int var_qp_0d = 1;
                                                             var_qp_0d <= (var_NE_0d-1); var_qp_0d++) {
                                                            bool aux_var_qp_0d_read = true;
                                                            // read LIST body
                                                            // assign expression to variable F
                                                            var_F_2d(var_q_0d, var_qp_0d) = cpp_floatvec[cpp_j++];
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (! cpp_found_match) {
                                    if (! cpp_found_match) {
                                        // if statement evaluation with lookahead
                                        {
                                            std::streampos cpp_old_streampos = cont.tellg();
                                            {
                                                // variable declarations
                                                int& glob_var_LS_0d = var_LS_0d;
                                                int var_LS_0d = glob_var_LS_0d;
                                                bool& glob_aux_var_LS_0d_read = aux_var_LS_0d_read;
                                                bool aux_var_LS_0d_read = glob_aux_var_LS_0d_read;
                                                int& glob_var_LB_0d = var_LB_0d;
                                                int var_LB_0d = glob_var_LB_0d;
                                                bool& glob_aux_var_LB_0d_read = aux_var_LB_0d_read;
                                                bool aux_var_LB_0d_read = glob_aux_var_LB_0d_read;
                                                int& glob_var_NT_0d = var_NT_0d;
                                                int var_NT_0d = glob_var_NT_0d;
                                                bool& glob_aux_var_NT_0d_read = aux_var_NT_0d_read;
                                                bool aux_var_NT_0d_read = glob_aux_var_NT_0d_read;
                                                int& glob_var_NE_0d = var_NE_0d;
                                                int var_NE_0d = glob_var_NE_0d;
                                                bool& glob_aux_var_NE_0d_read = aux_var_NE_0d_read;
                                                bool aux_var_NE_0d_read = glob_aux_var_NE_0d_read;
                                                cpp_line = cpp_read_line(cont);
                                                // read LIST record
                                                // assign expression to variable LS
                                                var_LS_0d = cpp_read_int_field(cpp_line, 2);
                                                aux_var_LS_0d_read = true;
                                                // assign expression to variable LB
                                                var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                aux_var_LB_0d_read = true;
                                                // assign expression to variable NT
                                                var_NT_0d = cpp_read_int_field(cpp_line, 4);
                                                aux_var_NT_0d_read = true;
                                                // assign expression to variable NE
                                                var_NE_0d = cpp_read_int_field(cpp_line, 5);
                                                aux_var_NE_0d_read = true;
                                                if ((((((((var_LB_0d)==(5))))&&(((var_LS_0d)==(1))))))) {
                                                    cpp_found_match = true;
                                                }
                                                cont.seekg(cpp_old_streampos);
                                            }
                                            if (cpp_found_match) {
                                                cpp_line = cpp_read_line(cont);
                                                // read LIST record
                                                // assign expression to variable LS
                                                var_LS_0d = cpp_read_int_field(cpp_line, 2);
                                                aux_var_LS_0d_read = true;
                                                // assign expression to variable LB
                                                var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                aux_var_LB_0d_read = true;
                                                // assign expression to variable NT
                                                var_NT_0d = cpp_read_int_field(cpp_line, 4);
                                                aux_var_NT_0d_read = true;
                                                // assign expression to variable NE
                                                var_NE_0d = cpp_read_int_field(cpp_line, 5);
                                                aux_var_NE_0d_read = true;
                                                {
                                                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                    int cpp_j = 0;
                                                    // read LIST body

                                                    for (int var_q_0d = 1;
                                                         var_q_0d <= var_NE_0d; var_q_0d++) {
                                                        bool aux_var_q_0d_read = true;
                                                        // read LIST body
                                                        // assign expression to variable E
                                                        var_E_1d.set(var_q_0d, cpp_floatvec[cpp_j++]);
                                                    }
                                                    var_F_2d.init(1, (var_NE_0d-1), 1, (var_NE_0d-1), true, false);

                                                    for (int var_q_0d = 1;
                                                         var_q_0d <= (var_NE_0d-1); var_q_0d++) {
                                                        bool aux_var_q_0d_read = true;
                                                        // read LIST body

                                                        for (int var_qp_0d = var_q_0d;
                                                             var_qp_0d <= (var_NE_0d-1); var_qp_0d++) {
                                                            bool aux_var_qp_0d_read = true;
                                                            // read LIST body
                                                            // assign expression to variable F
                                                            var_F_2d(var_q_0d, var_qp_0d) = cpp_floatvec[cpp_j++];
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (! cpp_found_match) {
                                    if (! cpp_found_match) {
                                        // if statement evaluation with lookahead
                                        {
                                            std::streampos cpp_old_streampos = cont.tellg();
                                            {
                                                // variable declarations
                                                int& glob_var_LB_0d = var_LB_0d;
                                                int var_LB_0d = glob_var_LB_0d;
                                                bool& glob_aux_var_LB_0d_read = aux_var_LB_0d_read;
                                                bool aux_var_LB_0d_read = glob_aux_var_LB_0d_read;
                                                int& glob_var_NT_0d = var_NT_0d;
                                                int var_NT_0d = glob_var_NT_0d;
                                                bool& glob_aux_var_NT_0d_read = aux_var_NT_0d_read;
                                                bool aux_var_NT_0d_read = glob_aux_var_NT_0d_read;
                                                int& glob_var_NER_0d = var_NER_0d;
                                                int var_NER_0d = glob_var_NER_0d;
                                                bool& glob_aux_var_NER_0d_read = aux_var_NER_0d_read;
                                                bool aux_var_NER_0d_read = glob_aux_var_NER_0d_read;
                                                cpp_line = cpp_read_line(cont);
                                                // read LIST record
                                                // assign expression to variable LB
                                                var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                aux_var_LB_0d_read = true;
                                                // assign expression to variable NT
                                                var_NT_0d = cpp_read_int_field(cpp_line, 4);
                                                aux_var_NT_0d_read = true;
                                                // assign expression to variable NER
                                                var_NER_0d = cpp_read_int_field(cpp_line, 5);
                                                aux_var_NER_0d_read = true;
                                                if (((((((var_LB_0d)==(6))))))) {
                                                    cpp_found_match = true;
                                                }
                                                cont.seekg(cpp_old_streampos);
                                            }
                                            if (cpp_found_match) {
                                                cpp_line = cpp_read_line(cont);
                                                // read LIST record
                                                // assign expression to variable LB
                                                var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                aux_var_LB_0d_read = true;
                                                // assign expression to variable NT
                                                var_NT_0d = cpp_read_int_field(cpp_line, 4);
                                                aux_var_NT_0d_read = true;
                                                // assign expression to variable NER
                                                var_NER_0d = cpp_read_int_field(cpp_line, 5);
                                                aux_var_NER_0d_read = true;
                                                {
                                                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                    int cpp_j = 0;
                                                    // read LIST body

                                                    for (int var_q_0d = 1;
                                                         var_q_0d <= var_NER_0d; var_q_0d++) {
                                                        bool aux_var_q_0d_read = true;
                                                        // read LIST body
                                                        // assign expression to variable ER
                                                        var_ER_1d.set(var_q_0d, cpp_floatvec[cpp_j++]);
                                                    }

                                                    for (int var_q_0d = 1;
                                                         var_q_0d <= ((var_NT_0d-1)/var_NER_0d); var_q_0d++) {
                                                        bool aux_var_q_0d_read = true;
                                                        // read LIST body
                                                        // assign expression to variable EC
                                                        var_EC_1d.set(var_q_0d, cpp_floatvec[cpp_j++]);
                                                    }
                                                    var_F_2d.init(1, (var_NER_0d-1), 1, (((var_NT_0d-1)/var_NER_0d)-1), false, false);

                                                    for (int var_q_0d = 1;
                                                         var_q_0d <= (var_NER_0d-1); var_q_0d++) {
                                                        bool aux_var_q_0d_read = true;
                                                        // read LIST body

                                                        for (int var_l_0d = 1;
                                                             var_l_0d <= (((var_NT_0d-1)/var_NER_0d)-1); var_l_0d++) {
                                                            bool aux_var_l_0d_read = true;
                                                            // read LIST body
                                                            // assign expression to variable F
                                                            var_F_2d(var_q_0d, var_l_0d) = cpp_floatvec[cpp_j++];
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (! cpp_found_match) {
                                    if (! cpp_found_match) {
                                        // if statement evaluation with lookahead
                                        {
                                            std::streampos cpp_old_streampos = cont.tellg();
                                            {
                                                // variable declarations
                                                int& glob_var_LT_0d = var_LT_0d;
                                                int var_LT_0d = glob_var_LT_0d;
                                                bool& glob_aux_var_LT_0d_read = aux_var_LT_0d_read;
                                                bool aux_var_LT_0d_read = glob_aux_var_LT_0d_read;
                                                int& glob_var_LB_0d = var_LB_0d;
                                                int var_LB_0d = glob_var_LB_0d;
                                                bool& glob_aux_var_LB_0d_read = aux_var_LB_0d_read;
                                                bool aux_var_LB_0d_read = glob_aux_var_LB_0d_read;
                                                int& glob_cpp_int_val = cpp_int_val;
                                                int cpp_int_val = glob_cpp_int_val;
                                                bool& glob_aux_cpp_int_val_read = aux_cpp_int_val_read;
                                                bool aux_cpp_int_val_read = glob_aux_cpp_int_val_read;
                                                int& glob_var_NP_0d = var_NP_0d;
                                                int var_NP_0d = glob_var_NP_0d;
                                                bool& glob_aux_var_NP_0d_read = aux_var_NP_0d_read;
                                                bool aux_var_NP_0d_read = glob_aux_var_NP_0d_read;
                                                cpp_line = cpp_read_line(cont);
                                                // read LIST record
                                                // assign expression to variable LT
                                                var_LT_0d = cpp_read_int_field(cpp_line, 2);
                                                aux_var_LT_0d_read = true;
                                                // assign expression to variable LB
                                                var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                aux_var_LB_0d_read = true;
                                                // assign expression to variable cpp_int_val
                                                cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                aux_cpp_int_val_read = true;
                                                // assign expression to variable NP
                                                var_NP_0d = (cpp_int_val/2);
                                                aux_var_NP_0d_read = true;
                                                if ((! (aux_var_NP_0d_read == true))) {
                                                    // assign expression to variable NP
                                                    var_NP_0d = cpp_read_int_field(cpp_line, 5);
                                                    aux_var_NP_0d_read = true;
                                                }
                                                if (((((((((((((var_LB_0d)==(8)))))||((((var_LB_0d)==(9))))))))&&(((var_LT_0d)==(0))))))) {
                                                    cpp_found_match = true;
                                                }
                                                cont.seekg(cpp_old_streampos);
                                            }
                                            if (cpp_found_match) {
                                                cpp_line = cpp_read_line(cont);
                                                // read LIST record
                                                // assign expression to variable LT
                                                var_LT_0d = cpp_read_int_field(cpp_line, 2);
                                                aux_var_LT_0d_read = true;
                                                // assign expression to variable LB
                                                var_LB_0d = cpp_read_int_field(cpp_line, 3);
                                                aux_var_LB_0d_read = true;
                                                // assign expression to variable cpp_int_val
                                                cpp_int_val = cpp_read_int_field(cpp_line, 4);
                                                aux_cpp_int_val_read = true;
                                                // assign expression to variable NP
                                                var_NP_0d = (cpp_int_val/2);
                                                aux_var_NP_0d_read = true;
                                                if ((! (aux_var_NP_0d_read == true))) {
                                                    // assign expression to variable NP
                                                    var_NP_0d = cpp_read_int_field(cpp_line, 5);
                                                    aux_var_NP_0d_read = true;
                                                }
                                                {
                                                    int cpp_npl = cpp_read_int_field(cpp_line, 4);
                                                    cpp_floatvec = cpp_read_float_vec(cont, cpp_npl);
                                                    int cpp_j = 0;
                                                    // read LIST body

                                                    for (int var_q_0d = 1;
                                                         var_q_0d <= var_NP_0d; var_q_0d++) {
                                                        bool aux_var_q_0d_read = true;
                                                        // read LIST body
                                                        // assign expression to variable E
                                                        var_E_1d.set(var_q_0d, cpp_floatvec[cpp_j++]);
                                                        // assign expression to variable F
                                                        var_F_1d.set(var_q_0d, cpp_floatvec[cpp_j++]);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            // store data in Python dictionary
                            if ((aux_var_LT_0d_read == true)) {
                                cpp_current_dict["LT"] = var_LT_0d;
                            }
                            if ((aux_var_LB_0d_read == true)) {
                                cpp_current_dict["LB"] = var_LB_0d;
                            }
                            if ((aux_var_NP_0d_read == true)) {
                                cpp_current_dict["NP"] = var_NP_0d;
                            }
                            if ((var_Ek_1d.get_last_index() != -1)) {
                                    auto& cpp_curvar0 = var_Ek_1d;
                                    cpp_current_dict["Ek"] = py::dict();
                                    py::dict cpp_curdict0 = cpp_current_dict["Ek"];
                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                    }
                            }
                            if ((var_Fk_1d.get_last_index() != -1)) {
                                    auto& cpp_curvar0 = var_Fk_1d;
                                    cpp_current_dict["Fk"] = py::dict();
                                    py::dict cpp_curdict0 = cpp_current_dict["Fk"];
                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                    }
                            }
                            if ((var_El_1d.get_last_index() != -1)) {
                                    auto& cpp_curvar0 = var_El_1d;
                                    cpp_current_dict["El"] = py::dict();
                                    py::dict cpp_curdict0 = cpp_current_dict["El"];
                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                    }
                            }
                            if ((var_Fl_1d.get_last_index() != -1)) {
                                    auto& cpp_curvar0 = var_Fl_1d;
                                    cpp_current_dict["Fl"] = py::dict();
                                    py::dict cpp_curdict0 = cpp_current_dict["Fl"];
                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                    }
                            }
                            if ((aux_var_LS_0d_read == true)) {
                                cpp_current_dict["LS"] = var_LS_0d;
                            }
                            if ((aux_var_NT_0d_read == true)) {
                                cpp_current_dict["NT"] = var_NT_0d;
                            }
                            if ((aux_var_NE_0d_read == true)) {
                                cpp_current_dict["NE"] = var_NE_0d;
                            }
                            if ((var_E_1d.get_last_index() != -1)) {
                                    auto& cpp_curvar0 = var_E_1d;
                                    cpp_current_dict["E"] = py::dict();
                                    py::dict cpp_curdict0 = cpp_current_dict["E"];
                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                    }
                            }
                            if (var_F_2d.did_read()) {
                                    cpp_current_dict["F"] = py::dict();
                                    py::dict cpp_curdict0 = cpp_current_dict["F"];
                                    for (int cpp_i1 = var_F_2d.get_row_start_index(); cpp_i1 <= var_F_2d.get_row_last_index(); cpp_i1++) {
                                        cpp_curdict0[py::cast(cpp_i1)] = py::dict();
                                        py::dict cpp_curdict1 = cpp_curdict0[py::cast(cpp_i1)];
                                        for (int cpp_i2 = var_F_2d.get_col_start_index(cpp_i1); cpp_i2 <= var_F_2d.get_col_last_index(cpp_i1); cpp_i2++) {
                                            cpp_curdict1[py::cast(cpp_i2)] = var_F_2d(cpp_i1, cpp_i2);
                                        }
                                    }
                            }
                            if ((aux_var_NER_0d_read == true)) {
                                cpp_current_dict["NER"] = var_NER_0d;
                            }
                            if ((var_ER_1d.get_last_index() != -1)) {
                                    auto& cpp_curvar0 = var_ER_1d;
                                    cpp_current_dict["ER"] = py::dict();
                                    py::dict cpp_curdict0 = cpp_current_dict["ER"];
                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                    }
                            }
                            if ((var_EC_1d.get_last_index() != -1)) {
                                    auto& cpp_curvar0 = var_EC_1d;
                                    cpp_current_dict["EC"] = py::dict();
                                    py::dict cpp_curdict0 = cpp_current_dict["EC"];
                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                    }
                            }
                            if ((var_F_1d.get_last_index() != -1)) {
                                    auto& cpp_curvar0 = var_F_1d;
                                    cpp_current_dict["F"] = py::dict();
                                    py::dict cpp_curdict0 = cpp_current_dict["F"];
                                    for (int cpp_i1 = cpp_curvar0.get_start_index(); cpp_i1 <= cpp_curvar0.get_last_index(); cpp_i1++) {
                                        cpp_curdict0[py::cast(cpp_i1)] = cpp_curvar0[cpp_i1];
                                    }
                            }
                            cpp_current_dict = cpp_parent_dict;
                        }
                    }
                    // store data in Python dictionary
                    if ((aux_var_XMF1_0d_read == true)) {
                        cpp_current_dict["XMF1"] = var_XMF1_0d;
                    }
                    if ((aux_var_XLFS1_0d_read == true)) {
                        cpp_current_dict["XLFS1"] = var_XLFS1_0d;
                    }
                    if ((aux_var_MAT1_0d_read == true)) {
                        cpp_current_dict["MAT1"] = var_MAT1_0d;
                    }
                    if ((aux_var_MT1_0d_read == true)) {
                        cpp_current_dict["MT1"] = var_MT1_0d;
                    }
                    if ((aux_var_NC_0d_read == true)) {
                        cpp_current_dict["NC"] = var_NC_0d;
                    }
                    if ((aux_var_NI_0d_read == true)) {
                        cpp_current_dict["NI"] = var_NI_0d;
                    }
                    cpp_current_dict = cpp_parent_dict;
                }
            }
            // store data in Python dictionary
            if ((aux_var_QM_0d_read == true)) {
                cpp_current_dict["QM"] = var_QM_0d;
            }
            if ((aux_var_QI_0d_read == true)) {
                cpp_current_dict["QI"] = var_QI_0d;
            }
            if ((aux_var_IZAP_0d_read == true)) {
                cpp_current_dict["IZAP"] = var_IZAP_0d;
            }
            if ((aux_var_LFS_0d_read == true)) {
                cpp_current_dict["LFS"] = var_LFS_0d;
            }
            if ((aux_var_NL_0d_read == true)) {
                cpp_current_dict["NL"] = var_NL_0d;
            }
            cpp_current_dict = cpp_parent_dict;
        }
    }
    cpp_read_send(cont);
    // store data in Python dictionary
    if ((aux_var_MAT_0d_read == true)) {
        cpp_current_dict["MAT"] = var_MAT_0d;
    }
    if ((aux_var_MF_0d_read == true)) {
        cpp_current_dict["MF"] = var_MF_0d;
    }
    if ((aux_var_MT_0d_read == true)) {
        cpp_current_dict["MT"] = var_MT_0d;
    }
    if ((aux_var_ZA_0d_read == true)) {
        cpp_current_dict["ZA"] = var_ZA_0d;
    }
    if ((aux_var_AWR_0d_read == true)) {
        cpp_current_dict["AWR"] = var_AWR_0d;
    }
    if ((aux_var_LIS_0d_read == true)) {
        cpp_current_dict["LIS"] = var_LIS_0d;
    }
    if ((aux_var_NS_0d_read == true)) {
        cpp_current_dict["NS"] = var_NS_0d;
    }
    return cpp_current_dict;
}

py::dict parse_endf_istream(std::istream& cont, py::object exclude, py::object include) {
    bool is_firstline = true;
    std::streampos curpos;
    py::dict mfmt_dict;
    py::dict curdict;
    int mf;
    int mt;
    std::string cpp_line;
    std::vector<std::string> verbatim_section;
    curpos = cont.tellg();
    while (std::getline(cont, cpp_line)) {
        mf = std::stoi(cpp_line.substr(70, 2));
        mt = std::stoi(cpp_line.substr(72, 3));
        if ((mf == 0 && mt == 0 && is_firstline)) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf0mt0_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 1 && mt == 460) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf1mt460_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 1 && mt == 458) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf1mt458_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 1 && mt == 456) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf1mt456_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 1 && mt == 455) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf1mt455_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 1 && mt == 452) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf1mt452_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 1 && mt == 451) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf1mt451_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 2 && mt == 151) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf2mt151_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 3) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf3_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 4) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf4_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 5) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf5_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 6) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf6_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 7 && mt == 4) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf7mt4_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 7 && mt == 2) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf7mt2_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 8 && mt == 459) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf8mt459_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 8 && mt == 457) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf8mt457_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 8 && mt == 454) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf8mt454_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 8) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf8_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 9) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf9_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 10) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf10_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 12) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf12_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 13) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf13_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 14) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf14_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 15) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf15_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 23) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf23_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 26) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf26_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 27) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf27_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 28) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf28_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 31) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf31_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 32) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf32_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 33) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf33_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 34) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf34_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 35) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf35_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if (mf == 40) {
            cont.seekg(curpos);
            if (should_parse_section(mf, mt, exclude, include)) {
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = parse_mf40_istream(cont);
                }

            } else {
                verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
                {
                    py::dict curdict = mfmt_dict;
                    if (! curdict.contains(py::cast(mf))) {
                        curdict[py::cast(mf)] = py::dict();
                    }
                    curdict = curdict[py::cast(mf)];
                    curdict[py::cast(mt)] = verbatim_section;
                }
            }

        } else if ((mf != 0 && mt != 0)) {
            verbatim_section = read_section_verbatim(mf, mt, cont, is_firstline);
            {
                py::dict curdict = mfmt_dict;
                if (! curdict.contains(py::cast(mf))) {
                    curdict[py::cast(mf)] = py::dict();
                }
                curdict = curdict[py::cast(mf)];
                curdict[py::cast(mt)] = verbatim_section;
            }
        }
        curpos = cont.tellg();
        is_firstline = false;
    }
    return mfmt_dict;
}

py::dict parse_mf0mt0(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf0mt0_istream(iss);
}

py::dict parse_mf1mt451(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf1mt451_istream(iss);
}

py::dict parse_mf1mt452(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf1mt452_istream(iss);
}

py::dict parse_mf1mt455(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf1mt455_istream(iss);
}

py::dict parse_mf1mt456(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf1mt456_istream(iss);
}

py::dict parse_mf1mt458(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf1mt458_istream(iss);
}

py::dict parse_mf1mt460(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf1mt460_istream(iss);
}

py::dict parse_mf2mt151(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf2mt151_istream(iss);
}

py::dict parse_mf3(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf3_istream(iss);
}

py::dict parse_mf4(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf4_istream(iss);
}

py::dict parse_mf5(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf5_istream(iss);
}

py::dict parse_mf6(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf6_istream(iss);
}

py::dict parse_mf7mt2(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf7mt2_istream(iss);
}

py::dict parse_mf7mt4(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf7mt4_istream(iss);
}

py::dict parse_mf8(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf8_istream(iss);
}

py::dict parse_mf8mt454(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf8mt454_istream(iss);
}

py::dict parse_mf8mt457(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf8mt457_istream(iss);
}

py::dict parse_mf8mt459(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf8mt459_istream(iss);
}

py::dict parse_mf9(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf9_istream(iss);
}

py::dict parse_mf10(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf10_istream(iss);
}

py::dict parse_mf12(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf12_istream(iss);
}

py::dict parse_mf13(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf13_istream(iss);
}

py::dict parse_mf14(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf14_istream(iss);
}

py::dict parse_mf15(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf15_istream(iss);
}

py::dict parse_mf23(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf23_istream(iss);
}

py::dict parse_mf26(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf26_istream(iss);
}

py::dict parse_mf27(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf27_istream(iss);
}

py::dict parse_mf28(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf28_istream(iss);
}

py::dict parse_mf31(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf31_istream(iss);
}

py::dict parse_mf32(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf32_istream(iss);
}

py::dict parse_mf33(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf33_istream(iss);
}

py::dict parse_mf34(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf34_istream(iss);
}

py::dict parse_mf35(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf35_istream(iss);
}

py::dict parse_mf40(std::string& strcont) {
    std::istringstream iss(strcont);
    return parse_mf40_istream(iss);
}

py::dict parse_endf(std::string& strcont, py::object exclude, py::object include) {
    std::istringstream iss(strcont);
    return parse_endf_istream(iss, exclude, include);
}

py::dict parse_mf0mt0_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf0mt0_istream(inpfile);
}

py::dict parse_mf1mt451_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf1mt451_istream(inpfile);
}

py::dict parse_mf1mt452_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf1mt452_istream(inpfile);
}

py::dict parse_mf1mt455_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf1mt455_istream(inpfile);
}

py::dict parse_mf1mt456_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf1mt456_istream(inpfile);
}

py::dict parse_mf1mt458_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf1mt458_istream(inpfile);
}

py::dict parse_mf1mt460_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf1mt460_istream(inpfile);
}

py::dict parse_mf2mt151_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf2mt151_istream(inpfile);
}

py::dict parse_mf3_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf3_istream(inpfile);
}

py::dict parse_mf4_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf4_istream(inpfile);
}

py::dict parse_mf5_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf5_istream(inpfile);
}

py::dict parse_mf6_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf6_istream(inpfile);
}

py::dict parse_mf7mt2_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf7mt2_istream(inpfile);
}

py::dict parse_mf7mt4_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf7mt4_istream(inpfile);
}

py::dict parse_mf8_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf8_istream(inpfile);
}

py::dict parse_mf8mt454_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf8mt454_istream(inpfile);
}

py::dict parse_mf8mt457_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf8mt457_istream(inpfile);
}

py::dict parse_mf8mt459_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf8mt459_istream(inpfile);
}

py::dict parse_mf9_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf9_istream(inpfile);
}

py::dict parse_mf10_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf10_istream(inpfile);
}

py::dict parse_mf12_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf12_istream(inpfile);
}

py::dict parse_mf13_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf13_istream(inpfile);
}

py::dict parse_mf14_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf14_istream(inpfile);
}

py::dict parse_mf15_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf15_istream(inpfile);
}

py::dict parse_mf23_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf23_istream(inpfile);
}

py::dict parse_mf26_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf26_istream(inpfile);
}

py::dict parse_mf27_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf27_istream(inpfile);
}

py::dict parse_mf28_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf28_istream(inpfile);
}

py::dict parse_mf31_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf31_istream(inpfile);
}

py::dict parse_mf32_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf32_istream(inpfile);
}

py::dict parse_mf33_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf33_istream(inpfile);
}

py::dict parse_mf34_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf34_istream(inpfile);
}

py::dict parse_mf35_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf35_istream(inpfile);
}

py::dict parse_mf40_file(std::string& filename) {
    std::ifstream inpfile(filename);
    return parse_mf40_istream(inpfile);
}

py::dict parse_endf_file(std::string& filename, py::object exclude, py::object include) {
    std::ifstream inpfile(filename);
    return parse_endf_istream(inpfile, exclude, include);
}



PYBIND11_MODULE(jendl, m) {
    m.def("parse_mf0mt0", &parse_mf0mt0, "parsing function");
    m.def("parse_mf1mt451", &parse_mf1mt451, "parsing function");
    m.def("parse_mf1mt452", &parse_mf1mt452, "parsing function");
    m.def("parse_mf1mt455", &parse_mf1mt455, "parsing function");
    m.def("parse_mf1mt456", &parse_mf1mt456, "parsing function");
    m.def("parse_mf1mt458", &parse_mf1mt458, "parsing function");
    m.def("parse_mf1mt460", &parse_mf1mt460, "parsing function");
    m.def("parse_mf2mt151", &parse_mf2mt151, "parsing function");
    m.def("parse_mf3", &parse_mf3, "parsing function");
    m.def("parse_mf4", &parse_mf4, "parsing function");
    m.def("parse_mf5", &parse_mf5, "parsing function");
    m.def("parse_mf6", &parse_mf6, "parsing function");
    m.def("parse_mf7mt2", &parse_mf7mt2, "parsing function");
    m.def("parse_mf7mt4", &parse_mf7mt4, "parsing function");
    m.def("parse_mf8", &parse_mf8, "parsing function");
    m.def("parse_mf8mt454", &parse_mf8mt454, "parsing function");
    m.def("parse_mf8mt457", &parse_mf8mt457, "parsing function");
    m.def("parse_mf8mt459", &parse_mf8mt459, "parsing function");
    m.def("parse_mf9", &parse_mf9, "parsing function");
    m.def("parse_mf10", &parse_mf10, "parsing function");
    m.def("parse_mf12", &parse_mf12, "parsing function");
    m.def("parse_mf13", &parse_mf13, "parsing function");
    m.def("parse_mf14", &parse_mf14, "parsing function");
    m.def("parse_mf15", &parse_mf15, "parsing function");
    m.def("parse_mf23", &parse_mf23, "parsing function");
    m.def("parse_mf26", &parse_mf26, "parsing function");
    m.def("parse_mf27", &parse_mf27, "parsing function");
    m.def("parse_mf28", &parse_mf28, "parsing function");
    m.def("parse_mf31", &parse_mf31, "parsing function");
    m.def("parse_mf32", &parse_mf32, "parsing function");
    m.def("parse_mf33", &parse_mf33, "parsing function");
    m.def("parse_mf34", &parse_mf34, "parsing function");
    m.def("parse_mf35", &parse_mf35, "parsing function");
    m.def("parse_mf40", &parse_mf40, "parsing function");
    m.def("parse_endf", &parse_endf, "parsing function", py::arg("cont"), py::arg("exclude") = py::none(), py::arg("include") = py::none());
    m.def("parse_endf_file", &parse_endf_file, "parsing function", py::arg("filename"), py::arg("exclude") = py::none(), py::arg("include") = py::none());
}
